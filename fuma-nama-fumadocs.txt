Directory structure:
└── fuma-nama-fumadocs/
    ├── README.md
    ├── LICENSE
    ├── package.json
    ├── pnpm-lock.yaml
    ├── pnpm-workspace.yaml
    ├── prettier.config.mjs
    ├── renovate.json
    ├── tsconfig.json
    ├── turbo.json
    ├── vitest.config.ts
    ├── .prettierignore
    ├── apps/
    │   └── docs/
    │       ├── eslint.config.mjs
    │       ├── mdx-components.tsx
    │       ├── next.config.ts
    │       ├── package.json
    │       ├── postcss.config.js
    │       ├── scalar.yaml
    │       ├── source.config.ts
    │       ├── tsconfig.json
    │       ├── app/
    │       │   ├── global.css
    │       │   ├── layout.client.tsx
    │       │   ├── layout.config.tsx
    │       │   ├── layout.tsx
    │       │   ├── provider.tsx
    │       │   ├── sitemap.ts
    │       │   ├── (home)/
    │       │   │   ├── icons.tsx
    │       │   │   ├── layout.tsx
    │       │   │   ├── marquee.tsx
    │       │   │   ├── page.client.tsx
    │       │   │   ├── page.tsx
    │       │   │   ├── uwu.tsx
    │       │   │   ├── blog/
    │       │   │   │   ├── page.tsx
    │       │   │   │   ├── [slug]/
    │       │   │   │   │   ├── page.client.tsx
    │       │   │   │   │   └── page.tsx
    │       │   │   │   ├── rss.xml/
    │       │   │   │   │   └── route.ts
    │       │   │   │   └── test/
    │       │   │   │       └── page.mdx
    │       │   │   ├── docs/
    │       │   │   │   └── page.tsx
    │       │   │   ├── showcase/
    │       │   │   │   └── page.tsx
    │       │   │   └── sponsors/
    │       │   │       ├── data.tsx
    │       │   │       └── page.tsx
    │       │   ├── api/
    │       │   │   ├── chat/
    │       │   │   │   └── route.ts
    │       │   │   └── proxy/
    │       │   │       └── route.ts
    │       │   ├── docs/
    │       │   │   ├── layout.tsx
    │       │   │   └── [...slug]/
    │       │   │       ├── page.client.tsx
    │       │   │       └── page.tsx
    │       │   ├── llms-full.txt/
    │       │   │   └── route.ts
    │       │   ├── llms.mdx/
    │       │   │   └── [...slug]/
    │       │   │       └── route.ts
    │       │   ├── llms.txt/
    │       │   │   └── route.ts
    │       │   ├── og/
    │       │   │   └── [...slug]/
    │       │   │       ├── JetBrainsMono-Bold.ttf
    │       │   │       ├── JetBrainsMono-Regular.ttf
    │       │   │       ├── og.tsx
    │       │   │       └── route.tsx
    │       │   └── static.json/
    │       │       └── route.ts
    │       ├── components/
    │       │   ├── code-block.tsx
    │       │   ├── contributor-count.tsx
    │       │   ├── rate.tsx
    │       │   ├── registry.mts
    │       │   ├── search.tsx
    │       │   ├── ui-overview.tsx
    │       │   ├── ai/
    │       │   │   ├── index.tsx
    │       │   │   ├── markdown-processor.ts
    │       │   │   └── search.tsx
    │       │   ├── mdx/
    │       │   │   └── mermaid.tsx
    │       │   ├── preview/
    │       │   │   ├── dynamic-codeblock.tsx
    │       │   │   ├── index.tsx
    │       │   │   ├── lazy.ts
    │       │   │   └── wrapper.tsx
    │       │   └── ui/
    │       │       ├── button.tsx
    │       │       └── hover-card.tsx
    │       ├── content/
    │       │   ├── blog/
    │       │   │   ├── 2024-5-15.mdx
    │       │   │   ├── 2024-5-16.mdx
    │       │   │   ├── customise-ui.mdx
    │       │   │   ├── make-a-blog.mdx
    │       │   │   ├── mdx-v10-summary.mdx
    │       │   │   ├── mdx-v10.mdx
    │       │   │   ├── new-conventions.mdx
    │       │   │   ├── openapi-v9.mdx
    │       │   │   ├── v12-after.mdx
    │       │   │   ├── v12.mdx
    │       │   │   ├── v13.mdx
    │       │   │   ├── v14.mdx
    │       │   │   ├── v15-2.mdx
    │       │   │   ├── v15.mdx
    │       │   │   └── why-docs.mdx
    │       │   ├── docs/
    │       │   │   ├── meta.json
    │       │   │   ├── cli/
    │       │   │   │   ├── index.mdx
    │       │   │   │   └── meta.json
    │       │   │   ├── headless/
    │       │   │   │   ├── custom-source.mdx
    │       │   │   │   ├── index.mdx
    │       │   │   │   ├── internationalization.mdx
    │       │   │   │   ├── meta.json
    │       │   │   │   ├── page-conventions.mdx
    │       │   │   │   ├── page-tree.mdx
    │       │   │   │   ├── props.ts
    │       │   │   │   ├── source-api.mdx
    │       │   │   │   ├── components/
    │       │   │   │   │   ├── breadcrumb.mdx
    │       │   │   │   │   ├── index.mdx
    │       │   │   │   │   ├── link.mdx
    │       │   │   │   │   ├── meta.json
    │       │   │   │   │   ├── sidebar.mdx
    │       │   │   │   │   ├── toc-example.tsx
    │       │   │   │   │   └── toc.mdx
    │       │   │   │   ├── content-collections/
    │       │   │   │   │   └── index.mdx
    │       │   │   │   ├── mdx/
    │       │   │   │   │   ├── headings.mdx
    │       │   │   │   │   ├── index.mdx
    │       │   │   │   │   ├── install.mdx
    │       │   │   │   │   ├── meta.json
    │       │   │   │   │   ├── rehype-code.mdx
    │       │   │   │   │   ├── remark-admonition.mdx
    │       │   │   │   │   ├── remark-image.mdx
    │       │   │   │   │   ├── remark-ts2js.mdx
    │       │   │   │   │   └── structure.mdx
    │       │   │   │   ├── search/
    │       │   │   │   │   ├── algolia.mdx
    │       │   │   │   │   ├── index.mdx
    │       │   │   │   │   ├── orama-cloud.mdx
    │       │   │   │   │   ├── orama.mdx
    │       │   │   │   │   ├── sync-algolia.mjs
    │       │   │   │   │   └── trieve.mdx
    │       │   │   │   └── utils/
    │       │   │   │       ├── find-neighbour.mdx
    │       │   │   │       ├── get-toc.mdx
    │       │   │   │       ├── git-last-edit.mdx
    │       │   │   │       ├── index.mdx
    │       │   │   │       └── meta.json
    │       │   │   ├── mdx/
    │       │   │   │   ├── async.mdx
    │       │   │   │   ├── collections.mdx
    │       │   │   │   ├── global.mdx
    │       │   │   │   ├── include.mdx
    │       │   │   │   ├── index.mdx
    │       │   │   │   ├── last-modified.mdx
    │       │   │   │   ├── mdx.mdx
    │       │   │   │   ├── meta.json
    │       │   │   │   ├── page.mdx
    │       │   │   │   ├── performance.mdx
    │       │   │   │   ├── plugin.mdx
    │       │   │   │   └── props.ts
    │       │   │   ├── openapi/
    │       │   │   │   ├── index.mdx
    │       │   │   │   └── meta.json
    │       │   │   └── ui/
    │       │   │       ├── comparisons.mdx
    │       │   │       ├── customisation.mdx
    │       │   │       ├── index.mdx
    │       │   │       ├── internationalization.mdx
    │       │   │       ├── manual-installation.mdx
    │       │   │       ├── meta.json
    │       │   │       ├── page-conventions.mdx
    │       │   │       ├── props.ts
    │       │   │       ├── static-export.mdx
    │       │   │       ├── theme.client.tsx
    │       │   │       ├── theme.mdx
    │       │   │       ├── versioning.mdx
    │       │   │       ├── what-is-fumadocs.mdx
    │       │   │       ├── (integrations)/
    │       │   │       │   ├── feedback.mdx
    │       │   │       │   ├── get-llm-text.ts
    │       │   │       │   ├── llms.mdx
    │       │   │       │   ├── llms.mdx.ts
    │       │   │       │   ├── llms.txt.ts
    │       │   │       │   ├── open-graph.mdx
    │       │   │       │   ├── python.mdx
    │       │   │       │   ├── rss.mdx
    │       │   │       │   ├── typescript.mdx
    │       │   │       │   └── openapi/
    │       │   │       │       ├── configurations.mdx
    │       │   │       │       ├── index.mdx
    │       │   │       │       ├── media-adapters.mdx
    │       │   │       │       ├── meta.json
    │       │   │       │       └── proxy.mdx
    │       │   │       ├── components/
    │       │   │       │   ├── accordion.mdx
    │       │   │       │   ├── auto-type-table.mdx
    │       │   │       │   ├── banner.mdx
    │       │   │       │   ├── dynamic-codeblock.mdx
    │       │   │       │   ├── files.mdx
    │       │   │       │   ├── github-info.mdx
    │       │   │       │   ├── image-zoom.mdx
    │       │   │       │   ├── index.mdx
    │       │   │       │   ├── inline-toc.mdx
    │       │   │       │   ├── server-codeblock.tsx
    │       │   │       │   ├── steps.mdx
    │       │   │       │   ├── tabs.client.tsx
    │       │   │       │   ├── tabs.mdx
    │       │   │       │   └── type-table.mdx
    │       │   │       ├── layouts/
    │       │   │       │   ├── docs.mdx
    │       │   │       │   ├── home-layout.mdx
    │       │   │       │   ├── notebook.mdx
    │       │   │       │   ├── page.mdx
    │       │   │       │   └── root-provider.mdx
    │       │   │       ├── markdown/
    │       │   │       │   ├── index.mdx
    │       │   │       │   ├── math.mdx
    │       │   │       │   ├── mermaid.mdx
    │       │   │       │   └── twoslash.mdx
    │       │   │       ├── mdx/
    │       │   │       │   ├── codeblock.mdx
    │       │   │       │   └── index.mdx
    │       │   │       ├── navigation/
    │       │   │       │   ├── index.mdx
    │       │   │       │   ├── links.mdx
    │       │   │       │   └── sidebar.mdx
    │       │   │       └── search/
    │       │   │           ├── algolia.mdx
    │       │   │           ├── algolia.tsx
    │       │   │           ├── fetch.tsx
    │       │   │           ├── index.mdx
    │       │   │           ├── meta.json
    │       │   │           ├── orama-cloud.mdx
    │       │   │           ├── orama-cloud.tsx
    │       │   │           ├── orama.mdx
    │       │   │           ├── static.tsx
    │       │   │           ├── .shared.mdx
    │       │   │           └── .tag-filter.mdx
    │       │   └── shared/
    │       │       └── page-conventions.i18n.mdx
    │       ├── lib/
    │       │   ├── cn.ts
    │       │   ├── get-contributors.ts
    │       │   ├── get-llm-text.ts
    │       │   ├── get-sponsors.ts
    │       │   ├── github.ts
    │       │   ├── metadata.ts
    │       │   ├── source.ts
    │       │   └── chat/
    │       │       └── inkeep-qa-schema.ts
    │       ├── public/
    │       │   ├── content-collections.webp
    │       │   └── robots.txt
    │       └── scripts/
    │           ├── build-registry.mts
    │           ├── lint.mts
    │           ├── post-build.mts
    │           ├── pre-build.mts
    │           └── update-orama-index.mts
    ├── examples/
    │   ├── README.md
    │   ├── content-collections/
    │   │   ├── content-collections.ts
    │   │   ├── mdx-components.tsx
    │   │   ├── next.config.mjs
    │   │   ├── package.json
    │   │   ├── tsconfig.json
    │   │   ├── app/
    │   │   │   ├── layout.config.tsx
    │   │   │   ├── layout.tsx
    │   │   │   ├── (home)/
    │   │   │   │   ├── layout.tsx
    │   │   │   │   └── page.tsx
    │   │   │   ├── api/
    │   │   │   │   └── search/
    │   │   │   │       └── route.ts
    │   │   │   └── docs/
    │   │   │       ├── layout.tsx
    │   │   │       └── [[...slug]]/
    │   │   │           └── page.tsx
    │   │   ├── content/
    │   │   │   └── docs/
    │   │   │       ├── index.mdx
    │   │   │       └── test.mdx
    │   │   └── lib/
    │   │       └── source.ts
    │   ├── i18n/
    │   │   ├── mdx-components.tsx
    │   │   ├── middleware.ts
    │   │   ├── next.config.mjs
    │   │   ├── package.json
    │   │   ├── source.config.ts
    │   │   ├── tsconfig.json
    │   │   ├── app/
    │   │   │   ├── layout.config.tsx
    │   │   │   ├── [lang]/
    │   │   │   │   ├── layout.tsx
    │   │   │   │   ├── (home)/
    │   │   │   │   │   ├── layout.tsx
    │   │   │   │   │   └── page.tsx
    │   │   │   │   ├── docs/
    │   │   │   │   │   ├── layout.tsx
    │   │   │   │   │   └── [[...slug]]/
    │   │   │   │   │       └── page.tsx
    │   │   │   │   └── docs-og/
    │   │   │   │       └── [...slug]/
    │   │   │   │           └── route.ts
    │   │   │   └── api/
    │   │   │       └── search/
    │   │   │           ├── route-full.ts
    │   │   │           └── route.ts
    │   │   ├── content/
    │   │   │   └── docs/
    │   │   │       ├── index.cn.mdx
    │   │   │       ├── index.mdx
    │   │   │       └── test.mdx
    │   │   └── lib/
    │   │       ├── i18n.ts
    │   │       ├── metadata.ts
    │   │       └── source.ts
    │   ├── next-mdx/
    │   │   ├── mdx-components.tsx
    │   │   ├── next.config.mjs
    │   │   ├── package.json
    │   │   ├── postcss.config.mjs
    │   │   ├── source.config.ts
    │   │   ├── tsconfig.json
    │   │   ├── app/
    │   │   │   ├── global.css
    │   │   │   ├── layout.config.tsx
    │   │   │   ├── layout.tsx
    │   │   │   ├── (home)/
    │   │   │   │   ├── layout.tsx
    │   │   │   │   └── page.tsx
    │   │   │   ├── api/
    │   │   │   │   └── search/
    │   │   │   │       ├── route-full.ts
    │   │   │   │       ├── route-tag.ts
    │   │   │   │       └── route.ts
    │   │   │   ├── docs/
    │   │   │   │   ├── layout.tsx
    │   │   │   │   └── [[...slug]]/
    │   │   │   │       └── page.tsx
    │   │   │   ├── docs-og/
    │   │   │   │   └── [...slug]/
    │   │   │   │       └── route.tsx
    │   │   │   └── static.json/
    │   │   │       └── orama-cloud.ts
    │   │   ├── content/
    │   │   │   └── docs/
    │   │   │       ├── index.mdx
    │   │   │       ├── test.mdx
    │   │   │       └── test2.mdx
    │   │   ├── lib/
    │   │   │   └── source.ts
    │   │   └── scripts/
    │   │       └── sync-orama-cloud.mjs
    │   ├── openapi/
    │   │   ├── README.md
    │   │   ├── mdx-components.tsx
    │   │   ├── next.config.mjs
    │   │   ├── openapi.json
    │   │   ├── package.json
    │   │   ├── postcss.config.mjs
    │   │   ├── source.config.ts
    │   │   ├── tsconfig.json
    │   │   ├── app/
    │   │   │   ├── global.css
    │   │   │   ├── layout.config.tsx
    │   │   │   ├── layout.tsx
    │   │   │   ├── logo.tsx
    │   │   │   ├── (home)/
    │   │   │   │   ├── layout.tsx
    │   │   │   │   └── page.tsx
    │   │   │   ├── api/
    │   │   │   │   └── search/
    │   │   │   │       └── route.ts
    │   │   │   ├── docs/
    │   │   │   │   ├── layout.tsx
    │   │   │   │   └── [[...slug]]/
    │   │   │   │       └── page.tsx
    │   │   │   └── docs-og/
    │   │   │       └── [...slug]/
    │   │   │           └── route.ts
    │   │   ├── content/
    │   │   │   └── docs/
    │   │   │       ├── auth.mdx
    │   │   │       ├── index.mdx
    │   │   │       └── meta.json
    │   │   ├── lib/
    │   │   │   └── source.ts
    │   │   └── scripts/
    │   │       └── generate-docs.mjs
    │   ├── python/
    │   │   ├── README.md
    │   │   ├── mdx-components.tsx
    │   │   ├── next.config.mjs
    │   │   ├── package.json
    │   │   ├── postcss.config.mjs
    │   │   ├── source.config.ts
    │   │   ├── tsconfig.json
    │   │   ├── app/
    │   │   │   ├── global.css
    │   │   │   ├── layout.config.tsx
    │   │   │   ├── layout.tsx
    │   │   │   ├── (home)/
    │   │   │   │   ├── layout.tsx
    │   │   │   │   └── page.tsx
    │   │   │   ├── api/
    │   │   │   │   └── search/
    │   │   │   │       └── route.ts
    │   │   │   └── docs/
    │   │   │       ├── layout.tsx
    │   │   │       └── [[...slug]]/
    │   │   │           └── page.tsx
    │   │   ├── content/
    │   │   │   └── docs/
    │   │   │       └── index.mdx
    │   │   ├── lib/
    │   │   │   └── source.ts
    │   │   └── scripts/
    │   │       └── generate-docs.mjs
    │   ├── react-router/
    │   │   ├── package.json
    │   │   ├── react-router.config.ts
    │   │   ├── tsconfig.json
    │   │   ├── vite.config.ts
    │   │   ├── app/
    │   │   │   ├── app.css
    │   │   │   ├── root.tsx
    │   │   │   ├── routes.ts
    │   │   │   ├── source.ts
    │   │   │   ├── docs/
    │   │   │   │   ├── page.tsx
    │   │   │   │   └── search.ts
    │   │   │   └── routes/
    │   │   │       └── home.tsx
    │   │   └── content/
    │   │       └── docs/
    │   │           ├── index.mdx
    │   │           ├── test.mdx
    │   │           └── test2.mdx
    │   ├── react-router-i18n/
    │   │   ├── package.json
    │   │   ├── react-router.config.ts
    │   │   ├── tsconfig.json
    │   │   ├── vite.config.ts
    │   │   ├── app/
    │   │   │   ├── app.css
    │   │   │   ├── i18n.ts
    │   │   │   ├── root.tsx
    │   │   │   ├── routes.ts
    │   │   │   ├── source.ts
    │   │   │   └── routes/
    │   │   │       ├── home.tsx
    │   │   │       └── docs/
    │   │   │           ├── page.tsx
    │   │   │           └── search.ts
    │   │   └── content/
    │   │       └── docs/
    │   │           ├── index.cn.mdx
    │   │           ├── index.mdx
    │   │           └── test.mdx
    │   ├── remote-mdx/
    │   │   ├── next.config.ts
    │   │   ├── package.json
    │   │   ├── tsconfig.json
    │   │   ├── app/
    │   │   │   ├── layout.tsx
    │   │   │   ├── page.tsx
    │   │   │   ├── api/
    │   │   │   │   └── search/
    │   │   │   │       └── route.ts
    │   │   │   └── docs/
    │   │   │       ├── layout.tsx
    │   │   │       ├── utils.ts
    │   │   │       └── [[...slug]]/
    │   │   │           └── page.tsx
    │   │   └── content/
    │   │       └── docs/
    │   │           ├── comparisons.mdx
    │   │           ├── index.mdx
    │   │           ├── page-tree.ts
    │   │           └── test.mdx
    │   └── tanstack-start/
    │       ├── package.json
    │       ├── tsconfig.json
    │       ├── vite.config.ts
    │       ├── .prettierignore
    │       ├── content/
    │       │   ├── index.mdx
    │       │   └── test.mdx
    │       └── src/
    │           ├── router.tsx
    │           ├── lib/
    │           │   └── source.ts
    │           ├── routes/
    │           │   ├── __root.tsx
    │           │   ├── index.tsx
    │           │   ├── api/
    │           │   │   └── search.ts
    │           │   └── docs/
    │           │       └── $.tsx
    │           └── styles/
    │               └── app.css
    ├── packages/
    │   ├── cli/
    │   │   ├── CHANGELOG.md
    │   │   ├── eslint.config.mjs
    │   │   ├── package.json
    │   │   ├── tsconfig.json
    │   │   ├── tsup.config.ts
    │   │   ├── vitest.config.ts
    │   │   ├── scripts/
    │   │   │   └── sync.ts
    │   │   ├── src/
    │   │   │   ├── config.ts
    │   │   │   ├── constants.ts
    │   │   │   ├── generated.d.ts
    │   │   │   ├── index.ts
    │   │   │   ├── commands/
    │   │   │   │   ├── add.ts
    │   │   │   │   ├── customise.ts
    │   │   │   │   ├── file-tree.ts
    │   │   │   │   └── init.ts
    │   │   │   ├── plugins/
    │   │   │   │   ├── i18n.ts
    │   │   │   │   ├── index.ts
    │   │   │   │   └── openapi.ts
    │   │   │   └── utils/
    │   │   │       ├── fs.ts
    │   │   │       ├── get-package-manager.ts
    │   │   │       ├── is-src.ts
    │   │   │       ├── move-files.ts
    │   │   │       ├── transform-references.ts
    │   │   │       ├── transform-tailwind.ts
    │   │   │       ├── typescript.ts
    │   │   │       ├── add/
    │   │   │       │   ├── get-deps.ts
    │   │   │       │   ├── install-component.ts
    │   │   │       │   └── install-deps.ts
    │   │   │       ├── file-tree/
    │   │   │       │   └── run-tree.ts
    │   │   │       └── i18n/
    │   │   │           ├── transform-layout-config.ts
    │   │   │           ├── transform-root-layout.ts
    │   │   │           └── transform-source-i18n.ts
    │   │   └── test/
    │   │       ├── index.test.ts
    │   │       ├── fixture/
    │   │       │   └── layout
    │   │       ├── repo/
    │   │       │   ├── package.json
    │   │       │   ├── registry.ts
    │   │       │   ├── tsconfig.json
    │   │       │   ├── components/
    │   │       │   │   ├── button.tsx
    │   │       │   │   ├── popover.tsx
    │   │       │   │   └── nested/
    │   │       │   │       └── hello.tsx
    │   │       │   ├── hooks/
    │   │       │   │   └── use-example.ts
    │   │       │   └── utils/
    │   │       │       └── example-util.ts
    │   │       └── repo-2/
    │   │           ├── package.json
    │   │           ├── registry.ts
    │   │           ├── tsconfig.json
    │   │           └── components/
    │   │               └── select.ts
    │   ├── content-collections/
    │   │   ├── README.md
    │   │   ├── CHANGELOG.md
    │   │   ├── eslint.config.mjs
    │   │   ├── package.json
    │   │   ├── tsconfig.json
    │   │   ├── tsup.config.ts
    │   │   └── src/
    │   │       ├── configuration.ts
    │   │       ├── index.ts
    │   │       ├── resolve-plugins.ts
    │   │       └── types.ts
    │   ├── core/
    │   │   ├── README.md
    │   │   ├── CHANGELOG.md
    │   │   ├── eslint.config.mjs
    │   │   ├── package.json
    │   │   ├── tsconfig.json
    │   │   ├── tsup.config.ts
    │   │   ├── vitest.config.ts
    │   │   ├── src/
    │   │   │   ├── breadcrumb.tsx
    │   │   │   ├── dynamic-link.tsx
    │   │   │   ├── hide-if-empty.tsx
    │   │   │   ├── link.tsx
    │   │   │   ├── sidebar.tsx
    │   │   │   ├── toc.tsx
    │   │   │   ├── content/
    │   │   │   │   └── index.ts
    │   │   │   ├── framework/
    │   │   │   │   ├── index.tsx
    │   │   │   │   ├── next.tsx
    │   │   │   │   ├── react-router.tsx
    │   │   │   │   └── tanstack.tsx
    │   │   │   ├── highlight/
    │   │   │   │   ├── client.tsx
    │   │   │   │   ├── index.ts
    │   │   │   │   └── shiki.ts
    │   │   │   ├── i18n/
    │   │   │   │   ├── index.ts
    │   │   │   │   └── middleware.ts
    │   │   │   ├── mdx-plugins/
    │   │   │   │   ├── hast-utils.ts
    │   │   │   │   ├── index.ts
    │   │   │   │   ├── rehype-code.ts
    │   │   │   │   ├── rehype-toc.ts
    │   │   │   │   ├── remark-admonition.ts
    │   │   │   │   ├── remark-code-tab.ts
    │   │   │   │   ├── remark-heading.ts
    │   │   │   │   ├── remark-image.ts
    │   │   │   │   ├── remark-npm.ts
    │   │   │   │   ├── remark-steps.ts
    │   │   │   │   ├── remark-structure.ts
    │   │   │   │   ├── remark-utils.ts
    │   │   │   │   └── transformer-icon.ts
    │   │   │   ├── search/
    │   │   │   │   ├── algolia.ts
    │   │   │   │   ├── client.ts
    │   │   │   │   ├── orama-cloud.ts
    │   │   │   │   ├── server.ts
    │   │   │   │   ├── client/
    │   │   │   │   │   ├── algolia.ts
    │   │   │   │   │   ├── fetch.ts
    │   │   │   │   │   ├── orama-cloud.ts
    │   │   │   │   │   └── static.ts
    │   │   │   │   └── orama/
    │   │   │   │       ├── _stemmers.ts
    │   │   │   │       ├── create-db.ts
    │   │   │   │       ├── create-endpoint.ts
    │   │   │   │       ├── create-from-source.ts
    │   │   │   │       ├── create-i18n.ts
    │   │   │   │       └── search/
    │   │   │   │           ├── advanced.ts
    │   │   │   │           └── simple.ts
    │   │   │   ├── server/
    │   │   │   │   ├── get-toc.ts
    │   │   │   │   ├── git-api.ts
    │   │   │   │   ├── index.ts
    │   │   │   │   ├── metadata.ts
    │   │   │   │   ├── page-tree.ts
    │   │   │   │   └── types.ts
    │   │   │   ├── source/
    │   │   │   │   ├── file-system.ts
    │   │   │   │   ├── index.ts
    │   │   │   │   ├── load-files.ts
    │   │   │   │   ├── loader.ts
    │   │   │   │   ├── page-tree-builder.ts
    │   │   │   │   ├── path.ts
    │   │   │   │   └── types.ts
    │   │   │   └── utils/
    │   │   │       ├── merge-refs.ts
    │   │   │       ├── page-tree.tsx
    │   │   │       ├── path.ts
    │   │   │       ├── remove-undefined.ts
    │   │   │       ├── use-anchor-observer.ts
    │   │   │       ├── use-debounce.ts
    │   │   │       ├── use-effect-event.ts
    │   │   │       ├── use-media-query.ts
    │   │   │       └── use-on-change.ts
    │   │   └── test/
    │   │       ├── index.test.ts
    │   │       ├── loader.test.ts
    │   │       ├── mdx-plugins.test.ts
    │   │       ├── search.test.ts
    │   │       └── fixtures/
    │   │           ├── rehype-toc.md
    │   │           ├── rehype-toc.output.js
    │   │           ├── remark-admonition.md
    │   │           ├── remark-admonition.output.mdx
    │   │           ├── remark-heading.md
    │   │           ├── remark-heading.output.json
    │   │           ├── remark-image-public-dir.md
    │   │           ├── remark-image-public-dir.output.mdx
    │   │           ├── remark-image-without-import.output.mdx
    │   │           ├── remark-image.md
    │   │           ├── remark-image.output.json
    │   │           ├── remark-steps.md
    │   │           ├── remark-steps.output.md
    │   │           ├── remark-structure.md
    │   │           ├── remark-structure.output.json
    │   │           └── page-trees/
    │   │               ├── basic.tree.json
    │   │               ├── basic.ts
    │   │               ├── i18n-dir.tree.json
    │   │               ├── i18n-dir.ts
    │   │               ├── i18n-no-prefix.tree.json
    │   │               ├── i18n.entries.json
    │   │               ├── i18n.tree.json
    │   │               ├── i18n.ts
    │   │               ├── nested.tree.json
    │   │               └── nested.ts
    │   ├── create-app/
    │   │   ├── README.md
    │   │   ├── CHANGELOG.md
    │   │   ├── eslint.config.mjs
    │   │   ├── package.json
    │   │   ├── tsconfig.json
    │   │   ├── tsup.config.ts
    │   │   ├── scripts/
    │   │   │   ├── update-git-repo.js
    │   │   │   └── update-git-repo.sh
    │   │   ├── src/
    │   │   │   ├── auto-install.ts
    │   │   │   ├── constants.ts
    │   │   │   ├── create-app.ts
    │   │   │   ├── git.ts
    │   │   │   ├── index.ts
    │   │   │   └── versions.d.ts
    │   │   └── template/
    │   │       ├── +next/
    │   │       │   ├── README.md
    │   │       │   ├── example.gitignore
    │   │       │   ├── mdx-components.tsx
    │   │       │   ├── app/
    │   │       │   │   ├── layout.config.tsx
    │   │       │   │   ├── layout.tsx
    │   │       │   │   ├── (home)/
    │   │       │   │   │   ├── layout.tsx
    │   │       │   │   │   └── page.tsx
    │   │       │   │   ├── api/
    │   │       │   │   │   └── search/
    │   │       │   │   │       └── route.ts
    │   │       │   │   └── docs/
    │   │       │   │       └── layout.tsx
    │   │       │   └── content/
    │   │       │       └── docs/
    │   │       │           ├── index.mdx
    │   │       │           └── test.mdx
    │   │       ├── +next+content-collections/
    │   │       │   ├── content-collections.ts
    │   │       │   ├── next.config.mjs
    │   │       │   ├── tsconfig.json
    │   │       │   ├── app/
    │   │       │   │   └── docs/
    │   │       │   │       └── [[...slug]]/
    │   │       │   │           └── page.tsx
    │   │       │   └── lib/
    │   │       │       └── source.ts
    │   │       ├── +next+eslint/
    │   │       │   └── .eslintrc.json
    │   │       ├── +next+fuma-docs-mdx/
    │   │       │   ├── README.md
    │   │       │   ├── next.config.mjs
    │   │       │   ├── source.config.ts
    │   │       │   ├── tsconfig.json
    │   │       │   ├── app/
    │   │       │   │   └── docs/
    │   │       │   │       └── [[...slug]]/
    │   │       │   │           └── page.tsx
    │   │       │   └── lib/
    │   │       │       └── source.ts
    │   │       ├── +next+tailwindcss/
    │   │       │   ├── postcss.config.mjs
    │   │       │   └── app/
    │   │       │       ├── global.css
    │   │       │       ├── layout.tsx
    │   │       │       └── (home)/
    │   │       │           └── page.tsx
    │   │       ├── react-router/
    │   │       │   ├── README.md
    │   │       │   ├── example.gitignore
    │   │       │   ├── react-router.config.ts
    │   │       │   ├── tsconfig.json
    │   │       │   ├── vite.config.ts
    │   │       │   ├── app/
    │   │       │   │   ├── app.css
    │   │       │   │   ├── root.tsx
    │   │       │   │   ├── routes.ts
    │   │       │   │   ├── source.ts
    │   │       │   │   ├── docs/
    │   │       │   │   │   ├── page.tsx
    │   │       │   │   │   └── search.ts
    │   │       │   │   └── routes/
    │   │       │   │       └── home.tsx
    │   │       │   └── content/
    │   │       │       └── docs/
    │   │       │           ├── index.mdx
    │   │       │           └── test.mdx
    │   │       └── tanstack-start/
    │   │           ├── README.md
    │   │           ├── app.config.ts
    │   │           ├── example.gitignore
    │   │           ├── tsconfig.json
    │   │           ├── app/
    │   │           │   ├── api.ts
    │   │           │   ├── app.css
    │   │           │   ├── client.tsx
    │   │           │   ├── router.tsx
    │   │           │   ├── ssr.tsx
    │   │           │   └── routes/
    │   │           │       ├── __root.tsx
    │   │           │       ├── index.tsx
    │   │           │       ├── api/
    │   │           │       │   └── search.ts
    │   │           │       └── docs/
    │   │           │           └── $.tsx
    │   │           ├── content/
    │   │           │   └── docs/
    │   │           │       └── index.mdx
    │   │           └── lib/
    │   │               └── source.ts
    │   ├── create-app-versions/
    │   │   └── package.json
    │   ├── doc-gen/
    │   │   ├── README.md
    │   │   ├── CHANGELOG.md
    │   │   ├── eslint.config.mjs
    │   │   ├── package.json
    │   │   ├── tsconfig.json
    │   │   ├── tsup.config.ts
    │   │   ├── vitest.config.ts
    │   │   ├── src/
    │   │   │   ├── file-generator.ts
    │   │   │   ├── index.ts
    │   │   │   ├── remark-docgen.ts
    │   │   │   ├── remark-install.ts
    │   │   │   ├── remark-show.ts
    │   │   │   ├── remark-ts2js.ts
    │   │   │   └── utils.ts
    │   │   └── test/
    │   │       ├── index.test.ts
    │   │       └── fixtures/
    │   │           ├── file-gen.md
    │   │           ├── file-gen.output.md
    │   │           ├── file-gen.relative.md
    │   │           ├── file-gen.relative.output.md
    │   │           ├── remark-install-persist.md
    │   │           ├── remark-install-persist.output.jsx
    │   │           ├── remark-install.md
    │   │           ├── remark-install.output.jsx
    │   │           ├── remark-show.mdx
    │   │           ├── remark-show.output.jsx
    │   │           ├── sample.ts
    │   │           ├── sample.txt
    │   │           ├── ts2js.md
    │   │           └── ts2js.output.jsx
    │   ├── eslint-config-custom/
    │   │   ├── library.js
    │   │   ├── next.js
    │   │   └── package.json
    │   ├── mdx/
    │   │   ├── bin.js
    │   │   ├── CHANGELOG.md
    │   │   ├── eslint.config.mjs
    │   │   ├── loader-mdx.cjs
    │   │   ├── package.json
    │   │   ├── tsconfig.json
    │   │   ├── tsup.config.ts
    │   │   ├── vitest.config.ts
    │   │   ├── src/
    │   │   │   ├── index.ts
    │   │   │   ├── loader-mdx.ts
    │   │   │   ├── postinstall.ts
    │   │   │   ├── config/
    │   │   │   │   ├── build.ts
    │   │   │   │   ├── define.ts
    │   │   │   │   ├── index.ts
    │   │   │   │   └── types.ts
    │   │   │   ├── map/
    │   │   │   │   ├── file-cache.ts
    │   │   │   │   ├── generate.ts
    │   │   │   │   ├── index.ts
    │   │   │   │   └── watcher.ts
    │   │   │   ├── mdx-plugins/
    │   │   │   │   ├── remark-exports.ts
    │   │   │   │   └── remark-include.ts
    │   │   │   ├── next/
    │   │   │   │   ├── create.ts
    │   │   │   │   └── index.ts
    │   │   │   ├── runtime/
    │   │   │   │   ├── async.ts
    │   │   │   │   ├── index.ts
    │   │   │   │   └── types.ts
    │   │   │   ├── utils/
    │   │   │   │   ├── build-mdx.ts
    │   │   │   │   ├── config.ts
    │   │   │   │   ├── count-lines.ts
    │   │   │   │   ├── fuma-matter.ts
    │   │   │   │   ├── get-type-from-path.ts
    │   │   │   │   ├── git-timestamp.ts
    │   │   │   │   ├── mdx-options.ts
    │   │   │   │   └── schema.ts
    │   │   │   └── vite/
    │   │   │       └── index.ts
    │   │   └── test/
    │   │       ├── index.test.ts
    │   │       └── fixtures/
    │   │           ├── index-async.output.js
    │   │           ├── index-sync.output.js
    │   │           ├── index.mdx
    │   │           └── folder/
    │   │               └── test.mdx
    │   ├── mdx-remote/
    │   │   ├── CHANGELOG.md
    │   │   ├── eslint.config.mjs
    │   │   ├── package.json
    │   │   ├── tsconfig.json
    │   │   ├── tsup.config.ts
    │   │   ├── vitest.config.ts
    │   │   ├── src/
    │   │   │   ├── compile.ts
    │   │   │   ├── index.ts
    │   │   │   ├── render.ts
    │   │   │   ├── utils.ts
    │   │   │   └── client/
    │   │   │       └── index.ts
    │   │   └── test/
    │   │       ├── index.test.ts
    │   │       └── fixtures/
    │   │           ├── file.mdx
    │   │           ├── file.mdx.js
    │   │           ├── file.mdx.json
    │   │           ├── file.mdx.production.js
    │   │           ├── index.mdx
    │   │           ├── index.mdx.js
    │   │           ├── index.mdx.json
    │   │           └── index.mdx.production.js
    │   ├── openapi/
    │   │   ├── CHANGELOG.md
    │   │   ├── eslint.config.mjs
    │   │   ├── package.json
    │   │   ├── tsconfig.build.json
    │   │   ├── tsconfig.json
    │   │   ├── types.d.ts
    │   │   ├── vitest.config.ts
    │   │   ├── css/
    │   │   │   └── preset.css
    │   │   ├── src/
    │   │   │   ├── build-routes.ts
    │   │   │   ├── generate-file.ts
    │   │   │   ├── generate.ts
    │   │   │   ├── icons.tsx
    │   │   │   ├── index.ts
    │   │   │   ├── types.ts
    │   │   │   ├── media/
    │   │   │   │   └── adapter.ts
    │   │   │   ├── playground/
    │   │   │   │   ├── client.tsx
    │   │   │   │   ├── fetcher.ts
    │   │   │   │   ├── get-default-values.ts
    │   │   │   │   ├── index.tsx
    │   │   │   │   ├── inputs.tsx
    │   │   │   │   ├── schema.tsx
    │   │   │   │   ├── status-info.tsx
    │   │   │   │   └── auth/
    │   │   │   │       └── oauth-dialog.tsx
    │   │   │   ├── render/
    │   │   │   │   ├── api-page.tsx
    │   │   │   │   ├── codeblock.tsx
    │   │   │   │   ├── heading.tsx
    │   │   │   │   ├── markdown.tsx
    │   │   │   │   ├── renderer.tsx
    │   │   │   │   ├── schema.tsx
    │   │   │   │   └── operation/
    │   │   │   │       ├── api-example.tsx
    │   │   │   │       ├── get-request-data.ts
    │   │   │   │       └── index.tsx
    │   │   │   ├── requests/
    │   │   │   │   ├── _shared.ts
    │   │   │   │   ├── csharp.ts
    │   │   │   │   ├── curl.ts
    │   │   │   │   ├── go.ts
    │   │   │   │   ├── index.ts
    │   │   │   │   ├── java.ts
    │   │   │   │   ├── javascript.ts
    │   │   │   │   └── python.ts
    │   │   │   ├── scalar/
    │   │   │   │   ├── client.tsx
    │   │   │   │   └── index.tsx
    │   │   │   ├── server/
    │   │   │   │   ├── create-method.ts
    │   │   │   │   ├── create.tsx
    │   │   │   │   ├── index.ts
    │   │   │   │   ├── proxy.ts
    │   │   │   │   └── source-api.tsx
    │   │   │   ├── ui/
    │   │   │   │   ├── client.tsx
    │   │   │   │   ├── index.tsx
    │   │   │   │   ├── lazy.tsx
    │   │   │   │   ├── select-tabs.tsx
    │   │   │   │   ├── server-select.tsx
    │   │   │   │   ├── components/
    │   │   │   │   │   ├── accordion.tsx
    │   │   │   │   │   ├── dialog.tsx
    │   │   │   │   │   ├── input.tsx
    │   │   │   │   │   ├── method-label.tsx
    │   │   │   │   │   └── select.tsx
    │   │   │   │   └── contexts/
    │   │   │   │       ├── api.tsx
    │   │   │   │       └── code-example.tsx
    │   │   │   └── utils/
    │   │   │       ├── combine-schema.ts
    │   │   │       ├── generate-document.ts
    │   │   │       ├── get-typescript-schema.ts
    │   │   │       ├── id-to-title.ts
    │   │   │       ├── input-to-string.ts
    │   │   │       ├── process-document.ts
    │   │   │       ├── schema-to-string.ts
    │   │   │       ├── schema.ts
    │   │   │       ├── url.ts
    │   │   │       └── use-query.ts
    │   │   └── test/
    │   │       ├── code-sample.test.ts
    │   │       ├── index.test.ts
    │   │       ├── utils.test.ts
    │   │       └── fixtures/
    │   │           ├── museum.yaml
    │   │           ├── petstore.yaml
    │   │           ├── products.yaml
    │   │           └── unkey.json
    │   ├── python/
    │   │   ├── CHANGELOG.md
    │   │   ├── eslint.config.mjs
    │   │   ├── package.json
    │   │   ├── pyproject.toml
    │   │   ├── tsconfig.json
    │   │   ├── tsup.config.ts
    │   │   ├── vitest.config.ts
    │   │   ├── fumapy/
    │   │   │   ├── __init__.py
    │   │   │   └── mksource/
    │   │   │       ├── __init__.py
    │   │   │       ├── document_module.py
    │   │   │       ├── json_encoder.py
    │   │   │       ├── models.py
    │   │   │       ├── simplify_docstring.py
    │   │   │       └── utils.py
    │   │   ├── src/
    │   │   │   ├── convert.ts
    │   │   │   ├── generated.ts
    │   │   │   ├── index.ts
    │   │   │   ├── write.ts
    │   │   │   └── components/
    │   │   │       └── index.tsx
    │   │   └── styles/
    │   │       └── preset.css
    │   ├── tsconfig/
    │   │   ├── base.json
    │   │   ├── nextjs.json
    │   │   ├── package.json
    │   │   └── react-library.json
    │   ├── twoslash/
    │   │   ├── README.md
    │   │   ├── CHANGELOG.md
    │   │   ├── eslint.config.mjs
    │   │   ├── package.json
    │   │   ├── tsconfig.json
    │   │   ├── tsup.config.ts
    │   │   ├── src/
    │   │   │   ├── cache-fs.ts
    │   │   │   ├── index.ts
    │   │   │   └── ui/
    │   │   │       ├── cn.ts
    │   │   │       ├── index.ts
    │   │   │       ├── popover.tsx
    │   │   │       └── popup.tsx
    │   │   └── styles/
    │   │       └── twoslash.css
    │   ├── typescript/
    │   │   ├── README.md
    │   │   ├── CHANGELOG.md
    │   │   ├── eslint.config.mjs
    │   │   ├── package.json
    │   │   ├── tsconfig.json
    │   │   ├── tsup.config.ts
    │   │   ├── vitest.config.ts
    │   │   ├── src/
    │   │   │   ├── create-project.ts
    │   │   │   ├── index.ts
    │   │   │   ├── markdown.ts
    │   │   │   ├── lib/
    │   │   │   │   ├── base.ts
    │   │   │   │   ├── cache.ts
    │   │   │   │   ├── file.ts
    │   │   │   │   ├── mdx.ts
    │   │   │   │   ├── remark-auto-type-table.tsx
    │   │   │   │   └── type-table.ts
    │   │   │   └── ui/
    │   │   │       ├── auto-type-table.tsx
    │   │   │       └── index.ts
    │   │   └── test/
    │   │       ├── index.test.ts
    │   │       ├── type-gen.test.ts
    │   │       └── fixtures/
    │   │           ├── test-2.ts
    │   │           ├── test.mdx
    │   │           ├── test.output.js
    │   │           ├── test.output.json
    │   │           └── test.ts
    │   └── ui/
    │       ├── README.md
    │       ├── CHANGELOG.md
    │       ├── eslint.config.mjs
    │       ├── package.json
    │       ├── postcss.config.js
    │       ├── tsconfig.build.json
    │       ├── tsconfig.json
    │       ├── css/
    │       │   ├── black.css
    │       │   ├── catppuccin.css
    │       │   ├── dusk.css
    │       │   ├── neutral.css
    │       │   ├── ocean.css
    │       │   ├── preset.css
    │       │   ├── purple.css
    │       │   ├── shadcn.css
    │       │   ├── shiki.css
    │       │   ├── style.css
    │       │   └── vitepress.css
    │       └── src/
    │           ├── i18n.tsx
    │           ├── icons.tsx
    │           ├── mdx.server.tsx
    │           ├── mdx.tsx
    │           ├── og.tsx
    │           ├── page.server.tsx
    │           ├── page.tsx
    │           ├── _registry/
    │           │   ├── index.ts
    │           │   └── layout/
    │           │       ├── docs-min.tsx
    │           │       └── page-min.tsx
    │           ├── components/
    │           │   ├── accordion.tsx
    │           │   ├── banner.tsx
    │           │   ├── callout.tsx
    │           │   ├── card.tsx
    │           │   ├── codeblock.tsx
    │           │   ├── dynamic-codeblock.tsx
    │           │   ├── files.tsx
    │           │   ├── github-info.tsx
    │           │   ├── heading.tsx
    │           │   ├── image-zoom.css
    │           │   ├── image-zoom.tsx
    │           │   ├── inline-toc.tsx
    │           │   ├── steps.tsx
    │           │   ├── tabs.tsx
    │           │   ├── tabs.unstyled.tsx
    │           │   ├── type-table.tsx
    │           │   ├── dialog/
    │           │   │   ├── search-algolia.tsx
    │           │   │   ├── search-default.tsx
    │           │   │   ├── search-orama.tsx
    │           │   │   └── search.tsx
    │           │   ├── layout/
    │           │   │   ├── language-toggle.tsx
    │           │   │   ├── root-toggle.tsx
    │           │   │   ├── search-toggle.tsx
    │           │   │   ├── sidebar.tsx
    │           │   │   ├── theme-toggle.tsx
    │           │   │   ├── toc-clerk.tsx
    │           │   │   ├── toc-thumb.tsx
    │           │   │   └── toc.tsx
    │           │   └── ui/
    │           │       ├── button.tsx
    │           │       ├── collapsible.tsx
    │           │       ├── navigation-menu.tsx
    │           │       ├── popover.tsx
    │           │       └── scroll-area.tsx
    │           ├── contexts/
    │           │   ├── i18n.tsx
    │           │   ├── layout.tsx
    │           │   ├── search.tsx
    │           │   ├── sidebar.tsx
    │           │   └── tree.tsx
    │           ├── layouts/
    │           │   ├── docs-client.tsx
    │           │   ├── docs.tsx
    │           │   ├── home.tsx
    │           │   ├── links.tsx
    │           │   ├── notebook-client.tsx
    │           │   ├── notebook.tsx
    │           │   ├── shared.tsx
    │           │   ├── docs/
    │           │   │   ├── page-client.tsx
    │           │   │   ├── page.tsx
    │           │   │   └── shared.tsx
    │           │   └── home/
    │           │       ├── menu.tsx
    │           │       └── navbar.tsx
    │           ├── provider/
    │           │   ├── base.tsx
    │           │   └── index.tsx
    │           ├── theme/
    │           │   └── typography/
    │           │       ├── index.ts
    │           │       ├── LICENSE
    │           │       └── styles.ts
    │           └── utils/
    │               ├── cn.ts
    │               ├── get-sidebar-tabs.tsx
    │               ├── is-active.ts
    │               ├── merge-refs.ts
    │               └── use-copy-button.ts
    ├── .changeset/
    │   ├── config.json
    │   └── tidy-ears-lay.md
    └── .github/
        ├── contributing.md
        ├── FUNDING.yml
        ├── ISSUE_TEMPLATE/
        │   ├── bug_report.yml
        │   ├── config.yml
        │   └── feature-request.yml
        └── workflows/
            ├── lint.yml
            ├── release.yml
            └── test.yml

================================================
FILE: README.md
================================================
![banner](./apps/docs/public/banner.png)

The framework for building documentation websites in Next.js.

📘 Learn More: [Documentation](https://fumadocs.vercel.app).

## Compatibility

All packages are **ESM only**.

## Sticker

![logo](./documents/logo.png)

Welcome to print it out :D

## Contributions

Make sure to read the [Contributing Guide](/.github/contributing.md) before submitting a pull request.



================================================
FILE: LICENSE
================================================
MIT License

Copyright (c) 2023 Fuma

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
FILE: package.json
================================================
{
  "name": "root",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "build": "turbo run build",
    "clean": "turbo run clean",
    "dev": "turbo run dev",
    "dev:all": "turbo run dev --filter=!./examples/*",
    "dev:examples": "turbo run dev --filter=./examples/*",
    "lint": "turbo run lint",
    "lint:prettier": "prettier --cache --check --ignore-path .gitignore --ignore-path .prettierignore .",
    "prettier": "prettier --cache --write --list-different --ignore-path .gitignore --ignore-path .prettierignore .",
    "release": "turbo run build --filter=./packages/* && changeset publish && pnpm -r run postpublish",
    "test": "vitest",
    "types:check": "turbo run types:check",
    "version": "changeset version && pnpm install --lockfile-only"
  },
  "devDependencies": {
    "@changesets/cli": "^2.29.5",
    "@eslint/js": "^9.30.1",
    "concurrently": "^9.2.0",
    "eslint": "^9.30.1",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-react-hooks": "5.2.0",
    "eslint-plugin-tailwindcss": "^3.18.0",
    "prettier": "^3.6.2",
    "prettier-plugin-astro": "^0.14.1",
    "rimraf": "^6.0.1",
    "tsup": "8.5.0",
    "turbo": "2.5.4",
    "typescript": "^5.8.3",
    "typescript-eslint": "^8.36.0",
    "vitest": "^3.2.4"
  },
  "packageManager": "pnpm@9.14.4",
  "engines": {
    "node": ">= 18.17.0"
  }
}



================================================
FILE: pnpm-lock.yaml
================================================
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    devDependencies:
      '@changesets/cli':
        specifier: ^2.29.5
        version: 2.29.5
      '@eslint/js':
        specifier: ^9.30.1
        version: 9.30.1
      concurrently:
        specifier: ^9.2.0
        version: 9.2.0
      eslint:
        specifier: ^9.30.1
        version: 9.30.1(jiti@2.4.2)
      eslint-plugin-react:
        specifier: ^7.37.5
        version: 7.37.5(eslint@9.30.1(jiti@2.4.2))
      eslint-plugin-react-hooks:
        specifier: 5.2.0
        version: 5.2.0(eslint@9.30.1(jiti@2.4.2))
      eslint-plugin-tailwindcss:
        specifier: ^3.18.0
        version: 3.18.0(tailwindcss@4.1.11)
      prettier:
        specifier: ^3.6.2
        version: 3.6.2
      prettier-plugin-astro:
        specifier: ^0.14.1
        version: 0.14.1
      rimraf:
        specifier: ^6.0.1
        version: 6.0.1
      tsup:
        specifier: 8.5.0
        version: 8.5.0(jiti@2.4.2)(postcss@8.5.6)(tsx@4.20.3)(typescript@5.8.3)(yaml@2.8.0)
      turbo:
        specifier: 2.5.4
        version: 2.5.4
      typescript:
        specifier: ^5.8.3
        version: 5.8.3
      typescript-eslint:
        specifier: ^8.36.0
        version: 8.36.0(eslint@9.30.1(jiti@2.4.2))(typescript@5.8.3)
      vitest:
        specifier: ^3.2.4
        version: 3.2.4(@types/debug@4.1.12)(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)

  apps/docs:
    dependencies:
      '@ai-sdk/openai':
        specifier: ^1.3.23
        version: 1.3.23(zod@4.0.2)
      '@ai-sdk/react':
        specifier: ^1.2.12
        version: 1.2.12(react@19.1.0)(zod@4.0.2)
      '@fumadocs/mdx-remote':
        specifier: workspace:*
        version: link:../../packages/mdx-remote
      '@orama/orama':
        specifier: ^3.1.10
        version: 3.1.10
      '@oramacloud/client':
        specifier: ^2.1.4
        version: 2.1.4
      '@radix-ui/react-dialog':
        specifier: ^1.1.14
        version: 1.1.14(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-hover-card':
        specifier: ^1.1.14
        version: 1.1.14(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-tooltip':
        specifier: ^1.2.7
        version: 1.2.7(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@shikijs/rehype':
        specifier: ^3.7.0
        version: 3.7.0
      '@shikijs/transformers':
        specifier: ^3.7.0
        version: 3.7.0
      ai:
        specifier: ^4.3.17
        version: 4.3.17(react@19.1.0)(zod@4.0.2)
      class-variance-authority:
        specifier: ^0.7.1
        version: 0.7.1
      feed:
        specifier: ^5.1.0
        version: 5.1.0
      fumadocs-core:
        specifier: workspace:*
        version: link:../../packages/core
      fumadocs-docgen:
        specifier: workspace:^
        version: link:../../packages/doc-gen
      fumadocs-mdx:
        specifier: workspace:*
        version: link:../../packages/mdx
      fumadocs-openapi:
        specifier: workspace:^
        version: link:../../packages/openapi
      fumadocs-twoslash:
        specifier: workspace:^
        version: link:../../packages/twoslash
      fumadocs-typescript:
        specifier: workspace:^
        version: link:../../packages/typescript
      fumadocs-ui:
        specifier: workspace:*
        version: link:../../packages/ui
      hast-util-to-jsx-runtime:
        specifier: ^2.3.6
        version: 2.3.6
      katex:
        specifier: ^0.16.22
        version: 0.16.22
      lucide-react:
        specifier: ^0.525.0
        version: 0.525.0(react@19.1.0)
      mermaid:
        specifier: ^11.8.1
        version: 11.8.1
      next:
        specifier: 15.3.5
        version: 15.3.5(@babel/core@7.28.0)(@opentelemetry/api@1.9.0)(babel-plugin-macros@3.1.0)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      next-themes:
        specifier: ^0.4.6
        version: 0.4.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      octokit:
        specifier: ^5.0.3
        version: 5.0.3
      oxc-transform:
        specifier: ^0.76.0
        version: 0.76.0
      react:
        specifier: ^19.1.0
        version: 19.1.0
      react-dom:
        specifier: ^19.1.0
        version: 19.1.0(react@19.1.0)
      rehype-katex:
        specifier: ^7.0.1
        version: 7.0.1
      remark:
        specifier: ^15.0.1
        version: 15.0.1
      remark-gfm:
        specifier: ^4.0.1
        version: 4.0.1
      remark-math:
        specifier: ^6.0.0
        version: 6.0.0
      remark-mdx:
        specifier: ^3.1.0
        version: 3.1.0
      remark-rehype:
        specifier: ^11.1.2
        version: 11.1.2
      scroll-into-view-if-needed:
        specifier: ^3.1.0
        version: 3.1.0
      shiki:
        specifier: ^3.7.0
        version: 3.7.0
      tailwind-merge:
        specifier: ^3.3.1
        version: 3.3.1
      twoslash:
        specifier: ^0.3.2
        version: 0.3.2(typescript@5.8.3)
      unist-util-visit:
        specifier: ^5.0.0
        version: 5.0.0
      zod:
        specifier: ^4.0.2
        version: 4.0.2
    devDependencies:
      '@fumadocs/cli':
        specifier: workspace:*
        version: link:../../packages/cli
      '@next/bundle-analyzer':
        specifier: 15.3.5
        version: 15.3.5
      '@next/env':
        specifier: 15.3.5
        version: 15.3.5
      '@next/eslint-plugin-next':
        specifier: 15.3.5
        version: 15.3.5
      '@tailwindcss/postcss':
        specifier: ^4.1.11
        version: 4.1.11
      '@types/hast':
        specifier: ^3.0.4
        version: 3.0.4
      '@types/mdx':
        specifier: ^2.0.13
        version: 2.0.13
      '@types/node':
        specifier: 24.0.12
        version: 24.0.12
      '@types/react':
        specifier: ^19.1.8
        version: 19.1.8
      '@types/react-dom':
        specifier: ^19.1.6
        version: 19.1.6(@types/react@19.1.8)
      algoliasearch:
        specifier: 5.32.0
        version: 5.32.0
      eslint-config-custom:
        specifier: workspace:*
        version: link:../../packages/eslint-config-custom
      gray-matter:
        specifier: ^4.0.3
        version: 4.0.3
      next-validate-link:
        specifier: ^1.5.2
        version: 1.5.2
      postcss:
        specifier: ^8.5.6
        version: 8.5.6
      tailwindcss:
        specifier: ^4.1.11
        version: 4.1.11
      tailwindcss-animate:
        specifier: ^1.0.7
        version: 1.0.7(tailwindcss@4.1.11)
      tinyglobby:
        specifier: ^0.2.14
        version: 0.2.14
      ts-morph:
        specifier: ^26.0.0
        version: 26.0.0
      tsconfig:
        specifier: workspace:*
        version: link:../../packages/tsconfig
      tsx:
        specifier: ^4.20.3
        version: 4.20.3
      typescript:
        specifier: ^5.8.3
        version: 5.8.3

  examples/content-collections:
    dependencies:
      '@fumadocs/content-collections':
        specifier: workspace:*
        version: link:../../packages/content-collections
      fumadocs-core:
        specifier: workspace:*
        version: link:../../packages/core
      fumadocs-ui:
        specifier: workspace:*
        version: link:../../packages/ui
      next:
        specifier: ^15.3.5
        version: 15.3.5(@babel/core@7.28.0)(@opentelemetry/api@1.9.0)(babel-plugin-macros@3.1.0)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react:
        specifier: 19.1.0
        version: 19.1.0
      react-dom:
        specifier: 19.1.0
        version: 19.1.0(react@19.1.0)
    devDependencies:
      '@content-collections/core':
        specifier: ^0.10.0
        version: 0.10.0(typescript@5.8.3)
      '@content-collections/mdx':
        specifier: ^0.2.2
        version: 0.2.2(@content-collections/core@0.10.0(typescript@5.8.3))(acorn@8.15.0)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@content-collections/next':
        specifier: ^0.2.6
        version: 0.2.6(@content-collections/core@0.10.0(typescript@5.8.3))(next@15.3.5(@babel/core@7.28.0)(@opentelemetry/api@1.9.0)(babel-plugin-macros@3.1.0)(react-dom@19.1.0(react@19.1.0))(react@19.1.0))
      '@types/mdx':
        specifier: ^2.0.13
        version: 2.0.13
      '@types/react':
        specifier: ^19.1.8
        version: 19.1.8
      '@types/react-dom':
        specifier: ^19.1.6
        version: 19.1.6(@types/react@19.1.8)
      typescript:
        specifier: ^5.8.3
        version: 5.8.3

  examples/i18n:
    dependencies:
      '@orama/tokenizers':
        specifier: ^3.1.10
        version: 3.1.10
      fumadocs-core:
        specifier: workspace:*
        version: link:../../packages/core
      fumadocs-mdx:
        specifier: workspace:*
        version: link:../../packages/mdx
      fumadocs-ui:
        specifier: workspace:*
        version: link:../../packages/ui
      next:
        specifier: 15.3.5
        version: 15.3.5(@babel/core@7.28.0)(@opentelemetry/api@1.9.0)(babel-plugin-macros@3.1.0)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react:
        specifier: 19.1.0
        version: 19.1.0
      react-dom:
        specifier: 19.1.0
        version: 19.1.0(react@19.1.0)
    devDependencies:
      '@types/mdx':
        specifier: ^2.0.13
        version: 2.0.13
      '@types/react':
        specifier: ^19.1.8
        version: 19.1.8
      '@types/react-dom':
        specifier: ^19.1.6
        version: 19.1.6(@types/react@19.1.8)
      typescript:
        specifier: ^5.8.3
        version: 5.8.3

  examples/next-mdx:
    dependencies:
      fumadocs-core:
        specifier: workspace:*
        version: link:../../packages/core
      fumadocs-mdx:
        specifier: workspace:*
        version: link:../../packages/mdx
      fumadocs-ui:
        specifier: workspace:*
        version: link:../../packages/ui
      next:
        specifier: 15.3.5
        version: 15.3.5(@babel/core@7.28.0)(@opentelemetry/api@1.9.0)(babel-plugin-macros@3.1.0)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react:
        specifier: 19.1.0
        version: 19.1.0
      react-dom:
        specifier: 19.1.0
        version: 19.1.0(react@19.1.0)
    devDependencies:
      '@tailwindcss/postcss':
        specifier: ^4.1.11
        version: 4.1.11
      '@types/mdx':
        specifier: ^2.0.13
        version: 2.0.13
      '@types/react':
        specifier: ^19.1.8
        version: 19.1.8
      '@types/react-dom':
        specifier: ^19.1.6
        version: 19.1.6(@types/react@19.1.8)
      postcss:
        specifier: ^8.5.6
        version: 8.5.6
      tailwindcss:
        specifier: ^4.1.11
        version: 4.1.11
      typescript:
        specifier: ^5.8.3
        version: 5.8.3

  examples/openapi:
    dependencies:
      fumadocs-core:
        specifier: workspace:*
        version: link:../../packages/core
      fumadocs-mdx:
        specifier: workspace:*
        version: link:../../packages/mdx
      fumadocs-openapi:
        specifier: workspace:*
        version: link:../../packages/openapi
      fumadocs-ui:
        specifier: workspace:*
        version: link:../../packages/ui
      next:
        specifier: 15.3.5
        version: 15.3.5(@babel/core@7.28.0)(@opentelemetry/api@1.9.0)(babel-plugin-macros@3.1.0)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react:
        specifier: 19.1.0
        version: 19.1.0
      react-dom:
        specifier: 19.1.0
        version: 19.1.0(react@19.1.0)
      shiki:
        specifier: ^3.7.0
        version: 3.7.0
    devDependencies:
      '@tailwindcss/postcss':
        specifier: ^4.1.11
        version: 4.1.11
      '@types/mdx':
        specifier: ^2.0.13
        version: 2.0.13
      '@types/react':
        specifier: ^19.1.8
        version: 19.1.8
      '@types/react-dom':
        specifier: ^19.1.6
        version: 19.1.6(@types/react@19.1.8)
      postcss:
        specifier: ^8.5.6
        version: 8.5.6
      rimraf:
        specifier: ^6.0.1
        version: 6.0.1
      tailwindcss:
        specifier: ^4.1.11
        version: 4.1.11
      typescript:
        specifier: ^5.8.3
        version: 5.8.3

  examples/python:
    dependencies:
      fumadocs-core:
        specifier: workspace:*
        version: link:../../packages/core
      fumadocs-mdx:
        specifier: workspace:*
        version: link:../../packages/mdx
      fumadocs-python:
        specifier: workspace:*
        version: link:../../packages/python
      fumadocs-ui:
        specifier: workspace:*
        version: link:../../packages/ui
      next:
        specifier: 15.3.5
        version: 15.3.5(@babel/core@7.28.0)(@opentelemetry/api@1.9.0)(babel-plugin-macros@3.1.0)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react:
        specifier: ^19.1.0
        version: 19.1.0
      react-dom:
        specifier: ^19.1.0
        version: 19.1.0(react@19.1.0)
    devDependencies:
      '@tailwindcss/postcss':
        specifier: ^4.1.11
        version: 4.1.11
      '@types/mdx':
        specifier: ^2.0.13
        version: 2.0.13
      '@types/node':
        specifier: 24.0.12
        version: 24.0.12
      '@types/react':
        specifier: ^19.1.8
        version: 19.1.8
      '@types/react-dom':
        specifier: ^19.1.6
        version: 19.1.6(@types/react@19.1.8)
      postcss:
        specifier: ^8.5.6
        version: 8.5.6
      tailwindcss:
        specifier: ^4.1.11
        version: 4.1.11
      typescript:
        specifier: ^5.8.3
        version: 5.8.3

  examples/react-router:
    dependencies:
      '@fumadocs/mdx-remote':
        specifier: workspace:*
        version: link:../../packages/mdx-remote
      '@react-router/node':
        specifier: ^7.6.3
        version: 7.6.3(react-router@7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(typescript@5.8.3)
      '@react-router/serve':
        specifier: ^7.6.3
        version: 7.6.3(react-router@7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(typescript@5.8.3)
      fumadocs-core:
        specifier: workspace:*
        version: link:../../packages/core
      fumadocs-ui:
        specifier: workspace:*
        version: link:../../packages/ui
      gray-matter:
        specifier: ^4.0.3
        version: 4.0.3
      isbot:
        specifier: ^5.1.28
        version: 5.1.28
      react:
        specifier: ^19.1.0
        version: 19.1.0
      react-dom:
        specifier: ^19.1.0
        version: 19.1.0(react@19.1.0)
      react-router:
        specifier: ^7.6.3
        version: 7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      shiki:
        specifier: ^3.7.0
        version: 3.7.0
    devDependencies:
      '@react-router/dev':
        specifier: ^7.6.3
        version: 7.6.3(@react-router/serve@7.6.3(react-router@7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(typescript@5.8.3))(@types/node@24.0.12)(babel-plugin-macros@3.1.0)(jiti@2.4.2)(lightningcss@1.30.1)(react-router@7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(terser@5.43.1)(tsx@4.20.3)(typescript@5.8.3)(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))(yaml@2.8.0)
      '@tailwindcss/vite':
        specifier: ^4.1.11
        version: 4.1.11(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))
      '@types/node':
        specifier: ^24.0.12
        version: 24.0.12
      '@types/react':
        specifier: ^19.1.8
        version: 19.1.8
      '@types/react-dom':
        specifier: ^19.1.6
        version: 19.1.6(@types/react@19.1.8)
      react-router-devtools:
        specifier: ^5.0.6
        version: 5.0.6(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react-router@7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(react@19.1.0)(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))
      tailwindcss:
        specifier: ^4.1.11
        version: 4.1.11
      typescript:
        specifier: ^5.8.3
        version: 5.8.3
      vite:
        specifier: ^7.0.3
        version: 7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)
      vite-tsconfig-paths:
        specifier: ^5.1.4
        version: 5.1.4(typescript@5.8.3)(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))

  examples/react-router-i18n:
    dependencies:
      '@fumadocs/mdx-remote':
        specifier: workspace:*
        version: link:../../packages/mdx-remote
      '@orama/tokenizers':
        specifier: ^3.1.10
        version: 3.1.10
      '@react-router/node':
        specifier: ^7.6.3
        version: 7.6.3(react-router@7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(typescript@5.8.3)
      '@react-router/serve':
        specifier: ^7.6.3
        version: 7.6.3(react-router@7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(typescript@5.8.3)
      fumadocs-core:
        specifier: workspace:*
        version: link:../../packages/core
      fumadocs-ui:
        specifier: workspace:*
        version: link:../../packages/ui
      gray-matter:
        specifier: ^4.0.3
        version: 4.0.3
      isbot:
        specifier: ^5.1.27
        version: 5.1.28
      react:
        specifier: ^19.1.0
        version: 19.1.0
      react-dom:
        specifier: ^19.1.0
        version: 19.1.0(react@19.1.0)
      react-router:
        specifier: ^7.6.3
        version: 7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
    devDependencies:
      '@react-router/dev':
        specifier: ^7.6.3
        version: 7.6.3(@react-router/serve@7.6.3(react-router@7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(typescript@5.8.3))(@types/node@24.0.12)(babel-plugin-macros@3.1.0)(jiti@2.4.2)(lightningcss@1.30.1)(react-router@7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(terser@5.43.1)(tsx@4.20.3)(typescript@5.8.3)(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))(yaml@2.8.0)
      '@tailwindcss/vite':
        specifier: ^4.1.11
        version: 4.1.11(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))
      '@types/node':
        specifier: ^24.0.12
        version: 24.0.12
      '@types/react':
        specifier: ^19.1.2
        version: 19.1.8
      '@types/react-dom':
        specifier: ^19.1.2
        version: 19.1.6(@types/react@19.1.8)
      tailwindcss:
        specifier: ^4.1.11
        version: 4.1.11
      typescript:
        specifier: ^5.8.3
        version: 5.8.3
      vite:
        specifier: ^7.0.3
        version: 7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)
      vite-tsconfig-paths:
        specifier: ^5.1.4
        version: 5.1.4(typescript@5.8.3)(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))

  examples/remote-mdx:
    dependencies:
      '@fumadocs/mdx-remote':
        specifier: workspace:*
        version: link:../../packages/mdx-remote
      fumadocs-core:
        specifier: workspace:*
        version: link:../../packages/core
      fumadocs-ui:
        specifier: workspace:*
        version: link:../../packages/ui
      next:
        specifier: 15.3.5
        version: 15.3.5(@babel/core@7.28.0)(@opentelemetry/api@1.9.0)(babel-plugin-macros@3.1.0)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react:
        specifier: 19.1.0
        version: 19.1.0
      react-dom:
        specifier: 19.1.0
        version: 19.1.0(react@19.1.0)
      tinyglobby:
        specifier: ^0.2.14
        version: 0.2.14
    devDependencies:
      '@types/mdx':
        specifier: ^2.0.13
        version: 2.0.13
      '@types/react':
        specifier: ^19.1.8
        version: 19.1.8
      '@types/react-dom':
        specifier: ^19.1.6
        version: 19.1.6(@types/react@19.1.8)
      typescript:
        specifier: ^5.8.3
        version: 5.8.3

  examples/tanstack-start:
    dependencies:
      '@fumadocs/mdx-remote':
        specifier: workspace:*
        version: link:../../packages/mdx-remote
      '@tanstack/react-router':
        specifier: ^1.125.6
        version: 1.125.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@tanstack/react-router-devtools':
        specifier: ^1.125.6
        version: 1.125.6(@tanstack/react-router@1.125.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(@tanstack/router-core@1.125.4)(csstype@3.1.3)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)(solid-js@1.9.7)(tiny-invariant@1.3.3)
      '@tanstack/react-start':
        specifier: ^1.126.1
        version: 1.126.1(@tanstack/react-router@1.125.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(@vitejs/plugin-react@4.6.0(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)))(react-dom@19.1.0(react@19.1.0))(react@19.1.0)(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))(webpack@5.100.0(esbuild@0.25.6))
      fumadocs-core:
        specifier: workspace:*
        version: link:../../packages/core
      fumadocs-ui:
        specifier: workspace:*
        version: link:../../packages/ui
      gray-matter:
        specifier: ^4.0.3
        version: 4.0.3
      lucide-static:
        specifier: ^0.525.0
        version: 0.525.0
      react:
        specifier: ^19.0.0
        version: 19.1.0
      react-dom:
        specifier: ^19.0.0
        version: 19.1.0(react@19.1.0)
      tailwind-merge:
        specifier: ^3.3.1
        version: 3.3.1
      vite:
        specifier: ^7.0.3
        version: 7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)
      zod:
        specifier: ^4.0.2
        version: 4.0.2
    devDependencies:
      '@tailwindcss/vite':
        specifier: ^4.1.11
        version: 4.1.11(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))
      '@types/node':
        specifier: ^24.0.12
        version: 24.0.12
      '@types/react':
        specifier: ^19.0.8
        version: 19.1.8
      '@types/react-dom':
        specifier: ^19.0.3
        version: 19.1.6(@types/react@19.1.8)
      tailwindcss:
        specifier: ^4.1.11
        version: 4.1.11
      typescript:
        specifier: ^5.7.2
        version: 5.8.3
      vite-tsconfig-paths:
        specifier: ^5.1.4
        version: 5.1.4(typescript@5.8.3)(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))

  packages/cli:
    dependencies:
      '@clack/prompts':
        specifier: ^0.11.0
        version: 0.11.0
      commander:
        specifier: ^14.0.0
        version: 14.0.0
      package-manager-detector:
        specifier: ^1.3.0
        version: 1.3.0
      picocolors:
        specifier: ^1.1.1
        version: 1.1.1
      tinyexec:
        specifier: ^1.0.1
        version: 1.0.1
      ts-morph:
        specifier: ^26.0.0
        version: 26.0.0
    devDependencies:
      '@types/node':
        specifier: 24.0.12
        version: 24.0.12
      eslint-config-custom:
        specifier: workspace:*
        version: link:../eslint-config-custom
      tsconfig:
        specifier: workspace:*
        version: link:../tsconfig
      tsx:
        specifier: ^4.20.3
        version: 4.20.3

  packages/content-collections:
    devDependencies:
      '@content-collections/core':
        specifier: ^0.10.0
        version: 0.10.0(typescript@5.8.3)
      '@content-collections/mdx':
        specifier: ^0.2.2
        version: 0.2.2(@content-collections/core@0.10.0(typescript@5.8.3))(acorn@8.15.0)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@types/node':
        specifier: 24.0.12
        version: 24.0.12
      eslint-config-custom:
        specifier: workspace:*
        version: link:../eslint-config-custom
      fumadocs-core:
        specifier: workspace:*
        version: link:../core
      tsconfig:
        specifier: workspace:*
        version: link:../tsconfig
      unified:
        specifier: ^11.0.5
        version: 11.0.5
      zod:
        specifier: ^4.0.2
        version: 4.0.2

  packages/core:
    dependencies:
      '@formatjs/intl-localematcher':
        specifier: ^0.6.1
        version: 0.6.1
      '@orama/orama':
        specifier: ^3.1.10
        version: 3.1.10
      '@shikijs/rehype':
        specifier: ^3.7.0
        version: 3.7.0
      '@shikijs/transformers':
        specifier: ^3.7.0
        version: 3.7.0
      github-slugger:
        specifier: ^2.0.0
        version: 2.0.0
      hast-util-to-estree:
        specifier: ^3.1.3
        version: 3.1.3
      hast-util-to-jsx-runtime:
        specifier: ^2.3.6
        version: 2.3.6
      image-size:
        specifier: ^2.0.2
        version: 2.0.2
      negotiator:
        specifier: ^1.0.0
        version: 1.0.0
      npm-to-yarn:
        specifier: ^3.0.1
        version: 3.0.1
      react:
        specifier: 18.x.x || 19.x.x
        version: 19.1.0
      react-dom:
        specifier: 18.x.x || 19.x.x
        version: 19.1.0(react@19.1.0)
      react-remove-scroll:
        specifier: ^2.7.1
        version: 2.7.1(@types/react@19.1.8)(react@19.1.0)
      remark:
        specifier: ^15.0.0
        version: 15.0.1
      remark-gfm:
        specifier: ^4.0.1
        version: 4.0.1
      remark-rehype:
        specifier: ^11.1.2
        version: 11.1.2
      scroll-into-view-if-needed:
        specifier: ^3.1.0
        version: 3.1.0
      shiki:
        specifier: ^3.7.0
        version: 3.7.0
      unist-util-visit:
        specifier: ^5.0.0
        version: 5.0.0
    devDependencies:
      '@mdx-js/mdx':
        specifier: ^3.1.0
        version: 3.1.0(acorn@8.15.0)
      '@oramacloud/client':
        specifier: ^2.1.4
        version: 2.1.4
      '@tanstack/react-router':
        specifier: ^1.125.6
        version: 1.125.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@types/estree-jsx':
        specifier: ^1.0.5
        version: 1.0.5
      '@types/hast':
        specifier: ^3.0.4
        version: 3.0.4
      '@types/mdast':
        specifier: ^4.0.3
        version: 4.0.4
      '@types/negotiator':
        specifier: ^0.6.4
        version: 0.6.4
      '@types/node':
        specifier: 24.0.12
        version: 24.0.12
      '@types/react':
        specifier: ^19.1.8
        version: 19.1.8
      '@types/react-dom':
        specifier: ^19.1.6
        version: 19.1.6(@types/react@19.1.8)
      algoliasearch:
        specifier: 5.32.0
        version: 5.32.0
      eslint-config-custom:
        specifier: workspace:*
        version: link:../eslint-config-custom
      mdast-util-mdx-jsx:
        specifier: ^3.2.0
        version: 3.2.0
      mdast-util-mdxjs-esm:
        specifier: ^2.0.1
        version: 2.0.1
      next:
        specifier: ^15.3.5
        version: 15.3.5(@babel/core@7.28.0)(@opentelemetry/api@1.9.0)(babel-plugin-macros@3.1.0)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react-router:
        specifier: ^7.6.3
        version: 7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      remark-mdx:
        specifier: ^3.1.0
        version: 3.1.0
      tsconfig:
        specifier: workspace:*
        version: link:../tsconfig
      typescript:
        specifier: ^5.8.3
        version: 5.8.3
      unified:
        specifier: ^11.0.5
        version: 11.0.5
      vfile:
        specifier: ^6.0.3
        version: 6.0.3

  packages/create-app:
    dependencies:
      '@clack/prompts':
        specifier: ^0.11.0
        version: 0.11.0
      cross-spawn:
        specifier: ^7.0.6
        version: 7.0.6
      picocolors:
        specifier: ^1.1.1
        version: 1.1.1
    devDependencies:
      '@types/cross-spawn':
        specifier: ^6.0.6
        version: 6.0.6
      '@types/node':
        specifier: 24.0.12
        version: 24.0.12
      eslint-config-custom:
        specifier: workspace:*
        version: link:../eslint-config-custom
      tinyglobby:
        specifier: ^0.2.14
        version: 0.2.14
      tsconfig:
        specifier: workspace:*
        version: link:../tsconfig

  packages/create-app-versions:
    dependencies:
      '@content-collections/core':
        specifier: ^0.10.0
        version: 0.10.0(typescript@5.8.3)
      '@content-collections/mdx':
        specifier: ^0.2.2
        version: 0.2.2(@content-collections/core@0.10.0(typescript@5.8.3))(acorn@8.15.0)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@content-collections/next':
        specifier: ^0.2.6
        version: 0.2.6(@content-collections/core@0.10.0(typescript@5.8.3))(next@15.3.5(@babel/core@7.28.0)(@opentelemetry/api@1.9.0)(babel-plugin-macros@3.1.0)(react-dom@19.1.0(react@19.1.0))(react@19.1.0))
      '@react-router/dev':
        specifier: ^7.6.3
        version: 7.6.3(@react-router/serve@7.6.3(react-router@7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(typescript@5.8.3))(@types/node@24.0.12)(babel-plugin-macros@3.1.0)(jiti@2.4.2)(lightningcss@1.30.1)(react-router@7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(terser@5.43.1)(tsx@4.20.3)(typescript@5.8.3)(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))(yaml@2.8.0)
      '@react-router/node':
        specifier: ^7.6.3
        version: 7.6.3(react-router@7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(typescript@5.8.3)
      '@react-router/serve':
        specifier: ^7.6.3
        version: 7.6.3(react-router@7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(typescript@5.8.3)
      '@tailwindcss/postcss':
        specifier: ^4.1.11
        version: 4.1.11
      '@tailwindcss/vite':
        specifier: ^4.1.11
        version: 4.1.11(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))
      '@tanstack/react-router':
        specifier: ^1.125.6
        version: 1.125.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@tanstack/react-start':
        specifier: ^1.126.1
        version: 1.126.1(@tanstack/react-router@1.125.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(@vitejs/plugin-react@4.6.0(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)))(react-dom@19.1.0(react@19.1.0))(react@19.1.0)(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))(webpack@5.100.0(esbuild@0.25.6))
      '@types/mdx':
        specifier: ^2.0.13
        version: 2.0.13
      '@types/node':
        specifier: 24.0.12
        version: 24.0.12
      '@types/react':
        specifier: ^19.1.8
        version: 19.1.8
      '@types/react-dom':
        specifier: ^19.1.6
        version: 19.1.6(@types/react@19.1.8)
      '@vitejs/plugin-react':
        specifier: ^4.6.0
        version: 4.6.0(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))
      gray-matter:
        specifier: ^4.0.3
        version: 4.0.3
      isbot:
        specifier: ^5.1.28
        version: 5.1.28
      next:
        specifier: 15.3.5
        version: 15.3.5(@babel/core@7.28.0)(@opentelemetry/api@1.9.0)(babel-plugin-macros@3.1.0)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      postcss:
        specifier: ^8.5.6
        version: 8.5.6
      react:
        specifier: ^19.1.0
        version: 19.1.0
      react-dom:
        specifier: ^19.1.0
        version: 19.1.0(react@19.1.0)
      react-router:
        specifier: ^7.6.3
        version: 7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react-router-devtools:
        specifier: ^5.0.6
        version: 5.0.6(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react-router@7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(react@19.1.0)(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))
      shiki:
        specifier: ^3.7.0
        version: 3.7.0
      tailwindcss:
        specifier: ^4.1.11
        version: 4.1.11
      tinyglobby:
        specifier: ^0.2.14
        version: 0.2.14
      typescript:
        specifier: ^5.8.3
        version: 5.8.3
      vinxi:
        specifier: ^0.5.8
        version: 0.5.8(@types/node@24.0.12)(db0@0.3.2)(ioredis@5.6.1)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)
      vite:
        specifier: ^7.0.3
        version: 7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)
      vite-tsconfig-paths:
        specifier: ^5.1.4
        version: 5.1.4(typescript@5.8.3)(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))

  packages/doc-gen:
    dependencies:
      estree-util-to-js:
        specifier: ^2.0.0
        version: 2.0.0
      estree-util-value-to-estree:
        specifier: ^3.4.0
        version: 3.4.0
      npm-to-yarn:
        specifier: ^3.0.1
        version: 3.0.1
      oxc-transform:
        specifier: ^0.76.0
        version: 0.76.0
      unist-util-visit:
        specifier: ^5.0.0
        version: 5.0.0
      zod:
        specifier: ^4.0.2
        version: 4.0.2
    devDependencies:
      '@mdx-js/mdx':
        specifier: ^3.1.0
        version: 3.1.0(acorn@8.15.0)
      '@types/estree':
        specifier: ^1.0.8
        version: 1.0.8
      '@types/hast':
        specifier: ^3.0.4
        version: 3.0.4
      '@types/mdast':
        specifier: ^4.0.3
        version: 4.0.4
      '@types/node':
        specifier: 24.0.12
        version: 24.0.12
      eslint-config-custom:
        specifier: workspace:*
        version: link:../eslint-config-custom
      mdast-util-mdx-jsx:
        specifier: ^3.2.0
        version: 3.2.0
      remark:
        specifier: ^15.0.0
        version: 15.0.1
      tsconfig:
        specifier: workspace:*
        version: link:../tsconfig
      typescript:
        specifier: ^5.8.3
        version: 5.8.3
      unified:
        specifier: ^11.0.5
        version: 11.0.5
      vfile:
        specifier: ^6.0.3
        version: 6.0.3

  packages/eslint-config-custom: {}

  packages/mdx:
    dependencies:
      '@mdx-js/mdx':
        specifier: ^3.1.0
        version: 3.1.0(acorn@8.15.0)
      '@standard-schema/spec':
        specifier: ^1.0.0
        version: 1.0.0
      chokidar:
        specifier: ^4.0.3
        version: 4.0.3
      esbuild:
        specifier: ^0.25.6
        version: 0.25.6
      estree-util-value-to-estree:
        specifier: ^3.4.0
        version: 3.4.0
      js-yaml:
        specifier: ^4.1.0
        version: 4.1.0
      lru-cache:
        specifier: ^11.1.0
        version: 11.1.0
      picocolors:
        specifier: ^1.1.1
        version: 1.1.1
      tinyexec:
        specifier: ^1.0.1
        version: 1.0.1
      tinyglobby:
        specifier: ^0.2.14
        version: 0.2.14
      unist-util-visit:
        specifier: ^5.0.0
        version: 5.0.0
      zod:
        specifier: ^4.0.2
        version: 4.0.2
    devDependencies:
      '@fumadocs/mdx-remote':
        specifier: workspace:*
        version: link:../mdx-remote
      '@types/js-yaml':
        specifier: ^4.0.9
        version: 4.0.9
      '@types/mdast':
        specifier: ^4.0.3
        version: 4.0.4
      '@types/mdx':
        specifier: ^2.0.13
        version: 2.0.13
      '@types/react':
        specifier: ^19.1.8
        version: 19.1.8
      eslint-config-custom:
        specifier: workspace:*
        version: link:../eslint-config-custom
      fumadocs-core:
        specifier: workspace:*
        version: link:../core
      mdast-util-mdx-jsx:
        specifier: ^3.2.0
        version: 3.2.0
      next:
        specifier: ^15.3.5
        version: 15.3.5(@babel/core@7.28.0)(@opentelemetry/api@1.9.0)(babel-plugin-macros@3.1.0)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      tsconfig:
        specifier: workspace:*
        version: link:../tsconfig
      unified:
        specifier: ^11.0.5
        version: 11.0.5
      vfile:
        specifier: ^6.0.3
        version: 6.0.3
      vite:
        specifier: ^7.0.3
        version: 7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)
      webpack:
        specifier: ^5.100.0
        version: 5.100.0(esbuild@0.25.6)

  packages/mdx-remote:
    dependencies:
      '@mdx-js/mdx':
        specifier: ^3.1.0
        version: 3.1.0(acorn@8.15.0)
      gray-matter:
        specifier: ^4.0.3
        version: 4.0.3
      zod:
        specifier: ^4.0.2
        version: 4.0.2
    devDependencies:
      '@types/mdx':
        specifier: ^2.0.13
        version: 2.0.13
      '@types/node':
        specifier: 24.0.12
        version: 24.0.12
      '@types/react':
        specifier: ^19.1.8
        version: 19.1.8
      eslint-config-custom:
        specifier: workspace:*
        version: link:../eslint-config-custom
      fumadocs-core:
        specifier: workspace:*
        version: link:../core
      react:
        specifier: ^19.1.0
        version: 19.1.0
      tinyglobby:
        specifier: ^0.2.14
        version: 0.2.14
      tsconfig:
        specifier: workspace:*
        version: link:../tsconfig
      unified:
        specifier: ^11.0.5
        version: 11.0.5
      vfile:
        specifier: ^6.0.3
        version: 6.0.3

  packages/openapi:
    dependencies:
      '@fumari/json-schema-to-typescript':
        specifier: ^1.1.3
        version: 1.1.3
      '@radix-ui/react-accordion':
        specifier: ^1.2.11
        version: 1.2.11(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-dialog':
        specifier: ^1.1.14
        version: 1.1.14(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-select':
        specifier: ^2.2.5
        version: 2.2.5(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-slot':
        specifier: ^1.2.3
        version: 1.2.3(@types/react@19.1.8)(react@19.1.0)
      '@scalar/openapi-parser':
        specifier: 0.18.1
        version: 0.18.1
      ajv:
        specifier: ^8.17.1
        version: 8.17.1
      class-variance-authority:
        specifier: ^0.7.1
        version: 0.7.1
      fumadocs-core:
        specifier: workspace:*
        version: link:../core
      fumadocs-ui:
        specifier: workspace:*
        version: link:../ui
      github-slugger:
        specifier: ^2.0.0
        version: 2.0.0
      hast-util-to-jsx-runtime:
        specifier: ^2.3.6
        version: 2.3.6
      js-yaml:
        specifier: ^4.1.0
        version: 4.1.0
      next-themes:
        specifier: ^0.4.6
        version: 0.4.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      openapi-sampler:
        specifier: ^1.6.1
        version: 1.6.1
      react:
        specifier: 18.x.x || 19.x.x
        version: 19.1.0
      react-dom:
        specifier: 18.x.x || 19.x.x
        version: 19.1.0(react@19.1.0)
      react-hook-form:
        specifier: ^7.60.0
        version: 7.60.0(react@19.1.0)
      remark:
        specifier: ^15.0.1
        version: 15.0.1
      remark-rehype:
        specifier: ^11.1.2
        version: 11.1.2
      shiki:
        specifier: ^3.7.0
        version: 3.7.0
      tinyglobby:
        specifier: ^0.2.14
        version: 0.2.14
      xml-js:
        specifier: ^1.6.11
        version: 1.6.11
    devDependencies:
      '@scalar/api-client-react':
        specifier: ^1.3.20
        version: 1.3.20(jwt-decode@4.0.0)(react@19.1.0)(tailwindcss@4.1.11)(typescript@5.8.3)
      '@types/js-yaml':
        specifier: ^4.0.9
        version: 4.0.9
      '@types/node':
        specifier: 24.0.12
        version: 24.0.12
      '@types/openapi-sampler':
        specifier: ^1.0.3
        version: 1.0.3
      '@types/react':
        specifier: ^19.1.8
        version: 19.1.8
      eslint-config-custom:
        specifier: workspace:*
        version: link:../eslint-config-custom
      json-schema-typed:
        specifier: ^8.0.1
        version: 8.0.1
      next:
        specifier: 15.3.5
        version: 15.3.5(@babel/core@7.28.0)(@opentelemetry/api@1.9.0)(babel-plugin-macros@3.1.0)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      openapi-types:
        specifier: ^12.1.3
        version: 12.1.3
      tailwindcss:
        specifier: ^4.1.11
        version: 4.1.11
      tsc-alias:
        specifier: ^1.8.16
        version: 1.8.16
      tsconfig:
        specifier: workspace:*
        version: link:../tsconfig

  packages/python:
    dependencies:
      class-variance-authority:
        specifier: ^0.7.1
        version: 0.7.1
      js-yaml:
        specifier: ^4.1.0
        version: 4.1.0
    devDependencies:
      '@types/js-yaml':
        specifier: ^4.0.9
        version: 4.0.9
      '@types/node':
        specifier: ^24.0.12
        version: 24.0.12
      '@types/react':
        specifier: ^19.1.8
        version: 19.1.8
      eslint-config-custom:
        specifier: workspace:*
        version: link:../eslint-config-custom
      fumadocs-core:
        specifier: workspace:*
        version: link:../core
      fumadocs-ui:
        specifier: workspace:*
        version: link:../ui
      lucide-react:
        specifier: ^0.525.0
        version: 0.525.0(react@19.1.0)
      tsconfig:
        specifier: workspace:*
        version: link:../tsconfig

  packages/tsconfig: {}

  packages/twoslash:
    dependencies:
      '@radix-ui/react-popover':
        specifier: ^1.1.14
        version: 1.1.14(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@shikijs/twoslash':
        specifier: ^3.7.0
        version: 3.7.0(typescript@5.8.3)
      mdast-util-from-markdown:
        specifier: ^2.0.2
        version: 2.0.2
      mdast-util-gfm:
        specifier: ^3.1.0
        version: 3.1.0
      mdast-util-to-hast:
        specifier: ^13.2.0
        version: 13.2.0
      react:
        specifier: 18.x.x || 19.x.x
        version: 19.1.0
      shiki:
        specifier: ^3.7.0
        version: 3.7.0
      tailwind-merge:
        specifier: ^3.3.1
        version: 3.3.1
      twoslash:
        specifier: ^0.3.2
        version: 0.3.2(typescript@5.8.3)
    devDependencies:
      '@types/hast':
        specifier: ^3.0.4
        version: 3.0.4
      '@types/mdast':
        specifier: ^4.0.3
        version: 4.0.4
      '@types/node':
        specifier: 24.0.12
        version: 24.0.12
      '@types/react':
        specifier: ^19.1.8
        version: 19.1.8
      eslint-config-custom:
        specifier: workspace:*
        version: link:../eslint-config-custom
      fumadocs-ui:
        specifier: workspace:*
        version: link:../ui
      tsconfig:
        specifier: workspace:*
        version: link:../tsconfig

  packages/typescript:
    dependencies:
      estree-util-value-to-estree:
        specifier: ^3.4.0
        version: 3.4.0
      hast-util-to-estree:
        specifier: ^3.1.3
        version: 3.1.3
      hast-util-to-jsx-runtime:
        specifier: ^2.3.6
        version: 2.3.6
      remark:
        specifier: ^15.0.1
        version: 15.0.1
      remark-rehype:
        specifier: ^11.1.2
        version: 11.1.2
      shiki:
        specifier: ^3.7.0
        version: 3.7.0
      tinyglobby:
        specifier: ^0.2.14
        version: 0.2.14
      ts-morph:
        specifier: ^26.0.0
        version: 26.0.0
      unist-util-visit:
        specifier: ^5.0.0
        version: 5.0.0
    devDependencies:
      '@mdx-js/mdx':
        specifier: ^3.1.0
        version: 3.1.0(acorn@8.15.0)
      '@types/estree':
        specifier: ^1.0.8
        version: 1.0.8
      '@types/hast':
        specifier: ^3.0.4
        version: 3.0.4
      '@types/mdast':
        specifier: ^4.0.3
        version: 4.0.4
      '@types/node':
        specifier: 24.0.12
        version: 24.0.12
      '@types/react':
        specifier: 19.1.8
        version: 19.1.8
      '@types/react-dom':
        specifier: 19.1.6
        version: 19.1.6(@types/react@19.1.8)
      eslint-config-custom:
        specifier: workspace:*
        version: link:../eslint-config-custom
      fumadocs-core:
        specifier: workspace:*
        version: link:../core
      fumadocs-ui:
        specifier: workspace:*
        version: link:../ui
      tsconfig:
        specifier: workspace:*
        version: link:../tsconfig
      typescript:
        specifier: ^5.8.3
        version: 5.8.3
      unified:
        specifier: ^11.0.5
        version: 11.0.5

  packages/ui:
    dependencies:
      '@radix-ui/react-accordion':
        specifier: ^1.2.11
        version: 1.2.11(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-collapsible':
        specifier: ^1.1.11
        version: 1.1.11(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-dialog':
        specifier: ^1.1.14
        version: 1.1.14(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-direction':
        specifier: ^1.1.1
        version: 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-navigation-menu':
        specifier: ^1.2.13
        version: 1.2.13(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-popover':
        specifier: ^1.1.14
        version: 1.1.14(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-presence':
        specifier: ^1.1.4
        version: 1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-scroll-area':
        specifier: ^1.2.9
        version: 1.2.9(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-slot':
        specifier: ^1.2.3
        version: 1.2.3(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-tabs':
        specifier: ^1.1.12
        version: 1.1.12(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      class-variance-authority:
        specifier: ^0.7.1
        version: 0.7.1
      fumadocs-core:
        specifier: workspace:*
        version: link:../core
      lodash.merge:
        specifier: ^4.6.2
        version: 4.6.2
      next-themes:
        specifier: ^0.4.6
        version: 0.4.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      postcss-selector-parser:
        specifier: ^7.1.0
        version: 7.1.0
      react:
        specifier: 18.x.x || 19.x.x
        version: 19.1.0
      react-dom:
        specifier: 18.x.x || 19.x.x
        version: 19.1.0(react@19.1.0)
      react-medium-image-zoom:
        specifier: ^5.2.14
        version: 5.2.14(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      scroll-into-view-if-needed:
        specifier: ^3.1.0
        version: 3.1.0
      tailwind-merge:
        specifier: ^3.3.1
        version: 3.3.1
    devDependencies:
      '@fumadocs/cli':
        specifier: workspace:*
        version: link:../cli
      '@next/eslint-plugin-next':
        specifier: ^15.3.5
        version: 15.3.5
      '@tailwindcss/cli':
        specifier: ^4.1.11
        version: 4.1.11
      '@types/lodash.merge':
        specifier: ^4.6.9
        version: 4.6.9
      '@types/react':
        specifier: ^19.1.8
        version: 19.1.8
      '@types/react-dom':
        specifier: ^19.1.6
        version: 19.1.6(@types/react@19.1.8)
      eslint-config-custom:
        specifier: workspace:*
        version: link:../eslint-config-custom
      next:
        specifier: 15.3.5
        version: 15.3.5(@babel/core@7.28.0)(@opentelemetry/api@1.9.0)(babel-plugin-macros@3.1.0)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      tailwindcss:
        specifier: ^4.1.11
        version: 4.1.11
      tsc-alias:
        specifier: ^1.8.16
        version: 1.8.16
      tsconfig:
        specifier: workspace:*
        version: link:../tsconfig

packages:

  '@ai-sdk/openai@1.3.23':
    resolution: {integrity: sha512-86U7rFp8yacUAOE/Jz8WbGcwMCqWvjK33wk5DXkfnAOEn3mx2r7tNSJdjukQFZbAK97VMXGPPHxF+aEARDXRXQ==}
    engines: {node: '>=18'}
    peerDependencies:
      zod: ^3.0.0

  '@ai-sdk/provider-utils@2.2.8':
    resolution: {integrity: sha512-fqhG+4sCVv8x7nFzYnFo19ryhAa3w096Kmc3hWxMQfW/TubPOmt3A6tYZhl4mUfQWWQMsuSkLrtjlWuXBVSGQA==}
    engines: {node: '>=18'}
    peerDependencies:
      zod: ^3.23.8

  '@ai-sdk/provider@1.1.3':
    resolution: {integrity: sha512-qZMxYJ0qqX/RfnuIaab+zp8UAeJn/ygXXAffR5I4N0n1IrvA6qBsjc8hXLmBiMV2zoXlifkacF7sEFnYnjBcqg==}
    engines: {node: '>=18'}

  '@ai-sdk/react@1.2.12':
    resolution: {integrity: sha512-jK1IZZ22evPZoQW3vlkZ7wvjYGYF+tRBKXtrcolduIkQ/m/sOAVcVeVDUDvh1T91xCnWCdUGCPZg2avZ90mv3g==}
    engines: {node: '>=18'}
    peerDependencies:
      react: ^18 || ^19 || ^19.0.0-rc
      zod: ^3.23.8
    peerDependenciesMeta:
      zod:
        optional: true

  '@ai-sdk/ui-utils@1.2.11':
    resolution: {integrity: sha512-3zcwCc8ezzFlwp3ZD15wAPjf2Au4s3vAbKsXQVyhxODHcmu0iyPO2Eua6D/vicq/AUm/BAo60r97O6HU+EI0+w==}
    engines: {node: '>=18'}
    peerDependencies:
      zod: ^3.23.8

  '@algolia/client-abtesting@5.32.0':
    resolution: {integrity: sha512-HG/6Eib6DnJYm/B2ijWFXr4txca/YOuA4K7AsEU0JBrOZSB+RU7oeDyNBPi3c0v0UDDqlkBqM3vBU/auwZlglA==}
    engines: {node: '>= 14.0.0'}

  '@algolia/client-analytics@5.32.0':
    resolution: {integrity: sha512-8Y9MLU72WFQOW3HArYv16+Wvm6eGmsqbxxM1qxtm0hvSASJbxCm+zQAZe5stqysTlcWo4BJ82KEH1PfgHbJAmQ==}
    engines: {node: '>= 14.0.0'}

  '@algolia/client-common@5.32.0':
    resolution: {integrity: sha512-w8L+rgyXMCPBKmEdOT+RfgMrF0mT6HK60vPYWLz8DBs/P7yFdGo7urn99XCJvVLMSKXrIbZ2FMZ/i50nZTXnuQ==}
    engines: {node: '>= 14.0.0'}

  '@algolia/client-insights@5.32.0':
    resolution: {integrity: sha512-AdWfynhUeX7jz/LTiFU3wwzJembTbdLkQIOLs4n7PyBuxZ3jz4azV1CWbIP8AjUOFmul6uXbmYza+KqyS5CzOA==}
    engines: {node: '>= 14.0.0'}

  '@algolia/client-personalization@5.32.0':
    resolution: {integrity: sha512-bTupJY4xzGZYI4cEQcPlSjjIEzMvv80h7zXGrXY1Y0KC/n/SLiMv84v7Uy+B6AG1Kiy9FQm2ADChBLo1uEhGtQ==}
    engines: {node: '>= 14.0.0'}

  '@algolia/client-query-suggestions@5.32.0':
    resolution: {integrity: sha512-if+YTJw1G3nDKL2omSBjQltCHUQzbaHADkcPQrGFnIGhVyHU3Dzq4g46uEv8mrL5sxL8FjiS9LvekeUlL2NRqw==}
    engines: {node: '>= 14.0.0'}

  '@algolia/client-search@5.32.0':
    resolution: {integrity: sha512-kmK5nVkKb4DSUgwbveMKe4X3xHdMsPsOVJeEzBvFJ+oS7CkBPmpfHAEq+CcmiPJs20YMv6yVtUT9yPWL5WgAhg==}
    engines: {node: '>= 14.0.0'}

  '@algolia/ingestion@1.32.0':
    resolution: {integrity: sha512-PZTqjJbx+fmPuT2ud1n4vYDSF1yrT//vOGI9HNYKNA0PM0xGUBWigf5gRivHsXa3oBnUlTyHV9j7Kqx5BHbVHQ==}
    engines: {node: '>= 14.0.0'}

  '@algolia/monitoring@1.32.0':
    resolution: {integrity: sha512-kYYoOGjvNQAmHDS1v5sBj+0uEL9RzYqH/TAdq8wmcV+/22weKt/fjh+6LfiqkS1SCZFYYrwGnirrUhUM36lBIQ==}
    engines: {node: '>= 14.0.0'}

  '@algolia/recommend@5.32.0':
    resolution: {integrity: sha512-jyIBLdskjPAL7T1g57UMfUNx+PzvYbxKslwRUKBrBA6sNEsYCFdxJAtZSLUMmw6MC98RDt4ksmEl5zVMT5bsuw==}
    engines: {node: '>= 14.0.0'}

  '@algolia/requester-browser-xhr@5.32.0':
    resolution: {integrity: sha512-eDp14z92Gt6JlFgiexImcWWH+Lk07s/FtxcoDaGrE4UVBgpwqOO6AfQM6dXh1pvHxlDFbMJihHc/vj3gBhPjqQ==}
    engines: {node: '>= 14.0.0'}

  '@algolia/requester-fetch@5.32.0':
    resolution: {integrity: sha512-rnWVglh/K75hnaLbwSc2t7gCkbq1ldbPgeIKDUiEJxZ4mlguFgcltWjzpDQ/t1LQgxk9HdIFcQfM17Hid3aQ6Q==}
    engines: {node: '>= 14.0.0'}

  '@algolia/requester-node-http@5.32.0':
    resolution: {integrity: sha512-LbzQ04+VLkzXY4LuOzgyjqEv/46Gwrk55PldaglMJ4i4eDXSRXGKkwJpXFwsoU+c1HMQlHIyjJBhrfsfdyRmyQ==}
    engines: {node: '>= 14.0.0'}

  '@alloc/quick-lru@5.2.0':
    resolution: {integrity: sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==}
    engines: {node: '>=10'}

  '@ampproject/remapping@2.3.0':
    resolution: {integrity: sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==}
    engines: {node: '>=6.0.0'}

  '@antfu/install-pkg@1.1.0':
    resolution: {integrity: sha512-MGQsmw10ZyI+EJo45CdSER4zEb+p31LpDAFp2Z3gkSd1yqVZGi0Ebx++YTEMonJy4oChEMLsxZ64j8FH6sSqtQ==}

  '@antfu/utils@8.1.1':
    resolution: {integrity: sha512-Mex9nXf9vR6AhcXmMrlz/HVgYYZpVGJ6YlPgwl7UnaFpnshXs6EK/oa5Gpf3CzENMjkvEx2tQtntGnb7UtSTOQ==}

  '@apidevtools/json-schema-ref-parser@11.9.3':
    resolution: {integrity: sha512-60vepv88RwcJtSHrD6MjIL6Ta3SOYbgfnkHb+ppAVK+o9mXprRtulx7VlRl3lN3bbvysAfCS7WMVfhUYemB0IQ==}
    engines: {node: '>= 16'}

  '@astrojs/compiler@2.12.0':
    resolution: {integrity: sha512-7bCjW6tVDpUurQLeKBUN9tZ5kSv5qYrGmcn0sG0IwacL7isR2ZbyyA3AdZ4uxsuUFOS2SlgReTH7wkxO6zpqWA==}

  '@babel/code-frame@7.26.2':
    resolution: {integrity: sha512-RJlIHRueQgwWitWgF8OdFYGZX328Ax5BCemNGlqHfplnRT9ESi8JkFlvaVYbS+UubVY6dpv87Fs2u5M29iNFVQ==}
    engines: {node: '>=6.9.0'}

  '@babel/code-frame@7.27.1':
    resolution: {integrity: sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==}
    engines: {node: '>=6.9.0'}

  '@babel/compat-data@7.27.2':
    resolution: {integrity: sha512-TUtMJYRPyUb/9aU8f3K0mjmjf6M9N5Woshn2CS6nqJSeJtTtQcpLUXjGt9vbF8ZGff0El99sWkLgzwW3VXnxZQ==}
    engines: {node: '>=6.9.0'}

  '@babel/core@7.28.0':
    resolution: {integrity: sha512-UlLAnTPrFdNGoFtbSXwcGFQBtQZJCNjaN6hQNP3UPvuNXT1i82N26KL3dZeIpNalWywr9IuQuncaAfUaS1g6sQ==}
    engines: {node: '>=6.9.0'}

  '@babel/generator@7.28.0':
    resolution: {integrity: sha512-lJjzvrbEeWrhB4P3QBsH7tey117PjLZnDbLiQEKjQ/fNJTjuq4HSqgFA+UNSwZT8D7dxxbnuSBMsa1lrWzKlQg==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-annotate-as-pure@7.27.3':
    resolution: {integrity: sha512-fXSwMQqitTGeHLBC08Eq5yXz2m37E4pJX1qAU1+2cNedz/ifv/bVXft90VeSav5nFO61EcNgwr0aJxbyPaWBPg==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-compilation-targets@7.27.2':
    resolution: {integrity: sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-create-class-features-plugin@7.27.1':
    resolution: {integrity: sha512-QwGAmuvM17btKU5VqXfb+Giw4JcN0hjuufz3DYnpeVDvZLAObloM77bhMXiqry3Iio+Ai4phVRDwl6WU10+r5A==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/helper-globals@7.28.0':
    resolution: {integrity: sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-member-expression-to-functions@7.27.1':
    resolution: {integrity: sha512-E5chM8eWjTp/aNoVpcbfM7mLxu9XGLWYise2eBKGQomAk/Mb4XoxyqXTZbuTohbsl8EKqdlMhnDI2CCLfcs9wA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-imports@7.27.1':
    resolution: {integrity: sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-transforms@7.27.3':
    resolution: {integrity: sha512-dSOvYwvyLsWBeIRyOeHXp5vPj5l1I011r52FM1+r1jCERv+aFXYk4whgQccYEGYxK2H3ZAIA8nuPkQ0HaUo3qg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/helper-optimise-call-expression@7.27.1':
    resolution: {integrity: sha512-URMGH08NzYFhubNSGJrpUEphGKQwMQYBySzat5cAByY1/YgIRkULnIy3tAMeszlL/so2HbeilYloUmSpd7GdVw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-plugin-utils@7.27.1':
    resolution: {integrity: sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-replace-supers@7.27.1':
    resolution: {integrity: sha512-7EHz6qDZc8RYS5ElPoShMheWvEgERonFCs7IAonWLLUTXW59DP14bCZt89/GKyreYn8g3S83m21FelHKbeDCKA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/helper-skip-transparent-expression-wrappers@7.27.1':
    resolution: {integrity: sha512-Tub4ZKEXqbPjXgWLl2+3JpQAYBJ8+ikpQ2Ocj/q/r0LwE3UhENh7EUabyHjz2kCEsrRY83ew2DQdHluuiDQFzg==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-string-parser@7.27.1':
    resolution: {integrity: sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-identifier@7.27.1':
    resolution: {integrity: sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-option@7.27.1':
    resolution: {integrity: sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==}
    engines: {node: '>=6.9.0'}

  '@babel/helpers@7.27.6':
    resolution: {integrity: sha512-muE8Tt8M22638HU31A3CgfSUciwz1fhATfoVai05aPXGor//CdWDCbnlY1yvBPo07njuVOCNGCSp/GTt12lIug==}
    engines: {node: '>=6.9.0'}

  '@babel/parser@7.28.0':
    resolution: {integrity: sha512-jVZGvOxOuNSsuQuLRTh13nU0AogFlw32w/MT+LV6D3sP5WdbW61E77RnkbaO2dUvmPAYrBDJXGn5gGS6tH4j8g==}
    engines: {node: '>=6.0.0'}
    hasBin: true

  '@babel/plugin-syntax-decorators@7.27.1':
    resolution: {integrity: sha512-YMq8Z87Lhl8EGkmb0MwYkt36QnxC+fzCgrl66ereamPlYToRpIk5nUjKUY3QKLWq8mwUB1BgbeXcTJhZOCDg5A==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-jsx@7.27.1':
    resolution: {integrity: sha512-y8YTNIeKoyhGd9O0Jiyzyyqk8gdjnumGTQPsz0xOZOQ2RmkVJeZ1vmmfIvFEKqucBG6axJGBZDE/7iI5suUI/w==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-typescript@7.27.1':
    resolution: {integrity: sha512-xfYCBMxveHrRMnAWl1ZlPXOZjzkN82THFvLhQhFXFt81Z5HnN+EtUkZhv/zcKpmT3fzmWZB0ywiBrbC3vogbwQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-modules-commonjs@7.27.1':
    resolution: {integrity: sha512-OJguuwlTYlN0gBZFRPqwOGNWssZjfIUdS7HMYtN8c1KmwpwHFBwTeFZrg9XZa+DFTitWOW5iTAG7tyCUPsCCyw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-react-jsx-self@7.27.1':
    resolution: {integrity: sha512-6UzkCs+ejGdZ5mFFC/OCUrv028ab2fp1znZmCZjAOBKiBK2jXD1O+BPSfX8X2qjJ75fZBMSnQn3Rq2mrBJK2mw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-react-jsx-source@7.27.1':
    resolution: {integrity: sha512-zbwoTsBruTeKB9hSq73ha66iFeJHuaFkUbwvqElnygoNbj/jHRsSeokowZFN3CZ64IvEqcmmkVe89OPXc7ldAw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-typescript@7.27.1':
    resolution: {integrity: sha512-Q5sT5+O4QUebHdbwKedFBEwRLb02zJ7r4A5Gg2hUoLuU3FjdMcyqcywqUrLCaDsFCxzokf7u9kuy7qz51YUuAg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/preset-typescript@7.27.1':
    resolution: {integrity: sha512-l7WfQfX0WK4M0v2RudjuQK4u99BS6yLHYEmdtVPP7lKV013zr9DygFuWNlnbvQ9LR+LS0Egz/XAvGx5U9MX0fQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/runtime@7.27.6':
    resolution: {integrity: sha512-vbavdySgbTTrmFE+EsiqUTzlOr5bzlnJtUv9PynGCAKvfQqjIXbvFdumPM/GxMDfyuGMJaJAU6TO4zc1Jf1i8Q==}
    engines: {node: '>=6.9.0'}

  '@babel/template@7.27.2':
    resolution: {integrity: sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==}
    engines: {node: '>=6.9.0'}

  '@babel/traverse@7.28.0':
    resolution: {integrity: sha512-mGe7UK5wWyh0bKRfupsUchrQGqvDbZDbKJw+kcRGSmdHVYrv+ltd0pnpDTVpiTqnaBru9iEvA8pz8W46v0Amwg==}
    engines: {node: '>=6.9.0'}

  '@babel/types@7.27.6':
    resolution: {integrity: sha512-ETyHEk2VHHvl9b9jZP5IHPavHYk57EhanlRRuae9XCpb/j5bDCbPPMOBfCWhnl/7EDJz0jEMCi/RhccCE8r1+Q==}
    engines: {node: '>=6.9.0'}

  '@babel/types@7.28.0':
    resolution: {integrity: sha512-jYnje+JyZG5YThjHiF28oT4SIZLnYOcSBb6+SDaFIyzDVSkXQmQQYclJ2R+YxcdmK0AX6x1E5OQNtuh3jHDrUg==}
    engines: {node: '>=6.9.0'}

  '@biomejs/cli-darwin-arm64@1.9.4':
    resolution: {integrity: sha512-bFBsPWrNvkdKrNCYeAp+xo2HecOGPAy9WyNyB/jKnnedgzl4W4Hb9ZMzYNbf8dMCGmUdSavlYHiR01QaYR58cw==}
    engines: {node: '>=14.21.3'}
    cpu: [arm64]
    os: [darwin]

  '@bkrem/react-transition-group@1.3.5':
    resolution: {integrity: sha512-lbBYhC42sxAeFEopxzd9oWdkkV0zirO5E9WyeOBxOrpXsf7m30Aj8vnbayZxFOwD9pvUQ2Pheb1gO79s0Qap3Q==}
    peerDependencies:
      react: ^15.0.0 || ^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0
      react-dom: ^15.0.0 || ^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0

  '@braintree/sanitize-url@7.1.1':
    resolution: {integrity: sha512-i1L7noDNxtFyL5DmZafWy1wRVhGehQmzZaz1HiN5e7iylJMSZR7ekOV7NsIqa5qBldlLrsKv4HbgFUVlQrz8Mw==}

  '@changesets/apply-release-plan@7.0.12':
    resolution: {integrity: sha512-EaET7As5CeuhTzvXTQCRZeBUcisoYPDDcXvgTE/2jmmypKp0RC7LxKj/yzqeh/1qFTZI7oDGFcL1PHRuQuketQ==}

  '@changesets/assemble-release-plan@6.0.9':
    resolution: {integrity: sha512-tPgeeqCHIwNo8sypKlS3gOPmsS3wP0zHt67JDuL20P4QcXiw/O4Hl7oXiuLnP9yg+rXLQ2sScdV1Kkzde61iSQ==}

  '@changesets/changelog-git@0.2.1':
    resolution: {integrity: sha512-x/xEleCFLH28c3bQeQIyeZf8lFXyDFVn1SgcBiR2Tw/r4IAWlk1fzxCEZ6NxQAjF2Nwtczoen3OA2qR+UawQ8Q==}

  '@changesets/cli@2.29.5':
    resolution: {integrity: sha512-0j0cPq3fgxt2dPdFsg4XvO+6L66RC0pZybT9F4dG5TBrLA3jA/1pNkdTXH9IBBVHkgsKrNKenI3n1mPyPlIydg==}
    hasBin: true

  '@changesets/config@3.1.1':
    resolution: {integrity: sha512-bd+3Ap2TKXxljCggI0mKPfzCQKeV/TU4yO2h2C6vAihIo8tzseAn2e7klSuiyYYXvgu53zMN1OeYMIQkaQoWnA==}

  '@changesets/errors@0.2.0':
    resolution: {integrity: sha512-6BLOQUscTpZeGljvyQXlWOItQyU71kCdGz7Pi8H8zdw6BI0g3m43iL4xKUVPWtG+qrrL9DTjpdn8eYuCQSRpow==}

  '@changesets/get-dependents-graph@2.1.3':
    resolution: {integrity: sha512-gphr+v0mv2I3Oxt19VdWRRUxq3sseyUpX9DaHpTUmLj92Y10AGy+XOtV+kbM6L/fDcpx7/ISDFK6T8A/P3lOdQ==}

  '@changesets/get-release-plan@4.0.13':
    resolution: {integrity: sha512-DWG1pus72FcNeXkM12tx+xtExyH/c9I1z+2aXlObH3i9YA7+WZEVaiHzHl03thpvAgWTRaH64MpfHxozfF7Dvg==}

  '@changesets/get-version-range-type@0.4.0':
    resolution: {integrity: sha512-hwawtob9DryoGTpixy1D3ZXbGgJu1Rhr+ySH2PvTLHvkZuQ7sRT4oQwMh0hbqZH1weAooedEjRsbrWcGLCeyVQ==}

  '@changesets/git@3.0.4':
    resolution: {integrity: sha512-BXANzRFkX+XcC1q/d27NKvlJ1yf7PSAgi8JG6dt8EfbHFHi4neau7mufcSca5zRhwOL8j9s6EqsxmT+s+/E6Sw==}

  '@changesets/logger@0.1.1':
    resolution: {integrity: sha512-OQtR36ZlnuTxKqoW4Sv6x5YIhOmClRd5pWsjZsddYxpWs517R0HkyiefQPIytCVh4ZcC5x9XaG8KTdd5iRQUfg==}

  '@changesets/parse@0.4.1':
    resolution: {integrity: sha512-iwksMs5Bf/wUItfcg+OXrEpravm5rEd9Bf4oyIPL4kVTmJQ7PNDSd6MDYkpSJR1pn7tz/k8Zf2DhTCqX08Ou+Q==}

  '@changesets/pre@2.0.2':
    resolution: {integrity: sha512-HaL/gEyFVvkf9KFg6484wR9s0qjAXlZ8qWPDkTyKF6+zqjBe/I2mygg3MbpZ++hdi0ToqNUF8cjj7fBy0dg8Ug==}

  '@changesets/read@0.6.5':
    resolution: {integrity: sha512-UPzNGhsSjHD3Veb0xO/MwvasGe8eMyNrR/sT9gR8Q3DhOQZirgKhhXv/8hVsI0QpPjR004Z9iFxoJU6in3uGMg==}

  '@changesets/should-skip-package@0.1.2':
    resolution: {integrity: sha512-qAK/WrqWLNCP22UDdBTMPH5f41elVDlsNyat180A33dWxuUDyNpg6fPi/FyTZwRriVjg0L8gnjJn2F9XAoF0qw==}

  '@changesets/types@4.1.0':
    resolution: {integrity: sha512-LDQvVDv5Kb50ny2s25Fhm3d9QSZimsoUGBsUioj6MC3qbMUCuC8GPIvk/M6IvXx3lYhAs0lwWUQLb+VIEUCECw==}

  '@changesets/types@6.1.0':
    resolution: {integrity: sha512-rKQcJ+o1nKNgeoYRHKOS07tAMNd3YSN0uHaJOZYjBAgxfV7TUE7JE+z4BzZdQwb5hKaYbayKN5KrYV7ODb2rAA==}

  '@changesets/write@0.4.0':
    resolution: {integrity: sha512-CdTLvIOPiCNuH71pyDu3rA+Q0n65cmAbXnwWH84rKGiFumFzkmHNT8KHTMEchcxN+Kl8I54xGUhJ7l3E7X396Q==}

  '@chevrotain/cst-dts-gen@11.0.3':
    resolution: {integrity: sha512-BvIKpRLeS/8UbfxXxgC33xOumsacaeCKAjAeLyOn7Pcp95HiRbrpl14S+9vaZLolnbssPIUuiUd8IvgkRyt6NQ==}

  '@chevrotain/gast@11.0.3':
    resolution: {integrity: sha512-+qNfcoNk70PyS/uxmj3li5NiECO+2YKZZQMbmjTqRI3Qchu8Hig/Q9vgkHpI3alNjr7M+a2St5pw5w5F6NL5/Q==}

  '@chevrotain/regexp-to-ast@11.0.3':
    resolution: {integrity: sha512-1fMHaBZxLFvWI067AVbGJav1eRY7N8DDvYCTwGBiE/ytKBgP8azTdgyrKyWZ9Mfh09eHWb5PgTSO8wi7U824RA==}

  '@chevrotain/types@11.0.3':
    resolution: {integrity: sha512-gsiM3G8b58kZC2HaWR50gu6Y1440cHiJ+i3JUvcp/35JchYejb2+5MVeJK0iKThYpAa/P2PYFV4hoi44HD+aHQ==}

  '@chevrotain/utils@11.0.3':
    resolution: {integrity: sha512-YslZMgtJUyuMbZ+aKvfF3x1f5liK4mWNxghFRv7jqRR9C3R3fAOGTTKvxXDa2Y1s9zSbcpuO0cAxDYsc9SrXoQ==}

  '@clack/core@0.5.0':
    resolution: {integrity: sha512-p3y0FIOwaYRUPRcMO7+dlmLh8PSRcrjuTndsiA0WAFbWES0mLZlrjVoBRZ9DzkPFJZG6KGkJmoEAY0ZcVWTkow==}

  '@clack/prompts@0.11.0':
    resolution: {integrity: sha512-pMN5FcrEw9hUkZA4f+zLlzivQSeQf5dRGJjSUbvVYDLvpKCdQx5OaknvKzgbtXOizhP+SJJJjqEbOe55uKKfAw==}

  '@cloudflare/kv-asset-handler@0.4.0':
    resolution: {integrity: sha512-+tv3z+SPp+gqTIcImN9o0hqE9xyfQjI1XD9pL6NuKjua9B1y7mNYv0S9cP+QEbA4ppVgGZEmKOvHX5G5Ei1CVA==}
    engines: {node: '>=18.0.0'}

  '@codemirror/autocomplete@6.18.6':
    resolution: {integrity: sha512-PHHBXFomUs5DF+9tCOM/UoW6XQ4R44lLNNhRaW9PKPTU0D7lIjRg3ElxaJnTwsl/oHiR93WSXDBrekhoUGCPtg==}

  '@codemirror/commands@6.8.1':
    resolution: {integrity: sha512-KlGVYufHMQzxbdQONiLyGQDUW0itrLZwq3CcY7xpv9ZLRHqzkBSoteocBHtMCoY7/Ci4xhzSrToIeLg7FxHuaw==}

  '@codemirror/lang-css@6.3.1':
    resolution: {integrity: sha512-kr5fwBGiGtmz6l0LSJIbno9QrifNMUusivHbnA1H6Dmqy4HZFte3UAICix1VuKo0lMPKQr2rqB+0BkKi/S3Ejg==}

  '@codemirror/lang-html@6.4.9':
    resolution: {integrity: sha512-aQv37pIMSlueybId/2PVSP6NPnmurFDVmZwzc7jszd2KAF8qd4VBbvNYPXWQq90WIARjsdVkPbw29pszmHws3Q==}

  '@codemirror/lang-javascript@6.2.4':
    resolution: {integrity: sha512-0WVmhp1QOqZ4Rt6GlVGwKJN3KW7Xh4H2q8ZZNGZaP6lRdxXJzmjm4FqvmOojVj6khWJHIb9sp7U/72W7xQgqAA==}

  '@codemirror/lang-json@6.0.2':
    resolution: {integrity: sha512-x2OtO+AvwEHrEwR0FyyPtfDUiloG3rnVTSZV1W8UteaLL8/MajQd8DpvUb2YVzC+/T18aSDv0H9mu+xw0EStoQ==}

  '@codemirror/lang-xml@6.1.0':
    resolution: {integrity: sha512-3z0blhicHLfwi2UgkZYRPioSgVTo9PV5GP5ducFH6FaHy0IAJRg+ixj5gTR1gnT/glAIC8xv4w2VL1LoZfs+Jg==}

  '@codemirror/lang-yaml@6.1.2':
    resolution: {integrity: sha512-dxrfG8w5Ce/QbT7YID7mWZFKhdhsaTNOYjOkSIMt1qmC4VQnXSDSYVHHHn8k6kJUfIhtLo8t1JJgltlxWdsITw==}

  '@codemirror/language@6.11.2':
    resolution: {integrity: sha512-p44TsNArL4IVXDTbapUmEkAlvWs2CFQbcfc0ymDsis1kH2wh0gcY96AS29c/vp2d0y2Tquk1EDSaawpzilUiAw==}

  '@codemirror/lint@6.8.5':
    resolution: {integrity: sha512-s3n3KisH7dx3vsoeGMxsbRAgKe4O1vbrnKBClm99PU0fWxmxsx5rR2PfqQgIt+2MMJBHbiJ5rfIdLYfB9NNvsA==}

  '@codemirror/search@6.5.11':
    resolution: {integrity: sha512-KmWepDE6jUdL6n8cAAqIpRmLPBZ5ZKnicE8oGU/s3QrAVID+0VhLFrzUucVKHG5035/BSykhExDL/Xm7dHthiA==}

  '@codemirror/state@6.5.2':
    resolution: {integrity: sha512-FVqsPqtPWKVVL3dPSxy8wEF/ymIEuVzF1PK3VbUgrxXpJUSHQWWZz4JMToquRxnkw+36LTamCZG2iua2Ptq0fA==}

  '@codemirror/view@6.38.0':
    resolution: {integrity: sha512-yvSchUwHOdupXkd7xJ0ob36jdsSR/I+/C+VbY0ffBiL5NiSTEBDfB1ZGWbbIlDd5xgdUkody+lukAdOxYrOBeg==}

  '@colors/colors@1.6.0':
    resolution: {integrity: sha512-Ir+AOibqzrIsL6ajt3Rz3LskB7OiMVHqltZmspbW/TJuTVuyOMirVqAkjfY6JISiLHgyNqicAC8AyHHGzNd/dA==}
    engines: {node: '>=0.1.90'}

  '@content-collections/core@0.10.0':
    resolution: {integrity: sha512-GDBYbvhoj9lHNlarY5wr+3PoO3m9GBMjftio9NXatLuZaenY+EHHNCcbbA3J+c06Q7WBYwNoLAaMX2I5N0duAg==}
    peerDependencies:
      typescript: ^5.0.2

  '@content-collections/integrations@0.2.1':
    resolution: {integrity: sha512-AyEcS2MmcOXSYt6vNmJsAiu6EBYjtNiwYGUVUmpG3llm8Gt8uiNrhIhlHyv3cuk+N8KJ2PWemLcMqtQJ+sW3bA==}
    peerDependencies:
      '@content-collections/core': 0.x

  '@content-collections/mdx@0.2.2':
    resolution: {integrity: sha512-7Xx8AohrSuq1jn/k44qWIq1s666KnksGPk64nnoY/T9mFZ7fZkdEtYezBsNpzkDMMKTnf65CNIvyFHtwTD2muA==}
    peerDependencies:
      '@content-collections/core': 0.x
      react: '>= 18'
      react-dom: '>= 18'

  '@content-collections/next@0.2.6':
    resolution: {integrity: sha512-gbVgtnXD7Qad95ENjL99LvrXoBtRTL8N0aZc5gz5NIK/yKBlpTZI6/CKVQMmROtGrqLOwcBdWlGUIzZPwpUBVA==}
    peerDependencies:
      '@content-collections/core': 0.x
      next: ^12 || ^13 || ^14 || ^15

  '@dabh/diagnostics@2.0.3':
    resolution: {integrity: sha512-hrlQOIi7hAfzsMqlGSFyVucrx38O+j6wiGOf//H2ecvIEqYN4ADBSS2iLMh5UFyDunCNniUIPk/q3riFv45xRA==}

  '@deno/shim-deno-test@0.5.0':
    resolution: {integrity: sha512-4nMhecpGlPi0cSzT67L+Tm+GOJqvuk8gqHBziqcUQOarnuIax1z96/gJHCSIz2Z0zhxE6Rzwb3IZXPtFh51j+w==}

  '@deno/shim-deno@0.19.2':
    resolution: {integrity: sha512-q3VTHl44ad8T2Tw2SpeAvghdGOjlnLPDNO2cpOxwMrBE/PVas6geWpbpIgrM+czOCH0yejp0yi8OaTuB+NU40Q==}

  '@dependents/detective-less@5.0.1':
    resolution: {integrity: sha512-Y6+WUMsTFWE5jb20IFP4YGa5IrGY/+a/FbOSjDF/wz9gepU2hwCYSXRHP/vPwBvwcY3SVMASt4yXxbXNXigmZQ==}
    engines: {node: '>=18'}

  '@discoveryjs/json-ext@0.5.7':
    resolution: {integrity: sha512-dBVuXR082gk3jsFp7Rd/JI4kytwGHecnCoTtXFb7DB6CNHp4rg5k1bhg0nWdLGLnOV71lmDzGQaLMy8iPLY0pw==}
    engines: {node: '>=10.0.0'}

  '@emnapi/core@1.4.4':
    resolution: {integrity: sha512-A9CnAbC6ARNMKcIcrQwq6HeHCjpcBZ5wSx4U01WXCqEKlrzB9F9315WDNHkrs2xbx7YjjSxbUYxuN6EQzpcY2g==}

  '@emnapi/runtime@1.4.4':
    resolution: {integrity: sha512-hHyapA4A3gPaDCNfiqyZUStTMqIkKRshqPIuDOXv1hcBnD4U3l8cP0T1HMCfGRxQ6V64TGCcoswChANyOAwbQg==}

  '@emnapi/wasi-threads@1.0.3':
    resolution: {integrity: sha512-8K5IFFsQqF9wQNJptGbS6FNKgUTsSRYnTqNCG1vPP8jFdjSv18n2mQfJpkt2Oibo9iBEzcDnDxNwKTzC7svlJw==}

  '@emotion/babel-plugin@11.13.5':
    resolution: {integrity: sha512-pxHCpT2ex+0q+HH91/zsdHkw/lXd468DIN2zvfvLtPKLLMo6gQj7oLObq8PhkrxOZb/gGCq03S3Z7PDhS8pduQ==}

  '@emotion/cache@11.14.0':
    resolution: {integrity: sha512-L/B1lc/TViYk4DcpGxtAVbx0ZyiKM5ktoIyafGkH6zg/tj+mA+NE//aPYKG0k8kCHSHVJrpLpcAlOBEXQ3SavA==}

  '@emotion/css@11.13.5':
    resolution: {integrity: sha512-wQdD0Xhkn3Qy2VNcIzbLP9MR8TafI0MJb7BEAXKp+w4+XqErksWR4OXomuDzPsN4InLdGhVe6EYcn2ZIUCpB8w==}

  '@emotion/hash@0.9.2':
    resolution: {integrity: sha512-MyqliTZGuOm3+5ZRSaaBGP3USLw6+EGykkwZns2EPC5g8jJ4z9OrdZY9apkl3+UP9+sdz76YYkwCKP5gh8iY3g==}

  '@emotion/memoize@0.9.0':
    resolution: {integrity: sha512-30FAj7/EoJ5mwVPOWhAyCX+FPfMDrVecJAM+Iw9NRoSl4BBAQeqj4cApHHUXOVvIPgLVDsCFoz/hGD+5QQD1GQ==}

  '@emotion/react@11.14.0':
    resolution: {integrity: sha512-O000MLDBDdk/EohJPFUqvnp4qnHeYkVP5B0xEG0D/L7cOKP9kefu2DXn8dj74cQfsEzUqh+sr1RzFqiL1o+PpA==}
    peerDependencies:
      '@types/react': '*'
      react: '>=16.8.0'
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@emotion/serialize@1.3.3':
    resolution: {integrity: sha512-EISGqt7sSNWHGI76hC7x1CksiXPahbxEOrC5RjmFRJTqLyEK9/9hZvBbiYn70dw4wuwMKiEMCUlR6ZXTSWQqxA==}

  '@emotion/sheet@1.4.0':
    resolution: {integrity: sha512-fTBW9/8r2w3dXWYM4HCB1Rdp8NLibOw2+XELH5m5+AkWiL/KqYX6dc0kKYlaYyKjrQ6ds33MCdMPEwgs2z1rqg==}

  '@emotion/unitless@0.10.0':
    resolution: {integrity: sha512-dFoMUuQA20zvtVTuxZww6OHoJYgrzfKM1t52mVySDJnMSEa08ruEvdYQbhvyu6soU+NeLVd3yKfTfT0NeV6qGg==}

  '@emotion/use-insertion-effect-with-fallbacks@1.2.0':
    resolution: {integrity: sha512-yJMtVdH59sxi/aVJBpk9FQq+OR8ll5GT8oWd57UpeaKEVGab41JWaCFA7FRLoMLloOZF/c/wsPoe+bfGmRKgDg==}
    peerDependencies:
      react: '>=16.8.0'

  '@emotion/utils@1.4.2':
    resolution: {integrity: sha512-3vLclRofFziIa3J2wDh9jjbkUz9qk5Vi3IZ/FSTKViB0k+ef0fPV7dYrUIugbgupYDx7v9ud/SjrtEP8Y4xLoA==}

  '@emotion/weak-memoize@0.4.0':
    resolution: {integrity: sha512-snKqtPW01tN0ui7yu9rGv69aJXr/a/Ywvl11sUjNtEcRc+ng/mQriFL0wLXMef74iHa/EkftbDzU9F8iFbH+zg==}

  '@esbuild-plugins/node-resolve@0.2.2':
    resolution: {integrity: sha512-+t5FdX3ATQlb53UFDBRb4nqjYBz492bIrnVWvpQHpzZlu9BQL5HasMZhqc409ygUwOWCXZhrWr6NyZ6T6Y+cxw==}
    peerDependencies:
      esbuild: '*'

  '@esbuild/aix-ppc64@0.25.5':
    resolution: {integrity: sha512-9o3TMmpmftaCMepOdA5k/yDw8SfInyzWWTjYTFCX3kPSDJMROQTb8jg+h9Cnwnmm1vOzvxN7gIfB5V2ewpjtGA==}
    engines: {node: '>=18'}
    cpu: [ppc64]
    os: [aix]

  '@esbuild/aix-ppc64@0.25.6':
    resolution: {integrity: sha512-ShbM/3XxwuxjFiuVBHA+d3j5dyac0aEVVq1oluIDf71hUw0aRF59dV/efUsIwFnR6m8JNM2FjZOzmaZ8yG61kw==}
    engines: {node: '>=18'}
    cpu: [ppc64]
    os: [aix]

  '@esbuild/android-arm64@0.25.5':
    resolution: {integrity: sha512-VGzGhj4lJO+TVGV1v8ntCZWJktV7SGCs3Pn1GRWI1SBFtRALoomm8k5E9Pmwg3HOAal2VDc2F9+PM/rEY6oIDg==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [android]

  '@esbuild/android-arm64@0.25.6':
    resolution: {integrity: sha512-hd5zdUarsK6strW+3Wxi5qWws+rJhCCbMiC9QZyzoxfk5uHRIE8T287giQxzVpEvCwuJ9Qjg6bEjcRJcgfLqoA==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [android]

  '@esbuild/android-arm@0.25.5':
    resolution: {integrity: sha512-AdJKSPeEHgi7/ZhuIPtcQKr5RQdo6OO2IL87JkianiMYMPbCtot9fxPbrMiBADOWWm3T2si9stAiVsGbTQFkbA==}
    engines: {node: '>=18'}
    cpu: [arm]
    os: [android]

  '@esbuild/android-arm@0.25.6':
    resolution: {integrity: sha512-S8ToEOVfg++AU/bHwdksHNnyLyVM+eMVAOf6yRKFitnwnbwwPNqKr3srzFRe7nzV69RQKb5DgchIX5pt3L53xg==}
    engines: {node: '>=18'}
    cpu: [arm]
    os: [android]

  '@esbuild/android-x64@0.25.5':
    resolution: {integrity: sha512-D2GyJT1kjvO//drbRT3Hib9XPwQeWd9vZoBJn+bu/lVsOZ13cqNdDeqIF/xQ5/VmWvMduP6AmXvylO/PIc2isw==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [android]

  '@esbuild/android-x64@0.25.6':
    resolution: {integrity: sha512-0Z7KpHSr3VBIO9A/1wcT3NTy7EB4oNC4upJ5ye3R7taCc2GUdeynSLArnon5G8scPwaU866d3H4BCrE5xLW25A==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [android]

  '@esbuild/darwin-arm64@0.25.5':
    resolution: {integrity: sha512-GtaBgammVvdF7aPIgH2jxMDdivezgFu6iKpmT+48+F8Hhg5J/sfnDieg0aeG/jfSvkYQU2/pceFPDKlqZzwnfQ==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [darwin]

  '@esbuild/darwin-arm64@0.25.6':
    resolution: {integrity: sha512-FFCssz3XBavjxcFxKsGy2DYK5VSvJqa6y5HXljKzhRZ87LvEi13brPrf/wdyl/BbpbMKJNOr1Sd0jtW4Ge1pAA==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [darwin]

  '@esbuild/darwin-x64@0.25.5':
    resolution: {integrity: sha512-1iT4FVL0dJ76/q1wd7XDsXrSW+oLoquptvh4CLR4kITDtqi2e/xwXwdCVH8hVHU43wgJdsq7Gxuzcs6Iq/7bxQ==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [darwin]

  '@esbuild/darwin-x64@0.25.6':
    resolution: {integrity: sha512-GfXs5kry/TkGM2vKqK2oyiLFygJRqKVhawu3+DOCk7OxLy/6jYkWXhlHwOoTb0WqGnWGAS7sooxbZowy+pK9Yg==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [darwin]

  '@esbuild/freebsd-arm64@0.25.5':
    resolution: {integrity: sha512-nk4tGP3JThz4La38Uy/gzyXtpkPW8zSAmoUhK9xKKXdBCzKODMc2adkB2+8om9BDYugz+uGV7sLmpTYzvmz6Sw==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [freebsd]

  '@esbuild/freebsd-arm64@0.25.6':
    resolution: {integrity: sha512-aoLF2c3OvDn2XDTRvn8hN6DRzVVpDlj2B/F66clWd/FHLiHaG3aVZjxQX2DYphA5y/evbdGvC6Us13tvyt4pWg==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [freebsd]

  '@esbuild/freebsd-x64@0.25.5':
    resolution: {integrity: sha512-PrikaNjiXdR2laW6OIjlbeuCPrPaAl0IwPIaRv+SMV8CiM8i2LqVUHFC1+8eORgWyY7yhQY+2U2fA55mBzReaw==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [freebsd]

  '@esbuild/freebsd-x64@0.25.6':
    resolution: {integrity: sha512-2SkqTjTSo2dYi/jzFbU9Plt1vk0+nNg8YC8rOXXea+iA3hfNJWebKYPs3xnOUf9+ZWhKAaxnQNUf2X9LOpeiMQ==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [freebsd]

  '@esbuild/linux-arm64@0.25.5':
    resolution: {integrity: sha512-Z9kfb1v6ZlGbWj8EJk9T6czVEjjq2ntSYLY2cw6pAZl4oKtfgQuS4HOq41M/BcoLPzrUbNd+R4BXFyH//nHxVg==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [linux]

  '@esbuild/linux-arm64@0.25.6':
    resolution: {integrity: sha512-b967hU0gqKd9Drsh/UuAm21Khpoh6mPBSgz8mKRq4P5mVK8bpA+hQzmm/ZwGVULSNBzKdZPQBRT3+WuVavcWsQ==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [linux]

  '@esbuild/linux-arm@0.25.5':
    resolution: {integrity: sha512-cPzojwW2okgh7ZlRpcBEtsX7WBuqbLrNXqLU89GxWbNt6uIg78ET82qifUy3W6OVww6ZWobWub5oqZOVtwolfw==}
    engines: {node: '>=18'}
    cpu: [arm]
    os: [linux]

  '@esbuild/linux-arm@0.25.6':
    resolution: {integrity: sha512-SZHQlzvqv4Du5PrKE2faN0qlbsaW/3QQfUUc6yO2EjFcA83xnwm91UbEEVx4ApZ9Z5oG8Bxz4qPE+HFwtVcfyw==}
    engines: {node: '>=18'}
    cpu: [arm]
    os: [linux]

  '@esbuild/linux-ia32@0.25.5':
    resolution: {integrity: sha512-sQ7l00M8bSv36GLV95BVAdhJ2QsIbCuCjh/uYrWiMQSUuV+LpXwIqhgJDcvMTj+VsQmqAHL2yYaasENvJ7CDKA==}
    engines: {node: '>=18'}
    cpu: [ia32]
    os: [linux]

  '@esbuild/linux-ia32@0.25.6':
    resolution: {integrity: sha512-aHWdQ2AAltRkLPOsKdi3xv0mZ8fUGPdlKEjIEhxCPm5yKEThcUjHpWB1idN74lfXGnZ5SULQSgtr5Qos5B0bPw==}
    engines: {node: '>=18'}
    cpu: [ia32]
    os: [linux]

  '@esbuild/linux-loong64@0.25.5':
    resolution: {integrity: sha512-0ur7ae16hDUC4OL5iEnDb0tZHDxYmuQyhKhsPBV8f99f6Z9KQM02g33f93rNH5A30agMS46u2HP6qTdEt6Q1kg==}
    engines: {node: '>=18'}
    cpu: [loong64]
    os: [linux]

  '@esbuild/linux-loong64@0.25.6':
    resolution: {integrity: sha512-VgKCsHdXRSQ7E1+QXGdRPlQ/e08bN6WMQb27/TMfV+vPjjTImuT9PmLXupRlC90S1JeNNW5lzkAEO/McKeJ2yg==}
    engines: {node: '>=18'}
    cpu: [loong64]
    os: [linux]

  '@esbuild/linux-mips64el@0.25.5':
    resolution: {integrity: sha512-kB/66P1OsHO5zLz0i6X0RxlQ+3cu0mkxS3TKFvkb5lin6uwZ/ttOkP3Z8lfR9mJOBk14ZwZ9182SIIWFGNmqmg==}
    engines: {node: '>=18'}
    cpu: [mips64el]
    os: [linux]

  '@esbuild/linux-mips64el@0.25.6':
    resolution: {integrity: sha512-WViNlpivRKT9/py3kCmkHnn44GkGXVdXfdc4drNmRl15zVQ2+D2uFwdlGh6IuK5AAnGTo2qPB1Djppj+t78rzw==}
    engines: {node: '>=18'}
    cpu: [mips64el]
    os: [linux]

  '@esbuild/linux-ppc64@0.25.5':
    resolution: {integrity: sha512-UZCmJ7r9X2fe2D6jBmkLBMQetXPXIsZjQJCjgwpVDz+YMcS6oFR27alkgGv3Oqkv07bxdvw7fyB71/olceJhkQ==}
    engines: {node: '>=18'}
    cpu: [ppc64]
    os: [linux]

  '@esbuild/linux-ppc64@0.25.6':
    resolution: {integrity: sha512-wyYKZ9NTdmAMb5730I38lBqVu6cKl4ZfYXIs31Baf8aoOtB4xSGi3THmDYt4BTFHk7/EcVixkOV2uZfwU3Q2Jw==}
    engines: {node: '>=18'}
    cpu: [ppc64]
    os: [linux]

  '@esbuild/linux-riscv64@0.25.5':
    resolution: {integrity: sha512-kTxwu4mLyeOlsVIFPfQo+fQJAV9mh24xL+y+Bm6ej067sYANjyEw1dNHmvoqxJUCMnkBdKpvOn0Ahql6+4VyeA==}
    engines: {node: '>=18'}
    cpu: [riscv64]
    os: [linux]

  '@esbuild/linux-riscv64@0.25.6':
    resolution: {integrity: sha512-KZh7bAGGcrinEj4qzilJ4hqTY3Dg2U82c8bv+e1xqNqZCrCyc+TL9AUEn5WGKDzm3CfC5RODE/qc96OcbIe33w==}
    engines: {node: '>=18'}
    cpu: [riscv64]
    os: [linux]

  '@esbuild/linux-s390x@0.25.5':
    resolution: {integrity: sha512-K2dSKTKfmdh78uJ3NcWFiqyRrimfdinS5ErLSn3vluHNeHVnBAFWC8a4X5N+7FgVE1EjXS1QDZbpqZBjfrqMTQ==}
    engines: {node: '>=18'}
    cpu: [s390x]
    os: [linux]

  '@esbuild/linux-s390x@0.25.6':
    resolution: {integrity: sha512-9N1LsTwAuE9oj6lHMyyAM+ucxGiVnEqUdp4v7IaMmrwb06ZTEVCIs3oPPplVsnjPfyjmxwHxHMF8b6vzUVAUGw==}
    engines: {node: '>=18'}
    cpu: [s390x]
    os: [linux]

  '@esbuild/linux-x64@0.25.5':
    resolution: {integrity: sha512-uhj8N2obKTE6pSZ+aMUbqq+1nXxNjZIIjCjGLfsWvVpy7gKCOL6rsY1MhRh9zLtUtAI7vpgLMK6DxjO8Qm9lJw==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [linux]

  '@esbuild/linux-x64@0.25.6':
    resolution: {integrity: sha512-A6bJB41b4lKFWRKNrWoP2LHsjVzNiaurf7wyj/XtFNTsnPuxwEBWHLty+ZE0dWBKuSK1fvKgrKaNjBS7qbFKig==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [linux]

  '@esbuild/netbsd-arm64@0.25.5':
    resolution: {integrity: sha512-pwHtMP9viAy1oHPvgxtOv+OkduK5ugofNTVDilIzBLpoWAM16r7b/mxBvfpuQDpRQFMfuVr5aLcn4yveGvBZvw==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [netbsd]

  '@esbuild/netbsd-arm64@0.25.6':
    resolution: {integrity: sha512-IjA+DcwoVpjEvyxZddDqBY+uJ2Snc6duLpjmkXm/v4xuS3H+3FkLZlDm9ZsAbF9rsfP3zeA0/ArNDORZgrxR/Q==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [netbsd]

  '@esbuild/netbsd-x64@0.25.5':
    resolution: {integrity: sha512-WOb5fKrvVTRMfWFNCroYWWklbnXH0Q5rZppjq0vQIdlsQKuw6mdSihwSo4RV/YdQ5UCKKvBy7/0ZZYLBZKIbwQ==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [netbsd]

  '@esbuild/netbsd-x64@0.25.6':
    resolution: {integrity: sha512-dUXuZr5WenIDlMHdMkvDc1FAu4xdWixTCRgP7RQLBOkkGgwuuzaGSYcOpW4jFxzpzL1ejb8yF620UxAqnBrR9g==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [netbsd]

  '@esbuild/openbsd-arm64@0.25.5':
    resolution: {integrity: sha512-7A208+uQKgTxHd0G0uqZO8UjK2R0DDb4fDmERtARjSHWxqMTye4Erz4zZafx7Di9Cv+lNHYuncAkiGFySoD+Mw==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [openbsd]

  '@esbuild/openbsd-arm64@0.25.6':
    resolution: {integrity: sha512-l8ZCvXP0tbTJ3iaqdNf3pjaOSd5ex/e6/omLIQCVBLmHTlfXW3zAxQ4fnDmPLOB1x9xrcSi/xtCWFwCZRIaEwg==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [openbsd]

  '@esbuild/openbsd-x64@0.25.5':
    resolution: {integrity: sha512-G4hE405ErTWraiZ8UiSoesH8DaCsMm0Cay4fsFWOOUcz8b8rC6uCvnagr+gnioEjWn0wC+o1/TAHt+It+MpIMg==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [openbsd]

  '@esbuild/openbsd-x64@0.25.6':
    resolution: {integrity: sha512-hKrmDa0aOFOr71KQ/19JC7az1P0GWtCN1t2ahYAf4O007DHZt/dW8ym5+CUdJhQ/qkZmI1HAF8KkJbEFtCL7gw==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [openbsd]

  '@esbuild/openharmony-arm64@0.25.6':
    resolution: {integrity: sha512-+SqBcAWoB1fYKmpWoQP4pGtx+pUUC//RNYhFdbcSA16617cchuryuhOCRpPsjCblKukAckWsV+aQ3UKT/RMPcA==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [openharmony]

  '@esbuild/sunos-x64@0.25.5':
    resolution: {integrity: sha512-l+azKShMy7FxzY0Rj4RCt5VD/q8mG/e+mDivgspo+yL8zW7qEwctQ6YqKX34DTEleFAvCIUviCFX1SDZRSyMQA==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [sunos]

  '@esbuild/sunos-x64@0.25.6':
    resolution: {integrity: sha512-dyCGxv1/Br7MiSC42qinGL8KkG4kX0pEsdb0+TKhmJZgCUDBGmyo1/ArCjNGiOLiIAgdbWgmWgib4HoCi5t7kA==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [sunos]

  '@esbuild/win32-arm64@0.25.5':
    resolution: {integrity: sha512-O2S7SNZzdcFG7eFKgvwUEZ2VG9D/sn/eIiz8XRZ1Q/DO5a3s76Xv0mdBzVM5j5R639lXQmPmSo0iRpHqUUrsxw==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [win32]

  '@esbuild/win32-arm64@0.25.6':
    resolution: {integrity: sha512-42QOgcZeZOvXfsCBJF5Afw73t4veOId//XD3i+/9gSkhSV6Gk3VPlWncctI+JcOyERv85FUo7RxuxGy+z8A43Q==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [win32]

  '@esbuild/win32-ia32@0.25.5':
    resolution: {integrity: sha512-onOJ02pqs9h1iMJ1PQphR+VZv8qBMQ77Klcsqv9CNW2w6yLqoURLcgERAIurY6QE63bbLuqgP9ATqajFLK5AMQ==}
    engines: {node: '>=18'}
    cpu: [ia32]
    os: [win32]

  '@esbuild/win32-ia32@0.25.6':
    resolution: {integrity: sha512-4AWhgXmDuYN7rJI6ORB+uU9DHLq/erBbuMoAuB4VWJTu5KtCgcKYPynF0YI1VkBNuEfjNlLrFr9KZPJzrtLkrQ==}
    engines: {node: '>=18'}
    cpu: [ia32]
    os: [win32]

  '@esbuild/win32-x64@0.25.5':
    resolution: {integrity: sha512-TXv6YnJ8ZMVdX+SXWVBo/0p8LTcrUYngpWjvm91TMjjBQii7Oz11Lw5lbDV5Y0TzuhSJHwiH4hEtC1I42mMS0g==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [win32]

  '@esbuild/win32-x64@0.25.6':
    resolution: {integrity: sha512-NgJPHHbEpLQgDH2MjQu90pzW/5vvXIZ7KOnPyNBm92A6WgZ/7b6fJyUBjoumLqeOQQGqY2QjQxRo97ah4Sj0cA==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [win32]

  '@eslint-community/eslint-utils@4.7.0':
    resolution: {integrity: sha512-dyybb3AcajC7uha6CvhdVRJqaKyn7w2YKqKyAN37NKYgZT36w+iRb0Dymmc5qEJ549c/S31cMMSFd75bteCpCw==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}
    peerDependencies:
      eslint: ^6.0.0 || ^7.0.0 || >=8.0.0

  '@eslint-community/regexpp@4.12.1':
    resolution: {integrity: sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==}
    engines: {node: ^12.0.0 || ^14.0.0 || >=16.0.0}

  '@eslint/config-array@0.21.0':
    resolution: {integrity: sha512-ENIdc4iLu0d93HeYirvKmrzshzofPw6VkZRKQGe9Nv46ZnWUzcF1xV01dcvEg/1wXUR61OmmlSfyeyO7EvjLxQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/config-helpers@0.3.0':
    resolution: {integrity: sha512-ViuymvFmcJi04qdZeDc2whTHryouGcDlaxPqarTD0ZE10ISpxGUVZGZDx4w01upyIynL3iu6IXH2bS1NhclQMw==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/core@0.14.0':
    resolution: {integrity: sha512-qIbV0/JZr7iSDjqAc60IqbLdsj9GDt16xQtWD+B78d/HAlvysGdZZ6rpJHGAc2T0FQx1X6thsSPdnoiGKdNtdg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/core@0.15.1':
    resolution: {integrity: sha512-bkOp+iumZCCbt1K1CmWf0R9pM5yKpDv+ZXtvSyQpudrI9kuFLp+bM2WOPXImuD/ceQuaa8f5pj93Y7zyECIGNA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/eslintrc@3.3.1':
    resolution: {integrity: sha512-gtF186CXhIl1p4pJNGZw8Yc6RlshoePRvE0X91oPGb3vZ8pM3qOS9W9NGPat9LziaBV7XrJWGylNQXkGcnM3IQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/js@9.30.1':
    resolution: {integrity: sha512-zXhuECFlyep42KZUhWjfvsmXGX39W8K8LFb8AWXM9gSV9dQB+MrJGLKvW6Zw0Ggnbpw0VHTtrhFXYe3Gym18jg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/object-schema@2.1.6':
    resolution: {integrity: sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/plugin-kit@0.3.3':
    resolution: {integrity: sha512-1+WqvgNMhmlAambTvT3KPtCl/Ibr68VldY2XY40SL1CE0ZXiakFR/cbTspaF5HsnpDMvcYYoJHfl4980NBjGag==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@fal-works/esbuild-plugin-global-externals@2.1.2':
    resolution: {integrity: sha512-cEee/Z+I12mZcFJshKcCqC8tuX5hG3s+d+9nZ3LabqKF1vKdF41B92pJVCBggjAGORAeOzyyDDKrZwIkLffeOQ==}

  '@fastify/busboy@3.1.1':
    resolution: {integrity: sha512-5DGmA8FTdB2XbDeEwc/5ZXBl6UbBAyBOOLlPuBnZ/N1SwdH9Ii+cOX3tBROlDgcTXxjOYnLMVoKk9+FXAw0CJw==}

  '@floating-ui/core@1.7.2':
    resolution: {integrity: sha512-wNB5ooIKHQc+Kui96jE/n69rHFWAVoxn5CAzL1Xdd8FG03cgY3MLO+GF9U3W737fYDSgPWA6MReKhBQBop6Pcw==}

  '@floating-ui/dom@1.7.2':
    resolution: {integrity: sha512-7cfaOQuCS27HD7DX+6ib2OrnW+b4ZBwDNnCcT0uTyidcmyWb03FnQqJybDBoCnpdxwBSfA94UAYlRCt7mV+TbA==}

  '@floating-ui/react-dom@2.1.2':
    resolution: {integrity: sha512-06okr5cgPzMNBy+Ycse2A6udMi4bqwW/zgBF/rwjcNqWkyr82Mcg8b0vjX8OJpZFy/FKjJmw6wV7t44kK6kW7A==}
    peerDependencies:
      react: '>=16.8.0'
      react-dom: '>=16.8.0'

  '@floating-ui/utils@0.2.10':
    resolution: {integrity: sha512-aGTxbpbg8/b5JfU1HXSrbH3wXZuLPJcNEcZQFMxLs3oSzgtVu6nFPkbbGGUvBcUjKV2YyB9Wxxabo+HEH9tcRQ==}

  '@floating-ui/vue@1.1.7':
    resolution: {integrity: sha512-idmAtbAIigGXN2SI5gItiXYBYtNfDTP9yIiObxgu13dgtG7ARCHlNfnR29GxP4LI4o13oiwsJ8wVgghj1lNqcw==}

  '@formatjs/intl-localematcher@0.6.1':
    resolution: {integrity: sha512-ePEgLgVCqi2BBFnTMWPfIghu6FkbZnnBVhO2sSxvLfrdFw7wCHAHiDoM2h4NRgjbaY7+B7HgOLZGkK187pZTZg==}

  '@fumari/json-schema-to-typescript@1.1.3':
    resolution: {integrity: sha512-KnaZAo5W769nOaxhPqEMTdjHdngugxmPpNS+Yr2U90iVxgmNAWwhSr8Nx3l+CUehJKNFzJi2C7clQXOfuPJegA==}
    engines: {node: '>=18.0.0'}

  '@headlessui/tailwindcss@0.2.2':
    resolution: {integrity: sha512-xNe42KjdyA4kfUKLLPGzME9zkH7Q3rOZ5huFihWNWOQFxnItxPB3/67yBI8/qBfY8nwBRx5GHn4VprsoluVMGw==}
    engines: {node: '>=10'}
    peerDependencies:
      tailwindcss: ^3.0 || ^4.0

  '@headlessui/vue@1.7.23':
    resolution: {integrity: sha512-JzdCNqurrtuu0YW6QaDtR2PIYCKPUWq28csDyMvN4zmGccmE7lz40Is6hc3LA4HFeCI7sekZ/PQMTNmn9I/4Wg==}
    engines: {node: '>=10'}
    peerDependencies:
      vue: ^3.2.0

  '@humanfs/core@0.19.1':
    resolution: {integrity: sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==}
    engines: {node: '>=18.18.0'}

  '@humanfs/node@0.16.6':
    resolution: {integrity: sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==}
    engines: {node: '>=18.18.0'}

  '@humanwhocodes/module-importer@1.0.1':
    resolution: {integrity: sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==}
    engines: {node: '>=12.22'}

  '@humanwhocodes/retry@0.3.1':
    resolution: {integrity: sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==}
    engines: {node: '>=18.18'}

  '@humanwhocodes/retry@0.4.3':
    resolution: {integrity: sha512-bV0Tgo9K4hfPCek+aMAn81RppFKv2ySDQeMoSZuvTASywNTnVJCArCZE2FWqpvIatKu7VMRLWlR1EazvVhDyhQ==}
    engines: {node: '>=18.18'}

  '@hyperjump/browser@1.3.1':
    resolution: {integrity: sha512-Le5XZUjnVqVjkgLYv6yyWgALat/0HpB1XaCPuCZ+GCFki9NvXloSZITIJ0H+wRW7mb9At1SxvohKBbNQbrr/cw==}
    engines: {node: '>=18.0.0'}

  '@hyperjump/json-pointer@1.1.1':
    resolution: {integrity: sha512-M0T3s7TC2JepoWPMZQn1W6eYhFh06OXwpMqL+8c5wMVpvnCKNsPgpu9u7WyCI03xVQti8JAeAy4RzUa6SYlJLA==}

  '@hyperjump/json-schema@1.16.1':
    resolution: {integrity: sha512-GCGQCOJMwAUTcCn7eDFOx5G6uOPFLG2O3tv+vMrHJUHwqeFo4GVO03BcsmX/Xy7dfTP4VgucXyoNjrtyoqb5wA==}
    peerDependencies:
      '@hyperjump/browser': ^1.1.0

  '@hyperjump/pact@1.4.0':
    resolution: {integrity: sha512-01Q7VY6BcAkp9W31Fv+ciiZycxZHGlR2N6ba9BifgyclHYHdbaZgITo0U6QMhYRlem4k8pf8J31/tApxvqAz8A==}

  '@hyperjump/uri@1.3.1':
    resolution: {integrity: sha512-2ecKymxf6prQMgrNpAvlx4RhsuM5+PFT6oh6uUTZdv5qmBv0RZvxv8LJ7oR30ZxGhdPdZAl4We/1NFc0nqHeAw==}

  '@iconify/types@2.0.0':
    resolution: {integrity: sha512-+wluvCrRhXrhyOmRDJ3q8mux9JkKy5SJ/v8ol2tu4FVjyYvtEzkc/3pK15ET6RKg4b4w4BmTk1+gsCUhf21Ykg==}

  '@iconify/utils@2.3.0':
    resolution: {integrity: sha512-GmQ78prtwYW6EtzXRU1rY+KwOKfz32PD7iJh6Iyqw68GiKuoZ2A6pRtzWONz5VQJbp50mEjXh/7NkumtrAgRKA==}

  '@img/sharp-darwin-arm64@0.34.3':
    resolution: {integrity: sha512-ryFMfvxxpQRsgZJqBd4wsttYQbCxsJksrv9Lw/v798JcQ8+w84mBWuXwl+TT0WJ/WrYOLaYpwQXi3sA9nTIaIg==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [arm64]
    os: [darwin]

  '@img/sharp-darwin-x64@0.34.3':
    resolution: {integrity: sha512-yHpJYynROAj12TA6qil58hmPmAwxKKC7reUqtGLzsOHfP7/rniNGTL8tjWX6L3CTV4+5P4ypcS7Pp+7OB+8ihA==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [x64]
    os: [darwin]

  '@img/sharp-libvips-darwin-arm64@1.2.0':
    resolution: {integrity: sha512-sBZmpwmxqwlqG9ueWFXtockhsxefaV6O84BMOrhtg/YqbTaRdqDE7hxraVE3y6gVM4eExmfzW4a8el9ArLeEiQ==}
    cpu: [arm64]
    os: [darwin]

  '@img/sharp-libvips-darwin-x64@1.2.0':
    resolution: {integrity: sha512-M64XVuL94OgiNHa5/m2YvEQI5q2cl9d/wk0qFTDVXcYzi43lxuiFTftMR1tOnFQovVXNZJ5TURSDK2pNe9Yzqg==}
    cpu: [x64]
    os: [darwin]

  '@img/sharp-libvips-linux-arm64@1.2.0':
    resolution: {integrity: sha512-RXwd0CgG+uPRX5YYrkzKyalt2OJYRiJQ8ED/fi1tq9WQW2jsQIn0tqrlR5l5dr/rjqq6AHAxURhj2DVjyQWSOA==}
    cpu: [arm64]
    os: [linux]

  '@img/sharp-libvips-linux-arm@1.2.0':
    resolution: {integrity: sha512-mWd2uWvDtL/nvIzThLq3fr2nnGfyr/XMXlq8ZJ9WMR6PXijHlC3ksp0IpuhK6bougvQrchUAfzRLnbsen0Cqvw==}
    cpu: [arm]
    os: [linux]

  '@img/sharp-libvips-linux-ppc64@1.2.0':
    resolution: {integrity: sha512-Xod/7KaDDHkYu2phxxfeEPXfVXFKx70EAFZ0qyUdOjCcxbjqyJOEUpDe6RIyaunGxT34Anf9ue/wuWOqBW2WcQ==}
    cpu: [ppc64]
    os: [linux]

  '@img/sharp-libvips-linux-s390x@1.2.0':
    resolution: {integrity: sha512-eMKfzDxLGT8mnmPJTNMcjfO33fLiTDsrMlUVcp6b96ETbnJmd4uvZxVJSKPQfS+odwfVaGifhsB07J1LynFehw==}
    cpu: [s390x]
    os: [linux]

  '@img/sharp-libvips-linux-x64@1.2.0':
    resolution: {integrity: sha512-ZW3FPWIc7K1sH9E3nxIGB3y3dZkpJlMnkk7z5tu1nSkBoCgw2nSRTFHI5pB/3CQaJM0pdzMF3paf9ckKMSE9Tg==}
    cpu: [x64]
    os: [linux]

  '@img/sharp-libvips-linuxmusl-arm64@1.2.0':
    resolution: {integrity: sha512-UG+LqQJbf5VJ8NWJ5Z3tdIe/HXjuIdo4JeVNADXBFuG7z9zjoegpzzGIyV5zQKi4zaJjnAd2+g2nna8TZvuW9Q==}
    cpu: [arm64]
    os: [linux]

  '@img/sharp-libvips-linuxmusl-x64@1.2.0':
    resolution: {integrity: sha512-SRYOLR7CXPgNze8akZwjoGBoN1ThNZoqpOgfnOxmWsklTGVfJiGJoC/Lod7aNMGA1jSsKWM1+HRX43OP6p9+6Q==}
    cpu: [x64]
    os: [linux]

  '@img/sharp-linux-arm64@0.34.3':
    resolution: {integrity: sha512-QdrKe3EvQrqwkDrtuTIjI0bu6YEJHTgEeqdzI3uWJOH6G1O8Nl1iEeVYRGdj1h5I21CqxSvQp1Yv7xeU3ZewbA==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [arm64]
    os: [linux]

  '@img/sharp-linux-arm@0.34.3':
    resolution: {integrity: sha512-oBK9l+h6KBN0i3dC8rYntLiVfW8D8wH+NPNT3O/WBHeW0OQWCjfWksLUaPidsrDKpJgXp3G3/hkmhptAW0I3+A==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [arm]
    os: [linux]

  '@img/sharp-linux-ppc64@0.34.3':
    resolution: {integrity: sha512-GLtbLQMCNC5nxuImPR2+RgrviwKwVql28FWZIW1zWruy6zLgA5/x2ZXk3mxj58X/tszVF69KK0Is83V8YgWhLA==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [ppc64]
    os: [linux]

  '@img/sharp-linux-s390x@0.34.3':
    resolution: {integrity: sha512-3gahT+A6c4cdc2edhsLHmIOXMb17ltffJlxR0aC2VPZfwKoTGZec6u5GrFgdR7ciJSsHT27BD3TIuGcuRT0KmQ==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [s390x]
    os: [linux]

  '@img/sharp-linux-x64@0.34.3':
    resolution: {integrity: sha512-8kYso8d806ypnSq3/Ly0QEw90V5ZoHh10yH0HnrzOCr6DKAPI6QVHvwleqMkVQ0m+fc7EH8ah0BB0QPuWY6zJQ==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [x64]
    os: [linux]

  '@img/sharp-linuxmusl-arm64@0.34.3':
    resolution: {integrity: sha512-vAjbHDlr4izEiXM1OTggpCcPg9tn4YriK5vAjowJsHwdBIdx0fYRsURkxLG2RLm9gyBq66gwtWI8Gx0/ov+JKQ==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [arm64]
    os: [linux]

  '@img/sharp-linuxmusl-x64@0.34.3':
    resolution: {integrity: sha512-gCWUn9547K5bwvOn9l5XGAEjVTTRji4aPTqLzGXHvIr6bIDZKNTA34seMPgM0WmSf+RYBH411VavCejp3PkOeQ==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [x64]
    os: [linux]

  '@img/sharp-wasm32@0.34.3':
    resolution: {integrity: sha512-+CyRcpagHMGteySaWos8IbnXcHgfDn7pO2fiC2slJxvNq9gDipYBN42/RagzctVRKgxATmfqOSulgZv5e1RdMg==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [wasm32]

  '@img/sharp-win32-arm64@0.34.3':
    resolution: {integrity: sha512-MjnHPnbqMXNC2UgeLJtX4XqoVHHlZNd+nPt1kRPmj63wURegwBhZlApELdtxM2OIZDRv/DFtLcNhVbd1z8GYXQ==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [arm64]
    os: [win32]

  '@img/sharp-win32-ia32@0.34.3':
    resolution: {integrity: sha512-xuCdhH44WxuXgOM714hn4amodJMZl3OEvf0GVTm0BEyMeA2to+8HEdRPShH0SLYptJY1uBw+SCFP9WVQi1Q/cw==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [ia32]
    os: [win32]

  '@img/sharp-win32-x64@0.34.3':
    resolution: {integrity: sha512-OWwz05d++TxzLEv4VnsTz5CmZ6mI6S05sfQGEMrNrQcOEERbX46332IvE7pO/EUiw7jUrrS40z/M7kPyjfl04g==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [x64]
    os: [win32]

  '@internationalized/date@3.8.2':
    resolution: {integrity: sha512-/wENk7CbvLbkUvX1tu0mwq49CVkkWpkXubGel6birjRPyo6uQ4nQpnq5xZu823zRCwwn82zgHrvgF1vZyvmVgA==}

  '@internationalized/number@3.6.3':
    resolution: {integrity: sha512-p+Zh1sb6EfrfVaS86jlHGQ9HA66fJhV9x5LiE5vCbZtXEHAuhcmUZUdZ4WrFpUBfNalr2OkAJI5AcKEQF+Lebw==}

  '@ioredis/commands@1.2.0':
    resolution: {integrity: sha512-Sx1pU8EM64o2BrqNpEO1CNLtKQwyhuXuqyfH7oGKCk+1a33d2r5saW8zNwm3j6BTExtjrv2BxTgzzkMwts6vGg==}

  '@isaacs/cliui@8.0.2':
    resolution: {integrity: sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==}
    engines: {node: '>=12'}

  '@isaacs/fs-minipass@4.0.1':
    resolution: {integrity: sha512-wgm9Ehl2jpeqP3zw/7mo3kRHFp5MEDhqAdwy1fTGkHAwnkGOVsgpvQhL8B5n1qlb01jV3n/bI0ZfZp5lWA1k4w==}
    engines: {node: '>=18.0.0'}

  '@jridgewell/gen-mapping@0.3.12':
    resolution: {integrity: sha512-OuLGC46TjB5BbN1dH8JULVVZY4WTdkF7tV9Ys6wLL1rubZnCMstOhNHueU5bLCrnRuDhKPDM4g6sw4Bel5Gzqg==}

  '@jridgewell/resolve-uri@3.1.2':
    resolution: {integrity: sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/source-map@0.3.6':
    resolution: {integrity: sha512-1ZJTZebgqllO79ue2bm3rIGud/bOe0pP5BjSRCRxxYkEZS8STV7zN84UBbiYu7jy+eCKSnVIUgoWWE/tt+shMQ==}

  '@jridgewell/sourcemap-codec@1.5.4':
    resolution: {integrity: sha512-VT2+G1VQs/9oz078bLrYbecdZKs912zQlkelYpuf+SXF+QvZDYJlbx/LSx+meSAwdDFnF8FVXW92AVjjkVmgFw==}

  '@jridgewell/trace-mapping@0.3.29':
    resolution: {integrity: sha512-uw6guiW/gcAGPDhLmd77/6lW8QLeiV5RUTsAX46Db6oLhGaVj4lhnPwb184s1bkc8kdVg/+h988dro8GRDpmYQ==}

  '@jsdevtools/ono@7.1.3':
    resolution: {integrity: sha512-4JQNk+3mVzK3xh2rqd6RB4J46qUR19azEHBneZyTZM+c456qOrbbM/5xcR8huNCCcbVt7+UmizG6GuUvPvKUYg==}

  '@lezer/common@1.2.3':
    resolution: {integrity: sha512-w7ojc8ejBqr2REPsWxJjrMFsA/ysDCFICn8zEOR9mrqzOu2amhITYuLD8ag6XZf0CFXDrhKqw7+tW8cX66NaDA==}

  '@lezer/css@1.3.0':
    resolution: {integrity: sha512-pBL7hup88KbI7hXnZV3PQsn43DHy6TWyzuyk2AO9UyoXcDltvIdqWKE1dLL/45JVZ+YZkHe1WVHqO6wugZZWcw==}

  '@lezer/highlight@1.2.1':
    resolution: {integrity: sha512-Z5duk4RN/3zuVO7Jq0pGLJ3qynpxUVsh7IbUbGj88+uV2ApSAn6kWg2au3iJb+0Zi7kKtqffIESgNcRXWZWmSA==}

  '@lezer/html@1.3.10':
    resolution: {integrity: sha512-dqpT8nISx/p9Do3AchvYGV3qYc4/rKr3IBZxlHmpIKam56P47RSHkSF5f13Vu9hebS1jM0HmtJIwLbWz1VIY6w==}

  '@lezer/javascript@1.5.1':
    resolution: {integrity: sha512-ATOImjeVJuvgm3JQ/bpo2Tmv55HSScE2MTPnKRMRIPx2cLhHGyX2VnqpHhtIV1tVzIjZDbcWQm+NCTF40ggZVw==}

  '@lezer/json@1.0.3':
    resolution: {integrity: sha512-BP9KzdF9Y35PDpv04r0VeSTKDeox5vVr3efE7eBbx3r4s3oNLfunchejZhjArmeieBH+nVOpgIiBJpEAv8ilqQ==}

  '@lezer/lr@1.4.2':
    resolution: {integrity: sha512-pu0K1jCIdnQ12aWNaAVU5bzi7Bd1w54J3ECgANPmYLtQKP0HBj2cE/5coBD66MT10xbtIuUr7tg0Shbsvk0mDA==}

  '@lezer/xml@1.0.6':
    resolution: {integrity: sha512-CdDwirL0OEaStFue/66ZmFSeppuL6Dwjlk8qk153mSQwiSH/Dlri4GNymrNWnUmPl2Um7QfV1FO9KFUyX3Twww==}

  '@lezer/yaml@1.0.3':
    resolution: {integrity: sha512-GuBLekbw9jDBDhGur82nuwkxKQ+a3W5H0GfaAthDXcAu+XdpS43VlnxA9E9hllkpSP5ellRDKjLLj7Lu9Wr6xA==}

  '@manypkg/find-root@1.1.0':
    resolution: {integrity: sha512-mki5uBvhHzO8kYYix/WRy2WX8S3B5wdVSc9D6KcU5lQNglP2yt58/VfLuAK49glRXChosY8ap2oJ1qgma3GUVA==}

  '@manypkg/get-packages@1.1.3':
    resolution: {integrity: sha512-fo+QhuU3qE/2TQMQmbVMqaQ6EWbMhi4ABWP+O4AM1NqPBuy0OrApV5LO6BrrgnhtAHS2NH6RrVk9OL181tTi8A==}

  '@mapbox/node-pre-gyp@2.0.0':
    resolution: {integrity: sha512-llMXd39jtP0HpQLVI37Bf1m2ADlEb35GYSh1SDSLsBhR+5iCxiNGlT31yqbNtVHygHAtMy6dWFERpU2JgufhPg==}
    engines: {node: '>=18'}
    hasBin: true

  '@marijn/find-cluster-break@1.0.2':
    resolution: {integrity: sha512-l0h88YhZFyKdXIFNfSWpyjStDjGHwZ/U7iobcK1cQQD8sejsONdQtTVU+1wVN1PBw40PiiHB1vA5S7VTfQiP9g==}

  '@mdx-js/esbuild@3.1.0':
    resolution: {integrity: sha512-Jk42xUb1SEJxh6n2GBAtJjQISFIZccjz8XVEsHVhrlvZJAJziIxR9KyaFF6nTeTB/jCAFQGDgO7+oMRH/ApRsg==}
    peerDependencies:
      esbuild: '>=0.14.0'

  '@mdx-js/mdx@3.1.0':
    resolution: {integrity: sha512-/QxEhPAvGwbQmy1Px8F899L5Uc2KZ6JtXwlCgJmjSTBedwOZkByYcBG4GceIGPXRDsmfxhHazuS+hlOShRLeDw==}

  '@mermaid-js/parser@0.6.1':
    resolution: {integrity: sha512-lCQNpV8R4lgsGcjX5667UiuDLk2micCtjtxR1YKbBXvN5w2v+FeLYoHrTSSrjwXdMcDYvE4ZBPvKT31dfeSmmA==}

  '@mjackson/node-fetch-server@0.2.0':
    resolution: {integrity: sha512-EMlH1e30yzmTpGLQjlFmaDAjyOeZhng1/XCd7DExR8PNAnG/G1tyruZxEoUe11ClnwGhGrtsdnyyUx1frSzjng==}

  '@napi-rs/wasm-runtime@0.2.11':
    resolution: {integrity: sha512-9DPkXtvHydrcOsopiYpUgPHpmj0HWZKMUnL2dZqpvC42lsratuBG06V5ipyno0fUek5VlFsNQ+AcFATSrJXgMA==}

  '@netlify/binary-info@1.0.0':
    resolution: {integrity: sha512-4wMPu9iN3/HL97QblBsBay3E1etIciR84izI3U+4iALY+JHCrI+a2jO0qbAZ/nxKoegypYEaiiqWXylm+/zfrw==}

  '@netlify/blobs@9.1.2':
    resolution: {integrity: sha512-7dMjExSH4zj4ShvLem49mE3mf0K171Tx2pV4WDWhJbRUWW3SJIR2qntz0LvUGS97N5HO1SmnzrgWUhEXCsApiw==}
    engines: {node: ^14.16.0 || >=16.0.0}

  '@netlify/dev-utils@2.2.0':
    resolution: {integrity: sha512-5XUvZuffe3KetyhbWwd4n2ktd7wraocCYw10tlM+/u/95iAz29GjNiuNxbCD1T6Bn1MyGc4QLVNKOWhzJkVFAw==}
    engines: {node: ^14.16.0 || >=16.0.0}

  '@netlify/functions@3.1.10':
    resolution: {integrity: sha512-sI93kcJ2cUoMgDRPnrEm0lZhuiDVDqM6ngS/UbHTApIH3+eg3yZM5p/0SDFQQq9Bad0/srFmgBmTdXushzY5kg==}
    engines: {node: '>=14.0.0'}

  '@netlify/open-api@2.37.0':
    resolution: {integrity: sha512-zXnRFkxgNsalSgU8/vwTWnav3R+8KG8SsqHxqaoJdjjJtnZR7wo3f+qqu4z+WtZ/4V7fly91HFUwZ6Uz2OdW7w==}
    engines: {node: '>=14.8.0'}

  '@netlify/runtime-utils@1.3.1':
    resolution: {integrity: sha512-7/vIJlMYrPJPlEW84V2yeRuG3QBu66dmlv9neTmZ5nXzwylhBEOhy11ai+34A8mHCSZI4mKns25w3HM9kaDdJg==}
    engines: {node: '>=16.0.0'}

  '@netlify/serverless-functions-api@1.41.2':
    resolution: {integrity: sha512-pfCkH50JV06SGMNsNPjn8t17hOcId4fA881HeYQgMBOrewjsw4csaYgHEnCxCEu24Y5x75E2ULbFpqm9CvRCqw==}
    engines: {node: '>=18.0.0'}

  '@netlify/serverless-functions-api@2.1.2':
    resolution: {integrity: sha512-uEFA0LAcBGd3+fgDSLkTTsrgyooKqu8mN/qA+F/COS2A7NFWRcLFnjVKH/xZhxq+oQkrSa+XPS9qj2wgQosiQw==}
    engines: {node: '>=18.0.0'}

  '@netlify/zip-it-and-ship-it@12.2.0':
    resolution: {integrity: sha512-64tKrE4bGGh/uChrCKQ1g6rDmY+Jl95bh+GGeP1mzIOcXmZHFja8sWMyaKv8iOxIiPdaJCQuhadSmE4ATUDVFg==}
    engines: {node: '>=18.14.0'}
    hasBin: true

  '@next/bundle-analyzer@15.3.5':
    resolution: {integrity: sha512-r1tlg7N4IUWpdqdy8/6bf7pvo2yeN9Oc6OHEiMsMfIooJ5k37Odi9HC1qBS4soULNE7FiQ18JP/TdmQKiaIkoA==}

  '@next/env@15.3.5':
    resolution: {integrity: sha512-7g06v8BUVtN2njAX/r8gheoVffhiKFVt4nx74Tt6G4Hqw9HCLYQVx/GkH2qHvPtAHZaUNZ0VXAa0pQP6v1wk7g==}

  '@next/eslint-plugin-next@15.3.5':
    resolution: {integrity: sha512-BZwWPGfp9po/rAnJcwUBaM+yT/+yTWIkWdyDwc74G9jcfTrNrmsHe+hXHljV066YNdVs8cxROxX5IgMQGX190w==}

  '@next/swc-darwin-arm64@15.3.5':
    resolution: {integrity: sha512-lM/8tilIsqBq+2nq9kbTW19vfwFve0NR7MxfkuSUbRSgXlMQoJYg+31+++XwKVSXk4uT23G2eF/7BRIKdn8t8w==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [darwin]

  '@next/swc-darwin-x64@15.3.5':
    resolution: {integrity: sha512-WhwegPQJ5IfoUNZUVsI9TRAlKpjGVK0tpJTL6KeiC4cux9774NYE9Wu/iCfIkL/5J8rPAkqZpG7n+EfiAfidXA==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [darwin]

  '@next/swc-linux-arm64-gnu@15.3.5':
    resolution: {integrity: sha512-LVD6uMOZ7XePg3KWYdGuzuvVboxujGjbcuP2jsPAN3MnLdLoZUXKRc6ixxfs03RH7qBdEHCZjyLP/jBdCJVRJQ==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [linux]

  '@next/swc-linux-arm64-musl@15.3.5':
    resolution: {integrity: sha512-k8aVScYZ++BnS2P69ClK7v4nOu702jcF9AIHKu6llhHEtBSmM2zkPGl9yoqbSU/657IIIb0QHpdxEr0iW9z53A==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [linux]

  '@next/swc-linux-x64-gnu@15.3.5':
    resolution: {integrity: sha512-2xYU0DI9DGN/bAHzVwADid22ba5d/xrbrQlr2U+/Q5WkFUzeL0TDR963BdrtLS/4bMmKZGptLeg6282H/S2i8A==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [linux]

  '@next/swc-linux-x64-musl@15.3.5':
    resolution: {integrity: sha512-TRYIqAGf1KCbuAB0gjhdn5Ytd8fV+wJSM2Nh2is/xEqR8PZHxfQuaiNhoF50XfY90sNpaRMaGhF6E+qjV1b9Tg==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [linux]

  '@next/swc-win32-arm64-msvc@15.3.5':
    resolution: {integrity: sha512-h04/7iMEUSMY6fDGCvdanKqlO1qYvzNxntZlCzfE8i5P0uqzVQWQquU1TIhlz0VqGQGXLrFDuTJVONpqGqjGKQ==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [win32]

  '@next/swc-win32-x64-msvc@15.3.5':
    resolution: {integrity: sha512-5fhH6fccXxnX2KhllnGhkYMndhOiLOLEiVGYjP2nizqeGWkN10sA9taATlXwake2E2XMvYZjjz0Uj7T0y+z1yw==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [win32]

  '@noble/hashes@1.8.0':
    resolution: {integrity: sha512-jCs9ldd7NwzpgXDIf6P3+NrHh9/sD6CQdxHyjQI+h/6rDNo88ypBxxz45UDuZHz9r3tNz7N/VInSVoVdtXEI4A==}
    engines: {node: ^14.21.3 || >=16}

  '@nodelib/fs.scandir@2.1.5':
    resolution: {integrity: sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==}
    engines: {node: '>= 8'}

  '@nodelib/fs.stat@2.0.5':
    resolution: {integrity: sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==}
    engines: {node: '>= 8'}

  '@nodelib/fs.walk@1.2.8':
    resolution: {integrity: sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==}
    engines: {node: '>= 8'}

  '@npmcli/git@4.1.0':
    resolution: {integrity: sha512-9hwoB3gStVfa0N31ymBmrX+GuDGdVA/QWShZVqE0HK2Af+7QGGrCTbZia/SW0ImUTjTne7SP91qxDmtXvDHRPQ==}
    engines: {node: ^14.17.0 || ^16.13.0 || >=18.0.0}

  '@npmcli/package-json@4.0.1':
    resolution: {integrity: sha512-lRCEGdHZomFsURroh522YvA/2cVb9oPIJrjHanCJZkiasz1BzcnLr3tBJhlV7S86MBJBuAQ33is2D60YitZL2Q==}
    engines: {node: ^14.17.0 || ^16.13.0 || >=18.0.0}

  '@npmcli/promise-spawn@6.0.2':
    resolution: {integrity: sha512-gGq0NJkIGSwdbUt4yhdF8ZrmkGKVz9vAdVzpOfnom+V8PLSmSOVhZwbNvZZS1EYcJN5hzzKBxmmVVAInM6HQLg==}
    engines: {node: ^14.17.0 || ^16.13.0 || >=18.0.0}

  '@octokit/app@16.0.1':
    resolution: {integrity: sha512-kgTeTsWmpUX+s3Fs4EK4w1K+jWCDB6ClxLSWUWTyhlw7+L3jHtuXDR4QtABu2GsmCMdk67xRhruiXotS3ay3Yw==}
    engines: {node: '>= 20'}

  '@octokit/auth-app@8.0.1':
    resolution: {integrity: sha512-P2J5pB3pjiGwtJX4WqJVYCtNkcZ+j5T2Wm14aJAEIC3WJOrv12jvBley3G1U/XI8q9o1A7QMG54LiFED2BiFlg==}
    engines: {node: '>= 20'}

  '@octokit/auth-oauth-app@9.0.1':
    resolution: {integrity: sha512-TthWzYxuHKLAbmxdFZwFlmwVyvynpyPmjwc+2/cI3cvbT7mHtsAW9b1LvQaNnAuWL+pFnqtxdmrU8QpF633i1g==}
    engines: {node: '>= 20'}

  '@octokit/auth-oauth-device@8.0.1':
    resolution: {integrity: sha512-TOqId/+am5yk9zor0RGibmlqn4V0h8vzjxlw/wYr3qzkQxl8aBPur384D1EyHtqvfz0syeXji4OUvKkHvxk/Gw==}
    engines: {node: '>= 20'}

  '@octokit/auth-oauth-user@6.0.0':
    resolution: {integrity: sha512-GV9IW134PHsLhtUad21WIeP9mlJ+QNpFd6V9vuPWmaiN25HEJeEQUcS4y5oRuqCm9iWDLtfIs+9K8uczBXKr6A==}
    engines: {node: '>= 20'}

  '@octokit/auth-token@6.0.0':
    resolution: {integrity: sha512-P4YJBPdPSpWTQ1NU4XYdvHvXJJDxM6YwpS0FZHRgP7YFkdVxsWcpWGy/NVqlAA7PcPCnMacXlRm1y2PFZRWL/w==}
    engines: {node: '>= 20'}

  '@octokit/auth-unauthenticated@7.0.1':
    resolution: {integrity: sha512-qVq1vdjLLZdE8kH2vDycNNjuJRCD1q2oet1nA/GXWaYlpDxlR7rdVhX/K/oszXslXiQIiqrQf+rdhDlA99JdTQ==}
    engines: {node: '>= 20'}

  '@octokit/core@7.0.2':
    resolution: {integrity: sha512-ODsoD39Lq6vR6aBgvjTnA3nZGliknKboc9Gtxr7E4WDNqY24MxANKcuDQSF0jzapvGb3KWOEDrKfve4HoWGK+g==}
    engines: {node: '>= 20'}

  '@octokit/endpoint@11.0.0':
    resolution: {integrity: sha512-hoYicJZaqISMAI3JfaDr1qMNi48OctWuOih1m80bkYow/ayPw6Jj52tqWJ6GEoFTk1gBqfanSoI1iY99Z5+ekQ==}
    engines: {node: '>= 20'}

  '@octokit/graphql@9.0.1':
    resolution: {integrity: sha512-j1nQNU1ZxNFx2ZtKmL4sMrs4egy5h65OMDmSbVyuCzjOcwsHq6EaYjOTGXPQxgfiN8dJ4CriYHk6zF050WEULg==}
    engines: {node: '>= 20'}

  '@octokit/oauth-app@8.0.1':
    resolution: {integrity: sha512-QnhMYEQpnYbEPn9cae+wXL2LuPMFglmfeuDJXXsyxIXdoORwkLK8y0cHhd/5du9MbO/zdG/BXixzB7EEwU63eQ==}
    engines: {node: '>= 20'}

  '@octokit/oauth-authorization-url@8.0.0':
    resolution: {integrity: sha512-7QoLPRh/ssEA/HuHBHdVdSgF8xNLz/Bc5m9fZkArJE5bb6NmVkDm3anKxXPmN1zh6b5WKZPRr3697xKT/yM3qQ==}
    engines: {node: '>= 20'}

  '@octokit/oauth-methods@6.0.0':
    resolution: {integrity: sha512-Q8nFIagNLIZgM2odAraelMcDssapc+lF+y3OlcIPxyAU+knefO8KmozGqfnma1xegRDP4z5M73ABsamn72bOcA==}
    engines: {node: '>= 20'}

  '@octokit/openapi-types@25.1.0':
    resolution: {integrity: sha512-idsIggNXUKkk0+BExUn1dQ92sfysJrje03Q0bv0e+KPLrvyqZF8MnBpFz8UNfYDwB3Ie7Z0TByjWfzxt7vseaA==}

  '@octokit/openapi-webhooks-types@11.0.0':
    resolution: {integrity: sha512-ZBzCFj98v3SuRM7oBas6BHZMJRadlnDoeFfvm1olVxZnYeU6Vh97FhPxyS5aLh5pN51GYv2I51l/hVUAVkGBlA==}

  '@octokit/plugin-paginate-graphql@6.0.0':
    resolution: {integrity: sha512-crfpnIoFiBtRkvPqOyLOsw12XsveYuY2ieP6uYDosoUegBJpSVxGwut9sxUgFFcll3VTOTqpUf8yGd8x1OmAkQ==}
    engines: {node: '>= 20'}
    peerDependencies:
      '@octokit/core': '>=6'

  '@octokit/plugin-paginate-rest@13.0.1':
    resolution: {integrity: sha512-m1KvHlueScy4mQJWvFDCxFBTIdXS0K1SgFGLmqHyX90mZdCIv6gWBbKRhatxRjhGlONuTK/hztYdaqrTXcFZdQ==}
    engines: {node: '>= 20'}
    peerDependencies:
      '@octokit/core': '>=6'

  '@octokit/plugin-rest-endpoint-methods@16.0.0':
    resolution: {integrity: sha512-kJVUQk6/dx/gRNLWUnAWKFs1kVPn5O5CYZyssyEoNYaFedqZxsfYs7DwI3d67hGz4qOwaJ1dpm07hOAD1BXx6g==}
    engines: {node: '>= 20'}
    peerDependencies:
      '@octokit/core': '>=6'

  '@octokit/plugin-retry@8.0.1':
    resolution: {integrity: sha512-KUoYR77BjF5O3zcwDQHRRZsUvJwepobeqiSSdCJ8lWt27FZExzb0GgVxrhhfuyF6z2B2zpO0hN5pteni1sqWiw==}
    engines: {node: '>= 20'}
    peerDependencies:
      '@octokit/core': '>=7'

  '@octokit/plugin-throttling@11.0.1':
    resolution: {integrity: sha512-S+EVhy52D/272L7up58dr3FNSMXWuNZolkL4zMJBNIfIxyZuUcczsQAU4b5w6dewJXnKYVgSHSV5wxitMSW1kw==}
    engines: {node: '>= 20'}
    peerDependencies:
      '@octokit/core': ^7.0.0

  '@octokit/request-error@7.0.0':
    resolution: {integrity: sha512-KRA7VTGdVyJlh0cP5Tf94hTiYVVqmt2f3I6mnimmaVz4UG3gQV/k4mDJlJv3X67iX6rmN7gSHCF8ssqeMnmhZg==}
    engines: {node: '>= 20'}

  '@octokit/request@10.0.2':
    resolution: {integrity: sha512-iYj4SJG/2bbhh+iIpFmG5u49DtJ4lipQ+aPakjL9OKpsGY93wM8w06gvFbEQxcMsZcCvk5th5KkIm2m8o14aWA==}
    engines: {node: '>= 20'}

  '@octokit/types@14.1.0':
    resolution: {integrity: sha512-1y6DgTy8Jomcpu33N+p5w58l6xyt55Ar2I91RPiIA0xCJBXyUAhXCcmZaDWSANiha7R9a6qJJ2CRomGPZ6f46g==}

  '@octokit/webhooks-methods@6.0.0':
    resolution: {integrity: sha512-MFlzzoDJVw/GcbfzVC1RLR36QqkTLUf79vLVO3D+xn7r0QgxnFoLZgtrzxiQErAjFUOdH6fas2KeQJ1yr/qaXQ==}
    engines: {node: '>= 20'}

  '@octokit/webhooks@14.0.0':
    resolution: {integrity: sha512-IZV4vg/s1pqIpCs86a0tp5FQ/O94DUaqksMdNrXFSaE037TXsB+fIhr8OVig09oEx3WazVgE6B2U+u7/Fvdlsw==}
    engines: {node: '>= 20'}

  '@one-ini/wasm@0.1.1':
    resolution: {integrity: sha512-XuySG1E38YScSJoMlqovLru4KTUNSjgVTIjyh7qMX6aNN5HY5Ct5LhRJdxO79JtTzKfzV/bnWpz+zquYrISsvw==}

  '@oozcitak/dom@1.15.10':
    resolution: {integrity: sha512-0JT29/LaxVgRcGKvHmSrUTEvZ8BXvZhGl2LASRUgHqDTC1M5g1pLmVv56IYNyt3bG2CUjDkc67wnyZC14pbQrQ==}
    engines: {node: '>=8.0'}

  '@oozcitak/infra@1.0.8':
    resolution: {integrity: sha512-JRAUc9VR6IGHOL7OGF+yrvs0LO8SlqGnPAMqyzOuFZPSZSXI7Xf2O9+awQPSMXgIWGtgUf/dA6Hs6X6ySEaWTg==}
    engines: {node: '>=6.0'}

  '@oozcitak/url@1.0.4':
    resolution: {integrity: sha512-kDcD8y+y3FCSOvnBI6HJgl00viO/nGbQoCINmQ0h98OhnGITrWR3bOGfwYCthgcrV8AnTJz8MzslTQbC3SOAmw==}
    engines: {node: '>=8.0'}

  '@oozcitak/util@8.3.8':
    resolution: {integrity: sha512-T8TbSnGsxo6TDBJx/Sgv/BlVJL3tshxZP7Aq5R1mSnM5OcHY2dQaxLMu2+E8u3gN0MLOzdjurqN4ZRVuzQycOQ==}
    engines: {node: '>=8.0'}

  '@opentelemetry/api@1.9.0':
    resolution: {integrity: sha512-3giAOQvZiH5F9bMlMiv8+GSPMeqg0dbaeo58/0SlA9sxSqZhnUtxzX9/2FzyhS9sWQf5S0GJE0AKBrFqjpeYcg==}
    engines: {node: '>=8.0.0'}

  '@orama/cuid2@2.2.3':
    resolution: {integrity: sha512-Lcak3chblMejdlSHgYU2lS2cdOhDpU6vkfIJH4m+YKvqQyLqs1bB8+w6NT1MG5bO12NUK2GFc34Mn2xshMIQ1g==}

  '@orama/orama@3.1.10':
    resolution: {integrity: sha512-YNou2xlCIgPhMDe1TBEmp1wsAPFCL7Fd11rct7YfXYYiNAVBNL2rWoEydJRDJFVmqgt0l6mzSg35sDQ3i8yfKQ==}
    engines: {node: '>= 20.0.0'}

  '@orama/tokenizers@3.1.10':
    resolution: {integrity: sha512-XWS/xzcki09MGfiNyHO1s0i7ywUVOzoRERmfclmHcZhIcu3obctSGIeE8v14exhZwv975svfLepJXOnDO+jcNA==}
    engines: {node: '>= 20.0.0'}

  '@oramacloud/client@2.1.4':
    resolution: {integrity: sha512-uNPFs4wq/iOPbggCwTkVNbIr64Vfd7ZS/h+cricXVnzXWocjDTfJ3wLL4lr0qiSu41g8z+eCAGBqJ30RO2O4AA==}

  '@oxc-transform/binding-android-arm64@0.76.0':
    resolution: {integrity: sha512-NjYRsQrBUJz1elPWXY8u6VRr2YlegRS+1fDTvxnofelIXcZbP6Klp9kR7FnOKFvT4nHMF42M6TtOwpt75noW7A==}
    engines: {node: '>=14.0.0'}
    cpu: [arm64]
    os: [android]

  '@oxc-transform/binding-darwin-arm64@0.76.0':
    resolution: {integrity: sha512-Sq1ikZFG9xFXQ/qnWH00w57VdM9AQmXm+o1VcP4W/zJ1bwUpjAIT5nre2ixpMejAW6g/Nn+INIq+QLuTeeu76A==}
    engines: {node: '>=14.0.0'}
    cpu: [arm64]
    os: [darwin]

  '@oxc-transform/binding-darwin-x64@0.76.0':
    resolution: {integrity: sha512-z9rW+H5ConXji4AsnGYD57O6IqHgtPWl4zomFKAZkDNIgnH4lAMTFxJooWqibU6md3eqohzV97rK1ZXY3ioENw==}
    engines: {node: '>=14.0.0'}
    cpu: [x64]
    os: [darwin]

  '@oxc-transform/binding-freebsd-x64@0.76.0':
    resolution: {integrity: sha512-Lm2ySyYItojGqoKc1qtU/beARNdPLlXRtbgH/zqRh7Gy0nsMe0DHmsMciL57RJQxDb7LJ1eztE/r/QvgeDNPLg==}
    engines: {node: '>=14.0.0'}
    cpu: [x64]
    os: [freebsd]

  '@oxc-transform/binding-linux-arm-gnueabihf@0.76.0':
    resolution: {integrity: sha512-cwWM8r/cxsQTohCFgzQCxP6XzYb3tciVSB6x70KpG/u6aQItks+zCqoMSu7cgL6McBEt/fvP2pGzNz5ZDEYq8Q==}
    engines: {node: '>=14.0.0'}
    cpu: [arm]
    os: [linux]

  '@oxc-transform/binding-linux-arm-musleabihf@0.76.0':
    resolution: {integrity: sha512-0qsWf7u2LdSZTwQ5cMw2kESRy/mnPzI0hRX6/lJ5frRJjEJ1OOH8mQkUOx6ctowQlipv/VDVR+ZSTqikPPdGow==}
    engines: {node: '>=14.0.0'}
    cpu: [arm]
    os: [linux]

  '@oxc-transform/binding-linux-arm64-gnu@0.76.0':
    resolution: {integrity: sha512-WpxFWdocseSUjbUMQAG9NMCMo/SSUkjBM3knYRW9P2HIaD961q0+NAHQu4ZNiZ5yyXeiT/QjpZjKQtrex8ab6w==}
    engines: {node: '>=14.0.0'}
    cpu: [arm64]
    os: [linux]

  '@oxc-transform/binding-linux-arm64-musl@0.76.0':
    resolution: {integrity: sha512-acoILN/8p5o0ut1bQlPxMSPqJ2JxgEl5bv94O7aIrQda0GvKKwSZvrtNdRqRA5DV5PusreuKnEHjHoe1hPAwaw==}
    engines: {node: '>=14.0.0'}
    cpu: [arm64]
    os: [linux]

  '@oxc-transform/binding-linux-riscv64-gnu@0.76.0':
    resolution: {integrity: sha512-Y9UNgfs4BaMxtoN7NYON8BqTTUrnTgXtCbhWxAw2VoTV/VQXEoywMKMEFZoSmrzu+FF467GPWgWS6VqvgvidOQ==}
    engines: {node: '>=14.0.0'}
    cpu: [riscv64]
    os: [linux]

  '@oxc-transform/binding-linux-s390x-gnu@0.76.0':
    resolution: {integrity: sha512-WwG79icPeZuuAfzETKU7tr7RHvlV25Sfzt02NqXdWwfFts2afLCpt1OVam11iLA30Kgj8q7HysZjhbIgEZUpkg==}
    engines: {node: '>=14.0.0'}
    cpu: [s390x]
    os: [linux]

  '@oxc-transform/binding-linux-x64-gnu@0.76.0':
    resolution: {integrity: sha512-BcDXgbDwfyiIVM8gtkPCL1pkic+YCPrRIMcYyoYuZwsHm5j/kz7mImXMNsT/Sad3fRblFfGrssoTzKn2i3zodA==}
    engines: {node: '>=14.0.0'}
    cpu: [x64]
    os: [linux]

  '@oxc-transform/binding-linux-x64-musl@0.76.0':
    resolution: {integrity: sha512-jlsKpMap4e2yQeLvjlpz+qAUWtbFg3310NLB48NM9xIRfPddlF9RRguIrIOnssK9MzNeUKHP3H2t6XJs68Uigw==}
    engines: {node: '>=14.0.0'}
    cpu: [x64]
    os: [linux]

  '@oxc-transform/binding-wasm32-wasi@0.76.0':
    resolution: {integrity: sha512-fVMo9oickaMJSApbImlkPeCtYai47NR0ZOmAtyX05LHwRqrKmLBef46v9WXilKoNJ7MziyM7H11Nr01ze6SKrQ==}
    engines: {node: '>=14.0.0'}
    cpu: [wasm32]

  '@oxc-transform/binding-win32-arm64-msvc@0.76.0':
    resolution: {integrity: sha512-NHYNglz3Xnauz9puiTCSmaG/MaYp2sreYtH3YkzHrcwhG1NRS3mLIEH4Iu03sSeZOthvcPe1TuE2TUt6bECdeg==}
    engines: {node: '>=14.0.0'}
    cpu: [arm64]
    os: [win32]

  '@oxc-transform/binding-win32-x64-msvc@0.76.0':
    resolution: {integrity: sha512-1FDq8BsSgvBpXYOR0a4O7GW78irTP3lJvcU+xPPhMtomNdNx+mn19JhYNqj3sApZ2+UeAa2hb3ELPmMVEPFJrA==}
    engines: {node: '>=14.0.0'}
    cpu: [x64]
    os: [win32]

  '@parcel/watcher-android-arm64@2.5.1':
    resolution: {integrity: sha512-KF8+j9nNbUN8vzOFDpRMsaKBHZ/mcjEjMToVMJOhTozkDonQFFrRcfdLWn6yWKCmJKmdVxSgHiYvTCef4/qcBA==}
    engines: {node: '>= 10.0.0'}
    cpu: [arm64]
    os: [android]

  '@parcel/watcher-darwin-arm64@2.5.1':
    resolution: {integrity: sha512-eAzPv5osDmZyBhou8PoF4i6RQXAfeKL9tjb3QzYuccXFMQU0ruIc/POh30ePnaOyD1UXdlKguHBmsTs53tVoPw==}
    engines: {node: '>= 10.0.0'}
    cpu: [arm64]
    os: [darwin]

  '@parcel/watcher-darwin-x64@2.5.1':
    resolution: {integrity: sha512-1ZXDthrnNmwv10A0/3AJNZ9JGlzrF82i3gNQcWOzd7nJ8aj+ILyW1MTxVk35Db0u91oD5Nlk9MBiujMlwmeXZg==}
    engines: {node: '>= 10.0.0'}
    cpu: [x64]
    os: [darwin]

  '@parcel/watcher-freebsd-x64@2.5.1':
    resolution: {integrity: sha512-SI4eljM7Flp9yPuKi8W0ird8TI/JK6CSxju3NojVI6BjHsTyK7zxA9urjVjEKJ5MBYC+bLmMcbAWlZ+rFkLpJQ==}
    engines: {node: '>= 10.0.0'}
    cpu: [x64]
    os: [freebsd]

  '@parcel/watcher-linux-arm-glibc@2.5.1':
    resolution: {integrity: sha512-RCdZlEyTs8geyBkkcnPWvtXLY44BCeZKmGYRtSgtwwnHR4dxfHRG3gR99XdMEdQ7KeiDdasJwwvNSF5jKtDwdA==}
    engines: {node: '>= 10.0.0'}
    cpu: [arm]
    os: [linux]

  '@parcel/watcher-linux-arm-musl@2.5.1':
    resolution: {integrity: sha512-6E+m/Mm1t1yhB8X412stiKFG3XykmgdIOqhjWj+VL8oHkKABfu/gjFj8DvLrYVHSBNC+/u5PeNrujiSQ1zwd1Q==}
    engines: {node: '>= 10.0.0'}
    cpu: [arm]
    os: [linux]

  '@parcel/watcher-linux-arm64-glibc@2.5.1':
    resolution: {integrity: sha512-LrGp+f02yU3BN9A+DGuY3v3bmnFUggAITBGriZHUREfNEzZh/GO06FF5u2kx8x+GBEUYfyTGamol4j3m9ANe8w==}
    engines: {node: '>= 10.0.0'}
    cpu: [arm64]
    os: [linux]

  '@parcel/watcher-linux-arm64-musl@2.5.1':
    resolution: {integrity: sha512-cFOjABi92pMYRXS7AcQv9/M1YuKRw8SZniCDw0ssQb/noPkRzA+HBDkwmyOJYp5wXcsTrhxO0zq1U11cK9jsFg==}
    engines: {node: '>= 10.0.0'}
    cpu: [arm64]
    os: [linux]

  '@parcel/watcher-linux-x64-glibc@2.5.1':
    resolution: {integrity: sha512-GcESn8NZySmfwlTsIur+49yDqSny2IhPeZfXunQi48DMugKeZ7uy1FX83pO0X22sHntJ4Ub+9k34XQCX+oHt2A==}
    engines: {node: '>= 10.0.0'}
    cpu: [x64]
    os: [linux]

  '@parcel/watcher-linux-x64-musl@2.5.1':
    resolution: {integrity: sha512-n0E2EQbatQ3bXhcH2D1XIAANAcTZkQICBPVaxMeaCVBtOpBZpWJuf7LwyWPSBDITb7In8mqQgJ7gH8CILCURXg==}
    engines: {node: '>= 10.0.0'}
    cpu: [x64]
    os: [linux]

  '@parcel/watcher-wasm@2.3.0':
    resolution: {integrity: sha512-ejBAX8H0ZGsD8lSICDNyMbSEtPMWgDL0WFCt/0z7hyf5v8Imz4rAM8xY379mBsECkq/Wdqa5WEDLqtjZ+6NxfA==}
    engines: {node: '>= 10.0.0'}
    bundledDependencies:
      - napi-wasm

  '@parcel/watcher-wasm@2.5.1':
    resolution: {integrity: sha512-RJxlQQLkaMMIuWRozy+z2vEqbaQlCuaCgVZIUCzQLYggY22LZbP5Y1+ia+FD724Ids9e+XIyOLXLrLgQSHIthw==}
    engines: {node: '>= 10.0.0'}
    bundledDependencies:
      - napi-wasm

  '@parcel/watcher-win32-arm64@2.5.1':
    resolution: {integrity: sha512-RFzklRvmc3PkjKjry3hLF9wD7ppR4AKcWNzH7kXR7GUe0Igb3Nz8fyPwtZCSquGrhU5HhUNDr/mKBqj7tqA2Vw==}
    engines: {node: '>= 10.0.0'}
    cpu: [arm64]
    os: [win32]

  '@parcel/watcher-win32-ia32@2.5.1':
    resolution: {integrity: sha512-c2KkcVN+NJmuA7CGlaGD1qJh1cLfDnQsHjE89E60vUEMlqduHGCdCLJCID5geFVM0dOtA3ZiIO8BoEQmzQVfpQ==}
    engines: {node: '>= 10.0.0'}
    cpu: [ia32]
    os: [win32]

  '@parcel/watcher-win32-x64@2.5.1':
    resolution: {integrity: sha512-9lHBdJITeNR++EvSQVUcaZoWupyHfXe1jZvGZ06O/5MflPcuPLtEphScIBL+AiCWBO46tDSHzWyD0uDmmZqsgA==}
    engines: {node: '>= 10.0.0'}
    cpu: [x64]
    os: [win32]

  '@parcel/watcher@2.5.1':
    resolution: {integrity: sha512-dfUnCxiN9H4ap84DvD2ubjw+3vUNpstxa0TneY/Paat8a3R4uQZDLSvWjmznAY/DoahqTHl9V46HF/Zs3F29pg==}
    engines: {node: '>= 10.0.0'}

  '@phosphor-icons/core@2.1.1':
    resolution: {integrity: sha512-v4ARvrip4qBCImOE5rmPUylOEK4iiED9ZyKjcvzuezqMaiRASCHKcRIuvvxL/twvLpkfnEODCOJp5dM4eZilxQ==}

  '@pkgjs/parseargs@0.11.0':
    resolution: {integrity: sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==}
    engines: {node: '>=14'}

  '@polka/url@1.0.0-next.29':
    resolution: {integrity: sha512-wwQAWhWSuHaag8c4q/KN/vCoeOJYshAIvMQwD4GpSb3OiZklFfvAgmj0VCBBImRpuF/aFgIRzllXlVX93Jevww==}

  '@popperjs/core@2.11.8':
    resolution: {integrity: sha512-P1st0aksCrn9sGZhp8GMYwBnQsbvAWsZAX44oXNNvLHGqAOcoVxmjZiohstwQ7SqKnbR47akdNi+uleWD8+g6A==}

  '@poppinss/colors@4.1.4':
    resolution: {integrity: sha512-FA+nTU8p6OcSH4tLDY5JilGYr1bVWHpNmcLr7xmMEdbWmKHa+3QZ+DqefrXKmdjO/brHTnQZo20lLSjaO7ydog==}
    engines: {node: '>=18.16.0'}

  '@poppinss/dumper@0.6.3':
    resolution: {integrity: sha512-iombbn8ckOixMtuV1p3f8jN6vqhXefNjJttoPaJDMeIk/yIGhkkL3OrHkEjE9SRsgoAx1vBUU2GtgggjvA5hCA==}

  '@poppinss/exception@1.2.1':
    resolution: {integrity: sha512-aQypoot0HPSJa6gDPEPTntc1GT6QINrSbgRlRhadGW2WaYqUK3tK4Bw9SBMZXhmxd3GeAlZjVcODHgiu+THY7A==}
    engines: {node: '>=18'}

  '@radix-ui/number@1.1.1':
    resolution: {integrity: sha512-MkKCwxlXTgz6CFoJx3pCwn07GKp36+aZyu/u2Ln2VrA5DcdyCZkASEDBTd8x5whTQQL5CiYf4prXKLcgQdv29g==}

  '@radix-ui/primitive@1.1.2':
    resolution: {integrity: sha512-XnbHrrprsNqZKQhStrSwgRUQzoCI1glLzdw79xiZPoofhGICeZRSQ3dIxAKH1gb3OHfNf4d6f+vAv3kil2eggA==}

  '@radix-ui/react-accordion@1.2.11':
    resolution: {integrity: sha512-l3W5D54emV2ues7jjeG1xcyN7S3jnK3zE2zHqgn0CmMsy9lNJwmgcrmaxS+7ipw15FAivzKNzH3d5EcGoFKw0A==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-arrow@1.1.7':
    resolution: {integrity: sha512-F+M1tLhO+mlQaOWspE8Wstg+z6PwxwRd8oQ8IXceWz92kfAmalTRf0EjrouQeo7QssEPfCn05B4Ihs1K9WQ/7w==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-collapsible@1.1.11':
    resolution: {integrity: sha512-2qrRsVGSCYasSz1RFOorXwl0H7g7J1frQtgpQgYrt+MOidtPAINHn9CPovQXb83r8ahapdx3Tu0fa/pdFFSdPg==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-collection@1.1.7':
    resolution: {integrity: sha512-Fh9rGN0MoI4ZFUNyfFVNU4y9LUz93u9/0K+yLgA2bwRojxM8JU1DyvvMBabnZPBgMWREAJvU2jjVzq+LrFUglw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-compose-refs@1.1.2':
    resolution: {integrity: sha512-z4eqJvfiNnFMHIIvXP3CY57y2WJs5g2v3X0zm9mEJkrkNv4rDxu+sg9Jh8EkXyeqBkB7SOcboo9dMVqhyrACIg==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-context@1.1.2':
    resolution: {integrity: sha512-jCi/QKUM2r1Ju5a3J64TH2A5SpKAgh0LpknyqdQ4m6DCV0xJ2HG1xARRwNGPQfi1SLdLWZ1OJz6F4OMBBNiGJA==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-dialog@1.1.14':
    resolution: {integrity: sha512-+CpweKjqpzTmwRwcYECQcNYbI8V9VSQt0SNFKeEBLgfucbsLssU6Ppq7wUdNXEGb573bMjFhVjKVll8rmV6zMw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-direction@1.1.1':
    resolution: {integrity: sha512-1UEWRX6jnOA2y4H5WczZ44gOOjTEmlqv1uNW4GAJEO5+bauCBhv8snY65Iw5/VOS/ghKN9gr2KjnLKxrsvoMVw==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-dismissable-layer@1.1.10':
    resolution: {integrity: sha512-IM1zzRV4W3HtVgftdQiiOmA0AdJlCtMLe00FXaHwgt3rAnNsIyDqshvkIW3hj/iu5hu8ERP7KIYki6NkqDxAwQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-focus-guards@1.1.2':
    resolution: {integrity: sha512-fyjAACV62oPV925xFCrH8DR5xWhg9KYtJT4s3u54jxp+L/hbpTY2kIeEFFbFe+a/HCE94zGQMZLIpVTPVZDhaA==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-focus-scope@1.1.7':
    resolution: {integrity: sha512-t2ODlkXBQyn7jkl6TNaw/MtVEVvIGelJDCG41Okq/KwUsJBwQ4XVZsHAVUkK4mBv3ewiAS3PGuUWuY2BoK4ZUw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-hover-card@1.1.14':
    resolution: {integrity: sha512-CPYZ24Mhirm+g6D8jArmLzjYu4Eyg3TTUHswR26QgzXBHBe64BO/RHOJKzmF/Dxb4y4f9PKyJdwm/O/AhNkb+Q==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-id@1.1.1':
    resolution: {integrity: sha512-kGkGegYIdQsOb4XjsfM97rXsiHaBwco+hFI66oO4s9LU+PLAC5oJ7khdOVFxkhsmlbpUqDAvXw11CluXP+jkHg==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-navigation-menu@1.2.13':
    resolution: {integrity: sha512-WG8wWfDiJlSF5hELjwfjSGOXcBR/ZMhBFCGYe8vERpC39CQYZeq1PQ2kaYHdye3V95d06H89KGMsVCIE4LWo3g==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-popover@1.1.14':
    resolution: {integrity: sha512-ODz16+1iIbGUfFEfKx2HTPKizg2MN39uIOV8MXeHnmdd3i/N9Wt7vU46wbHsqA0xoaQyXVcs0KIlBdOA2Y95bw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-popper@1.2.7':
    resolution: {integrity: sha512-IUFAccz1JyKcf/RjB552PlWwxjeCJB8/4KxT7EhBHOJM+mN7LdW+B3kacJXILm32xawcMMjb2i0cIZpo+f9kiQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-portal@1.1.9':
    resolution: {integrity: sha512-bpIxvq03if6UNwXZ+HTK71JLh4APvnXntDc6XOX8UVq4XQOVl7lwok0AvIl+b8zgCw3fSaVTZMpAPPagXbKmHQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-presence@1.1.4':
    resolution: {integrity: sha512-ueDqRbdc4/bkaQT3GIpLQssRlFgWaL/U2z/S31qRwwLWoxHLgry3SIfCwhxeQNbirEUXFa+lq3RL3oBYXtcmIA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-primitive@2.1.3':
    resolution: {integrity: sha512-m9gTwRkhy2lvCPe6QJp4d3G1TYEUHn/FzJUtq9MjH46an1wJU+GdoGC5VLof8RX8Ft/DlpshApkhswDLZzHIcQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-roving-focus@1.1.10':
    resolution: {integrity: sha512-dT9aOXUen9JSsxnMPv/0VqySQf5eDQ6LCk5Sw28kamz8wSOW2bJdlX2Bg5VUIIcV+6XlHpWTIuTPCf/UNIyq8Q==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-scroll-area@1.2.9':
    resolution: {integrity: sha512-YSjEfBXnhUELsO2VzjdtYYD4CfQjvao+lhhrX5XsHD7/cyUNzljF1FHEbgTPN7LH2MClfwRMIsYlqTYpKTTe2A==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-select@2.2.5':
    resolution: {integrity: sha512-HnMTdXEVuuyzx63ME0ut4+sEMYW6oouHWNGUZc7ddvUWIcfCva/AMoqEW/3wnEllriMWBa0RHspCYnfCWJQYmA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-slot@1.2.3':
    resolution: {integrity: sha512-aeNmHnBxbi2St0au6VBVC7JXFlhLlOnvIIlePNniyUNAClzmtAUEY8/pBiK3iHjufOlwA+c20/8jngo7xcrg8A==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-tabs@1.1.12':
    resolution: {integrity: sha512-GTVAlRVrQrSw3cEARM0nAx73ixrWDPNZAruETn3oHCNP6SbZ/hNxdxp+u7VkIEv3/sFoLq1PfcHrl7Pnp0CDpw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-tooltip@1.2.7':
    resolution: {integrity: sha512-Ap+fNYwKTYJ9pzqW+Xe2HtMRbQ/EeWkj2qykZ6SuEV4iS/o1bZI5ssJbk4D2r8XuDuOBVz/tIx2JObtuqU+5Zw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-use-callback-ref@1.1.1':
    resolution: {integrity: sha512-FkBMwD+qbGQeMu1cOHnuGB6x4yzPjho8ap5WtbEJ26umhgqVXbhekKUQO+hZEL1vU92a3wHwdp0HAcqAUF5iDg==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-controllable-state@1.2.2':
    resolution: {integrity: sha512-BjasUjixPFdS+NKkypcyyN5Pmg83Olst0+c6vGov0diwTEo6mgdqVR6hxcEgFuh4QrAs7Rc+9KuGJ9TVCj0Zzg==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-effect-event@0.0.2':
    resolution: {integrity: sha512-Qp8WbZOBe+blgpuUT+lw2xheLP8q0oatc9UpmiemEICxGvFLYmHm9QowVZGHtJlGbS6A6yJ3iViad/2cVjnOiA==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-escape-keydown@1.1.1':
    resolution: {integrity: sha512-Il0+boE7w/XebUHyBjroE+DbByORGR9KKmITzbR7MyQ4akpORYP/ZmbhAr0DG7RmmBqoOnZdy2QlvajJ2QA59g==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-layout-effect@1.1.1':
    resolution: {integrity: sha512-RbJRS4UWQFkzHTTwVymMTUv8EqYhOp8dOOviLj2ugtTiXRaRQS7GLGxZTLL1jWhMeoSCf5zmcZkqTl9IiYfXcQ==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-previous@1.1.1':
    resolution: {integrity: sha512-2dHfToCj/pzca2Ck724OZ5L0EVrr3eHRNsG/b3xQJLA2hZpVCS99bLAX+hm1IHXDEnzU6by5z/5MIY794/a8NQ==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-rect@1.1.1':
    resolution: {integrity: sha512-QTYuDesS0VtuHNNvMh+CjlKJ4LJickCMUAqjlE3+j8w+RlRpwyX3apEQKGFzbZGdo7XNG1tXa+bQqIE7HIXT2w==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-size@1.1.1':
    resolution: {integrity: sha512-ewrXRDTAqAXlkl6t/fkXWNAhFX9I+CkKlw6zjEwk86RSPKwZr3xpBRso655aqYafwtnbpHLj6toFzmd6xdVptQ==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-visually-hidden@1.2.3':
    resolution: {integrity: sha512-pzJq12tEaaIhqjbzpCuv/OypJY/BPavOofm+dbab+MHLajy277+1lLm6JFcGgF5eskJ6mquGirhXY2GD/8u8Ug==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/rect@1.1.1':
    resolution: {integrity: sha512-HPwpGIzkl28mWyZqG52jiqDJ12waP11Pa1lGoiyUkIEuMLBP0oeK/C89esbXrxsky5we7dfd8U58nm0SgAWpVw==}

  '@react-router/dev@7.6.3':
    resolution: {integrity: sha512-nnJQMVeE+LDViFTQDxeQV5FcfJ48a6aCScrFHwPHWgViQmiJxUBtDU1Pl7XZKEoTus5KDg/W3Vz2spiY6wXg3Q==}
    engines: {node: '>=20.0.0'}
    hasBin: true
    peerDependencies:
      '@react-router/serve': ^7.6.3
      react-router: ^7.6.3
      typescript: ^5.1.0
      vite: ^5.1.0 || ^6.0.0 || ^7.0.0
      wrangler: ^3.28.2 || ^4.0.0
    peerDependenciesMeta:
      '@react-router/serve':
        optional: true
      typescript:
        optional: true
      wrangler:
        optional: true

  '@react-router/express@7.6.3':
    resolution: {integrity: sha512-45wLv2pNVDfnd4mZXYaxbqGE2wOzisQQAXSCHrWhkUn9CvJkaqC9cx82rzfB1UnGvyeupZxGgLxaG0b38pTEOA==}
    engines: {node: '>=20.0.0'}
    peerDependencies:
      express: ^4.17.1 || ^5
      react-router: 7.6.3
      typescript: ^5.1.0
    peerDependenciesMeta:
      typescript:
        optional: true

  '@react-router/node@7.6.3':
    resolution: {integrity: sha512-CgqYAGjrfW/Al0LbWhQ60joDci5/H3ix4IU5UwlKLtqmNPzuSUTBkCrxit3jHuMYqaBaGfyRpT7kIeb1YZ4nqA==}
    engines: {node: '>=20.0.0'}
    peerDependencies:
      react-router: 7.6.3
      typescript: ^5.1.0
    peerDependenciesMeta:
      typescript:
        optional: true

  '@react-router/serve@7.6.3':
    resolution: {integrity: sha512-SbIXApeaNPM9rCkrcFU+VXYXCIh332cT2L0ikykWBCe6O9ZGE6Y1q5ZQ8puEf5Pmqwm77kIRoY9rACUbnXzfxA==}
    engines: {node: '>=20.0.0'}
    hasBin: true
    peerDependencies:
      react-router: 7.6.3

  '@replit/codemirror-css-color-picker@6.3.0':
    resolution: {integrity: sha512-19biDANghUm7Fz7L1SNMIhK48tagaWuCOHj4oPPxc7hxPGkTVY2lU/jVZ8tsbTKQPVG7BO2CBDzs7CBwb20t4A==}
    peerDependencies:
      '@codemirror/language': ^6.0.0
      '@codemirror/state': ^6.0.0
      '@codemirror/view': ^6.0.0

  '@rolldown/pluginutils@1.0.0-beta.19':
    resolution: {integrity: sha512-3FL3mnMbPu0muGOCaKAhhFEYmqv9eTfPSJRJmANrCwtgK8VuxpsZDGK+m0LYAGoyO8+0j5uRe4PeyPDK1yA/hA==}

  '@rollup/plugin-alias@5.1.1':
    resolution: {integrity: sha512-PR9zDb+rOzkRb2VD+EuKB7UC41vU5DIwZ5qqCpk0KJudcWAyi8rvYOhS7+L5aZCspw1stTViLgN5v6FF1p5cgQ==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      rollup: ^1.20.0||^2.0.0||^3.0.0||^4.0.0
    peerDependenciesMeta:
      rollup:
        optional: true

  '@rollup/plugin-commonjs@28.0.6':
    resolution: {integrity: sha512-XSQB1K7FUU5QP+3lOQmVCE3I0FcbbNvmNT4VJSj93iUjayaARrTQeoRdiYQoftAJBLrR9t2agwAd3ekaTgHNlw==}
    engines: {node: '>=16.0.0 || 14 >= 14.17'}
    peerDependencies:
      rollup: ^2.68.0||^3.0.0||^4.0.0
    peerDependenciesMeta:
      rollup:
        optional: true

  '@rollup/plugin-inject@5.0.5':
    resolution: {integrity: sha512-2+DEJbNBoPROPkgTDNe8/1YXWcqxbN5DTjASVIOx8HS+pITXushyNiBV56RB08zuptzz8gT3YfkqriTBVycepg==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      rollup: ^1.20.0||^2.0.0||^3.0.0||^4.0.0
    peerDependenciesMeta:
      rollup:
        optional: true

  '@rollup/plugin-json@6.1.0':
    resolution: {integrity: sha512-EGI2te5ENk1coGeADSIwZ7G2Q8CJS2sF120T7jLw4xFw9n7wIOXHo+kIYRAoVpJAN+kmqZSoO3Fp4JtoNF4ReA==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      rollup: ^1.20.0||^2.0.0||^3.0.0||^4.0.0
    peerDependenciesMeta:
      rollup:
        optional: true

  '@rollup/plugin-node-resolve@16.0.1':
    resolution: {integrity: sha512-tk5YCxJWIG81umIvNkSod2qK5KyQW19qcBF/B78n1bjtOON6gzKoVeSzAE8yHCZEDmqkHKkxplExA8KzdJLJpA==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      rollup: ^2.78.0||^3.0.0||^4.0.0
    peerDependenciesMeta:
      rollup:
        optional: true

  '@rollup/plugin-replace@6.0.2':
    resolution: {integrity: sha512-7QaYCf8bqF04dOy7w/eHmJeNExxTYwvKAmlSAH/EaWWUzbT0h5sbF6bktFoX/0F/0qwng5/dWFMyf3gzaM8DsQ==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      rollup: ^1.20.0||^2.0.0||^3.0.0||^4.0.0
    peerDependenciesMeta:
      rollup:
        optional: true

  '@rollup/plugin-terser@0.4.4':
    resolution: {integrity: sha512-XHeJC5Bgvs8LfukDwWZp7yeqin6ns8RTl2B9avbejt6tZqsqvVoWI7ZTQrcNsfKEDWBTnTxM8nMDkO2IFFbd0A==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      rollup: ^2.0.0||^3.0.0||^4.0.0
    peerDependenciesMeta:
      rollup:
        optional: true

  '@rollup/pluginutils@5.2.0':
    resolution: {integrity: sha512-qWJ2ZTbmumwiLFomfzTyt5Kng4hwPi9rwCYN4SHb6eaRU1KNO4ccxINHr/VhH4GgPlt1XfSTLX2LBTme8ne4Zw==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      rollup: ^1.20.0||^2.0.0||^3.0.0||^4.0.0
    peerDependenciesMeta:
      rollup:
        optional: true

  '@rollup/rollup-android-arm-eabi@4.44.2':
    resolution: {integrity: sha512-g0dF8P1e2QYPOj1gu7s/3LVP6kze9A7m6x0BZ9iTdXK8N5c2V7cpBKHV3/9A4Zd8xxavdhK0t4PnqjkqVmUc9Q==}
    cpu: [arm]
    os: [android]

  '@rollup/rollup-android-arm64@4.44.2':
    resolution: {integrity: sha512-Yt5MKrOosSbSaAK5Y4J+vSiID57sOvpBNBR6K7xAaQvk3MkcNVV0f9fE20T+41WYN8hDn6SGFlFrKudtx4EoxA==}
    cpu: [arm64]
    os: [android]

  '@rollup/rollup-darwin-arm64@4.44.2':
    resolution: {integrity: sha512-EsnFot9ZieM35YNA26nhbLTJBHD0jTwWpPwmRVDzjylQT6gkar+zenfb8mHxWpRrbn+WytRRjE0WKsfaxBkVUA==}
    cpu: [arm64]
    os: [darwin]

  '@rollup/rollup-darwin-x64@4.44.2':
    resolution: {integrity: sha512-dv/t1t1RkCvJdWWxQ2lWOO+b7cMsVw5YFaS04oHpZRWehI1h0fV1gF4wgGCTyQHHjJDfbNpwOi6PXEafRBBezw==}
    cpu: [x64]
    os: [darwin]

  '@rollup/rollup-freebsd-arm64@4.44.2':
    resolution: {integrity: sha512-W4tt4BLorKND4qeHElxDoim0+BsprFTwb+vriVQnFFtT/P6v/xO5I99xvYnVzKWrK6j7Hb0yp3x7V5LUbaeOMg==}
    cpu: [arm64]
    os: [freebsd]

  '@rollup/rollup-freebsd-x64@4.44.2':
    resolution: {integrity: sha512-tdT1PHopokkuBVyHjvYehnIe20fxibxFCEhQP/96MDSOcyjM/shlTkZZLOufV3qO6/FQOSiJTBebhVc12JyPTA==}
    cpu: [x64]
    os: [freebsd]

  '@rollup/rollup-linux-arm-gnueabihf@4.44.2':
    resolution: {integrity: sha512-+xmiDGGaSfIIOXMzkhJ++Oa0Gwvl9oXUeIiwarsdRXSe27HUIvjbSIpPxvnNsRebsNdUo7uAiQVgBD1hVriwSQ==}
    cpu: [arm]
    os: [linux]

  '@rollup/rollup-linux-arm-musleabihf@4.44.2':
    resolution: {integrity: sha512-bDHvhzOfORk3wt8yxIra8N4k/N0MnKInCW5OGZaeDYa/hMrdPaJzo7CSkjKZqX4JFUWjUGm88lI6QJLCM7lDrA==}
    cpu: [arm]
    os: [linux]

  '@rollup/rollup-linux-arm64-gnu@4.44.2':
    resolution: {integrity: sha512-NMsDEsDiYghTbeZWEGnNi4F0hSbGnsuOG+VnNvxkKg0IGDvFh7UVpM/14mnMwxRxUf9AdAVJgHPvKXf6FpMB7A==}
    cpu: [arm64]
    os: [linux]

  '@rollup/rollup-linux-arm64-musl@4.44.2':
    resolution: {integrity: sha512-lb5bxXnxXglVq+7imxykIp5xMq+idehfl+wOgiiix0191av84OqbjUED+PRC5OA8eFJYj5xAGcpAZ0pF2MnW+A==}
    cpu: [arm64]
    os: [linux]

  '@rollup/rollup-linux-loongarch64-gnu@4.44.2':
    resolution: {integrity: sha512-Yl5Rdpf9pIc4GW1PmkUGHdMtbx0fBLE1//SxDmuf3X0dUC57+zMepow2LK0V21661cjXdTn8hO2tXDdAWAqE5g==}
    cpu: [loong64]
    os: [linux]

  '@rollup/rollup-linux-powerpc64le-gnu@4.44.2':
    resolution: {integrity: sha512-03vUDH+w55s680YYryyr78jsO1RWU9ocRMaeV2vMniJJW/6HhoTBwyyiiTPVHNWLnhsnwcQ0oH3S9JSBEKuyqw==}
    cpu: [ppc64]
    os: [linux]

  '@rollup/rollup-linux-riscv64-gnu@4.44.2':
    resolution: {integrity: sha512-iYtAqBg5eEMG4dEfVlkqo05xMOk6y/JXIToRca2bAWuqjrJYJlx/I7+Z+4hSrsWU8GdJDFPL4ktV3dy4yBSrzg==}
    cpu: [riscv64]
    os: [linux]

  '@rollup/rollup-linux-riscv64-musl@4.44.2':
    resolution: {integrity: sha512-e6vEbgaaqz2yEHqtkPXa28fFuBGmUJ0N2dOJK8YUfijejInt9gfCSA7YDdJ4nYlv67JfP3+PSWFX4IVw/xRIPg==}
    cpu: [riscv64]
    os: [linux]

  '@rollup/rollup-linux-s390x-gnu@4.44.2':
    resolution: {integrity: sha512-evFOtkmVdY3udE+0QKrV5wBx7bKI0iHz5yEVx5WqDJkxp9YQefy4Mpx3RajIVcM6o7jxTvVd/qpC1IXUhGc1Mw==}
    cpu: [s390x]
    os: [linux]

  '@rollup/rollup-linux-x64-gnu@4.44.2':
    resolution: {integrity: sha512-/bXb0bEsWMyEkIsUL2Yt5nFB5naLAwyOWMEviQfQY1x3l5WsLKgvZf66TM7UTfED6erckUVUJQ/jJ1FSpm3pRQ==}
    cpu: [x64]
    os: [linux]

  '@rollup/rollup-linux-x64-musl@4.44.2':
    resolution: {integrity: sha512-3D3OB1vSSBXmkGEZR27uiMRNiwN08/RVAcBKwhUYPaiZ8bcvdeEwWPvbnXvvXHY+A/7xluzcN+kaiOFNiOZwWg==}
    cpu: [x64]
    os: [linux]

  '@rollup/rollup-win32-arm64-msvc@4.44.2':
    resolution: {integrity: sha512-VfU0fsMK+rwdK8mwODqYeM2hDrF2WiHaSmCBrS7gColkQft95/8tphyzv2EupVxn3iE0FI78wzffoULH1G+dkw==}
    cpu: [arm64]
    os: [win32]

  '@rollup/rollup-win32-ia32-msvc@4.44.2':
    resolution: {integrity: sha512-+qMUrkbUurpE6DVRjiJCNGZBGo9xM4Y0FXU5cjgudWqIBWbcLkjE3XprJUsOFgC6xjBClwVa9k6O3A7K3vxb5Q==}
    cpu: [ia32]
    os: [win32]

  '@rollup/rollup-win32-x64-msvc@4.44.2':
    resolution: {integrity: sha512-3+QZROYfJ25PDcxFF66UEk8jGWigHJeecZILvkPkyQN7oc5BvFo4YEXFkOs154j3FTMp9mn9Ky8RCOwastduEA==}
    cpu: [x64]
    os: [win32]

  '@scalar/api-client-react@1.3.20':
    resolution: {integrity: sha512-yzpuMeffMGlXeMSqzri+rJSLPrriuuF9wC215LwnWjgTd5jnLnd8kuzQ7jNhCrPFoVEbjCmbcpQMV1khuOlSzA==}
    engines: {node: '>=20'}
    peerDependencies:
      react: ^18.0.0 || ^19.0.0

  '@scalar/api-client@2.5.15':
    resolution: {integrity: sha512-Tu+ho7HU+4preDQU/h37F21tGKnOk8pu7at69M84ERmfPCIkI7UebJtjGHpNbEKi5n70i8QNh/UEDa3/76rZrw==}
    engines: {node: '>=20'}

  '@scalar/code-highlight@0.1.5':
    resolution: {integrity: sha512-gFTorMvDq91IKf0cV17+UvgGsBichGURsS3qBEo72ihc4yUX207/AT2Obm6kT+ckkIYvXydD6MPapk9rEnCPuA==}
    engines: {node: '>=20'}

  '@scalar/components@0.14.16':
    resolution: {integrity: sha512-JcF8r93isL+rdTpCccPM8BEdIO17ERTkjNBVviqGHmQ57jXX8c2v1/1HtOz9qez5fE8uEEUJ3KJXUgskeLdWmQ==}
    engines: {node: '>=20'}

  '@scalar/draggable@0.2.0':
    resolution: {integrity: sha512-UetHRB5Bqo5egVYlS21roWBcICmyk8CKh2htsidO+bFGAjl2e7Te+rY0borhNrMclr0xezHlPuLpEs1dvgLS2g==}
    engines: {node: '>=20'}

  '@scalar/helpers@0.0.6':
    resolution: {integrity: sha512-VrkpJmEq3zLu0lYFVRplNLA54rZ9rBkiahEI8laVpLnzGl1QilIn2EhxBT9lK7/2jbPprCbTfgnZZv+zHgGYTw==}
    engines: {node: '>=20'}

  '@scalar/icons@0.4.6':
    resolution: {integrity: sha512-ho9ee29Ik+Jv17bSaQEXvGn1e2ydNEyc7Sv8A8hqPq084aIOiTBtVFISPPt+k/O6z0SIRayfL8FEZqr93GyZPg==}
    engines: {node: '>=20'}

  '@scalar/import@0.4.13':
    resolution: {integrity: sha512-DuiAVPs4//lgFMh+4IEv11cxy54aSZEp3EqrooWzfvguByaCy/bSMvI2/5kyWkmY/nl5QPW2eI1/lX7gafeFeQ==}
    engines: {node: '>=20'}

  '@scalar/json-diff@0.0.4':
    resolution: {integrity: sha512-4u2gtyhA119T+HdQ4dVKYzQOCOos5Iaj08C1H2Hi6WW64sTNJaZuh9hpVtY94e0I9feRiCyNEtWvmbOjOAxbTw==}
    engines: {node: '>=20'}

  '@scalar/oas-utils@0.4.11':
    resolution: {integrity: sha512-ptekTIpxCczQxP3iXtSpDWEf0nV0nsYJh/b0/wD3krfw6hUAGVqctRTnOuZBQmiVfVeP47NsVavdpG1fiWuZ5Q==}
    engines: {node: '>=20'}

  '@scalar/object-utils@1.2.2':
    resolution: {integrity: sha512-dnH/JeXLudjBfEISpYvnMrH3bLjpc06vWVx7UQmtNNWIIonJ+bDMg1ATnYon7q6m+V8aJZ9/To8SwYsunYRL9g==}
    engines: {node: '>=20'}

  '@scalar/openapi-parser@0.18.1':
    resolution: {integrity: sha512-xlJRmizgAlYp+pUMVmohL1aNwEpPcwJ/FpsWZsDtIW9esddHJ3Zt5dAG1TDO/jsyDsMJg2Lz28IhNObOzIQpzg==}
    engines: {node: '>=20'}

  '@scalar/openapi-types@0.3.5':
    resolution: {integrity: sha512-/iTUSJMMHVMIFJngeIjTVtU5lwIMNyEIm25e0XtDV0veW6zmIhLsaH2/nwpIgR1iXVyd/uWMyMrtQW329s3c4w==}
    engines: {node: '>=20'}

  '@scalar/postman-to-openapi@0.3.14':
    resolution: {integrity: sha512-eeIZJApBDhoElvlBlpr5Fc4kBBbPqdgCpmJ4BHG2HVcmpPdYp/FhLOtKRR9zGte7MuLKYUc7eLWKHUz6E0TT1w==}
    engines: {node: '>=20'}

  '@scalar/snippetz@0.4.0':
    resolution: {integrity: sha512-smfJ0UiXsHmPOk6k+oAdShAIwZ7LTgK23l/ecTUQVYg0ub4yIadWFqo3cqjpZJ1zF88LLIfiHcthe2iQ1LHzXw==}
    engines: {node: '>=20'}

  '@scalar/themes@0.13.8':
    resolution: {integrity: sha512-qWAOFpLYEVVkQnHFb5js6njFLHwwXVVRC06edthBTtUvaL8HOQexg6bXp2uksCFStm1bb1VYy9UOp8EqEnfN5Q==}
    engines: {node: '>=20'}

  '@scalar/types@0.2.7':
    resolution: {integrity: sha512-C4sbkqzCeQWYWaOUIQPdVm6g3FhUkcqpVorArApv7WfCEgVn1KLOOYELFMWwCHim2GnrZblVVUPubf0UXjUcLA==}
    engines: {node: '>=20'}

  '@scalar/use-codemirror@0.12.17':
    resolution: {integrity: sha512-wKHG75PmkubWl2mS3yQduOACioIMlA14VW16OXAh45dDc3sDaLR14uKZHmimqiY4oRHlMcPzw5t/MVYwj0gKKw==}
    engines: {node: '>=20'}

  '@scalar/use-hooks@0.2.4':
    resolution: {integrity: sha512-TXviVV9Cfmei6g24QadnfuFj2r1YkZY56ufsSnwHgLNbtDRd9U9jXGIswXAuA+k7whaEVEgcoZ3Zmq2v5ZLF8w==}
    engines: {node: '>=20'}

  '@scalar/use-toasts@0.8.0':
    resolution: {integrity: sha512-u+o77cdTNZ5ePqHPu8ZcFw1BLlISv+cthN0bR1zJHXmqBjvanFTy2kL+Gmv3eW9HxZiHdqycKVETlYd0mWiqJQ==}
    engines: {node: '>=20'}

  '@scalar/use-tooltip@1.1.0':
    resolution: {integrity: sha512-KJConD/JDyGP8GPGpD+TXA6FEcKT9bmHQb/JyBmME+tJoJGHGtNcGy7kcezFakaKCqfKyY7cgPzL1ctUaGIRag==}
    engines: {node: '>=20'}

  '@scalar/workspace-store@0.8.0':
    resolution: {integrity: sha512-HFtXNCU/qfY08cXhdd5UhnGbrWS6w6w9RAnNql4O3J0P/MiotMIZiUreCfGbiCVOXCj59ClzeOJIhA8R59Z2OA==}
    engines: {node: '>=18'}

  '@shikijs/core@3.7.0':
    resolution: {integrity: sha512-yilc0S9HvTPyahHpcum8eonYrQtmGTU0lbtwxhA6jHv4Bm1cAdlPFRCJX4AHebkCm75aKTjjRAW+DezqD1b/cg==}

  '@shikijs/engine-javascript@3.7.0':
    resolution: {integrity: sha512-0t17s03Cbv+ZcUvv+y33GtX75WBLQELgNdVghnsdhTgU3hVcWcMsoP6Lb0nDTl95ZJfbP1mVMO0p3byVh3uuzA==}

  '@shikijs/engine-oniguruma@3.7.0':
    resolution: {integrity: sha512-5BxcD6LjVWsGu4xyaBC5bu8LdNgPCVBnAkWTtOCs/CZxcB22L8rcoWfv7Hh/3WooVjBZmFtyxhgvkQFedPGnFw==}

  '@shikijs/langs@3.7.0':
    resolution: {integrity: sha512-1zYtdfXLr9xDKLTGy5kb7O0zDQsxXiIsw1iIBcNOO8Yi5/Y1qDbJ+0VsFoqTlzdmneO8Ij35g7QKF8kcLyznCQ==}

  '@shikijs/rehype@3.7.0':
    resolution: {integrity: sha512-YjAZxhQnBXE8ehppKGzuVGPoE4pjVsxqzkWhBZlkP495AjlR++MgfiRFcQfDt3qX5lK3gEDTcghB/8E3yNrWqQ==}

  '@shikijs/themes@3.7.0':
    resolution: {integrity: sha512-VJx8497iZPy5zLiiCTSIaOChIcKQwR0FebwE9S3rcN0+J/GTWwQ1v/bqhTbpbY3zybPKeO8wdammqkpXc4NVjQ==}

  '@shikijs/transformers@3.7.0':
    resolution: {integrity: sha512-VplaqIMRNsNOorCXJHkbF5S0pT6xm8Z/s7w7OPZLohf8tR93XH0krvUafpNy/ozEylrWuShJF0+ftEB+wFRwGA==}

  '@shikijs/twoslash@3.7.0':
    resolution: {integrity: sha512-EjnV193iasm/M5UHVDJg6WyX6dIMCb0YhsKKlgWv3OK7iLFjuW7sUp978ZkO2OIn3niqBT6e+CX1LgoPM8jYjQ==}
    peerDependencies:
      typescript: '>=5.5.0'

  '@shikijs/types@3.7.0':
    resolution: {integrity: sha512-MGaLeaRlSWpnP0XSAum3kP3a8vtcTsITqoEPYdt3lQG3YCdQH4DnEhodkYcNMcU0uW0RffhoD1O3e0vG5eSBBg==}

  '@shikijs/vscode-textmate@10.0.2':
    resolution: {integrity: sha512-83yeghZ2xxin3Nj8z1NMd/NCuca+gsYXswywDy5bHvwlWL8tpTQmzGeUuHd9FC3E/SBEMvzJRwWEOz5gGes9Qg==}

  '@sinclair/typebox@0.34.37':
    resolution: {integrity: sha512-2TRuQVgQYfy+EzHRTIvkhv2ADEouJ2xNS/Vq+W5EuuewBdOrvATvljZTxHWZSTYr2sTjTHpGvucaGAt67S2akw==}

  '@sindresorhus/is@7.0.2':
    resolution: {integrity: sha512-d9xRovfKNz1SKieM0qJdO+PQonjnnIfSNWfHYnBSJ9hkjm0ZPw6HlxscDXYstp3z+7V2GOFHc+J0CYrYTjqCJw==}
    engines: {node: '>=18'}

  '@sindresorhus/merge-streams@2.3.0':
    resolution: {integrity: sha512-LtoMMhxAlorcGhmFYI+LhPgbPZCkgP6ra1YL604EeF6U98pLlQ3iWIGMdWSC+vWmPBWBNgmDBAhnAobLROJmwg==}
    engines: {node: '>=18'}

  '@speed-highlight/core@1.2.7':
    resolution: {integrity: sha512-0dxmVj4gxg3Jg879kvFS/msl4s9F3T9UXC1InxgOf7t5NvcPD97u/WTA5vL/IxWHMn7qSxBozqrnnE2wvl1m8g==}

  '@standard-schema/spec@1.0.0':
    resolution: {integrity: sha512-m2bOd0f2RT9k8QJx1JN85cZYyH1RqFBdlwtkSlf4tBDYLCiiZnv1fIIwacK6cqwXavOydf0NPToMQgpKq+dVlA==}

  '@swc/counter@0.1.3':
    resolution: {integrity: sha512-e2BR4lsJkkRlKZ/qCHPw9ZaSxc0MVUd7gtbtaB7aMvHeJVYe8sOB8DBZkP2DtISHGSku9sCK6T6cnY0CtXrOCQ==}

  '@swc/helpers@0.5.15':
    resolution: {integrity: sha512-JQ5TuMi45Owi4/BIMAJBoSQoOJu12oOk/gADqlcUL9JEdHB8vyjUSsxqeNXnmXHjYKMi2WcYtezGEEhqUI/E2g==}

  '@swc/helpers@0.5.17':
    resolution: {integrity: sha512-5IKx/Y13RsYd+sauPb2x+U/xZikHjolzfuDgTAl/Tdf3Q8rslRvC19NKDLgAJQ6wsqADk10ntlv08nPFw/gO/A==}

  '@tailwindcss/cli@4.1.11':
    resolution: {integrity: sha512-7RAFOrVaXCFz5ooEG36Kbh+sMJiI2j4+Ozp71smgjnLfBRu7DTfoq8DsTvzse2/6nDeo2M3vS/FGaxfDgr3rtQ==}
    hasBin: true

  '@tailwindcss/node@4.1.11':
    resolution: {integrity: sha512-yzhzuGRmv5QyU9qLNg4GTlYI6STedBWRE7NjxP45CsFYYq9taI0zJXZBMqIC/c8fViNLhmrbpSFS57EoxUmD6Q==}

  '@tailwindcss/oxide-android-arm64@4.1.11':
    resolution: {integrity: sha512-3IfFuATVRUMZZprEIx9OGDjG3Ou3jG4xQzNTvjDoKmU9JdmoCohQJ83MYd0GPnQIu89YoJqvMM0G3uqLRFtetg==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [android]

  '@tailwindcss/oxide-darwin-arm64@4.1.11':
    resolution: {integrity: sha512-ESgStEOEsyg8J5YcMb1xl8WFOXfeBmrhAwGsFxxB2CxY9evy63+AtpbDLAyRkJnxLy2WsD1qF13E97uQyP1lfQ==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [darwin]

  '@tailwindcss/oxide-darwin-x64@4.1.11':
    resolution: {integrity: sha512-EgnK8kRchgmgzG6jE10UQNaH9Mwi2n+yw1jWmof9Vyg2lpKNX2ioe7CJdf9M5f8V9uaQxInenZkOxnTVL3fhAw==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [darwin]

  '@tailwindcss/oxide-freebsd-x64@4.1.11':
    resolution: {integrity: sha512-xdqKtbpHs7pQhIKmqVpxStnY1skuNh4CtbcyOHeX1YBE0hArj2romsFGb6yUmzkq/6M24nkxDqU8GYrKrz+UcA==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [freebsd]

  '@tailwindcss/oxide-linux-arm-gnueabihf@4.1.11':
    resolution: {integrity: sha512-ryHQK2eyDYYMwB5wZL46uoxz2zzDZsFBwfjssgB7pzytAeCCa6glsiJGjhTEddq/4OsIjsLNMAiMlHNYnkEEeg==}
    engines: {node: '>= 10'}
    cpu: [arm]
    os: [linux]

  '@tailwindcss/oxide-linux-arm64-gnu@4.1.11':
    resolution: {integrity: sha512-mYwqheq4BXF83j/w75ewkPJmPZIqqP1nhoghS9D57CLjsh3Nfq0m4ftTotRYtGnZd3eCztgbSPJ9QhfC91gDZQ==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [linux]

  '@tailwindcss/oxide-linux-arm64-musl@4.1.11':
    resolution: {integrity: sha512-m/NVRFNGlEHJrNVk3O6I9ggVuNjXHIPoD6bqay/pubtYC9QIdAMpS+cswZQPBLvVvEF6GtSNONbDkZrjWZXYNQ==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [linux]

  '@tailwindcss/oxide-linux-x64-gnu@4.1.11':
    resolution: {integrity: sha512-YW6sblI7xukSD2TdbbaeQVDysIm/UPJtObHJHKxDEcW2exAtY47j52f8jZXkqE1krdnkhCMGqP3dbniu1Te2Fg==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [linux]

  '@tailwindcss/oxide-linux-x64-musl@4.1.11':
    resolution: {integrity: sha512-e3C/RRhGunWYNC3aSF7exsQkdXzQ/M+aYuZHKnw4U7KQwTJotnWsGOIVih0s2qQzmEzOFIJ3+xt7iq67K/p56Q==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [linux]

  '@tailwindcss/oxide-wasm32-wasi@4.1.11':
    resolution: {integrity: sha512-Xo1+/GU0JEN/C/dvcammKHzeM6NqKovG+6921MR6oadee5XPBaKOumrJCXvopJ/Qb5TH7LX/UAywbqrP4lax0g==}
    engines: {node: '>=14.0.0'}
    cpu: [wasm32]
    bundledDependencies:
      - '@napi-rs/wasm-runtime'
      - '@emnapi/core'
      - '@emnapi/runtime'
      - '@tybys/wasm-util'
      - '@emnapi/wasi-threads'
      - tslib

  '@tailwindcss/oxide-win32-arm64-msvc@4.1.11':
    resolution: {integrity: sha512-UgKYx5PwEKrac3GPNPf6HVMNhUIGuUh4wlDFR2jYYdkX6pL/rn73zTq/4pzUm8fOjAn5L8zDeHp9iXmUGOXZ+w==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [win32]

  '@tailwindcss/oxide-win32-x64-msvc@4.1.11':
    resolution: {integrity: sha512-YfHoggn1j0LK7wR82TOucWc5LDCguHnoS879idHekmmiR7g9HUtMw9MI0NHatS28u/Xlkfi9w5RJWgz2Dl+5Qg==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [win32]

  '@tailwindcss/oxide@4.1.11':
    resolution: {integrity: sha512-Q69XzrtAhuyfHo+5/HMgr1lAiPP/G40OMFAnws7xcFEYqcypZmdW8eGXaOUIeOl1dzPJBPENXgbjsOyhg2nkrg==}
    engines: {node: '>= 10'}

  '@tailwindcss/postcss@4.1.11':
    resolution: {integrity: sha512-q/EAIIpF6WpLhKEuQSEVMZNMIY8KhWoAemZ9eylNAih9jxMGAYPPWBn3I9QL/2jZ+e7OEz/tZkX5HwbBR4HohA==}

  '@tailwindcss/vite@4.1.11':
    resolution: {integrity: sha512-RHYhrR3hku0MJFRV+fN2gNbDNEh3dwKvY8XJvTxCSXeMOsCRSr+uKvDWQcbizrHgjML6ZmTE5OwMrl5wKcujCw==}
    peerDependencies:
      vite: ^5.2.0 || ^6 || ^7

  '@tanstack/directive-functions-plugin@1.124.1':
    resolution: {integrity: sha512-eZdsPCZz+7VIKiXAF5dNdLJBerAo4t79w/OQTWaKuqPLX1E9GQOKHsmTZChWeQbxPx+y+cOV3/0U/yKxtHsm0Q==}
    engines: {node: '>=12'}
    peerDependencies:
      vite: '>=6.0.0'

  '@tanstack/history@1.121.34':
    resolution: {integrity: sha512-YL8dGi5ZU+xvtav2boRlw4zrRghkY6hvdcmHhA0RGSJ/CBgzv+cbADW9eYJLx74XMZvIQ1pp6VMbrpXnnM5gHA==}
    engines: {node: '>=12'}

  '@tanstack/react-router-devtools@1.125.6':
    resolution: {integrity: sha512-3+Np/HPQ1jpdai58xY6fScnjJz08iIG6aKhCVVy8tfPC76jTyXc+ygqM9wtUt3kJYy9/Lf7j3dAJlbtxF+TIXg==}
    engines: {node: '>=12'}
    peerDependencies:
      '@tanstack/react-router': ^1.125.6
      react: '>=18.0.0 || >=19.0.0'
      react-dom: '>=18.0.0 || >=19.0.0'

  '@tanstack/react-router@1.125.6':
    resolution: {integrity: sha512-znyUGTq+WRhXwToNTYiluUBLjMdQVxz+ZQ9Ep2PBuS9O+3Qm3kaM7n64hA84ISoCtLqMwTo7Ofw0W4WeLdjpYg==}
    engines: {node: '>=12'}
    peerDependencies:
      react: '>=18.0.0 || >=19.0.0'
      react-dom: '>=18.0.0 || >=19.0.0'

  '@tanstack/react-start-client@1.125.6':
    resolution: {integrity: sha512-s7irNfPDVRlqumA5cHGAsfipyJicUpNIZ8veoKIl8WPYiWCIolbXWzSBXix96KxvFr20lJXgxRWRlWAe9GbOGA==}
    engines: {node: '>=12'}
    peerDependencies:
      react: '>=18.0.0 || >=19.0.0'
      react-dom: '>=18.0.0 || >=19.0.0'

  '@tanstack/react-start-plugin@1.126.1':
    resolution: {integrity: sha512-VXRbcNnpuTaLHpBcXQtBOWkk1tlSQM0iXwVI7xTPFr2U7/Iwj/Q7O+PiI/eH60XwGojJnGjelpEAde9KnJtP8w==}
    engines: {node: '>=12'}
    peerDependencies:
      '@vitejs/plugin-react': '>=4.3.4'
      vite: '>=6.0.0'

  '@tanstack/react-start-server@1.126.1':
    resolution: {integrity: sha512-AdX85pxM+3qgItLNWVpdkLeBuaHE1QQNQNMhm/BzB0fhyyqQXpuAkgUWhxsppU29E+uBQCx+UtramMnNFI7yCQ==}
    engines: {node: '>=12'}
    peerDependencies:
      react: '>=18.0.0 || >=19.0.0'
      react-dom: '>=18.0.0 || >=19.0.0'

  '@tanstack/react-start@1.126.1':
    resolution: {integrity: sha512-l1rUzvj0a/LmEAfnJTRxIf2gj21XkM2TgCwbC49WvqInXA0J6rvulfuqPsBTPSPedXS6bI0fWdQiistR5LN1/g==}
    engines: {node: '>=12'}
    peerDependencies:
      '@vitejs/plugin-react': '>=4.3.4'
      react: '>=18.0.0 || >=19.0.0'
      react-dom: '>=18.0.0 || >=19.0.0'
      vite: '>=6.0.0'

  '@tanstack/react-store@0.7.3':
    resolution: {integrity: sha512-3Dnqtbw9P2P0gw8uUM8WP2fFfg8XMDSZCTsywRPZe/XqqYW8PGkXKZTvP0AHkE4mpqP9Y43GpOg9vwO44azu6Q==}
    peerDependencies:
      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0
      react-dom: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0

  '@tanstack/router-core@1.125.4':
    resolution: {integrity: sha512-tdgGI0Kwt3Lgs9ceLbG32NPh4I2H1T9t2TKjcS+I78sifm5rjTWV8lfqVRNrvMPk5ek60vXPOL2AHAUg6ohwsA==}
    engines: {node: '>=12'}

  '@tanstack/router-devtools-core@1.125.4':
    resolution: {integrity: sha512-5QbCQCcJcN/M0NF2TARKqauJ8QeRuk7kyHQMCqOoSJWWGUVcDHEmcbg1ZCJevfPVZPgnUjV9mqDfCPTYWT8/+w==}
    engines: {node: '>=12'}
    peerDependencies:
      '@tanstack/router-core': ^1.125.4
      csstype: ^3.0.10
      solid-js: '>=1.9.5'
      tiny-invariant: ^1.3.3
    peerDependenciesMeta:
      csstype:
        optional: true

  '@tanstack/router-generator@1.125.4':
    resolution: {integrity: sha512-jF71znMvpZxmkQF0MxfjKKyvXtft9NWRCVcLhb+6d/8nrVGNiEw+dsXn/CLpeRQLk7Mg/fsp/WipBql1dd3Qaw==}
    engines: {node: '>=12'}

  '@tanstack/router-plugin@1.125.6':
    resolution: {integrity: sha512-SWfp++tkjb0grVqa/Xdvi9QAs93e9/fZMBZ6q0fvvQruMyciCmjWyE/qV3tS/Qh0WZdzIRP6yl8Gha2Lin4q1w==}
    engines: {node: '>=12'}
    peerDependencies:
      '@rsbuild/core': '>=1.0.2'
      '@tanstack/react-router': ^1.125.6
      vite: '>=5.0.0 || >=6.0.0'
      vite-plugin-solid: ^2.11.2
      webpack: '>=5.92.0'
    peerDependenciesMeta:
      '@rsbuild/core':
        optional: true
      '@tanstack/react-router':
        optional: true
      vite:
        optional: true
      vite-plugin-solid:
        optional: true
      webpack:
        optional: true

  '@tanstack/router-utils@1.121.21':
    resolution: {integrity: sha512-u7ubq1xPBtNiU7Fm+EOWlVWdgFLzuKOa1thhqdscVn8R4dNMUd1VoOjZ6AKmLw201VaUhFtlX+u0pjzI6szX7A==}
    engines: {node: '>=12'}

  '@tanstack/server-functions-plugin@1.124.1':
    resolution: {integrity: sha512-9GIu+PXu5itj+Q74FJQpd4WV3FikzkAAxvBl9hrnmiEwz+AGDZL0GOiGy++MdupHJXuHXXss9mHqKtNmw9wMdw==}
    engines: {node: '>=12'}

  '@tanstack/start-client-core@1.125.4':
    resolution: {integrity: sha512-rijB1mZf3TazmYinSZBYclUolc/h4W1t/20uOFsjZli/Si8QUaoBdsKHFnZj8c/73H8Yxdzi4ZkLrD2rAesZhg==}
    engines: {node: '>=12'}

  '@tanstack/start-plugin-core@1.126.1':
    resolution: {integrity: sha512-EuV10r6r+H6Y91U/YIgsgRyuzLlhnLMg8qFab+iq8w+DFW1rfs9eIqOcv2KGzwIDb5Wmkw3t7c2PJ5kT52J2gQ==}
    engines: {node: '>=12'}
    peerDependencies:
      vite: '>=6.0.0'

  '@tanstack/start-server-core@1.126.1':
    resolution: {integrity: sha512-dmVWtC1OcuLwiJM6fyk61e4TlTKCeVAoKV5Xg/FeVbD+rbAHF7AOsCln/rT3NgT0vUhO7Nxmlr2zjz1j0jV9Hg==}
    engines: {node: '>=12'}

  '@tanstack/start-server-functions-client@1.125.4':
    resolution: {integrity: sha512-/Hk6u19YQBbLbzKVZNlUOsPk+Ub84je4EK3ennLppuuNa7aPRvJXyRPn6kCLQXfLE/TZudirK0ze2HwHeuNgbQ==}
    engines: {node: '>=12'}

  '@tanstack/start-server-functions-fetcher@1.125.4':
    resolution: {integrity: sha512-vPWSbHlpCsg7g63gvKyiLWW3t4CW9apmNfPFIUKAPK+f+ZIP7PIefG60sFYRmS8jWvZvC1mSz66vkStvfUEfkQ==}
    engines: {node: '>=12'}

  '@tanstack/start-server-functions-server@1.124.1':
    resolution: {integrity: sha512-59NJqtdXm2c+JmwDqm3ZuvgcN1KT2LlvApelydj9y201lj76XjcEH4RqbJKm5G7C/wc98QPhghFHY8cwHJUCTg==}
    engines: {node: '>=12'}

  '@tanstack/store@0.7.2':
    resolution: {integrity: sha512-RP80Z30BYiPX2Pyo0Nyw4s1SJFH2jyM6f9i3HfX4pA+gm5jsnYryscdq2aIQLnL4TaGuQMO+zXmN9nh1Qck+Pg==}

  '@tanstack/virtual-core@3.13.12':
    resolution: {integrity: sha512-1YBOJfRHV4sXUmWsFSf5rQor4Ss82G8dQWLRbnk3GA4jeP8hQt1hxXh0tmflpC0dz3VgEv/1+qwPyLeWkQuPFA==}

  '@tanstack/virtual-file-routes@1.121.21':
    resolution: {integrity: sha512-3nuYsTyaq6ZN7jRZ9z6Gj3GXZqBOqOT0yzd/WZ33ZFfv4yVNIvsa5Lw+M1j3sgyEAxKMqGu/FaNi7FCjr3yOdw==}
    engines: {node: '>=12'}

  '@tanstack/vue-virtual@3.13.12':
    resolution: {integrity: sha512-vhF7kEU9EXWXh+HdAwKJ2m3xaOnTTmgcdXcF2pim8g4GvI7eRrk2YRuV5nUlZnd/NbCIX4/Ja2OZu5EjJL06Ww==}
    peerDependencies:
      vue: ^2.7.0 || ^3.0.0

  '@ts-morph/common@0.27.0':
    resolution: {integrity: sha512-Wf29UqxWDpc+i61k3oIOzcUfQt79PIT9y/MWfAGlrkjg6lBC1hwDECLXPVJAhWjiGbfBCxZd65F/LIZF3+jeJQ==}

  '@tybys/wasm-util@0.9.0':
    resolution: {integrity: sha512-6+7nlbMVX/PVDCwaIQ8nTOPveOcFLSt8GcXdx8hD0bt39uWxYT88uXzqTd4fTvqta7oeUJqudepapKNt2DYJFw==}

  '@types/aws-lambda@8.10.149':
    resolution: {integrity: sha512-NXSZIhfJjnXqJgtS7IwutqIF/SOy1Wz5Px4gUY1RWITp3AYTyuJS4xaXr/bIJY1v15XMzrJ5soGnPM+7uigZjA==}

  '@types/babel__code-frame@7.0.6':
    resolution: {integrity: sha512-Anitqkl3+KrzcW2k77lRlg/GfLZLWXBuNgbEcIOU6M92yw42vsd3xV/Z/yAHEj8m+KUjL6bWOVOFqX8PFPJ4LA==}

  '@types/babel__core@7.20.5':
    resolution: {integrity: sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==}

  '@types/babel__generator@7.27.0':
    resolution: {integrity: sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==}

  '@types/babel__template@7.4.4':
    resolution: {integrity: sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==}

  '@types/babel__traverse@7.20.7':
    resolution: {integrity: sha512-dkO5fhS7+/oos4ciWxyEyjWe48zmG6wbCheo/G2ZnHx4fs3EU6YC6UM8rk56gAjNJ9P3MTH2jo5jb92/K6wbng==}

  '@types/braces@3.0.5':
    resolution: {integrity: sha512-SQFof9H+LXeWNz8wDe7oN5zu7ket0qwMu5vZubW4GCJ8Kkeh6nBWUz87+KTz/G3Kqsrp0j/W253XJb3KMEeg3w==}

  '@types/chai@5.2.2':
    resolution: {integrity: sha512-8kB30R7Hwqf40JPiKhVzodJs2Qc1ZJ5zuT3uzw5Hq/dhNCl3G3l83jfpdI1e20BP348+fV7VIL/+FxaXkqBmWg==}

  '@types/cross-spawn@6.0.6':
    resolution: {integrity: sha512-fXRhhUkG4H3TQk5dBhQ7m/JDdSNHKwR2BBia62lhwEIq9xGiQKLxd6LymNhn47SjXhsUEPmxi+PKw2OkW4LLjA==}

  '@types/d3-array@3.2.1':
    resolution: {integrity: sha512-Y2Jn2idRrLzUfAKV2LyRImR+y4oa2AntrgID95SHJxuMUrkNXmanDSed71sRNZysveJVt1hLLemQZIady0FpEg==}

  '@types/d3-axis@3.0.6':
    resolution: {integrity: sha512-pYeijfZuBd87T0hGn0FO1vQ/cgLk6E1ALJjfkC0oJ8cbwkZl3TpgS8bVBLZN+2jjGgg38epgxb2zmoGtSfvgMw==}

  '@types/d3-brush@3.0.6':
    resolution: {integrity: sha512-nH60IZNNxEcrh6L1ZSMNA28rj27ut/2ZmI3r96Zd+1jrZD++zD3LsMIjWlvg4AYrHn/Pqz4CF3veCxGjtbqt7A==}

  '@types/d3-chord@3.0.6':
    resolution: {integrity: sha512-LFYWWd8nwfwEmTZG9PfQxd17HbNPksHBiJHaKuY1XeqscXacsS2tyoo6OdRsjf+NQYeB6XrNL3a25E3gH69lcg==}

  '@types/d3-color@3.1.3':
    resolution: {integrity: sha512-iO90scth9WAbmgv7ogoq57O9YpKmFBbmoEoCHDB2xMBY0+/KVrqAaCDyCE16dUspeOvIxFFRI+0sEtqDqy2b4A==}

  '@types/d3-contour@3.0.6':
    resolution: {integrity: sha512-BjzLgXGnCWjUSYGfH1cpdo41/hgdWETu4YxpezoztawmqsvCeep+8QGfiY6YbDvfgHz/DkjeIkkZVJavB4a3rg==}

  '@types/d3-delaunay@6.0.4':
    resolution: {integrity: sha512-ZMaSKu4THYCU6sV64Lhg6qjf1orxBthaC161plr5KuPHo3CNm8DTHiLw/5Eq2b6TsNP0W0iJrUOFscY6Q450Hw==}

  '@types/d3-dispatch@3.0.6':
    resolution: {integrity: sha512-4fvZhzMeeuBJYZXRXrRIQnvUYfyXwYmLsdiN7XXmVNQKKw1cM8a5WdID0g1hVFZDqT9ZqZEY5pD44p24VS7iZQ==}

  '@types/d3-drag@3.0.7':
    resolution: {integrity: sha512-HE3jVKlzU9AaMazNufooRJ5ZpWmLIoc90A37WU2JMmeq28w1FQqCZswHZ3xR+SuxYftzHq6WU6KJHvqxKzTxxQ==}

  '@types/d3-dsv@3.0.7':
    resolution: {integrity: sha512-n6QBF9/+XASqcKK6waudgL0pf/S5XHPPI8APyMLLUHd8NqouBGLsU8MgtO7NINGtPBtk9Kko/W4ea0oAspwh9g==}

  '@types/d3-ease@3.0.2':
    resolution: {integrity: sha512-NcV1JjO5oDzoK26oMzbILE6HW7uVXOHLQvHshBUW4UMdZGfiY6v5BeQwh9a9tCzv+CeefZQHJt5SRgK154RtiA==}

  '@types/d3-fetch@3.0.7':
    resolution: {integrity: sha512-fTAfNmxSb9SOWNB9IoG5c8Hg6R+AzUHDRlsXsDZsNp6sxAEOP0tkP3gKkNSO/qmHPoBFTxNrjDprVHDQDvo5aA==}

  '@types/d3-force@3.0.10':
    resolution: {integrity: sha512-ZYeSaCF3p73RdOKcjj+swRlZfnYpK1EbaDiYICEEp5Q6sUiqFaFQ9qgoshp5CzIyyb/yD09kD9o2zEltCexlgw==}

  '@types/d3-format@3.0.4':
    resolution: {integrity: sha512-fALi2aI6shfg7vM5KiR1wNJnZ7r6UuggVqtDA+xiEdPZQwy/trcQaHnwShLuLdta2rTymCNpxYTiMZX/e09F4g==}

  '@types/d3-geo@3.1.0':
    resolution: {integrity: sha512-856sckF0oP/diXtS4jNsiQw/UuK5fQG8l/a9VVLeSouf1/PPbBE1i1W852zVwKwYCBkFJJB7nCFTbk6UMEXBOQ==}

  '@types/d3-hierarchy@1.1.11':
    resolution: {integrity: sha512-lnQiU7jV+Gyk9oQYk0GGYccuexmQPTp08E0+4BidgFdiJivjEvf+esPSdZqCZ2C7UwTWejWpqetVaU8A+eX3FA==}

  '@types/d3-hierarchy@3.1.7':
    resolution: {integrity: sha512-tJFtNoYBtRtkNysX1Xq4sxtjK8YgoWUNpIiUee0/jHGRwqvzYxkq0hGVbbOGSz+JgFxxRu4K8nb3YpG3CMARtg==}

  '@types/d3-interpolate@3.0.4':
    resolution: {integrity: sha512-mgLPETlrpVV1YRJIglr4Ez47g7Yxjl1lj7YKsiMCb27VJH9W8NVM6Bb9d8kkpG/uAQS5AmbA48q2IAolKKo1MA==}

  '@types/d3-path@3.1.1':
    resolution: {integrity: sha512-VMZBYyQvbGmWyWVea0EHs/BwLgxc+MKi1zLDCONksozI4YJMcTt8ZEuIR4Sb1MMTE8MMW49v0IwI5+b7RmfWlg==}

  '@types/d3-polygon@3.0.2':
    resolution: {integrity: sha512-ZuWOtMaHCkN9xoeEMr1ubW2nGWsp4nIql+OPQRstu4ypeZ+zk3YKqQT0CXVe/PYqrKpZAi+J9mTs05TKwjXSRA==}

  '@types/d3-quadtree@3.0.6':
    resolution: {integrity: sha512-oUzyO1/Zm6rsxKRHA1vH0NEDG58HrT5icx/azi9MF1TWdtttWl0UIUsjEQBBh+SIkrpd21ZjEv7ptxWys1ncsg==}

  '@types/d3-random@3.0.3':
    resolution: {integrity: sha512-Imagg1vJ3y76Y2ea0871wpabqp613+8/r0mCLEBfdtqC7xMSfj9idOnmBYyMoULfHePJyxMAw3nWhJxzc+LFwQ==}

  '@types/d3-scale-chromatic@3.1.0':
    resolution: {integrity: sha512-iWMJgwkK7yTRmWqRB5plb1kadXyQ5Sj8V/zYlFGMUBbIPKQScw+Dku9cAAMgJG+z5GYDoMjWGLVOvjghDEFnKQ==}

  '@types/d3-scale@4.0.9':
    resolution: {integrity: sha512-dLmtwB8zkAeO/juAMfnV+sItKjlsw2lKdZVVy6LRr0cBmegxSABiLEpGVmSJJ8O08i4+sGR6qQtb6WtuwJdvVw==}

  '@types/d3-selection@3.0.11':
    resolution: {integrity: sha512-bhAXu23DJWsrI45xafYpkQ4NtcKMwWnAC/vKrd2l+nxMFuvOT3XMYTIj2opv8vq8AO5Yh7Qac/nSeP/3zjTK0w==}

  '@types/d3-shape@3.1.7':
    resolution: {integrity: sha512-VLvUQ33C+3J+8p+Daf+nYSOsjB4GXp19/S/aGo60m9h1v6XaxjiT82lKVWJCfzhtuZ3yD7i/TPeC/fuKLLOSmg==}

  '@types/d3-time-format@4.0.3':
    resolution: {integrity: sha512-5xg9rC+wWL8kdDj153qZcsJ0FWiFt0J5RB6LYUNZjwSnesfblqrI/bJ1wBdJ8OQfncgbJG5+2F+qfqnqyzYxyg==}

  '@types/d3-time@3.0.4':
    resolution: {integrity: sha512-yuzZug1nkAAaBlBBikKZTgzCeA+k1uy4ZFwWANOfKw5z5LRhV0gNA7gNkKm7HoK+HRN0wX3EkxGk0fpbWhmB7g==}

  '@types/d3-timer@3.0.2':
    resolution: {integrity: sha512-Ps3T8E8dZDam6fUyNiMkekK3XUsaUEik+idO9/YjPtfj2qruF8tFBXS7XhtE4iIXBLxhmLjP3SXpLhVf21I9Lw==}

  '@types/d3-transition@3.0.9':
    resolution: {integrity: sha512-uZS5shfxzO3rGlu0cC3bjmMFKsXv+SmZZcgp0KD22ts4uGXp5EVYGzu/0YdwZeKmddhcAccYtREJKkPfXkZuCg==}

  '@types/d3-zoom@3.0.8':
    resolution: {integrity: sha512-iqMC4/YlFCSlO8+2Ii1GGGliCAY4XdeG748w5vQUbevlbDu0zSjH/+jojorQVBK/se0j6DUFNPBGSqD3YWYnDw==}

  '@types/d3@7.4.3':
    resolution: {integrity: sha512-lZXZ9ckh5R8uiFVt8ogUNf+pIrK4EsWrx2Np75WvF/eTpJ0FMHNhjXk8CKEx/+gpHbNQyJWehbFaTvqmHWB3ww==}

  '@types/debug@4.1.12':
    resolution: {integrity: sha512-vIChWdVG3LG1SMxEvI/AK+FWJthlrqlTu7fbrlywTkkaONwk/UAGaULXRlf8vkzFBLVm0zkMdCquhL5aOjhXPQ==}

  '@types/deep-eql@4.0.2':
    resolution: {integrity: sha512-c9h9dVVMigMPc4bwTvC5dxqtqJZwQPePsWjPlpSOnojbor6pGqdk541lfA7AqFQr5pB1BRdq0juY9db81BwyFw==}

  '@types/diff-match-patch@1.0.36':
    resolution: {integrity: sha512-xFdR6tkm0MWvBfO8xXCSsinYxHcqkQUlcHeSpMC2ukzOb6lwQAfDmW+Qt0AvlGd8HpsS28qKsB+oPeJn9I39jg==}

  '@types/eslint-scope@3.7.7':
    resolution: {integrity: sha512-MzMFlSLBqNF2gcHWO0G1vP/YQyfvrxZ0bF+u7mzUdZ1/xK4A4sru+nraZz5i3iEIk1l1uyicaDVTB4QbbEkAYg==}

  '@types/eslint@9.6.1':
    resolution: {integrity: sha512-FXx2pKgId/WyYo2jXw63kk7/+TY7u7AziEJxJAnSFzHlqTAS3Ync6SvgYAN/k4/PQpnnVuzoMuVnByKK2qp0ag==}

  '@types/estree-jsx@1.0.5':
    resolution: {integrity: sha512-52CcUVNFyfb1A2ALocQw/Dd1BQFNmSdkuC3BkZ6iqhdMfQz7JWOFRuJFloOzjk+6WijU56m9oKXFAXc7o3Towg==}

  '@types/estree@1.0.8':
    resolution: {integrity: sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==}

  '@types/geojson@7946.0.16':
    resolution: {integrity: sha512-6C8nqWur3j98U6+lXDfTUWIfgvZU+EumvpHKcYjujKH7woYyLj2sUmff0tRhrqM7BohUw7Pz3ZB1jj2gW9Fvmg==}

  '@types/har-format@1.2.16':
    resolution: {integrity: sha512-fluxdy7ryD3MV6h8pTfTYpy/xQzCFC7m89nOH9y94cNqJ1mDIDPut7MnRHI3F6qRmh/cT2fUjG1MLdCNb4hE9A==}

  '@types/hast@3.0.4':
    resolution: {integrity: sha512-WPs+bbQw5aCj+x6laNGWLH3wviHtoCv/P3+otBhbOhJgG8qtpdAMlTCxLtsTWA7LH1Oh/bFCHsBn0TPS5m30EQ==}

  '@types/js-yaml@4.0.9':
    resolution: {integrity: sha512-k4MGaQl5TGo/iipqb2UDG2UwjXziSWkh0uysQelTlJpX1qGlpUZYm8PnO4DxG1qBomtJUdYJ6qR6xdIah10JLg==}

  '@types/json-schema@7.0.15':
    resolution: {integrity: sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==}

  '@types/katex@0.16.7':
    resolution: {integrity: sha512-HMwFiRujE5PjrgwHQ25+bsLJgowjGjm5Z8FVSf0N6PwgJrwxH0QxzHYDcKsTfV3wva0vzrpqMTJS2jXPr5BMEQ==}

  '@types/lodash.merge@4.6.9':
    resolution: {integrity: sha512-23sHDPmzd59kUgWyKGiOMO2Qb9YtqRO/x4IhkgNUiPQ1+5MUVqi6bCZeq9nBJ17msjIMbEIO5u+XW4Kz6aGUhQ==}

  '@types/lodash@4.17.16':
    resolution: {integrity: sha512-HX7Em5NYQAXKW+1T+FiuG27NGwzJfCX3s1GjOa7ujxZa52kjJLOr4FUxT+giF6Tgxv1e+/czV/iTtBw27WTU9g==}

  '@types/mdast@4.0.4':
    resolution: {integrity: sha512-kGaNbPh1k7AFzgpud/gMdvIm5xuECykRR+JnWKQno9TAXVa6WIVCGTPvYGekIDL4uwCZQSYbUxNBSb1aUo79oA==}

  '@types/mdx@2.0.13':
    resolution: {integrity: sha512-+OWZQfAYyio6YkJb3HLxDrvnx6SWWDbC0zVPfBRzUk0/nqoDyf6dNxQi3eArPe8rJ473nobTMQ/8Zk+LxJ+Yuw==}

  '@types/micromatch@4.0.9':
    resolution: {integrity: sha512-7V+8ncr22h4UoYRLnLXSpTxjQrNUXtWHGeMPRJt1nULXI57G9bIcpyrHlmrQ7QK24EyyuXvYcSSWAM8GA9nqCg==}

  '@types/ms@2.1.0':
    resolution: {integrity: sha512-GsCCIZDE/p3i96vtEqx+7dBUGXrc7zeSK3wwPHIaRThS+9OhWIXRqzs4d6k1SVU8g91DrNRWxWUGhp5KXQb2VA==}

  '@types/negotiator@0.6.4':
    resolution: {integrity: sha512-elf6BsTq+AkyNsb2h5cGNst2Mc7dPliVoAPm1fXglC/BM3f2pFA40BaSSv3E5lyHteEawVKLP+8TwiY1DMNb3A==}

  '@types/node@12.20.55':
    resolution: {integrity: sha512-J8xLz7q2OFulZ2cyGTLE1TbbZcjpno7FaN6zdJNrgAdrJ+DZzh/uFR6YrTb4C+nXakvud8Q4+rbhoIWlYQbUFQ==}

  '@types/node@22.16.2':
    resolution: {integrity: sha512-Cdqa/eJTvt4fC4wmq1Mcc0CPUjp/Qy2FGqLza3z3pKymsI969TcZ54diNJv8UYUgeWxyb8FSbCkhdR6WqmUFhA==}

  '@types/node@24.0.12':
    resolution: {integrity: sha512-LtOrbvDf5ndC9Xi+4QZjVL0woFymF/xSTKZKPgrrl7H7XoeDvnD+E2IclKVDyaK9UM756W/3BXqSU+JEHopA9g==}

  '@types/normalize-package-data@2.4.4':
    resolution: {integrity: sha512-37i+OaWTh9qeK4LSHPsyRC7NahnGotNuZvjLSgcPzblpHB3rrCJxAOgI5gCdKm7coonsaX1Of0ILiTcnZjbfxA==}

  '@types/openapi-sampler@1.0.3':
    resolution: {integrity: sha512-SwTm7ZahuDRKirbFSBu30X64mvdwITxS5yeC9JNV20Vp23Ymbl+hVdYxegkLDtYvXIxnUngJb8Ok+m3iEYfZiQ==}

  '@types/parse-json@4.0.2':
    resolution: {integrity: sha512-dISoDXWWQwUquiKsyZ4Ng+HX2KsPL7LyHKHQwgGFEA3IaKac4Obd+h2a/a6waisAoepJlBcx9paWqjA8/HVjCw==}

  '@types/react-dom@19.1.6':
    resolution: {integrity: sha512-4hOiT/dwO8Ko0gV1m/TJZYk3y0KBnY9vzDh7W+DH17b2HFSOGgdj33dhihPeuy3l0q23+4e+hoXHV6hCC4dCXw==}
    peerDependencies:
      '@types/react': ^19.0.0

  '@types/react-reconciler@0.28.9':
    resolution: {integrity: sha512-HHM3nxyUZ3zAylX8ZEyrDNd2XZOnQ0D5XfunJF5FLQnZbHHYq4UWvW1QfelQNXv1ICNkwYhfxjwfnqivYB6bFg==}
    peerDependencies:
      '@types/react': '*'

  '@types/react@19.1.8':
    resolution: {integrity: sha512-AwAfQ2Wa5bCx9WP8nZL2uMZWod7J7/JSplxbTmBQ5ms6QpqNYm672H0Vu9ZVKVngQ+ii4R/byguVEUZQyeg44g==}

  '@types/resolve@1.20.2':
    resolution: {integrity: sha512-60BCwRFOZCQhDncwQdxxeOEEkbc5dIMccYLwbxsS4TUNeVECQ/pBJ0j09mrHOl/JJvpRPGwO9SvE4nR2Nb/a4Q==}

  '@types/resolve@1.20.6':
    resolution: {integrity: sha512-A4STmOXPhMUtHH+S6ymgE2GiBSMqf4oTvcQZMcHzokuTLVYzXTB8ttjcgxOVaAp2lGwEdzZ0J+cRbbeevQj1UQ==}

  '@types/triple-beam@1.3.5':
    resolution: {integrity: sha512-6WaYesThRMCl19iryMYP7/x2OVgCtbIVflDGFpWnb9irXI3UjYE4AzmYuiUKY1AJstGijoY+MgUszMgRxIYTYw==}

  '@types/trusted-types@2.0.7':
    resolution: {integrity: sha512-ScaPdn1dQczgbl0QFTeTOmVHFULt394XJgOQNoyVhZ6r2vLnMLJfBPd53SB52T/3G36VI1/g2MZaX0cwDuXsfw==}

  '@types/unist@2.0.11':
    resolution: {integrity: sha512-CmBKiL6NNo/OqgmMn95Fk9Whlp2mtvIv+KNpQKN2F4SjvrEesubTRWGYSg+BnWZOnlCaSTU1sMpsBOzgbYhnsA==}

  '@types/unist@3.0.3':
    resolution: {integrity: sha512-ko/gIFJRv177XgZsZcBwnqJN5x/Gien8qNOn0D5bQU/zAzVf9Zt3BlcUiLqhV9y4ARk0GbT3tnUiPNgnTXzc/Q==}

  '@types/web-bluetooth@0.0.20':
    resolution: {integrity: sha512-g9gZnnXVq7gM7v3tJCWV/qw7w+KeOlSHAhgF9RytFyifW6AF61hdT2ucrYhPq9hLs5JIryeupHV3qGk95dH9ow==}

  '@types/yauzl@2.10.3':
    resolution: {integrity: sha512-oJoftv0LSuaDZE3Le4DbKX+KS9G36NzOeSap90UIK0yMA/NhKJhqlSGtNDORNRaIbQfzjXDrQa0ytJ6mNRGz/Q==}

  '@typescript-eslint/eslint-plugin@8.36.0':
    resolution: {integrity: sha512-lZNihHUVB6ZZiPBNgOQGSxUASI7UJWhT8nHyUGCnaQ28XFCw98IfrMCG3rUl1uwUWoAvodJQby2KTs79UTcrAg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      '@typescript-eslint/parser': ^8.36.0
      eslint: ^8.57.0 || ^9.0.0
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/parser@8.36.0':
    resolution: {integrity: sha512-FuYgkHwZLuPbZjQHzJXrtXreJdFMKl16BFYyRrLxDhWr6Qr7Kbcu2s1Yhu8tsiMXw1S0W1pjfFfYEt+R604s+Q==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^8.57.0 || ^9.0.0
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/project-service@8.36.0':
    resolution: {integrity: sha512-JAhQFIABkWccQYeLMrHadu/fhpzmSQ1F1KXkpzqiVxA/iYI6UnRt2trqXHt1sYEcw1mxLnB9rKMsOxXPxowN/g==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/scope-manager@8.36.0':
    resolution: {integrity: sha512-wCnapIKnDkN62fYtTGv2+RY8FlnBYA3tNm0fm91kc2BjPhV2vIjwwozJ7LToaLAyb1ca8BxrS7vT+Pvvf7RvqA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@typescript-eslint/tsconfig-utils@8.36.0':
    resolution: {integrity: sha512-Nhh3TIEgN18mNbdXpd5Q8mSCBnrZQeY9V7Ca3dqYvNDStNIGRmJA6dmrIPMJ0kow3C7gcQbpsG2rPzy1Ks/AnA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/type-utils@8.36.0':
    resolution: {integrity: sha512-5aaGYG8cVDd6cxfk/ynpYzxBRZJk7w/ymto6uiyUFtdCozQIsQWh7M28/6r57Fwkbweng8qAzoMCPwSJfWlmsg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^8.57.0 || ^9.0.0
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/types@8.36.0':
    resolution: {integrity: sha512-xGms6l5cTJKQPZOKM75Dl9yBfNdGeLRsIyufewnxT4vZTrjC0ImQT4fj8QmtJK84F58uSh5HVBSANwcfiXxABQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@typescript-eslint/typescript-estree@8.36.0':
    resolution: {integrity: sha512-JaS8bDVrfVJX4av0jLpe4ye0BpAaUW7+tnS4Y4ETa3q7NoZgzYbN9zDQTJ8kPb5fQ4n0hliAt9tA4Pfs2zA2Hg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/utils@8.36.0':
    resolution: {integrity: sha512-VOqmHu42aEMT+P2qYjylw6zP/3E/HvptRwdn/PZxyV27KhZg2IOszXod4NcXisWzPAGSS4trE/g4moNj6XmH2g==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^8.57.0 || ^9.0.0
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/visitor-keys@8.36.0':
    resolution: {integrity: sha512-vZrhV2lRPWDuGoxcmrzRZyxAggPL+qp3WzUrlZD+slFueDiYHxeBa34dUXPuC0RmGKzl4lS5kFJYvKCq9cnNDA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@typescript/vfs@1.6.1':
    resolution: {integrity: sha512-JwoxboBh7Oz1v38tPbkrZ62ZXNHAk9bJ7c9x0eI5zBfBnBYGhURdbnh7Z4smN/MV48Y5OCcZb58n972UtbazsA==}
    peerDependencies:
      typescript: '*'

  '@ungap/structured-clone@1.3.0':
    resolution: {integrity: sha512-WmoN8qaIAo7WTYWbAZuG8PYEhn5fkz7dZrqTBZ7dtt//lL2Gwms1IcnQ5yHqjDfX8Ft5j4YzDM23f87zBfDe9g==}

  '@vercel/nft@0.29.4':
    resolution: {integrity: sha512-6lLqMNX3TuycBPABycx7A9F1bHQR7kiQln6abjFbPrf5C/05qHM9M5E4PeTE59c7z8g6vHnx1Ioihb2AQl7BTA==}
    engines: {node: '>=18'}
    hasBin: true

  '@vinxi/listhen@1.5.6':
    resolution: {integrity: sha512-WSN1z931BtasZJlgPp704zJFnQFRg7yzSjkm3MzAWQYe4uXFXlFr1hc5Ac2zae5/HDOz5x1/zDM5Cb54vTCnWw==}
    hasBin: true

  '@vitejs/plugin-react@4.6.0':
    resolution: {integrity: sha512-5Kgff+m8e2PB+9j51eGHEpn5kUzRKH2Ry0qGoe8ItJg7pqnkPrYPkDQZGgGmTa0EGarHrkjLvOdU3b1fzI8otQ==}
    engines: {node: ^14.18.0 || >=16.0.0}
    peerDependencies:
      vite: ^4.2.0 || ^5.0.0 || ^6.0.0 || ^7.0.0-beta.0

  '@vitest/expect@3.2.4':
    resolution: {integrity: sha512-Io0yyORnB6sikFlt8QW5K7slY4OjqNX9jmJQ02QDda8lyM6B5oNgVWoSoKPac8/kgnCUzuHQKrSLtu/uOqqrig==}

  '@vitest/mocker@3.2.4':
    resolution: {integrity: sha512-46ryTE9RZO/rfDd7pEqFl7etuyzekzEhUbTW3BvmeO/BcCMEgq59BKhek3dXDWgAj4oMK6OZi+vRr1wPW6qjEQ==}
    peerDependencies:
      msw: ^2.4.9
      vite: ^5.0.0 || ^6.0.0 || ^7.0.0-0
    peerDependenciesMeta:
      msw:
        optional: true
      vite:
        optional: true

  '@vitest/pretty-format@3.2.4':
    resolution: {integrity: sha512-IVNZik8IVRJRTr9fxlitMKeJeXFFFN0JaB9PHPGQ8NKQbGpfjlTx9zO4RefN8gp7eqjNy8nyK3NZmBzOPeIxtA==}

  '@vitest/runner@3.2.4':
    resolution: {integrity: sha512-oukfKT9Mk41LreEW09vt45f8wx7DordoWUZMYdY/cyAk7w5TWkTRCNZYF7sX7n2wB7jyGAl74OxgwhPgKaqDMQ==}

  '@vitest/snapshot@3.2.4':
    resolution: {integrity: sha512-dEYtS7qQP2CjU27QBC5oUOxLE/v5eLkGqPE0ZKEIDGMs4vKWe7IjgLOeauHsR0D5YuuycGRO5oSRXnwnmA78fQ==}

  '@vitest/spy@3.2.4':
    resolution: {integrity: sha512-vAfasCOe6AIK70iP5UD11Ac4siNUNJ9i/9PZ3NKx07sG6sUxeag1LWdNrMWeKKYBLlzuK+Gn65Yd5nyL6ds+nw==}

  '@vitest/utils@3.2.4':
    resolution: {integrity: sha512-fB2V0JFrQSMsCo9HiSq3Ezpdv4iYaXRG1Sx8edX3MwxfyNn83mKiGzOcH+Fkxt4MHxr3y42fQi1oeAInqgX2QA==}

  '@vue/compiler-core@3.5.17':
    resolution: {integrity: sha512-Xe+AittLbAyV0pabcN7cP7/BenRBNcteM4aSDCtRvGw0d9OL+HG1u/XHLY/kt1q4fyMeZYXyIYrsHuPSiDPosA==}

  '@vue/compiler-dom@3.5.17':
    resolution: {integrity: sha512-+2UgfLKoaNLhgfhV5Ihnk6wB4ljyW1/7wUIog2puUqajiC29Lp5R/IKDdkebh9jTbTogTbsgB+OY9cEWzG95JQ==}

  '@vue/compiler-sfc@3.5.17':
    resolution: {integrity: sha512-rQQxbRJMgTqwRugtjw0cnyQv9cP4/4BxWfTdRBkqsTfLOHWykLzbOc3C4GGzAmdMDxhzU/1Ija5bTjMVrddqww==}

  '@vue/compiler-ssr@3.5.17':
    resolution: {integrity: sha512-hkDbA0Q20ZzGgpj5uZjb9rBzQtIHLS78mMilwrlpWk2Ep37DYntUz0PonQ6kr113vfOEdM+zTBuJDaceNIW0tQ==}

  '@vue/devtools-api@6.6.4':
    resolution: {integrity: sha512-sGhTPMuXqZ1rVOk32RylztWkfXTRhuS7vgAKv0zjqk8gbsHkJ7xfFf+jbySxt7tWObEJwyKaHMikV/WGDiQm8g==}

  '@vue/reactivity@3.5.17':
    resolution: {integrity: sha512-l/rmw2STIscWi7SNJp708FK4Kofs97zc/5aEPQh4bOsReD/8ICuBcEmS7KGwDj5ODQLYWVN2lNibKJL1z5b+Lw==}

  '@vue/runtime-core@3.5.17':
    resolution: {integrity: sha512-QQLXa20dHg1R0ri4bjKeGFKEkJA7MMBxrKo2G+gJikmumRS7PTD4BOU9FKrDQWMKowz7frJJGqBffYMgQYS96Q==}

  '@vue/runtime-dom@3.5.17':
    resolution: {integrity: sha512-8El0M60TcwZ1QMz4/os2MdlQECgGoVHPuLnQBU3m9h3gdNRW9xRmI8iLS4t/22OQlOE6aJvNNlBiCzPHur4H9g==}

  '@vue/server-renderer@3.5.17':
    resolution: {integrity: sha512-BOHhm8HalujY6lmC3DbqF6uXN/K00uWiEeF22LfEsm9Q93XeJ/plHTepGwf6tqFcF7GA5oGSSAAUock3VvzaCA==}
    peerDependencies:
      vue: 3.5.17

  '@vue/shared@3.5.17':
    resolution: {integrity: sha512-CabR+UN630VnsJO/jHWYBC1YVXyMq94KKp6iF5MQgZJs5I8cmjw6oVMO1oDbtBkENSHSSn/UadWlW/OAgdmKrg==}

  '@vueuse/core@10.11.1':
    resolution: {integrity: sha512-guoy26JQktXPcz+0n3GukWIy/JDNKti9v6VEMu6kV2sYBsWuGiTU8OWdg+ADfUbHg3/3DlqySDe7JmdHrktiww==}

  '@vueuse/core@11.3.0':
    resolution: {integrity: sha512-7OC4Rl1f9G8IT6rUfi9JrKiXy4bfmHhZ5x2Ceojy0jnd3mHNEvV4JaRygH362ror6/NZ+Nl+n13LPzGiPN8cKA==}

  '@vueuse/integrations@11.3.0':
    resolution: {integrity: sha512-5fzRl0apQWrDezmobchoiGTkGw238VWESxZHazfhP3RM7pDSiyXy18QbfYkILoYNTd23HPAfQTJpkUc5QbkwTw==}
    peerDependencies:
      async-validator: ^4
      axios: ^1
      change-case: ^5
      drauu: ^0.4
      focus-trap: ^7
      fuse.js: ^7
      idb-keyval: ^6
      jwt-decode: ^4
      nprogress: ^0.2
      qrcode: ^1.5
      sortablejs: ^1
      universal-cookie: ^7
    peerDependenciesMeta:
      async-validator:
        optional: true
      axios:
        optional: true
      change-case:
        optional: true
      drauu:
        optional: true
      focus-trap:
        optional: true
      fuse.js:
        optional: true
      idb-keyval:
        optional: true
      jwt-decode:
        optional: true
      nprogress:
        optional: true
      qrcode:
        optional: true
      sortablejs:
        optional: true
      universal-cookie:
        optional: true

  '@vueuse/metadata@10.11.1':
    resolution: {integrity: sha512-IGa5FXd003Ug1qAZmyE8wF3sJ81xGLSqTqtQ6jaVfkeZ4i5kS2mwQF61yhVqojRnenVew5PldLyRgvdl4YYuSw==}

  '@vueuse/metadata@11.3.0':
    resolution: {integrity: sha512-pwDnDspTqtTo2HwfLw4Rp6yywuuBdYnPYDq+mO38ZYKGebCUQC/nVj/PXSiK9HX5otxLz8Fn7ECPbjiRz2CC3g==}

  '@vueuse/shared@10.11.1':
    resolution: {integrity: sha512-LHpC8711VFZlDaYUXEBbFBCQ7GS3dVU9mjOhhMhXP6txTV4EhYQg/KGnQuvt/sPAtoUKq7VVUnL6mVtFoL42sA==}

  '@vueuse/shared@11.3.0':
    resolution: {integrity: sha512-P8gSSWQeucH5821ek2mn/ciCk+MS/zoRKqdQIM3bHq6p7GXDAJLmnRRKmF5F65sAVJIfzQlwR3aDzwCn10s8hA==}

  '@webassemblyjs/ast@1.14.1':
    resolution: {integrity: sha512-nuBEDgQfm1ccRp/8bCQrx1frohyufl4JlbMMZ4P1wpeOfDhF6FQkxZJ1b/e+PLwr6X1Nhw6OLme5usuBWYBvuQ==}

  '@webassemblyjs/floating-point-hex-parser@1.13.2':
    resolution: {integrity: sha512-6oXyTOzbKxGH4steLbLNOu71Oj+C8Lg34n6CqRvqfS2O71BxY6ByfMDRhBytzknj9yGUPVJ1qIKhRlAwO1AovA==}

  '@webassemblyjs/helper-api-error@1.13.2':
    resolution: {integrity: sha512-U56GMYxy4ZQCbDZd6JuvvNV/WFildOjsaWD3Tzzvmw/mas3cXzRJPMjP83JqEsgSbyrmaGjBfDtV7KDXV9UzFQ==}

  '@webassemblyjs/helper-buffer@1.14.1':
    resolution: {integrity: sha512-jyH7wtcHiKssDtFPRB+iQdxlDf96m0E39yb0k5uJVhFGleZFoNw1c4aeIcVUPPbXUVJ94wwnMOAqUHyzoEPVMA==}

  '@webassemblyjs/helper-numbers@1.13.2':
    resolution: {integrity: sha512-FE8aCmS5Q6eQYcV3gI35O4J789wlQA+7JrqTTpJqn5emA4U2hvwJmvFRC0HODS+3Ye6WioDklgd6scJ3+PLnEA==}

  '@webassemblyjs/helper-wasm-bytecode@1.13.2':
    resolution: {integrity: sha512-3QbLKy93F0EAIXLh0ogEVR6rOubA9AoZ+WRYhNbFyuB70j3dRdwH9g+qXhLAO0kiYGlg3TxDV+I4rQTr/YNXkA==}

  '@webassemblyjs/helper-wasm-section@1.14.1':
    resolution: {integrity: sha512-ds5mXEqTJ6oxRoqjhWDU83OgzAYjwsCV8Lo/N+oRsNDmx/ZDpqalmrtgOMkHwxsG0iI//3BwWAErYRHtgn0dZw==}

  '@webassemblyjs/ieee754@1.13.2':
    resolution: {integrity: sha512-4LtOzh58S/5lX4ITKxnAK2USuNEvpdVV9AlgGQb8rJDHaLeHciwG4zlGr0j/SNWlr7x3vO1lDEsuePvtcDNCkw==}

  '@webassemblyjs/leb128@1.13.2':
    resolution: {integrity: sha512-Lde1oNoIdzVzdkNEAWZ1dZ5orIbff80YPdHx20mrHwHrVNNTjNr8E3xz9BdpcGqRQbAEa+fkrCb+fRFTl/6sQw==}

  '@webassemblyjs/utf8@1.13.2':
    resolution: {integrity: sha512-3NQWGjKTASY1xV5m7Hr0iPeXD9+RDobLll3T9d2AO+g3my8xy5peVyjSag4I50mR1bBSN/Ct12lo+R9tJk0NZQ==}

  '@webassemblyjs/wasm-edit@1.14.1':
    resolution: {integrity: sha512-RNJUIQH/J8iA/1NzlE4N7KtyZNHi3w7at7hDjvRNm5rcUXa00z1vRz3glZoULfJ5mpvYhLybmVcwcjGrC1pRrQ==}

  '@webassemblyjs/wasm-gen@1.14.1':
    resolution: {integrity: sha512-AmomSIjP8ZbfGQhumkNvgC33AY7qtMCXnN6bL2u2Js4gVCg8fp735aEiMSBbDR7UQIj90n4wKAFUSEd0QN2Ukg==}

  '@webassemblyjs/wasm-opt@1.14.1':
    resolution: {integrity: sha512-PTcKLUNvBqnY2U6E5bdOQcSM+oVP/PmrDY9NzowJjislEjwP/C4an2303MCVS2Mg9d3AJpIGdUFIQQWbPds0Sw==}

  '@webassemblyjs/wasm-parser@1.14.1':
    resolution: {integrity: sha512-JLBl+KZ0R5qB7mCnud/yyX08jWFw5MsoalJ1pQ4EdFlgj9VdXKGuENGsiCIjegI1W7p91rUlcB/LB5yRJKNTcQ==}

  '@webassemblyjs/wast-printer@1.14.1':
    resolution: {integrity: sha512-kPSSXE6De1XOR820C90RIo2ogvZG+c3KiHzqUoO/F34Y2shGzesfqv7o57xrxovZJH/MetF5UjroJ/R/3isoiw==}

  '@whatwg-node/disposablestack@0.0.6':
    resolution: {integrity: sha512-LOtTn+JgJvX8WfBVJtF08TGrdjuFzGJc4mkP8EdDI8ADbvO7kiexYep1o8dwnt0okb0jYclCDXF13xU7Ge4zSw==}
    engines: {node: '>=18.0.0'}

  '@whatwg-node/fetch@0.10.8':
    resolution: {integrity: sha512-Rw9z3ctmeEj8QIB9MavkNJqekiu9usBCSMZa+uuAvM0lF3v70oQVCXNppMIqaV6OTZbdaHF1M2HLow58DEw+wg==}
    engines: {node: '>=18.0.0'}

  '@whatwg-node/node-fetch@0.7.21':
    resolution: {integrity: sha512-QC16IdsEyIW7kZd77aodrMO7zAoDyyqRCTLg+qG4wqtP4JV9AA+p7/lgqMdD29XyiYdVvIdFrfI9yh7B1QvRvw==}
    engines: {node: '>=18.0.0'}

  '@whatwg-node/promise-helpers@1.3.2':
    resolution: {integrity: sha512-Nst5JdK47VIl9UcGwtv2Rcgyn5lWtZ0/mhRQ4G8NN2isxpq2TO30iqHzmwoJycjWuyUfg3GFXqP/gFHXeV57IA==}
    engines: {node: '>=16.0.0'}

  '@whatwg-node/server@0.9.71':
    resolution: {integrity: sha512-ueFCcIPaMgtuYDS9u0qlUoEvj6GiSsKrwnOLPp9SshqjtcRaR1IEHRjoReq3sXNydsF5i0ZnmuYgXq9dV53t0g==}
    engines: {node: '>=18.0.0'}

  '@xtuc/ieee754@1.2.0':
    resolution: {integrity: sha512-DX8nKgqcGwsc0eJSqYt5lwP4DH5FlHnmuWWBRy7X0NcaGR0ZtuyeESgMwTYVEtxmsNGY+qit4QYT/MIYTOTPeA==}

  '@xtuc/long@4.2.2':
    resolution: {integrity: sha512-NuHqBY1PB/D8xU6s/thBgOAiAP7HOYDQ32+BFZILJ8ivkUkAHQnWfn6WhL79Owj1qmUnoN/YPhktdIoucipkAQ==}

  abbrev@2.0.0:
    resolution: {integrity: sha512-6/mh1E2u2YgEsCHdY0Yx5oW+61gZU+1vXaoiHHrpKeuRNNgFvS+/jrwHiQhB5apAf5oB7UB7E19ol2R2LKH8hQ==}
    engines: {node: ^14.17.0 || ^16.13.0 || >=18.0.0}

  abbrev@3.0.1:
    resolution: {integrity: sha512-AO2ac6pjRB3SJmGJo+v5/aK6Omggp6fsLrs6wN9bd35ulu4cCwaAU9+7ZhXjeqHVkaHThLuzH0nZr0YpCDhygg==}
    engines: {node: ^18.17.0 || >=20.5.0}

  abort-controller@3.0.0:
    resolution: {integrity: sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==}
    engines: {node: '>=6.5'}

  accepts@1.3.8:
    resolution: {integrity: sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==}
    engines: {node: '>= 0.6'}

  acorn-import-attributes@1.9.5:
    resolution: {integrity: sha512-n02Vykv5uA3eHGM/Z2dQrcD56kL8TyDb2p1+0P83PClMnC/nc+anbQRhIOWnSq4Ke/KvDPrY3C9hDtC/A3eHnQ==}
    peerDependencies:
      acorn: ^8

  acorn-import-phases@1.0.3:
    resolution: {integrity: sha512-jtKLnfoOzm28PazuQ4dVBcE9Jeo6ha1GAJvq3N0LlNOszmTfx+wSycBehn+FN0RnyeR77IBxN/qVYMw0Rlj0Xw==}
    engines: {node: '>=10.13.0'}
    peerDependencies:
      acorn: ^8.14.0

  acorn-jsx@5.3.2:
    resolution: {integrity: sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==}
    peerDependencies:
      acorn: ^6.0.0 || ^7.0.0 || ^8.0.0

  acorn-walk@8.3.4:
    resolution: {integrity: sha512-ueEepnujpqee2o5aIYnvHU6C0A42MNdsIDeqy5BydrkuC5R1ZuUFnm27EeFJGoEHJQgn3uleRvmTXaJgfXbt4g==}
    engines: {node: '>=0.4.0'}

  acorn@8.15.0:
    resolution: {integrity: sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==}
    engines: {node: '>=0.4.0'}
    hasBin: true

  agent-base@7.1.3:
    resolution: {integrity: sha512-jRR5wdylq8CkOe6hei19GGZnxM6rBGwFl3Bg0YItGDimvjGtAvdZk4Pu6Cl4u4Igsws4a1fd1Vq3ezrhn4KmFw==}
    engines: {node: '>= 14'}

  ai@4.3.17:
    resolution: {integrity: sha512-uWqIQ94Nb1GTYtYElGHegJMOzv3r2mCKNFlKrqkft9xrfvIahTI5OdcnD5U9612RFGuUNGmSDTO1/YRNFXobaQ==}
    engines: {node: '>=18'}
    peerDependencies:
      react: ^18 || ^19 || ^19.0.0-rc
      zod: ^3.23.8
    peerDependenciesMeta:
      react:
        optional: true

  ajv-draft-04@1.0.0:
    resolution: {integrity: sha512-mv00Te6nmYbRp5DCwclxtt7yV/joXJPGS7nM+97GdxvuttCOfgI3K4U25zboyeX0O+myI8ERluxQe5wljMmVIw==}
    peerDependencies:
      ajv: ^8.5.0
    peerDependenciesMeta:
      ajv:
        optional: true

  ajv-formats@2.1.1:
    resolution: {integrity: sha512-Wx0Kx52hxE7C18hkMEggYlEifqWZtYaRgouJor+WMdPnQyEK13vgEWyVNup7SoeeoLMsr4kf5h6dOW11I15MUA==}
    peerDependencies:
      ajv: ^8.0.0
    peerDependenciesMeta:
      ajv:
        optional: true

  ajv-formats@3.0.1:
    resolution: {integrity: sha512-8iUql50EUR+uUcdRQ3HDqa6EVyo3docL8g5WJ3FNcWmu62IbkGUue/pEyLBW8VGKKucTPgqeks4fIU1DA4yowQ==}
    peerDependencies:
      ajv: ^8.0.0
    peerDependenciesMeta:
      ajv:
        optional: true

  ajv-keywords@5.1.0:
    resolution: {integrity: sha512-YCS/JNFAUyr5vAuhk1DWm1CBxRHW9LbJ2ozWeemrIqpbsqKjHVxYPyi5GC0rjZIT5JxJ3virVTS8wk4i/Z+krw==}
    peerDependencies:
      ajv: ^8.8.2

  ajv@6.12.6:
    resolution: {integrity: sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==}

  ajv@8.17.1:
    resolution: {integrity: sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==}

  algoliasearch@5.32.0:
    resolution: {integrity: sha512-84xBncKNPBK8Ae89F65+SyVcOihrIbm/3N7to+GpRBHEUXGjA3ydWTMpcRW6jmFzkBQ/eqYy/y+J+NBpJWYjBg==}
    engines: {node: '>= 14.0.0'}

  ansi-align@3.0.1:
    resolution: {integrity: sha512-IOfwwBF5iczOjp/WeY4YxyjqAFMQoZufdQWDd19SEExbVLNXqvpzSJ/M7Za4/sCPmQ0+GRquoA7bGcINcxew6w==}

  ansi-colors@4.1.3:
    resolution: {integrity: sha512-/6w/C21Pm1A7aZitlI5Ni/2J6FFQN8i1Cvz3kHABAAbw93v/NlvKdVOqz7CCWz/3iv/JplRSEEZ83XION15ovw==}
    engines: {node: '>=6'}

  ansi-regex@5.0.1:
    resolution: {integrity: sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==}
    engines: {node: '>=8'}

  ansi-regex@6.1.0:
    resolution: {integrity: sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==}
    engines: {node: '>=12'}

  ansi-styles@4.3.0:
    resolution: {integrity: sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==}
    engines: {node: '>=8'}

  ansi-styles@6.2.1:
    resolution: {integrity: sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==}
    engines: {node: '>=12'}

  ansis@4.1.0:
    resolution: {integrity: sha512-BGcItUBWSMRgOCe+SVZJ+S7yTRG0eGt9cXAHev72yuGcY23hnLA7Bky5L/xLyPINoSN95geovfBkqoTlNZYa7w==}
    engines: {node: '>=14'}

  any-promise@1.3.0:
    resolution: {integrity: sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==}

  anymatch@3.1.3:
    resolution: {integrity: sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==}
    engines: {node: '>= 8'}

  archiver-utils@5.0.2:
    resolution: {integrity: sha512-wuLJMmIBQYCsGZgYLTy5FIB2pF6Lfb6cXMSF8Qywwk3t20zWnAi7zLcQFdKQmIB8wyZpY5ER38x08GbwtR2cLA==}
    engines: {node: '>= 14'}

  archiver@7.0.1:
    resolution: {integrity: sha512-ZcbTaIqJOfCc03QwD468Unz/5Ir8ATtvAHsK+FdXbDIbGfihqh9mrvdcYunQzqn4HrvWWaFyaxJhGZagaJJpPQ==}
    engines: {node: '>= 14'}

  arg@5.0.2:
    resolution: {integrity: sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==}

  argparse@1.0.10:
    resolution: {integrity: sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==}

  argparse@2.0.1:
    resolution: {integrity: sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==}

  aria-hidden@1.2.6:
    resolution: {integrity: sha512-ik3ZgC9dY/lYVVM++OISsaYDeg1tb0VtP5uL3ouh1koGOaUMDPpbFIei4JkFimWUFPn90sbMNMXQAIVOlnYKJA==}
    engines: {node: '>=10'}

  array-buffer-byte-length@1.0.2:
    resolution: {integrity: sha512-LHE+8BuR7RYGDKvnrmcuSq3tDcKv9OFEXQt/HpbZhY7V6h0zlUXutnAD82GiFx9rdieCMjkvtcsPqBwgUl1Iiw==}
    engines: {node: '>= 0.4'}

  array-flatten@1.1.1:
    resolution: {integrity: sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==}

  array-includes@3.1.8:
    resolution: {integrity: sha512-itaWrbYbqpGXkGhZPGUulwnhVf5Hpy1xiCFsGqyIGglbBxmG5vSjxQen3/WGOjPpNEv1RtBLKxbmVXm8HpJStQ==}
    engines: {node: '>= 0.4'}

  array-union@2.1.0:
    resolution: {integrity: sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==}
    engines: {node: '>=8'}

  array.prototype.findlast@1.2.5:
    resolution: {integrity: sha512-CVvd6FHg1Z3POpBLxO6E6zr+rSKEQ9L6rZHAaY7lLfhKsWYUBBOuMs0e9o24oopj6H+geRCX0YJ+TJLBK2eHyQ==}
    engines: {node: '>= 0.4'}

  array.prototype.flat@1.3.3:
    resolution: {integrity: sha512-rwG/ja1neyLqCuGZ5YYrznA62D4mZXg0i1cIskIUKSiqF3Cje9/wXAls9B9s1Wa2fomMsIv8czB8jZcPmxCXFg==}
    engines: {node: '>= 0.4'}

  array.prototype.flatmap@1.3.3:
    resolution: {integrity: sha512-Y7Wt51eKJSyi80hFrJCePGGNo5ktJCslFuboqJsbf57CCPcm5zztluPlc4/aD8sWsKvlwatezpV4U1efk8kpjg==}
    engines: {node: '>= 0.4'}

  array.prototype.tosorted@1.1.4:
    resolution: {integrity: sha512-p6Fx8B7b7ZhL/gmUsAy0D15WhvDccw3mnGNbZpi3pmeJdxtWsj2jEaI4Y6oo3XiHfzuSgPwKc04MYt6KgvC/wA==}
    engines: {node: '>= 0.4'}

  arraybuffer.prototype.slice@1.0.4:
    resolution: {integrity: sha512-BNoCY6SXXPQ7gF2opIP4GBE+Xw7U+pHMYKuzjgCN3GwiaIR09UUeKfheyIry77QtrCBlC0KK0q5/TER/tYh3PQ==}
    engines: {node: '>= 0.4'}

  assertion-error@2.0.1:
    resolution: {integrity: sha512-Izi8RQcffqCeNVgFigKli1ssklIbpHnCYc6AknXGYoB6grJqyeby7jv12JUQgmTAnIDnbck1uxksT4dzN3PWBA==}
    engines: {node: '>=12'}

  ast-module-types@6.0.1:
    resolution: {integrity: sha512-WHw67kLXYbZuHTmcdbIrVArCq5wxo6NEuj3hiYAWr8mwJeC+C2mMCIBIWCiDoCye/OF/xelc+teJ1ERoWmnEIA==}
    engines: {node: '>=18'}

  ast-types@0.16.1:
    resolution: {integrity: sha512-6t10qk83GOG8p0vKmaCr8eiilZwO171AvbROMtvvNiwrTly62t+7XkA8RdIIVbpMhCASAsxgAzdRSwh6nw/5Dg==}
    engines: {node: '>=4'}

  astring@1.9.0:
    resolution: {integrity: sha512-LElXdjswlqjWrPpJFg1Fx4wpkOCxj1TDHlSV4PlaRxHGWko024xICaa97ZkMfs6DRKlCguiAI+rbXv5GWwXIkg==}
    hasBin: true

  async-function@1.0.0:
    resolution: {integrity: sha512-hsU18Ae8CDTR6Kgu9DYf0EbCr/a5iGL0rytQDobUcdpYOKokk8LEjVphnXkDkgpi0wYVsqrXuP0bZxJaTqdgoA==}
    engines: {node: '>= 0.4'}

  async-sema@3.1.1:
    resolution: {integrity: sha512-tLRNUXati5MFePdAk8dw7Qt7DpxPB60ofAgn8WRhW6a2rcimZnYBP9oxHiv0OHy+Wz7kPMG+t4LGdt31+4EmGg==}

  async@3.2.6:
    resolution: {integrity: sha512-htCUDlxyyCLMgaM3xXg0C0LW2xqfuQ6p05pCEIsXuyQ+a1koYKTuBMzRNwmybfLgvJDMd0r1LTn4+E0Ti6C2AA==}

  available-typed-arrays@1.0.7:
    resolution: {integrity: sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==}
    engines: {node: '>= 0.4'}

  b4a@1.6.7:
    resolution: {integrity: sha512-OnAYlL5b7LEkALw87fUVafQw5rVR9RjwGd4KUwNQ6DrrNmaVaUCgLipfVlzrPQ4tWOR9P0IXGNOx50jYCCdSJg==}

  babel-dead-code-elimination@1.0.10:
    resolution: {integrity: sha512-DV5bdJZTzZ0zn0DC24v3jD7Mnidh6xhKa4GfKCbq3sfW8kaWhDdZjP3i81geA8T33tdYqWKw4D3fVv0CwEgKVA==}

  babel-plugin-macros@3.1.0:
    resolution: {integrity: sha512-Cg7TFGpIr01vOQNODXOOaGz2NpCU5gl8x1qJFbb6hbZxR7XrcE2vtbAsTAbJ7/xwJtUuJEw8K8Zr/AE0LHlesg==}
    engines: {node: '>=10', npm: '>=6'}

  bail@2.0.2:
    resolution: {integrity: sha512-0xO6mYd7JB2YesxDKplafRpsiOzPt9V02ddPCLbY1xYGPOX24NTyN50qnUxgCPcSoYMhKpAuBTjQoRZCAkUDRw==}

  balanced-match@1.0.2:
    resolution: {integrity: sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==}

  bare-events@2.5.4:
    resolution: {integrity: sha512-+gFfDkR8pj4/TrWCGUGWmJIkBwuxPS5F+a5yWjOHQt2hHvNZd5YLzadjmDUtFmMM4y429bnKLa8bYBMHcYdnQA==}

  base64-js@1.5.1:
    resolution: {integrity: sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==}

  basic-auth@2.0.1:
    resolution: {integrity: sha512-NF+epuEdnUYVlGuhaxbbq+dvJttwLnGY+YixlXlME5KpQ5W3CnXA5cVTneY3SPbPDRkcjMbifrwmFYcClgOZeg==}
    engines: {node: '>= 0.8'}

  beautify@0.0.8:
    resolution: {integrity: sha512-1iF6Ey2qxDkm6bPgKcoXUmwFDpoRi5IgwefQDDQBRLxlZAAYwcULoQ2IdBArXZuSsuL7AT+KvZI9xZVLeUZPRg==}
    hasBin: true

  before-after-hook@4.0.0:
    resolution: {integrity: sha512-q6tR3RPqIB1pMiTRMFcZwuG5T8vwp+vUvEG0vuI6B+Rikh5BfPp2fQ82c925FOs+b0lcFQ8CFrL+KbilfZFhOQ==}

  better-path-resolve@1.0.0:
    resolution: {integrity: sha512-pbnl5XzGBdrFU/wT4jqmJVPn2B6UHPBOhzMQkY/SPUPB6QtUXtmBHBIwCbXJol93mOpGMnQyP/+BB19q04xj7g==}
    engines: {node: '>=4'}

  binary-extensions@2.3.0:
    resolution: {integrity: sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==}
    engines: {node: '>=8'}

  bindings@1.5.0:
    resolution: {integrity: sha512-p2q/t/mhvuOj/UeLlV6566GD/guowlr0hHxClI0W9m7MWYkL1F0hLo+0Aexs9HSPCtR1SXQ0TD3MMKrXZajbiQ==}

  bippy@0.3.11:
    resolution: {integrity: sha512-q81FjIKd9Yw/RTZeWrh2w7LdvnTG6qWMo3wibcABN/hntZ8HFnpIV1VNWxPox6rDBRHN4L5ECdETDkdTwKitoA==}
    peerDependencies:
      react: '>=17.0.1'

  body-parser@1.20.3:
    resolution: {integrity: sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==}
    engines: {node: '>= 0.8', npm: 1.2.8000 || >= 1.4.16}

  boolbase@1.0.0:
    resolution: {integrity: sha512-JZOSA7Mo9sNGB8+UjSgzdLtokWAky1zbztM3WRLCbZ70/3cTANmQmOdR7y2g+J0e2WXywy1yS468tY+IruqEww==}

  bottleneck@2.19.5:
    resolution: {integrity: sha512-VHiNCbI1lKdl44tGrhNfU3lup0Tj/ZBMJB5/2ZbNXRCPuRCO7ed2mgcK4r17y+KB2EfuYuRaVlwNbAeaWGSpbw==}

  boxen@8.0.1:
    resolution: {integrity: sha512-F3PH5k5juxom4xktynS7MoFY+NUWH5LC4CnH11YB8NPew+HLpmBLCybSAEyb2F+4pRXhuhWqFesoQd6DAyc2hw==}
    engines: {node: '>=18'}

  brace-expansion@1.1.11:
    resolution: {integrity: sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==}

  brace-expansion@2.0.2:
    resolution: {integrity: sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==}

  braces@3.0.3:
    resolution: {integrity: sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==}
    engines: {node: '>=8'}

  browserslist@4.25.1:
    resolution: {integrity: sha512-KGj0KoOMXLpSNkkEI6Z6mShmQy0bc1I+T7K9N81k4WWMrfz+6fQ6es80B/YLAeRoKvjYE1YSHHOW1qe9xIVzHw==}
    engines: {node: ^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7}
    hasBin: true

  buffer-crc32@0.2.13:
    resolution: {integrity: sha512-VO9Ht/+p3SN7SKWqcrgEzjGbRSJYTx+Q1pTQC0wrWqHx0vpJraQ6GtHx8tvcg1rlK1byhU5gccxgOgj7B0TDkQ==}

  buffer-crc32@1.0.0:
    resolution: {integrity: sha512-Db1SbgBS/fg/392AblrMJk97KggmvYhr4pB5ZIMTWtaivCPMWLkmb7m21cJvpvgK+J3nsU2CmmixNBZx4vFj/w==}
    engines: {node: '>=8.0.0'}

  buffer-from@1.1.2:
    resolution: {integrity: sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==}

  buffer@6.0.3:
    resolution: {integrity: sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==}

  builtin-modules@3.3.0:
    resolution: {integrity: sha512-zhaCDicdLuWN5UbN5IMnFqNMhNfo919sH85y2/ea+5Yg9TsTkeZxpL+JLbp6cgYFS4sRLp3YV4S6yDuqVWHYOw==}
    engines: {node: '>=6'}

  bundle-require@5.1.0:
    resolution: {integrity: sha512-3WrrOuZiyaaZPWiEt4G3+IffISVC9HYlWueJEBWED4ZH4aIAC2PnkdnuRrR94M+w6yGWn4AglWtJtBI8YqvgoA==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}
    peerDependencies:
      esbuild: '>=0.18'

  busboy@1.6.0:
    resolution: {integrity: sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==}
    engines: {node: '>=10.16.0'}

  bytes@3.1.2:
    resolution: {integrity: sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==}
    engines: {node: '>= 0.8'}

  c12@3.0.4:
    resolution: {integrity: sha512-t5FaZTYbbCtvxuZq9xxIruYydrAGsJ+8UdP0pZzMiK2xl/gNiSOy0OxhLzHUEEb0m1QXYqfzfvyIFEmz/g9lqg==}
    peerDependencies:
      magicast: ^0.3.5
    peerDependenciesMeta:
      magicast:
        optional: true

  cac@6.7.14:
    resolution: {integrity: sha512-b6Ilus+c3RrdDk+JhLKUAQfzzgLEPy6wcXqS7f/xe1EETvsDP6GORG7SFuOs6cID5YkqchW/LXZbX5bc8j7ZcQ==}
    engines: {node: '>=8'}

  call-bind-apply-helpers@1.0.2:
    resolution: {integrity: sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==}
    engines: {node: '>= 0.4'}

  call-bind@1.0.8:
    resolution: {integrity: sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==}
    engines: {node: '>= 0.4'}

  call-bound@1.0.4:
    resolution: {integrity: sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==}
    engines: {node: '>= 0.4'}

  callsite@1.0.0:
    resolution: {integrity: sha512-0vdNRFXn5q+dtOqjfFtmtlI9N2eVZ7LMyEV2iKC5mEEFvSg/69Ml6b/WU2qF8W1nLRa0wiSrDT3Y5jOHZCwKPQ==}

  callsites@3.1.0:
    resolution: {integrity: sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==}
    engines: {node: '>=6'}

  camelcase@8.0.0:
    resolution: {integrity: sha512-8WB3Jcas3swSvjIeA2yvCJ+Miyz5l1ZmB6HFb9R1317dt9LCQoswg/BGrmAmkWVEszSrrg4RwmO46qIm2OEnSA==}
    engines: {node: '>=16'}

  caniuse-lite@1.0.30001727:
    resolution: {integrity: sha512-pB68nIHmbN6L/4C6MH1DokyR3bYqFwjaSs/sWDHGj4CTcFtQUQMuJftVwWkXq7mNWOybD3KhUv3oWHoGxgP14Q==}

  ccount@2.0.1:
    resolution: {integrity: sha512-eyrF0jiFpY+3drT6383f1qhkbGsLSifNAjA61IUjZjmLCWjItY6LB9ft9YhoDgwfmclB2zhu51Lc7+95b8NRAg==}

  chai@5.2.0:
    resolution: {integrity: sha512-mCuXncKXk5iCLhfhwTc0izo0gtEmpz5CtG2y8GiOINBlMVS6v8TMRc5TaLWKS6692m9+dVVfzgeVxR5UxWHTYw==}
    engines: {node: '>=12'}

  chain-function@1.0.1:
    resolution: {integrity: sha512-SxltgMwL9uCko5/ZCLiyG2B7R9fY4pDZUw7hJ4MhirdjBLosoDqkWABi3XMucddHdLiFJMb7PD2MZifZriuMTg==}

  chalk@4.1.2:
    resolution: {integrity: sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==}
    engines: {node: '>=10'}

  chalk@5.4.1:
    resolution: {integrity: sha512-zgVZuo2WcZgfUEmsn6eO3kINexW8RAE4maiQ8QNs8CtpPCSyMiYsULR3HQYkm3w8FIA3SberyMJMSldGsW+U3w==}
    engines: {node: ^12.17.0 || ^14.13 || >=16.0.0}

  character-entities-html4@2.1.0:
    resolution: {integrity: sha512-1v7fgQRj6hnSwFpq1Eu0ynr/CDEw0rXo2B61qXrLNdHZmPKgb7fqS1a2JwF0rISo9q77jDI8VMEHoApn8qDoZA==}

  character-entities-legacy@3.0.0:
    resolution: {integrity: sha512-RpPp0asT/6ufRm//AJVwpViZbGM/MkjQFxJccQRHmISF/22NBtsHqAWmL+/pmkPWoIUJdWyeVleTl1wydHATVQ==}

  character-entities@2.0.2:
    resolution: {integrity: sha512-shx7oQ0Awen/BRIdkjkvz54PnEEI/EjwXDSIZp86/KKdbafHh1Df/RYGBhn4hbe2+uKC9FnT5UCEdyPz3ai9hQ==}

  character-reference-invalid@2.0.1:
    resolution: {integrity: sha512-iBZ4F4wRbyORVsu0jPV7gXkOsGYjGHPmAyv+HiHG8gi5PtC9KI2j1+v8/tlibRvjoWX027ypmG/n0HtO5t7unw==}

  chardet@0.7.0:
    resolution: {integrity: sha512-mT8iDcrh03qDGRRmoA2hmBJnxpllMR+0/0qlzjqZES6NdiWDcZkCNAk4rPFZ9Q85r27unkiNNg8ZOiwZXBHwcA==}

  check-error@2.1.1:
    resolution: {integrity: sha512-OAlb+T7V4Op9OwdkjmguYRqncdlx5JiofwOAUkmTF+jNdHwzTaTs4sRAGpzLF3oOz5xAyDGrPgeIDFQmDOTiJw==}
    engines: {node: '>= 16'}

  cheerio-select@2.1.0:
    resolution: {integrity: sha512-9v9kG0LvzrlcungtnJtpGNxY+fzECQKhK4EGJX2vByejiMX84MFNQw4UxPJl3bFbTMw+Dfs37XaIkCwTZfLh4g==}

  cheerio@1.1.0:
    resolution: {integrity: sha512-+0hMx9eYhJvWbgpKV9hN7jg0JcwydpopZE4hgi+KvQtByZXPp04NiCWU0LzcAbP63abZckIHkTQaXVF52mX3xQ==}
    engines: {node: '>=18.17'}

  chevrotain-allstar@0.3.1:
    resolution: {integrity: sha512-b7g+y9A0v4mxCW1qUhf3BSVPg+/NvGErk/dOkrDaHA0nQIQGAtrOjlX//9OQtRlSCy+x9rfB5N8yC71lH1nvMw==}
    peerDependencies:
      chevrotain: ^11.0.0

  chevrotain@11.0.3:
    resolution: {integrity: sha512-ci2iJH6LeIkvP9eJW6gpueU8cnZhv85ELY8w8WiFtNjMHA5ad6pQLaJo9mEly/9qUyCpvqX8/POVUTf18/HFdw==}

  chokidar@3.6.0:
    resolution: {integrity: sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==}
    engines: {node: '>= 8.10.0'}

  chokidar@4.0.3:
    resolution: {integrity: sha512-Qgzu8kfBvo+cA4962jnP1KkS6Dop5NS6g7R5LFYJr4b8Ub94PPQXUksCw9PvXoeXPRRddRNC5C1JQUR2SMGtnA==}
    engines: {node: '>= 14.16.0'}

  chownr@3.0.0:
    resolution: {integrity: sha512-+IxzY9BZOQd/XuYPRmrvEVjF/nqj5kgT4kEq7VofrDoM1MxoRjEWkrCC3EtLi59TVawxTAn+orJwFQcrqEN1+g==}
    engines: {node: '>=18'}

  chrome-trace-event@1.0.4:
    resolution: {integrity: sha512-rNjApaLzuwaOTjCiT8lSDdGN1APCiqkChLMJxJPWLunPAt5fy8xgU9/jNOchV84wfIxrA0lRQB7oCT8jrn/wrQ==}
    engines: {node: '>=6.0'}

  ci-info@3.9.0:
    resolution: {integrity: sha512-NIxF55hv4nSqQswkAeiOi1r83xy8JldOFDTWiug55KBu9Jnblncd2U6ViHmYgHf01TPZS77NJBhBMKdWj9HQMQ==}
    engines: {node: '>=8'}

  citty@0.1.6:
    resolution: {integrity: sha512-tskPPKEs8D2KPafUypv2gxwJP8h/OaJmC82QQGGDQcHvXX43xF2VDACcJVmZ0EuSxkpO9Kc4MlrA3q0+FG58AQ==}

  class-variance-authority@0.7.1:
    resolution: {integrity: sha512-Ka+9Trutv7G8M6WT6SeiRWz792K5qEqIGEGzXKhAE6xOWAY6pPH8U+9IY3oCMv6kqTmLsv7Xh/2w2RigkePMsg==}

  classnames@2.5.1:
    resolution: {integrity: sha512-saHYOzhIQs6wy2sVxTM6bUDsQO4F50V9RQ22qBpEdCW+I+/Wmke2HOl6lS6dTpdxVhb88/I6+Hs+438c3lfUow==}

  cli-boxes@3.0.0:
    resolution: {integrity: sha512-/lzGpEWL/8PfI0BmBOPRwp0c/wFNX1RdUML3jK/RcSBA9T8mZDdQpqYBKtCFTOfQbwPqWEOpjqW+Fnayc0969g==}
    engines: {node: '>=10'}

  client-only@0.0.1:
    resolution: {integrity: sha512-IV3Ou0jSMzZrd3pZ48nLkT9DA7Ag1pnPzaiQhpW7c3RbcqqzvzzVu+L8gfqMp/8IM2MQtSiqaCxrrcfu8I8rMA==}

  clipboardy@4.0.0:
    resolution: {integrity: sha512-5mOlNS0mhX0707P2I0aZ2V/cmHUEO/fL7VFLqszkhUsxt7RwnmrInf/eEQKlf5GzvYeHIjT+Ov1HRfNmymlG0w==}
    engines: {node: '>=18'}

  cliui@8.0.1:
    resolution: {integrity: sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==}
    engines: {node: '>=12'}

  clone@2.1.2:
    resolution: {integrity: sha512-3Pe/CF1Nn94hyhIYpjtiLhdCoEoz0DqQ+988E9gmeEdQZlojxnOb74wctFyuwWQHzqyf9X7C7MG8juUpqBJT8w==}
    engines: {node: '>=0.8'}

  clsx@2.1.1:
    resolution: {integrity: sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==}
    engines: {node: '>=6'}

  cluster-key-slot@1.1.2:
    resolution: {integrity: sha512-RMr0FhtfXemyinomL4hrWcYJxmX6deFdCxpJzhDttxgO1+bcCnkk+9drydLVDmAMG7NE6aN/fl4F7ucU/90gAA==}
    engines: {node: '>=0.10.0'}

  code-block-writer@13.0.3:
    resolution: {integrity: sha512-Oofo0pq3IKnsFtuHqSF7TqBfr71aeyZDVJ0HpmqB7FBM2qEigL0iPONSCZSO9pE9dZTAxANe5XHG9Uy0YMv8cg==}

  codemirror@6.0.2:
    resolution: {integrity: sha512-VhydHotNW5w1UGK0Qj96BwSk/Zqbp9WbnyK2W/eVMv4QyF41INRGpjUhFJY7/uDNuudSc33a/PKr4iDqRduvHw==}

  collapse-white-space@2.1.0:
    resolution: {integrity: sha512-loKTxY1zCOuG4j9f6EPnuyyYkf58RnhhWTvRoZEokgB+WbdXehfjFviyOVYkqzEWz1Q5kRiZdBYS5SwxbQYwzw==}

  color-convert@1.9.3:
    resolution: {integrity: sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==}

  color-convert@2.0.1:
    resolution: {integrity: sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==}
    engines: {node: '>=7.0.0'}

  color-name@1.1.3:
    resolution: {integrity: sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==}

  color-name@1.1.4:
    resolution: {integrity: sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==}

  color-string@1.9.1:
    resolution: {integrity: sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==}

  color@3.2.1:
    resolution: {integrity: sha512-aBl7dZI9ENN6fUGC7mWpMTPNHmWUSNan9tuWN6ahh5ZLNk9baLJOnSMlrQkHcrfFgz2/RigjUVAjdx36VcemKA==}

  color@4.2.3:
    resolution: {integrity: sha512-1rXeuUUiGGrykh+CeBdu5Ie7OJwinCgQY0bc7GCRxy5xVHy+moaqkpL/jqQq0MtQOeYcrqEz4abc5f0KtU7W4A==}
    engines: {node: '>=12.5.0'}

  colorspace@1.1.4:
    resolution: {integrity: sha512-BgvKJiuVu1igBUF2kEjRCZXol6wiiGbY5ipL/oVPwm0BL9sIpMIzM8IK7vwuxIIzOXMV3Ey5w+vxhm0rR/TN8w==}

  comma-separated-tokens@2.0.3:
    resolution: {integrity: sha512-Fu4hJdvzeylCfQPp9SGWidpzrMs7tTrlu6Vb8XGaRGck8QSNZJJp538Wrb60Lax4fPwR64ViY468OIUTbRlGZg==}

  commander@10.0.1:
    resolution: {integrity: sha512-y4Mg2tXshplEbSGzx7amzPwKKOCGuoSRP/CjEdwwk0FOGlUbq6lKuoyDZTNZkmxHdJtp54hdfY/JUrdL7Xfdug==}
    engines: {node: '>=14'}

  commander@12.1.0:
    resolution: {integrity: sha512-Vw8qHK3bZM9y/P10u3Vib8o/DdkvA2OtPtZvD871QKjy74Wj1WSKFILMPRPSdUSx5RFK1arlJzEtA4PkFgnbuA==}
    engines: {node: '>=18'}

  commander@14.0.0:
    resolution: {integrity: sha512-2uM9rYjPvyq39NwLRqaiLtWHyDC1FvryJDa2ATTVims5YAS4PupsEQsDvP14FqhFr0P49CYDugi59xaxJlTXRA==}
    engines: {node: '>=20'}

  commander@2.20.3:
    resolution: {integrity: sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==}

  commander@4.1.1:
    resolution: {integrity: sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==}
    engines: {node: '>= 6'}

  commander@7.2.0:
    resolution: {integrity: sha512-QrWXB+ZQSVPmIWIhtEO9H+gwHaMGYiF5ChvoJ+K9ZGHG/sVsa6yiesAD1GC/x46sET00Xlwo1u49RVVVzvcSkw==}
    engines: {node: '>= 10'}

  commander@8.3.0:
    resolution: {integrity: sha512-OkTL9umf+He2DZkUq8f8J9of7yL6RJKI24dVITBmNfZBmri9zYZQrKkuXiKhyfPSu8tUhnVBB1iKXevvnlR4Ww==}
    engines: {node: '>= 12'}

  commander@9.5.0:
    resolution: {integrity: sha512-KRs7WVDKg86PWiuAqhDrAQnTXZKraVcCc6vFdL14qrZ/DcWwuRo7VoiYXalXO7S5GKpqYiVEwCbgFDfxNHKJBQ==}
    engines: {node: ^12.20.0 || >=14}

  common-path-prefix@3.0.0:
    resolution: {integrity: sha512-QE33hToZseCH3jS0qN96O/bSh3kaw/h+Tq7ngyY9eWDUnTlTNUyqfqvCXioLe5Na5jFsL78ra/wuBU4iuEgd4w==}

  commondir@1.0.1:
    resolution: {integrity: sha512-W9pAhw0ja1Edb5GVdIF1mjZw/ASI0AlShXM83UUGe2DVr5TdAPEA1OA8m/g8zWp9x6On7gqufY+FatDbC3MDQg==}

  compatx@0.2.0:
    resolution: {integrity: sha512-6gLRNt4ygsi5NyMVhceOCFv14CIdDFN7fQjX1U4+47qVE/+kjPoXMK65KWK+dWxmFzMTuKazoQ9sch6pM0p5oA==}

  compress-commons@6.0.2:
    resolution: {integrity: sha512-6FqVXeETqWPoGcfzrXb37E50NP0LXT8kAMu5ooZayhWWdgEY4lBEEcbQNXtkuKQsGduxiIcI4gOTsxTmuq/bSg==}
    engines: {node: '>= 14'}

  compressible@2.0.18:
    resolution: {integrity: sha512-AF3r7P5dWxL8MxyITRMlORQNaOA2IkAFaTr4k7BUumjPtRpGDTZpl0Pb1XCO6JeDCBdp126Cgs9sMxqSjgYyRg==}
    engines: {node: '>= 0.6'}

  compression@1.8.0:
    resolution: {integrity: sha512-k6WLKfunuqCYD3t6AsuPGvQWaKwuLLh2/xHNcX4qE+vIfDNXpSqnrhwA7O53R7WVQUnt8dVAIW+YHr7xTgOgGA==}
    engines: {node: '>= 0.8.0'}

  compute-scroll-into-view@3.1.1:
    resolution: {integrity: sha512-VRhuHOLoKYOy4UbilLbUzbYg93XLjv2PncJC50EuTWPA3gaja1UjBsUP/D/9/juV3vQFr6XBEzn9KCAHdUvOHw==}

  concat-map@0.0.1:
    resolution: {integrity: sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==}

  concat-stream@1.6.2:
    resolution: {integrity: sha512-27HBghJxjiZtIk3Ycvn/4kbJk/1uZuJFfuPEns6LaEvpvG1f0hTea8lilrouyo9mVc2GWdcEZ8OLoGmSADlrCw==}
    engines: {'0': node >= 0.8}

  concurrently@9.2.0:
    resolution: {integrity: sha512-IsB/fiXTupmagMW4MNp2lx2cdSN2FfZq78vF90LBB+zZHArbIQZjQtzXCiXnvTxCZSvXanTqFLWBjw2UkLx1SQ==}
    engines: {node: '>=18'}
    hasBin: true

  confbox@0.1.8:
    resolution: {integrity: sha512-RMtmw0iFkeR4YV+fUOSucriAQNb9g8zFR52MWCtl+cCZOFRNL6zeB395vPzFhEjjn4fMxXudmELnl/KF/WrK6w==}

  confbox@0.2.2:
    resolution: {integrity: sha512-1NB+BKqhtNipMsov4xI/NnhCKp9XG9NamYp5PVm9klAT0fsrNPjaFICsCFhNhwZJKNh7zB/3q8qXz0E9oaMNtQ==}

  config-chain@1.1.13:
    resolution: {integrity: sha512-qj+f8APARXHrM0hraqXYb2/bOVSV4PvJQlNZ/DVj0QrmNM2q2euizkeuVckQ57J+W0mRH6Hvi+k50M4Jul2VRQ==}

  consola@3.4.2:
    resolution: {integrity: sha512-5IKcdX0nnYavi6G7TtOhwkYzyjfJlatbjMjuLSfE2kYT5pMDOilZ4OvMhi637CcDICTmz3wARPoyhqyX1Y+XvA==}
    engines: {node: ^14.18.0 || >=16.10.0}

  content-disposition@0.5.4:
    resolution: {integrity: sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==}
    engines: {node: '>= 0.6'}

  content-type@1.0.5:
    resolution: {integrity: sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==}
    engines: {node: '>= 0.6'}

  convert-source-map@1.9.0:
    resolution: {integrity: sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==}

  convert-source-map@2.0.0:
    resolution: {integrity: sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==}

  cookie-es@1.2.2:
    resolution: {integrity: sha512-+W7VmiVINB+ywl1HGXJXmrqkOhpKrIiVZV6tQuV54ZyQC7MMuBt81Vc336GMLoHBq5hV/F9eXgt5Mnx0Rha5Fg==}

  cookie-es@2.0.0:
    resolution: {integrity: sha512-RAj4E421UYRgqokKUmotqAwuplYw15qtdXfY+hGzgCJ/MBjCVZcSoHK/kH9kocfjRjcDME7IiDWR/1WX1TM2Pg==}

  cookie-signature@1.0.6:
    resolution: {integrity: sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==}

  cookie@0.7.1:
    resolution: {integrity: sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==}
    engines: {node: '>= 0.6'}

  cookie@1.0.2:
    resolution: {integrity: sha512-9Kr/j4O16ISv8zBBhJoi4bXOYNTkFLOqSL3UDB0njXxCXNezjeyVrJyGOWtgfs/q2km1gwBcfH8q1yEGoMYunA==}
    engines: {node: '>=18'}

  copy-file@11.0.0:
    resolution: {integrity: sha512-mFsNh/DIANLqFt5VHZoGirdg7bK5+oTWlhnGu6tgRhzBlnEKWaPX2xrFaLltii/6rmhqFMJqffUgknuRdpYlHw==}
    engines: {node: '>=18'}

  core-util-is@1.0.3:
    resolution: {integrity: sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==}

  cose-base@1.0.3:
    resolution: {integrity: sha512-s9whTXInMSgAp/NVXVNuVxVKzGH2qck3aQlVHxDCdAEPgtMKwc4Wq6/QKhgdEdgbLSi9rBTAcPoRa6JpiG4ksg==}

  cose-base@2.2.0:
    resolution: {integrity: sha512-AzlgcsCbUMymkADOJtQm3wO9S3ltPfYOFD5033keQn9NJzIbtnZj+UdBJe7DYml/8TdbtHJW3j58SOnKhWY/5g==}

  cosmiconfig@7.1.0:
    resolution: {integrity: sha512-AdmX6xUzdNASswsFtmwSt7Vj8po9IuqXm0UXz7QKPuEUmPB4XyjGfaAr2PSuELMwkRMVH1EpIkX5bTZGRB3eCA==}
    engines: {node: '>=10'}

  crc-32@1.2.2:
    resolution: {integrity: sha512-ROmzCKrTnOwybPcJApAA6WBWij23HVfGVNKqqrZpuyZOHqK2CwHSvpGuyt/UNNvaIjEd8X5IFGp4Mh+Ie1IHJQ==}
    engines: {node: '>=0.8'}
    hasBin: true

  crc32-stream@6.0.0:
    resolution: {integrity: sha512-piICUB6ei4IlTv1+653yq5+KoqfBYmj9bw6LqXoOneTMDXk5nM1qt12mFW1caG3LlJXEKW1Bp0WggEmIfQB34g==}
    engines: {node: '>= 14'}

  crelt@1.0.6:
    resolution: {integrity: sha512-VQ2MBenTq1fWZUH9DJNGti7kKv6EeAuYr3cLwxUWhIu1baTaXh4Ib5W2CqHVqib4/MqbYGJqiL3Zb8GJZr3l4g==}

  cron-parser@4.9.0:
    resolution: {integrity: sha512-p0SaNjrHOnQeR8/VnfGbmg9te2kfyYSQ7Sc/j/6DtPL3JQvKxmjO9TSjNFpujqV3vEYYBvNNvXSxzyksBWAx1Q==}
    engines: {node: '>=12.0.0'}

  croner@9.1.0:
    resolution: {integrity: sha512-p9nwwR4qyT5W996vBZhdvBCnMhicY5ytZkR4D1Xj0wuTDEiMnjwR57Q3RXYY/s0EpX6Ay3vgIcfaR+ewGHsi+g==}
    engines: {node: '>=18.0'}

  cross-spawn@7.0.6:
    resolution: {integrity: sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==}
    engines: {node: '>= 8'}

  crossws@0.3.5:
    resolution: {integrity: sha512-ojKiDvcmByhwa8YYqbQI/hg7MEU0NC03+pSdEq4ZUnZR9xXpwk7E43SMNGkn+JxJGPFtNvQ48+vV2p+P1ml5PA==}

  css-select@5.2.2:
    resolution: {integrity: sha512-TizTzUddG/xYLA3NXodFM0fSbNizXjOKhqiQQwvhlspadZokn1KDy0NZFS0wuEubIYAV5/c1/lAr0TaaFXEXzw==}

  css-what@6.2.2:
    resolution: {integrity: sha512-u/O3vwbptzhMs3L1fQE82ZSLHQQfto5gyZzwteVIEyeaY5Fc7R4dapF/BvRoSYFeqfBk4m0V1Vafq5Pjv25wvA==}
    engines: {node: '>= 6'}

  cssbeautify@0.3.1:
    resolution: {integrity: sha512-ljnSOCOiMbklF+dwPbpooyB78foId02vUrTDogWzu6ca2DCNB7Kc/BHEGBnYOlUYtwXvSW0mWTwaiO2pwFIoRg==}
    hasBin: true

  cssesc@3.0.0:
    resolution: {integrity: sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==}
    engines: {node: '>=4'}
    hasBin: true

  csstype@3.1.3:
    resolution: {integrity: sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==}

  cva@1.0.0-beta.2:
    resolution: {integrity: sha512-dqcOFe247I5pKxfuzqfq3seLL5iMYsTgo40Uw7+pKZAntPgFtR7Tmy59P5IVIq/XgB0NQWoIvYDt9TwHkuK8Cg==}
    peerDependencies:
      typescript: '>= 4.5.5 < 6'
    peerDependenciesMeta:
      typescript:
        optional: true

  cytoscape-cose-bilkent@4.1.0:
    resolution: {integrity: sha512-wgQlVIUJF13Quxiv5e1gstZ08rnZj2XaLHGoFMYXz7SkNfCDOOteKBE6SYRfA9WxxI/iBc3ajfDoc6hb/MRAHQ==}
    peerDependencies:
      cytoscape: ^3.2.0

  cytoscape-fcose@2.2.0:
    resolution: {integrity: sha512-ki1/VuRIHFCzxWNrsshHYPs6L7TvLu3DL+TyIGEsRcvVERmxokbf5Gdk7mFxZnTdiGtnA4cfSmjZJMviqSuZrQ==}
    peerDependencies:
      cytoscape: ^3.2.0

  cytoscape@3.32.1:
    resolution: {integrity: sha512-dbeqFTLYEwlFg7UGtcZhCCG/2WayX72zK3Sq323CEX29CY81tYfVhw1MIdduCtpstB0cTOhJswWlM/OEB3Xp+Q==}
    engines: {node: '>=0.10'}

  d3-array@2.12.1:
    resolution: {integrity: sha512-B0ErZK/66mHtEsR1TkPEEkwdy+WDesimkM5gpZr5Dsg54BiTA5RXtYW5qTLIAcekaS9xfZrzBLF/OAkB3Qn1YQ==}

  d3-array@3.2.4:
    resolution: {integrity: sha512-tdQAmyA18i4J7wprpYq8ClcxZy3SC31QMeByyCFyRt7BVHdREQZ5lpzoe5mFEYZUWe+oq8HBvk9JjpibyEV4Jg==}
    engines: {node: '>=12'}

  d3-axis@3.0.0:
    resolution: {integrity: sha512-IH5tgjV4jE/GhHkRV0HiVYPDtvfjHQlQfJHs0usq7M30XcSBvOotpmH1IgkcXsO/5gEQZD43B//fc7SRT5S+xw==}
    engines: {node: '>=12'}

  d3-brush@3.0.0:
    resolution: {integrity: sha512-ALnjWlVYkXsVIGlOsuWH1+3udkYFI48Ljihfnh8FZPF2QS9o+PzGLBslO0PjzVoHLZ2KCVgAM8NVkXPJB2aNnQ==}
    engines: {node: '>=12'}

  d3-chord@3.0.1:
    resolution: {integrity: sha512-VE5S6TNa+j8msksl7HwjxMHDM2yNK3XCkusIlpX5kwauBfXuyLAtNg9jCp/iHH61tgI4sb6R/EIMWCqEIdjT/g==}
    engines: {node: '>=12'}

  d3-color@3.1.0:
    resolution: {integrity: sha512-zg/chbXyeBtMQ1LbD/WSoW2DpC3I0mpmPdW+ynRTj/x2DAWYrIY7qeZIHidozwV24m4iavr15lNwIwLxRmOxhA==}
    engines: {node: '>=12'}

  d3-contour@4.0.2:
    resolution: {integrity: sha512-4EzFTRIikzs47RGmdxbeUvLWtGedDUNkTcmzoeyg4sP/dvCexO47AaQL7VKy/gul85TOxw+IBgA8US2xwbToNA==}
    engines: {node: '>=12'}

  d3-delaunay@6.0.4:
    resolution: {integrity: sha512-mdjtIZ1XLAM8bm/hx3WwjfHt6Sggek7qH043O8KEjDXN40xi3vx/6pYSVTwLjEgiXQTbvaouWKynLBiUZ6SK6A==}
    engines: {node: '>=12'}

  d3-dispatch@3.0.1:
    resolution: {integrity: sha512-rzUyPU/S7rwUflMyLc1ETDeBj0NRuHKKAcvukozwhshr6g6c5d8zh4c2gQjY2bZ0dXeGLWc1PF174P2tVvKhfg==}
    engines: {node: '>=12'}

  d3-drag@3.0.0:
    resolution: {integrity: sha512-pWbUJLdETVA8lQNJecMxoXfH6x+mO2UQo8rSmZ+QqxcbyA3hfeprFgIT//HW2nlHChWeIIMwS2Fq+gEARkhTkg==}
    engines: {node: '>=12'}

  d3-dsv@3.0.1:
    resolution: {integrity: sha512-UG6OvdI5afDIFP9w4G0mNq50dSOsXHJaRE8arAS5o9ApWnIElp8GZw1Dun8vP8OyHOZ/QJUKUJwxiiCCnUwm+Q==}
    engines: {node: '>=12'}
    hasBin: true

  d3-ease@3.0.1:
    resolution: {integrity: sha512-wR/XK3D3XcLIZwpbvQwQ5fK+8Ykds1ip7A2Txe0yxncXSdq1L9skcG7blcedkOX+ZcgxGAmLX1FrRGbADwzi0w==}
    engines: {node: '>=12'}

  d3-fetch@3.0.1:
    resolution: {integrity: sha512-kpkQIM20n3oLVBKGg6oHrUchHM3xODkTzjMoj7aWQFq5QEM+R6E4WkzT5+tojDY7yjez8KgCBRoj4aEr99Fdqw==}
    engines: {node: '>=12'}

  d3-force@3.0.0:
    resolution: {integrity: sha512-zxV/SsA+U4yte8051P4ECydjD/S+qeYtnaIyAs9tgHCqfguma/aAQDjo85A9Z6EKhBirHRJHXIgJUlffT4wdLg==}
    engines: {node: '>=12'}

  d3-format@3.1.0:
    resolution: {integrity: sha512-YyUI6AEuY/Wpt8KWLgZHsIU86atmikuoOmCfommt0LYHiQSPjvX2AcFc38PX0CBpr2RCyZhjex+NS/LPOv6YqA==}
    engines: {node: '>=12'}

  d3-geo@3.1.1:
    resolution: {integrity: sha512-637ln3gXKXOwhalDzinUgY83KzNWZRKbYubaG+fGVuc/dxO64RRljtCTnf5ecMyE1RIdtqpkVcq0IbtU2S8j2Q==}
    engines: {node: '>=12'}

  d3-hierarchy@1.1.9:
    resolution: {integrity: sha512-j8tPxlqh1srJHAtxfvOUwKNYJkQuBFdM1+JAUfq6xqH5eAqf93L7oG1NVqDa4CpFZNvnNKtCYEUC8KY9yEn9lQ==}

  d3-hierarchy@3.1.2:
    resolution: {integrity: sha512-FX/9frcub54beBdugHjDCdikxThEqjnR93Qt7PvQTOHxyiNCAlvMrHhclk3cD5VeAaq9fxmfRp+CnWw9rEMBuA==}
    engines: {node: '>=12'}

  d3-interpolate@3.0.1:
    resolution: {integrity: sha512-3bYs1rOD33uo8aqJfKP3JWPAibgw8Zm2+L9vBKEHJ2Rg+viTR7o5Mmv5mZcieN+FRYaAOWX5SJATX6k1PWz72g==}
    engines: {node: '>=12'}

  d3-path@1.0.9:
    resolution: {integrity: sha512-VLaYcn81dtHVTjEHd8B+pbe9yHWpXKZUC87PzoFmsFrJqgFwDe/qxfp5MlfsfM1V5E/iVt0MmEbWQ7FVIXh/bg==}

  d3-path@3.1.0:
    resolution: {integrity: sha512-p3KP5HCf/bvjBSSKuXid6Zqijx7wIfNW+J/maPs+iwR35at5JCbLUT0LzF1cnjbCHWhqzQTIN2Jpe8pRebIEFQ==}
    engines: {node: '>=12'}

  d3-polygon@3.0.1:
    resolution: {integrity: sha512-3vbA7vXYwfe1SYhED++fPUQlWSYTTGmFmQiany/gdbiWgU/iEyQzyymwL9SkJjFFuCS4902BSzewVGsHHmHtXg==}
    engines: {node: '>=12'}

  d3-quadtree@3.0.1:
    resolution: {integrity: sha512-04xDrxQTDTCFwP5H6hRhsRcb9xxv2RzkcsygFzmkSIOJy3PeRJP7sNk3VRIbKXcog561P9oU0/rVH6vDROAgUw==}
    engines: {node: '>=12'}

  d3-random@3.0.1:
    resolution: {integrity: sha512-FXMe9GfxTxqd5D6jFsQ+DJ8BJS4E/fT5mqqdjovykEB2oFbTMDVdg1MGFxfQW+FBOGoB++k8swBrgwSHT1cUXQ==}
    engines: {node: '>=12'}

  d3-sankey@0.12.3:
    resolution: {integrity: sha512-nQhsBRmM19Ax5xEIPLMY9ZmJ/cDvd1BG3UVvt5h3WRxKg5zGRbvnteTyWAbzeSvlh3tW7ZEmq4VwR5mB3tutmQ==}

  d3-scale-chromatic@3.1.0:
    resolution: {integrity: sha512-A3s5PWiZ9YCXFye1o246KoscMWqf8BsD9eRiJ3He7C9OBaxKhAd5TFCdEx/7VbKtxxTsu//1mMJFrEt572cEyQ==}
    engines: {node: '>=12'}

  d3-scale@4.0.2:
    resolution: {integrity: sha512-GZW464g1SH7ag3Y7hXjf8RoUuAFIqklOAq3MRl4OaWabTFJY9PN/E1YklhXLh+OQ3fM9yS2nOkCoS+WLZ6kvxQ==}
    engines: {node: '>=12'}

  d3-selection@3.0.0:
    resolution: {integrity: sha512-fmTRWbNMmsmWq6xJV8D19U/gw/bwrHfNXxrIN+HfZgnzqTHp9jOmKMhsTUjXOJnZOdZY9Q28y4yebKzqDKlxlQ==}
    engines: {node: '>=12'}

  d3-shape@1.3.7:
    resolution: {integrity: sha512-EUkvKjqPFUAZyOlhY5gzCxCeI0Aep04LwIRpsZ/mLFelJiUfnK56jo5JMDSE7yyP2kLSb6LtF+S5chMk7uqPqw==}

  d3-shape@3.2.0:
    resolution: {integrity: sha512-SaLBuwGm3MOViRq2ABk3eLoxwZELpH6zhl3FbAoJ7Vm1gofKx6El1Ib5z23NUEhF9AsGl7y+dzLe5Cw2AArGTA==}
    engines: {node: '>=12'}

  d3-time-format@4.1.0:
    resolution: {integrity: sha512-dJxPBlzC7NugB2PDLwo9Q8JiTR3M3e4/XANkreKSUxF8vvXKqm1Yfq4Q5dl8budlunRVlUUaDUgFt7eA8D6NLg==}
    engines: {node: '>=12'}

  d3-time@3.1.0:
    resolution: {integrity: sha512-VqKjzBLejbSMT4IgbmVgDjpkYrNWUYJnbCGo874u7MMKIWsILRX+OpX/gTk8MqjpT1A/c6HY2dCA77ZN0lkQ2Q==}
    engines: {node: '>=12'}

  d3-timer@3.0.1:
    resolution: {integrity: sha512-ndfJ/JxxMd3nw31uyKoY2naivF+r29V+Lc0svZxe1JvvIRmi8hUsrMvdOwgS1o6uBHmiz91geQ0ylPP0aj1VUA==}
    engines: {node: '>=12'}

  d3-transition@3.0.1:
    resolution: {integrity: sha512-ApKvfjsSR6tg06xrL434C0WydLr7JewBB3V+/39RMHsaXTOG0zmt/OAXeng5M5LBm0ojmxJrpomQVZ1aPvBL4w==}
    engines: {node: '>=12'}
    peerDependencies:
      d3-selection: 2 - 3

  d3-zoom@3.0.0:
    resolution: {integrity: sha512-b8AmV3kfQaqWAuacbPuNbL6vahnOJflOhexLzMMNLga62+/nh0JzvJ0aO/5a5MVgUFGS7Hu1P9P03o3fJkDCyw==}
    engines: {node: '>=12'}

  d3@7.9.0:
    resolution: {integrity: sha512-e1U46jVP+w7Iut8Jt8ri1YsPOvFpg46k+K8TpCb0P+zjCkjkPnV7WzfDJzMHy1LnA+wj5pLT1wjO901gLXeEhA==}
    engines: {node: '>=12'}

  dagre-d3-es@7.0.11:
    resolution: {integrity: sha512-tvlJLyQf834SylNKax8Wkzco/1ias1OPw8DcUMDE7oUIoSEW25riQVuiu/0OWEFqT0cxHT3Pa9/D82Jr47IONw==}

  data-uri-to-buffer@4.0.1:
    resolution: {integrity: sha512-0R9ikRb668HB7QDxT1vkpuUBtqc53YyAwMwGeUFKRojY/NWKvdZ+9UYtRfGmhqNbRkTSVpMbmyhXipFFv2cb/A==}
    engines: {node: '>= 12'}

  data-view-buffer@1.0.2:
    resolution: {integrity: sha512-EmKO5V3OLXh1rtK2wgXRansaK1/mtVdTUEiEI0W8RkvgT05kfxaH29PliLnpLP73yYO6142Q72QNa8Wx/A5CqQ==}
    engines: {node: '>= 0.4'}

  data-view-byte-length@1.0.2:
    resolution: {integrity: sha512-tuhGbE6CfTM9+5ANGf+oQb72Ky/0+s3xKUpHvShfiz2RxMFgFPjsXuRLBVMtvMs15awe45SRb83D6wH4ew6wlQ==}
    engines: {node: '>= 0.4'}

  data-view-byte-offset@1.0.1:
    resolution: {integrity: sha512-BS8PfmtDGnrgYdOonGZQdLZslWIeCGFP9tpan0hi1Co2Zr2NKADsvGYA8XxuG/4UWgJ6Cjtv+YJnB6MM69QGlQ==}
    engines: {node: '>= 0.4'}

  date-fns@4.1.0:
    resolution: {integrity: sha512-Ukq0owbQXxa/U3EGtsdVBkR1w7KOQ5gIBqdH2hkvknzZPYvBxb/aa6E8L7tmjFtkwZBu3UXBbjIgPo/Ez4xaNg==}

  dax-sh@0.43.2:
    resolution: {integrity: sha512-uULa1sSIHgXKGCqJ/pA0zsnzbHlVnuq7g8O2fkHokWFNwEGIhh5lAJlxZa1POG5En5ba7AU4KcBAvGQWMMf8rg==}

  dayjs@1.11.13:
    resolution: {integrity: sha512-oaMBel6gjolK862uaPQOVTA7q3TZhuSvuMQAAglQDOWYO9A91IrAOUJEyKVlqJlHE0vq5p5UXxzdPfMH/x6xNg==}

  db0@0.3.2:
    resolution: {integrity: sha512-xzWNQ6jk/+NtdfLyXEipbX55dmDSeteLFt/ayF+wZUU5bzKgmrDOxmInUTbyVRp46YwnJdkDA1KhB7WIXFofJw==}
    peerDependencies:
      '@electric-sql/pglite': '*'
      '@libsql/client': '*'
      better-sqlite3: '*'
      drizzle-orm: '*'
      mysql2: '*'
      sqlite3: '*'
    peerDependenciesMeta:
      '@electric-sql/pglite':
        optional: true
      '@libsql/client':
        optional: true
      better-sqlite3:
        optional: true
      drizzle-orm:
        optional: true
      mysql2:
        optional: true
      sqlite3:
        optional: true

  debounce@1.2.1:
    resolution: {integrity: sha512-XRRe6Glud4rd/ZGQfiV1ruXSfbvfJedlV9Y6zOlP+2K04vBYiJEte6stfFkCP03aMnY5tsipamumUjL14fofug==}

  debug@2.6.9:
    resolution: {integrity: sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  debug@4.4.1:
    resolution: {integrity: sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==}
    engines: {node: '>=6.0'}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  decache@4.6.2:
    resolution: {integrity: sha512-2LPqkLeu8XWHU8qNCS3kcF6sCcb5zIzvWaAHYSvPfwhdd7mHuah29NssMzrTYyHN4F5oFy2ko9OBYxegtU0FEw==}

  decode-named-character-reference@1.1.0:
    resolution: {integrity: sha512-Wy+JTSbFThEOXQIR2L6mxJvEs+veIzpmqD7ynWxMXGpnk3smkHQOp6forLdHsKpAMW9iJpaBBIxz285t1n1C3w==}

  dedent@1.6.0:
    resolution: {integrity: sha512-F1Z+5UCFpmQUzJa11agbyPVMbpgT/qA3/SKyJ1jyBgm7dUcUEa8v9JwDkerSQXfakBwFljIxhOJqGkjUwZ9FSA==}
    peerDependencies:
      babel-plugin-macros: ^3.1.0
    peerDependenciesMeta:
      babel-plugin-macros:
        optional: true

  deep-eql@5.0.2:
    resolution: {integrity: sha512-h5k/5U50IJJFpzfL6nO9jaaumfjO/f2NjK/oYB2Djzm4p9L+3T9qWpZqZ2hAbLPuuYq9wrU08WQyBTL5GbPk5Q==}
    engines: {node: '>=6'}

  deep-is@0.1.4:
    resolution: {integrity: sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==}

  deepmerge@4.3.1:
    resolution: {integrity: sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==}
    engines: {node: '>=0.10.0'}

  define-data-property@1.1.4:
    resolution: {integrity: sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==}
    engines: {node: '>= 0.4'}

  define-lazy-prop@2.0.0:
    resolution: {integrity: sha512-Ds09qNh8yw3khSjiJjiUInaGX9xlqZDY7JVryGxdxV7NPeuqQfplOpQ66yJFZut3jLa5zOwkXw1g9EI2uKh4Og==}
    engines: {node: '>=8'}

  define-properties@1.2.1:
    resolution: {integrity: sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==}
    engines: {node: '>= 0.4'}

  defu@6.1.4:
    resolution: {integrity: sha512-mEQCMmwJu317oSz8CwdIOdwf3xMif1ttiM8LTufzc3g6kR+9Pe236twL8j3IYT1F7GfRgGcW6MWxzZjLIkuHIg==}

  delaunator@5.0.1:
    resolution: {integrity: sha512-8nvh+XBe96aCESrGOqMp/84b13H9cdKbG5P2ejQCh4d4sK9RL4371qou9drQjMhvnPmhWl5hnmqbEE0fXr9Xnw==}

  denque@2.1.0:
    resolution: {integrity: sha512-HVQE3AAb/pxF8fQAoiqpvg9i3evqug3hoiwakOyZAwJm+6vZehbkYXZ0l4JxS+I3QxM97v5aaRNhj8v5oBhekw==}
    engines: {node: '>=0.10'}

  depd@2.0.0:
    resolution: {integrity: sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==}
    engines: {node: '>= 0.8'}

  dequal@2.0.3:
    resolution: {integrity: sha512-0je+qPKHEMohvfRTCEo3CrPG6cAzAYgmzKyxRiYSSDkS6eGJdyVJm7WaYA5ECaAD9wLB2T4EEeymA5aFVcYXCA==}
    engines: {node: '>=6'}

  destr@2.0.5:
    resolution: {integrity: sha512-ugFTXCtDZunbzasqBxrK93Ik/DRYsO6S/fedkWEMKqt04xZ4csmnmwGDBAb07QWNaGMAmnTIemsYZCksjATwsA==}

  destroy@1.2.0:
    resolution: {integrity: sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==}
    engines: {node: '>= 0.8', npm: 1.2.8000 || >= 1.4.16}

  detect-indent@6.1.0:
    resolution: {integrity: sha512-reYkTUJAZb9gUuZ2RvVCNhVHdg62RHnJ7WJl8ftMi4diZ6NWlciOzQN88pUhSELEwflJht4oQDv0F0BMlwaYtA==}
    engines: {node: '>=8'}

  detect-libc@1.0.3:
    resolution: {integrity: sha512-pGjwhsmsp4kL2RTz08wcOlGN83otlqHeD/Z5T8GXZB+/YcpQ/dgo+lbU8ZsGxV0HIvqqxo9l7mqYwyYMD9bKDg==}
    engines: {node: '>=0.10'}
    hasBin: true

  detect-libc@2.0.4:
    resolution: {integrity: sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==}
    engines: {node: '>=8'}

  detect-node-es@1.1.0:
    resolution: {integrity: sha512-ypdmJU/TbBby2Dxibuv7ZLW3Bs1QEmM7nHjEANfohJLvE0XVujisn1qPJcZxg+qDucsr+bP6fLD1rPS3AhJ7EQ==}

  detective-amd@6.0.1:
    resolution: {integrity: sha512-TtyZ3OhwUoEEIhTFoc1C9IyJIud3y+xYkSRjmvCt65+ycQuc3VcBrPRTMWoO/AnuCyOB8T5gky+xf7Igxtjd3g==}
    engines: {node: '>=18'}
    hasBin: true

  detective-cjs@6.0.1:
    resolution: {integrity: sha512-tLTQsWvd2WMcmn/60T2inEJNhJoi7a//PQ7DwRKEj1yEeiQs4mrONgsUtEJKnZmrGWBBmE0kJ1vqOG/NAxwaJw==}
    engines: {node: '>=18'}

  detective-es6@5.0.1:
    resolution: {integrity: sha512-XusTPuewnSUdoxRSx8OOI6xIA/uld/wMQwYsouvFN2LAg7HgP06NF1lHRV3x6BZxyL2Kkoih4ewcq8hcbGtwew==}
    engines: {node: '>=18'}

  detective-postcss@7.0.1:
    resolution: {integrity: sha512-bEOVpHU9picRZux5XnwGsmCN4+8oZo7vSW0O0/Enq/TO5R2pIAP2279NsszpJR7ocnQt4WXU0+nnh/0JuK4KHQ==}
    engines: {node: ^14.0.0 || >=16.0.0}
    peerDependencies:
      postcss: ^8.4.47

  detective-sass@6.0.1:
    resolution: {integrity: sha512-jSGPO8QDy7K7pztUmGC6aiHkexBQT4GIH+mBAL9ZyBmnUIOFbkfZnO8wPRRJFP/QP83irObgsZHCoDHZ173tRw==}
    engines: {node: '>=18'}

  detective-scss@5.0.1:
    resolution: {integrity: sha512-MAyPYRgS6DCiS6n6AoSBJXLGVOydsr9huwXORUlJ37K3YLyiN0vYHpzs3AdJOgHobBfispokoqrEon9rbmKacg==}
    engines: {node: '>=18'}

  detective-stylus@5.0.1:
    resolution: {integrity: sha512-Dgn0bUqdGbE3oZJ+WCKf8Dmu7VWLcmRJGc6RCzBgG31DLIyai9WAoEhYRgIHpt/BCRMrnXLbGWGPQuBUrnF0TA==}
    engines: {node: '>=18'}

  detective-typescript@14.0.0:
    resolution: {integrity: sha512-pgN43/80MmWVSEi5LUuiVvO/0a9ss5V7fwVfrJ4QzAQRd3cwqU1SfWGXJFcNKUqoD5cS+uIovhw5t/0rSeC5Mw==}
    engines: {node: '>=18'}
    peerDependencies:
      typescript: ^5.4.4

  detective-vue2@2.2.0:
    resolution: {integrity: sha512-sVg/t6O2z1zna8a/UIV6xL5KUa2cMTQbdTIIvqNM0NIPswp52fe43Nwmbahzj3ww4D844u/vC2PYfiGLvD3zFA==}
    engines: {node: '>=18'}
    peerDependencies:
      typescript: ^5.4.4

  devlop@1.1.0:
    resolution: {integrity: sha512-RWmIqhcFf1lRYBvNmr7qTNuyCt/7/ns2jbpp1+PalgE/rDQcBT0fioSMUpJ93irlUhC5hrg4cYqe6U+0ImW0rA==}

  diff-match-patch@1.0.5:
    resolution: {integrity: sha512-IayShXAgj/QMXgB0IWmKx+rOPuGMhqm5w6jvFxmVenXKIzRqTAAsbBPT3kWQeGANj3jGgvcvv4yK6SxqYmikgw==}

  diff@5.2.0:
    resolution: {integrity: sha512-uIFDxqpRZGZ6ThOk84hEfqWoHx2devRFvpTZcTHur85vImfaxUbTW9Ryh4CpCuDnToOP1CEtXKIgytHBPVff5A==}
    engines: {node: '>=0.3.1'}

  diff@8.0.2:
    resolution: {integrity: sha512-sSuxWU5j5SR9QQji/o2qMvqRNYRDOcBTgsJ/DeCf4iSN4gW+gNMXM7wFIP+fdXZxoNiAnHUTGjCr+TSWXdRDKg==}
    engines: {node: '>=0.3.1'}

  dir-glob@3.0.1:
    resolution: {integrity: sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==}
    engines: {node: '>=8'}

  doctrine@2.1.0:
    resolution: {integrity: sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==}
    engines: {node: '>=0.10.0'}

  dom-helpers@3.4.0:
    resolution: {integrity: sha512-LnuPJ+dwqKDIyotW1VzmOZ5TONUN7CwkCR5hrgawTUbkBGYdeoNLZo6nNfGkCrjtE1nXXaj7iMMpDa8/d9WoIA==}

  dom-serializer@2.0.0:
    resolution: {integrity: sha512-wIkAryiqt/nV5EQKqQpo3SToSOV9J0DnbJqwK7Wv/Trc92zIAYZ4FlMu+JPFW1DfGFt81ZTCGgDEabffXeLyJg==}

  domelementtype@2.3.0:
    resolution: {integrity: sha512-OLETBj6w0OsagBwdXnPdN0cnMfF9opN69co+7ZrbfPGrdpPVNBUj02spi6B1N7wChLQiPn4CSH/zJvXw56gmHw==}

  domhandler@5.0.3:
    resolution: {integrity: sha512-cgwlv/1iFQiFnU96XXgROh8xTeetsnJiDsTc7TYCLFd9+/WNkIqPTxiM/8pSd8VIrhXGTf1Ny1q1hquVqDJB5w==}
    engines: {node: '>= 4'}

  dompurify@3.2.6:
    resolution: {integrity: sha512-/2GogDQlohXPZe6D6NOgQvXLPSYBqIWMnZ8zzOhn09REE4eyAzb+Hed3jhoM9OkuaJ8P6ZGTTVWQKAi8ieIzfQ==}

  domutils@3.2.2:
    resolution: {integrity: sha512-6kZKyUajlDuqlHKVX1w7gyslj9MPIXzIFiz/rGu35uC1wMi+kMhQwGhl4lt9unC9Vb9INnY9Z3/ZA3+FhASLaw==}

  dot-prop@9.0.0:
    resolution: {integrity: sha512-1gxPBJpI/pcjQhKgIU91II6Wkay+dLcN3M6rf2uwP8hRur3HtQXjVrdAK3sjC0piaEuxzMwjXChcETiJl47lAQ==}
    engines: {node: '>=18'}

  dotenv@16.6.1:
    resolution: {integrity: sha512-uBq4egWHTcTt33a72vpSG0z3HnPuIl6NqYcTrKEg2azoEyl2hpW0zqlxysq2pK9HlDIHyHyakeYaYnSAwd8bow==}
    engines: {node: '>=12'}

  dunder-proto@1.0.1:
    resolution: {integrity: sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==}
    engines: {node: '>= 0.4'}

  duplexer@0.1.2:
    resolution: {integrity: sha512-jtD6YG370ZCIi/9GTaJKQxWTZD045+4R4hTk/x1UyoqadyJ9x9CgSi1RlVDQF8U2sxLLSnFkCaMihqljHIWgMg==}

  eastasianwidth@0.2.0:
    resolution: {integrity: sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==}

  editorconfig@1.0.4:
    resolution: {integrity: sha512-L9Qe08KWTlqYMVvMcTIvMAdl1cDUubzRNYL+WfA4bLDMHe4nemKkpmYzkznE1FwLKu0EEmy6obgQKzMJrg4x9Q==}
    engines: {node: '>=14'}
    hasBin: true

  ee-first@1.1.1:
    resolution: {integrity: sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==}

  electron-to-chromium@1.5.181:
    resolution: {integrity: sha512-+ISMj8OIQ+0qEeDj14Rt8WwcTOiqHyAB+5bnK1K7xNNLjBJ4hRCQfUkw8RWtcLbfBzDwc15ZnKH0c7SNOfwiyA==}

  emoji-regex@10.4.0:
    resolution: {integrity: sha512-EC+0oUMY1Rqm4O6LLrgjtYDvcVYTy7chDnM4Q7030tP4Kwj3u/pR6gP9ygnp2CJMK5Gq+9Q2oqmrFJAz01DXjw==}

  emoji-regex@8.0.0:
    resolution: {integrity: sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==}

  emoji-regex@9.2.2:
    resolution: {integrity: sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==}

  enabled@2.0.0:
    resolution: {integrity: sha512-AKrN98kuwOzMIdAizXGI86UFBoo26CL21UM763y1h/GMSJ4/OHU9k2YlsmBpyScFo/wbLzWQJBMCW4+IO3/+OQ==}

  encodeurl@1.0.2:
    resolution: {integrity: sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==}
    engines: {node: '>= 0.8'}

  encodeurl@2.0.0:
    resolution: {integrity: sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==}
    engines: {node: '>= 0.8'}

  encoding-sniffer@0.2.1:
    resolution: {integrity: sha512-5gvq20T6vfpekVtqrYQsSCFZ1wEg5+wW0/QaZMWkFr6BqD3NfKs0rLCx4rrVlSWJeZb5NBJgVLswK/w2MWU+Gw==}

  end-of-stream@1.4.5:
    resolution: {integrity: sha512-ooEGc6HP26xXq/N+GCGOT0JKCLDGrq2bQUZrQ7gyrJiZANJ/8YDTxTpQBXGMn+WbIQXNVpyWymm7KYVICQnyOg==}

  enhanced-resolve@5.18.2:
    resolution: {integrity: sha512-6Jw4sE1maoRJo3q8MsSIn2onJFbLTOjY9hlx4DZXmOKvLRd1Ok2kXmAGXaafL2+ijsJZ1ClYbl/pmqr9+k4iUQ==}
    engines: {node: '>=10.13.0'}

  enquirer@2.4.1:
    resolution: {integrity: sha512-rRqJg/6gd538VHvR3PSrdRBb/1Vy2YfzHqzvbhGIQpDRKIa4FgV/54b5Q1xYSxOOwKvjXweS26E0Q+nAMwp2pQ==}
    engines: {node: '>=8.6'}

  entities@4.5.0:
    resolution: {integrity: sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==}
    engines: {node: '>=0.12'}

  entities@6.0.1:
    resolution: {integrity: sha512-aN97NXWF6AWBTahfVOIrB/NShkzi5H7F9r1s9mD3cDj4Ko5f2qhhVoYMibXF7GlLveb/D2ioWay8lxI97Ven3g==}
    engines: {node: '>=0.12'}

  env-paths@3.0.0:
    resolution: {integrity: sha512-dtJUTepzMW3Lm/NPxRf3wP4642UWhjL2sQxc+ym2YMj1m/H2zDNQOlezafzkHwn6sMstjHTwG6iQQsctDW/b1A==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  err-code@2.0.3:
    resolution: {integrity: sha512-2bmlRpNKBxT/CRmPOlyISQpNj+qSeYvcym/uT0Jx2bMOlKLtSy1ZmLuVxSEKKyor/N5yhvp/ZiG1oE3DEYMSFA==}

  error-ex@1.3.2:
    resolution: {integrity: sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==}

  error-stack-parser-es@1.0.5:
    resolution: {integrity: sha512-5qucVt2XcuGMcEGgWI7i+yZpmpByQ8J1lHhcL7PwqCwu9FPP3VUXzT4ltHe5i2z9dePwEHcDVOAfSnHsOlCXRA==}

  es-abstract@1.23.9:
    resolution: {integrity: sha512-py07lI0wjxAC/DcfK1S6G7iANonniZwTISvdPzk9hzeH0IZIshbuuFxLIU96OyF89Yb9hiqWn8M/bY83KY5vzA==}
    engines: {node: '>= 0.4'}

  es-define-property@1.0.1:
    resolution: {integrity: sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==}
    engines: {node: '>= 0.4'}

  es-errors@1.3.0:
    resolution: {integrity: sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==}
    engines: {node: '>= 0.4'}

  es-iterator-helpers@1.2.1:
    resolution: {integrity: sha512-uDn+FE1yrDzyC0pCo961B2IHbdM8y/ACZsKD4dG6WqrjV53BADjwa7D+1aom2rsNVfLyDgU/eigvlJGJ08OQ4w==}
    engines: {node: '>= 0.4'}

  es-module-lexer@1.7.0:
    resolution: {integrity: sha512-jEQoCwk8hyb2AZziIOLhDqpm5+2ww5uIE6lkO/6jcOCusfk6LhMHpXXfBLXTZ7Ydyt0j4VoUQv6uGNYbdW+kBA==}

  es-object-atoms@1.1.1:
    resolution: {integrity: sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==}
    engines: {node: '>= 0.4'}

  es-set-tostringtag@2.1.0:
    resolution: {integrity: sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==}
    engines: {node: '>= 0.4'}

  es-shim-unscopables@1.1.0:
    resolution: {integrity: sha512-d9T8ucsEhh8Bi1woXCf+TIKDIROLG5WCkxg8geBCbvk22kzwC5G2OnXVMO6FUsvQlgUUXQ2itephWDLqDzbeCw==}
    engines: {node: '>= 0.4'}

  es-to-primitive@1.3.0:
    resolution: {integrity: sha512-w+5mJ3GuFL+NjVtJlvydShqE1eN3h3PbI7/5LAsYJP/2qtuMXjfL2LpHSRqo4b4eSF5K/DH1JXKUAHSB2UW50g==}
    engines: {node: '>= 0.4'}

  esast-util-from-estree@2.0.0:
    resolution: {integrity: sha512-4CyanoAudUSBAn5K13H4JhsMH6L9ZP7XbLVe/dKybkxMO7eDyLsT8UHl9TRNrU2Gr9nz+FovfSIjuXWJ81uVwQ==}

  esast-util-from-js@2.0.1:
    resolution: {integrity: sha512-8Ja+rNJ0Lt56Pcf3TAmpBZjmx8ZcK5Ts4cAzIOjsjevg9oSXJnl6SUQ2EevU8tv3h6ZLWmoKL5H4fgWvdvfETw==}

  esbuild@0.25.5:
    resolution: {integrity: sha512-P8OtKZRv/5J5hhz0cUAdu/cLuPIKXpQl1R9pZtvmHWQvrAUVd0UNIPT4IB4W3rNOqVO0rlqHmCIbSwxh/c9yUQ==}
    engines: {node: '>=18'}
    hasBin: true

  esbuild@0.25.6:
    resolution: {integrity: sha512-GVuzuUwtdsghE3ocJ9Bs8PNoF13HNQ5TXbEi2AhvVb8xU1Iwt9Fos9FEamfoee+u/TOsn7GUWc04lz46n2bbTg==}
    engines: {node: '>=18'}
    hasBin: true

  escalade@3.2.0:
    resolution: {integrity: sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==}
    engines: {node: '>=6'}

  escape-html@1.0.3:
    resolution: {integrity: sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==}

  escape-string-regexp@4.0.0:
    resolution: {integrity: sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==}
    engines: {node: '>=10'}

  escape-string-regexp@5.0.0:
    resolution: {integrity: sha512-/veY75JbMK4j1yjvuUxuVsiS/hr/4iHs9FTT6cgTexxdE0Ly/glccBAkloH/DofkjRbZU3bnoj38mOmhkZ0lHw==}
    engines: {node: '>=12'}

  escodegen@2.1.0:
    resolution: {integrity: sha512-2NlIDTwUWJN0mRPQOdtQBzbUHvdGY2P1VXSyU83Q3xKxM7WHX2Ql8dKq782Q9TgQUNOLEzEYu9bzLNj1q88I5w==}
    engines: {node: '>=6.0'}
    hasBin: true

  eslint-plugin-react-hooks@5.2.0:
    resolution: {integrity: sha512-+f15FfK64YQwZdJNELETdn5ibXEUQmW1DZL6KXhNnc2heoy/sg9VJJeT7n8TlMWouzWqSWavFkIhHyIbIAEapg==}
    engines: {node: '>=10'}
    peerDependencies:
      eslint: ^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0 || ^9.0.0

  eslint-plugin-react@7.37.5:
    resolution: {integrity: sha512-Qteup0SqU15kdocexFNAJMvCJEfa2xUKNV4CC1xsVMrIIqEy3SQ/rqyxCWNzfrd3/ldy6HMlD2e0JDVpDg2qIA==}
    engines: {node: '>=4'}
    peerDependencies:
      eslint: ^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9.7

  eslint-plugin-tailwindcss@3.18.0:
    resolution: {integrity: sha512-PQDU4ZMzFH0eb2DrfHPpbgo87Zgg2EXSMOj1NSfzdZm+aJzpuwGerfowMIaVehSREEa0idbf/eoNYAOHSJoDAQ==}
    engines: {node: '>=18.12.0'}
    peerDependencies:
      tailwindcss: ^3.4.0

  eslint-scope@5.1.1:
    resolution: {integrity: sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==}
    engines: {node: '>=8.0.0'}

  eslint-scope@8.4.0:
    resolution: {integrity: sha512-sNXOfKCn74rt8RICKMvJS7XKV/Xk9kA7DyJr8mJik3S7Cwgy3qlkkmyS2uQB3jiJg6VNdZd/pDBJu0nvG2NlTg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  eslint-visitor-keys@3.4.3:
    resolution: {integrity: sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  eslint-visitor-keys@4.2.1:
    resolution: {integrity: sha512-Uhdk5sfqcee/9H/rCOJikYz67o0a2Tw2hGRPOG2Y1R2dg7brRe1uG0yaNQDHu+TO/uQPF/5eCapvYSmHUjt7JQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  eslint@9.30.1:
    resolution: {integrity: sha512-zmxXPNMOXmwm9E0yQLi5uqXHs7uq2UIiqEKo3Gq+3fwo1XrJ+hijAZImyF7hclW3E6oHz43Yk3RP8at6OTKflQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    hasBin: true
    peerDependencies:
      jiti: '*'
    peerDependenciesMeta:
      jiti:
        optional: true

  espree@10.4.0:
    resolution: {integrity: sha512-j6PAQ2uUr79PZhBjP5C5fhl8e39FmRnOjsD5lGnWrFU8i2G776tBK7+nP8KuQUTTyAZUwfQqXAgrVH5MbH9CYQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  esprima@4.0.1:
    resolution: {integrity: sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==}
    engines: {node: '>=4'}
    hasBin: true

  esquery@1.6.0:
    resolution: {integrity: sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==}
    engines: {node: '>=0.10'}

  esrecurse@4.3.0:
    resolution: {integrity: sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==}
    engines: {node: '>=4.0'}

  estraverse@4.3.0:
    resolution: {integrity: sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==}
    engines: {node: '>=4.0'}

  estraverse@5.3.0:
    resolution: {integrity: sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==}
    engines: {node: '>=4.0'}

  estree-util-attach-comments@3.0.0:
    resolution: {integrity: sha512-cKUwm/HUcTDsYh/9FgnuFqpfquUbwIqwKM26BVCGDPVgvaCl/nDCCjUfiLlx6lsEZ3Z4RFxNbOQ60pkaEwFxGw==}

  estree-util-build-jsx@3.0.1:
    resolution: {integrity: sha512-8U5eiL6BTrPxp/CHbs2yMgP8ftMhR5ww1eIKoWRMlqvltHF8fZn5LRDvTKuxD3DUn+shRbLGqXemcP51oFCsGQ==}

  estree-util-is-identifier-name@3.0.0:
    resolution: {integrity: sha512-hFtqIDZTIUZ9BXLb8y4pYGyk6+wekIivNVTcmvk8NoOh+VeRn5y6cEHzbURrWbfp1fIqdVipilzj+lfaadNZmg==}

  estree-util-scope@1.0.0:
    resolution: {integrity: sha512-2CAASclonf+JFWBNJPndcOpA8EMJwa0Q8LUFJEKqXLW6+qBvbFZuF5gItbQOs/umBUkjviCSDCbBwU2cXbmrhQ==}

  estree-util-to-js@2.0.0:
    resolution: {integrity: sha512-WDF+xj5rRWmD5tj6bIqRi6CkLIXbbNQUcxQHzGysQzvHmdYG2G7p/Tf0J0gpxGgkeMZNTIjT/AoSvC9Xehcgdg==}

  estree-util-value-to-estree@3.4.0:
    resolution: {integrity: sha512-Zlp+gxis+gCfK12d3Srl2PdX2ybsEA8ZYy6vQGVQTNNYLEGRQQ56XB64bjemN8kxIKXP1nC9ip4Z+ILy9LGzvQ==}

  estree-util-visit@2.0.0:
    resolution: {integrity: sha512-m5KgiH85xAhhW8Wta0vShLcUvOsh3LLPI2YVwcbio1l7E09NTLL1EyMZFM1OyWowoH0skScNbhOPl4kcBgzTww==}

  estree-walker@2.0.2:
    resolution: {integrity: sha512-Rfkk/Mp/DL7JVje3u18FxFujQlTNR2q6QfMSMB7AvCBx91NGj/ba3kCfza0f6dVDbw7YlRf/nDrn7pQrCCyQ/w==}

  estree-walker@3.0.3:
    resolution: {integrity: sha512-7RUKfXgSMMkzt6ZuXmqapOurLGPPfgj6l9uRZ7lRGolvk0y2yocc35LdcxKC5PQZdn2DMqioAQ2NoWcrTKmm6g==}

  esutils@2.0.3:
    resolution: {integrity: sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==}
    engines: {node: '>=0.10.0'}

  etag@1.8.1:
    resolution: {integrity: sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==}
    engines: {node: '>= 0.6'}

  event-target-shim@5.0.1:
    resolution: {integrity: sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==}
    engines: {node: '>=6'}

  eventemitter3@4.0.7:
    resolution: {integrity: sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==}

  events@3.3.0:
    resolution: {integrity: sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==}
    engines: {node: '>=0.8.x'}

  execa@8.0.1:
    resolution: {integrity: sha512-VyhnebXciFV2DESc+p6B+y0LjSm0krU4OgJN44qFAhBY0TJ+1V61tYD2+wHusZ6F9n5K+vl8k0sTy7PEfV4qpg==}
    engines: {node: '>=16.17'}

  exit-hook@2.2.1:
    resolution: {integrity: sha512-eNTPlAD67BmP31LDINZ3U7HSF8l57TxOY2PmBJ1shpCvpnxBF93mWCE8YHBnXs8qiUZJc9WDcWIeC3a2HIAMfw==}
    engines: {node: '>=6'}

  expect-type@1.2.1:
    resolution: {integrity: sha512-/kP8CAwxzLVEeFrMm4kMmy4CCDlpipyA7MYLVrdJIkV0fYF0UaigQHRsxHiuY/GEea+bh4KSv3TIlgr+2UL6bw==}
    engines: {node: '>=12.0.0'}

  express@4.21.2:
    resolution: {integrity: sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==}
    engines: {node: '>= 0.10.0'}

  exsolve@1.0.7:
    resolution: {integrity: sha512-VO5fQUzZtI6C+vx4w/4BWJpg3s/5l+6pRQEHzFRM8WFi4XffSP1Z+4qi7GbjWbvRQEbdIco5mIMq+zX4rPuLrw==}

  extend-shallow@2.0.1:
    resolution: {integrity: sha512-zCnTtlxNoAiDc3gqY2aYAWFx7XWWiasuF2K8Me5WbN8otHKTUKBwjPtNpRs/rbUZm7KxWAaNj7P1a/p52GbVug==}
    engines: {node: '>=0.10.0'}

  extend@3.0.2:
    resolution: {integrity: sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==}

  extendable-error@0.1.7:
    resolution: {integrity: sha512-UOiS2in6/Q0FK0R0q6UY9vYpQ21mr/Qn1KOnte7vsACuNJf514WvCCUHSRCPcgjPT2bAhNIJdlE6bVap1GKmeg==}

  external-editor@3.1.0:
    resolution: {integrity: sha512-hMQ4CX1p1izmuLYyZqLMO/qGNw10wSv9QDCPfzXfyFrOaCSSoRfqE1Kf1s5an66J5JZC62NewG+mK49jOCtQew==}
    engines: {node: '>=4'}

  extract-zip@2.0.1:
    resolution: {integrity: sha512-GDhU9ntwuKyGXdZBUgTIe+vXnWj0fppUEtMDL0+idd5Sta8TGpHssn/eusA9mrPr9qNDym6SxAYZjNvCn/9RBg==}
    engines: {node: '>= 10.17.0'}
    hasBin: true

  fast-content-type-parse@3.0.0:
    resolution: {integrity: sha512-ZvLdcY8P+N8mGQJahJV5G4U88CSvT1rP8ApL6uETe88MBXrBHAkZlSEySdUlyztF7ccb+Znos3TFqaepHxdhBg==}

  fast-deep-equal@3.1.3:
    resolution: {integrity: sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==}

  fast-fifo@1.3.2:
    resolution: {integrity: sha512-/d9sfos4yxzpwkDkuN7k2SqFKtYNmCTzgfEpz82x34IM9/zc8KGxQoXg1liNC/izpRM/MBdt44Nmx41ZWqk+FQ==}

  fast-glob@3.3.1:
    resolution: {integrity: sha512-kNFPyjhh5cKjrUltxs+wFx+ZkbRaxxmZ+X0ZU31SOsxCEtP9VPgtq2teZw1DebupL5GmDaNQ6yKMMVcM41iqDg==}
    engines: {node: '>=8.6.0'}

  fast-glob@3.3.3:
    resolution: {integrity: sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==}
    engines: {node: '>=8.6.0'}

  fast-json-stable-stringify@2.1.0:
    resolution: {integrity: sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==}

  fast-levenshtein@2.0.6:
    resolution: {integrity: sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==}

  fast-uri@3.0.6:
    resolution: {integrity: sha512-Atfo14OibSv5wAp4VWNsFYE1AchQRTv9cBGWET4pZWHzYshFSS9NQI6I57rdKn9croWVMbYFbLhJ+yJvmZIIHw==}

  fast-xml-parser@4.5.3:
    resolution: {integrity: sha512-RKihhV+SHsIUGXObeVy9AXiBbFwkVk7Syp8XgwN5U3JV416+Gwp/GO9i0JYKmikykgz/UHRrrV4ROuZEo/T0ig==}
    hasBin: true

  fastq@1.19.1:
    resolution: {integrity: sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==}

  fault@2.0.1:
    resolution: {integrity: sha512-WtySTkS4OKev5JtpHXnib4Gxiurzh5NCGvWrFaZ34m6JehfTUhKZvn9njTfw48t6JumVQOmrKqpmGcdwxnhqBQ==}

  fd-slicer@1.1.0:
    resolution: {integrity: sha512-cE1qsB/VwyQozZ+q1dGxR8LBYNZeofhEdUNGSMbQD3Gw2lAzX9Zb3uIU6Ebc/Fmyjo9AWWfnn0AUCHqtevs/8g==}

  fdir@6.4.6:
    resolution: {integrity: sha512-hiFoqpyZcfNm1yc4u8oWCf9A2c4D3QjCrks3zmoVKVxpQRzmPNar1hUJcBG2RQHvEVGDN+Jm81ZheVLAQMK6+w==}
    peerDependencies:
      picomatch: ^3 || ^4
    peerDependenciesMeta:
      picomatch:
        optional: true

  fecha@4.2.3:
    resolution: {integrity: sha512-OP2IUU6HeYKJi3i0z4A19kHMQoLVs4Hc+DPqqxI2h/DPZHTm/vjsfC6P0b4jCMy14XizLBqvndQ+UilD7707Jw==}

  feed@5.1.0:
    resolution: {integrity: sha512-qGNhgYygnefSkAHHrNHqC7p3R8J0/xQDS/cYUud8er/qD9EFGWyCdUDfULHTJQN1d3H3WprzVwMc9MfB4J50Wg==}
    engines: {node: '>=20', pnpm: '>=10'}

  fetch-blob@3.2.0:
    resolution: {integrity: sha512-7yAQpD2UMJzLi1Dqv7qFYnPbaPx7ZfFK6PiIxQ4PfkGPyNyl2Ugx+a/umUonmKqjhM4DnfbMvdX6otXq83soQQ==}
    engines: {node: ^12.20 || >= 14.13}

  file-entry-cache@8.0.0:
    resolution: {integrity: sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==}
    engines: {node: '>=16.0.0'}

  file-uri-to-path@1.0.0:
    resolution: {integrity: sha512-0Zt+s3L7Vf1biwWZ29aARiVYLx7iMGnEUl9x33fbB/j3jR81u/O2LbqK+Bm1CDSNDKVtJ/YjwY7TUd5SkeLQLw==}

  fill-range@7.1.1:
    resolution: {integrity: sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==}
    engines: {node: '>=8'}

  filter-obj@6.1.0:
    resolution: {integrity: sha512-xdMtCAODmPloU9qtmPcdBV9Kd27NtMse+4ayThxqIHUES5Z2S6bGpap5PpdmNM56ub7y3i1eyr+vJJIIgWGKmA==}
    engines: {node: '>=18'}

  finalhandler@1.3.1:
    resolution: {integrity: sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==}
    engines: {node: '>= 0.8'}

  find-root@1.1.0:
    resolution: {integrity: sha512-NKfW6bec6GfKc0SGx1e07QZY9PE99u0Bft/0rzSD5k3sO/vwkVUpDUKVm5Gpp5Ue3YfShPFTX2070tDs5kB9Ng==}

  find-up-simple@1.0.1:
    resolution: {integrity: sha512-afd4O7zpqHeRyg4PfDQsXmlDe2PfdHtJt6Akt8jOWaApLOZk5JXs6VMR29lz03pRe9mpykrRCYIYxaJYcfpncQ==}
    engines: {node: '>=18'}

  find-up@4.1.0:
    resolution: {integrity: sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==}
    engines: {node: '>=8'}

  find-up@5.0.0:
    resolution: {integrity: sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==}
    engines: {node: '>=10'}

  find-up@7.0.0:
    resolution: {integrity: sha512-YyZM99iHrqLKjmt4LJDj58KI+fYyufRLBSYcqycxf//KpBk9FoewoGX0450m9nB44qrZnovzC2oeP5hUibxc/g==}
    engines: {node: '>=18'}

  fix-dts-default-cjs-exports@1.0.1:
    resolution: {integrity: sha512-pVIECanWFC61Hzl2+oOCtoJ3F17kglZC/6N94eRWycFgBH35hHx0Li604ZIzhseh97mf2p0cv7vVrOZGoqhlEg==}

  flat-cache@4.0.1:
    resolution: {integrity: sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==}
    engines: {node: '>=16'}

  flatted@3.3.3:
    resolution: {integrity: sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==}

  fn.name@1.1.0:
    resolution: {integrity: sha512-GRnmB5gPyJpAhTQdSZTSp9uaPSvl09KoYcMQtsB9rQoOmzs9dH6ffeccH+Z+cv6P68Hu5bC6JjRh4Ah/mHSNRw==}

  focus-trap@7.6.5:
    resolution: {integrity: sha512-7Ke1jyybbbPZyZXFxEftUtxFGLMpE2n6A+z//m4CRDlj0hW+o3iYSmh8nFlYMurOiJVDmJRilUQtJr08KfIxlg==}

  follow-redirects@1.15.9:
    resolution: {integrity: sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==}
    engines: {node: '>=4.0'}
    peerDependencies:
      debug: '*'
    peerDependenciesMeta:
      debug:
        optional: true

  for-each@0.3.5:
    resolution: {integrity: sha512-dKx12eRCVIzqCxFGplyFKJMPvLEWgmNtUrpTiJIR5u97zEhRG8ySrtboPHZXx7daLxQVrl643cTzbab2tkQjxg==}
    engines: {node: '>= 0.4'}

  foreach@2.0.6:
    resolution: {integrity: sha512-k6GAGDyqLe9JaebCsFCoudPPWfihKu8pylYXRlqP1J7ms39iPoTtk2fviNglIeQEwdh0bQeKJ01ZPyuyQvKzwg==}

  foreground-child@3.3.1:
    resolution: {integrity: sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==}
    engines: {node: '>=14'}

  format@0.2.2:
    resolution: {integrity: sha512-wzsgA6WOq+09wrU1tsJ09udeR/YZRaeArL9e1wPbFg3GG2yDnC2ldKpxs4xunpFF9DgqCqOIra3bc1HWrJ37Ww==}
    engines: {node: '>=0.4.x'}

  formdata-polyfill@4.0.10:
    resolution: {integrity: sha512-buewHzMvYL29jdeQTVILecSaZKnt/RJWjoZCF5OW60Z67/GmSLBkOFM7qh1PI3zFNtJbaZL5eQu1vLfazOwj4g==}
    engines: {node: '>=12.20.0'}

  forwarded@0.2.0:
    resolution: {integrity: sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==}
    engines: {node: '>= 0.6'}

  framer-motion@12.12.1:
    resolution: {integrity: sha512-PFw4/GCREHI2suK/NlPSUxd+x6Rkp80uQsfCRFSOQNrm5pZif7eGtmG1VaD/UF1fW9tRBy5AaS77StatB3OJDg==}
    peerDependencies:
      '@emotion/is-prop-valid': '*'
      react: ^18.0.0 || ^19.0.0
      react-dom: ^18.0.0 || ^19.0.0
    peerDependenciesMeta:
      '@emotion/is-prop-valid':
        optional: true
      react:
        optional: true
      react-dom:
        optional: true

  fresh@0.5.2:
    resolution: {integrity: sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==}
    engines: {node: '>= 0.6'}

  fresh@2.0.0:
    resolution: {integrity: sha512-Rx/WycZ60HOaqLKAi6cHRKKI7zxWbJ31MhntmtwMoaTeF7XFH9hhBp8vITaMidfljRQ6eYWCKkaTK+ykVJHP2A==}
    engines: {node: '>= 0.8'}

  fs-extra@7.0.1:
    resolution: {integrity: sha512-YJDaCJZEnBmcbw13fvdAM9AwNOJwOzrE4pqMqBq5nFiEqXUqHwlK4B+3pUw6JNvfSPtX05xFHtYy/1ni01eGCw==}
    engines: {node: '>=6 <7 || >=8'}

  fs-extra@8.1.0:
    resolution: {integrity: sha512-yhlQgA6mnOJUKOsRUFsgJdQCvkKhcz8tlZG5HBQfReYZy46OwLcY+Zia0mtdHsOo9y/hP+CxMN0TU9QxoOtG4g==}
    engines: {node: '>=6 <7 || >=8'}

  fsevents@2.3.3:
    resolution: {integrity: sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==}
    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
    os: [darwin]

  function-bind@1.1.2:
    resolution: {integrity: sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==}

  function.prototype.name@1.1.8:
    resolution: {integrity: sha512-e5iwyodOHhbMr/yNrc7fDYG4qlbIvI5gajyzPnb5TCwyhjApznQh1BMFou9b30SevY43gCJKXycoCBjMbsuW0Q==}
    engines: {node: '>= 0.4'}

  functions-have-names@1.2.3:
    resolution: {integrity: sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==}

  fuse.js@7.1.0:
    resolution: {integrity: sha512-trLf4SzuuUxfusZADLINj+dE8clK1frKdmqiJNb1Es75fmI5oY6X2mxLVUciLLjxqw/xr72Dhy+lER6dGd02FQ==}
    engines: {node: '>=10'}

  gensync@1.0.0-beta.2:
    resolution: {integrity: sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==}
    engines: {node: '>=6.9.0'}

  get-amd-module-type@6.0.1:
    resolution: {integrity: sha512-MtjsmYiCXcYDDrGqtNbeIYdAl85n+5mSv2r3FbzER/YV3ZILw4HNNIw34HuV5pyl0jzs6GFYU1VHVEefhgcNHQ==}
    engines: {node: '>=18'}

  get-caller-file@2.0.5:
    resolution: {integrity: sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==}
    engines: {node: 6.* || 8.* || >= 10.*}

  get-east-asian-width@1.3.0:
    resolution: {integrity: sha512-vpeMIQKxczTD/0s2CdEWHcb0eeJe6TFjxb+J5xgX7hScxqrGuyjmv4c1D4A/gelKfyox0gJJwIHF+fLjeaM8kQ==}
    engines: {node: '>=18'}

  get-intrinsic@1.3.0:
    resolution: {integrity: sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==}
    engines: {node: '>= 0.4'}

  get-nonce@1.0.1:
    resolution: {integrity: sha512-FJhYRoDaiatfEkUK8HKlicmu/3SGFD51q3itKDGoSTysQJBnfOcxU5GxnhE1E6soB76MbT0MBtnKJuXyAx+96Q==}
    engines: {node: '>=6'}

  get-own-enumerable-keys@1.0.0:
    resolution: {integrity: sha512-PKsK2FSrQCyxcGHsGrLDcK0lx+0Ke+6e8KFFozA9/fIQLhQzPaRvJFdcz7+Axg3jUH/Mq+NI4xa5u/UT2tQskA==}
    engines: {node: '>=14.16'}

  get-port-please@3.1.2:
    resolution: {integrity: sha512-Gxc29eLs1fbn6LQ4jSU4vXjlwyZhF5HsGuMAa7gqBP4Rw4yxxltyDUuF5MBclFzDTXO+ACchGQoeela4DSfzdQ==}

  get-port@5.1.1:
    resolution: {integrity: sha512-g/Q1aTSDOxFpchXC4i8ZWvxA1lnPqx/JHqcpIw0/LX9T8x/GBbi6YnlN5nhaKIFkT8oFsscUKgDJYxfwfS6QsQ==}
    engines: {node: '>=8'}

  get-proto@1.0.1:
    resolution: {integrity: sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==}
    engines: {node: '>= 0.4'}

  get-stream@5.2.0:
    resolution: {integrity: sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==}
    engines: {node: '>=8'}

  get-stream@8.0.1:
    resolution: {integrity: sha512-VaUJspBffn/LMCJVoMvSAdmscJyS1auj5Zulnn5UoYcY531UWmdwhRWkcGKnGU93m5HSXP9LP2usOryrBtQowA==}
    engines: {node: '>=16'}

  get-symbol-description@1.1.0:
    resolution: {integrity: sha512-w9UMqWwJxHNOvoNzSJ2oPF5wvYcvP7jUvYzhp67yEhTi17ZDBBC1z9pTdGuzjD+EFIqLSYRweZjqfiPzQ06Ebg==}
    engines: {node: '>= 0.4'}

  get-tsconfig@4.10.1:
    resolution: {integrity: sha512-auHyJ4AgMz7vgS8Hp3N6HXSmlMdUyhSUrfBF16w153rxtLIEOE+HGqaBppczZvnHLqQJfiHotCYpNhl0lUROFQ==}

  giget@2.0.0:
    resolution: {integrity: sha512-L5bGsVkxJbJgdnwyuheIunkGatUF/zssUoxxjACCseZYAVbaqdh9Tsmmlkl8vYan09H7sbvKt4pS8GqKLBrEzA==}
    hasBin: true

  github-slugger@2.0.0:
    resolution: {integrity: sha512-IaOQ9puYtjrkq7Y0Ygl9KDZnrf/aiUJYUpVf89y8kyaxbRG7Y1SrX/jaumrv81vc61+kiMempujsM3Yw7w5qcw==}

  glob-parent@5.1.2:
    resolution: {integrity: sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==}
    engines: {node: '>= 6'}

  glob-parent@6.0.2:
    resolution: {integrity: sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==}
    engines: {node: '>=10.13.0'}

  glob-to-regexp@0.4.1:
    resolution: {integrity: sha512-lkX1HJXwyMcprw/5YUZc2s7DrpAiHB21/V+E1rHUrVNokkvB6bqMzT0VfV6/86ZNabt1k14YOIaT7nDvOX3Iiw==}

  glob@10.4.5:
    resolution: {integrity: sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==}
    hasBin: true

  glob@11.0.2:
    resolution: {integrity: sha512-YT7U7Vye+t5fZ/QMkBFrTJ7ZQxInIUjwyAjVj84CYXqgBdv30MFUPGnBR6sQaVq6Is15wYJUsnzTuWaGRBhBAQ==}
    engines: {node: 20 || >=22}
    hasBin: true

  globals@14.0.0:
    resolution: {integrity: sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==}
    engines: {node: '>=18'}

  globals@15.15.0:
    resolution: {integrity: sha512-7ACyT3wmyp3I61S4fG682L0VA2RGD9otkqGJIwNUMF1SWUombIIk+af1unuDYgMm082aHYwD+mzJvv9Iu8dsgg==}
    engines: {node: '>=18'}

  globalthis@1.0.4:
    resolution: {integrity: sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==}
    engines: {node: '>= 0.4'}

  globby@11.1.0:
    resolution: {integrity: sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==}
    engines: {node: '>=10'}

  globby@14.1.0:
    resolution: {integrity: sha512-0Ia46fDOaT7k4og1PDW4YbodWWr3scS2vAr2lTbsplOt2WkKp0vQbkI9wKis/T5LV/dqPjO3bpS/z6GTJB82LA==}
    engines: {node: '>=18'}

  globrex@0.1.2:
    resolution: {integrity: sha512-uHJgbwAMwNFf5mLst7IWLNg14x1CkeqglJb/K3doi4dw6q2IvAAmM/Y81kevy83wP+Sst+nutFTYOGg3d1lsxg==}

  gonzales-pe@4.3.0:
    resolution: {integrity: sha512-otgSPpUmdWJ43VXyiNgEYE4luzHCL2pz4wQ0OnDluC6Eg4Ko3Vexy/SrSynglw/eR+OhkzmqFCZa/OFa/RgAOQ==}
    engines: {node: '>=0.6.0'}
    hasBin: true

  goober@2.1.16:
    resolution: {integrity: sha512-erjk19y1U33+XAMe1VTvIONHYoSqE4iS7BYUZfHaqeohLmnC0FdxEh7rQU+6MZ4OajItzjZFSRtVANrQwNq6/g==}
    peerDependencies:
      csstype: ^3.0.10

  gopd@1.2.0:
    resolution: {integrity: sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==}
    engines: {node: '>= 0.4'}

  graceful-fs@4.2.11:
    resolution: {integrity: sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==}

  graphemer@1.4.0:
    resolution: {integrity: sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==}

  gray-matter@4.0.3:
    resolution: {integrity: sha512-5v6yZd4JK3eMI3FqqCouswVqwugaA9r4dNZB1wwcmrD02QkV5H0y7XBQW8QwQqEaZY1pM9aqORSORhJRdNK44Q==}
    engines: {node: '>=6.0'}

  gzip-size@6.0.0:
    resolution: {integrity: sha512-ax7ZYomf6jqPTQ4+XCpUGyXKHk5WweS+e05MBO4/y3WJ5RkmPXNKvX+bx1behVILVwr6JSQvZAku021CHPXG3Q==}
    engines: {node: '>=10'}

  gzip-size@7.0.0:
    resolution: {integrity: sha512-O1Ld7Dr+nqPnmGpdhzLmMTQ4vAsD+rHwMm1NLUmoUFFymBOMKxCCrtDxqdBRYXdeEPEi3SyoR4TizJLQrnKBNA==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  h3@1.13.0:
    resolution: {integrity: sha512-vFEAu/yf8UMUcB4s43OaDaigcqpQd14yanmOsn+NcRX3/guSKncyE2rOYhq8RIchgJrPSs/QiIddnTTR1ddiAg==}

  h3@1.15.3:
    resolution: {integrity: sha512-z6GknHqyX0h9aQaTx22VZDf6QyZn+0Nh+Ym8O/u0SGSkyF5cuTJYKlc8MkzW3Nzf9LE1ivcpmYC3FUGpywhuUQ==}

  hachure-fill@0.5.2:
    resolution: {integrity: sha512-3GKBOn+m2LX9iq+JC1064cSFprJY4jL1jCXTcpnfER5HYE2l/4EfWSGzkPa/ZDBmYI0ZOEj5VHV/eKnPGkHuOg==}

  has-bigints@1.1.0:
    resolution: {integrity: sha512-R3pbpkcIqv2Pm3dUwgjclDRVmWpTJW2DcMzcIhEXEx1oh/CEMObMm3KLmRJOdvhM7o4uQBnwr8pzRK2sJWIqfg==}
    engines: {node: '>= 0.4'}

  has-flag@4.0.0:
    resolution: {integrity: sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==}
    engines: {node: '>=8'}

  has-property-descriptors@1.0.2:
    resolution: {integrity: sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==}

  has-proto@1.2.0:
    resolution: {integrity: sha512-KIL7eQPfHQRC8+XluaIw7BHUwwqL19bQn4hzNgdr+1wXoU0KKj6rufu47lhY7KbJR2C6T6+PfyN0Ea7wkSS+qQ==}
    engines: {node: '>= 0.4'}

  has-symbols@1.1.0:
    resolution: {integrity: sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==}
    engines: {node: '>= 0.4'}

  has-tostringtag@1.0.2:
    resolution: {integrity: sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==}
    engines: {node: '>= 0.4'}

  hasown@2.0.2:
    resolution: {integrity: sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==}
    engines: {node: '>= 0.4'}

  hast-util-embedded@3.0.0:
    resolution: {integrity: sha512-naH8sld4Pe2ep03qqULEtvYr7EjrLK2QHY8KJR6RJkTUjPGObe1vnx585uzem2hGra+s1q08DZZpfgDVYRbaXA==}

  hast-util-format@1.1.0:
    resolution: {integrity: sha512-yY1UDz6bC9rDvCWHpx12aIBGRG7krurX0p0Fm6pT547LwDIZZiNr8a+IHDogorAdreULSEzP82Nlv5SZkHZcjA==}

  hast-util-from-dom@5.0.1:
    resolution: {integrity: sha512-N+LqofjR2zuzTjCPzyDUdSshy4Ma6li7p/c3pA78uTwzFgENbgbUrm2ugwsOdcjI1muO+o6Dgzp9p8WHtn/39Q==}

  hast-util-from-html-isomorphic@2.0.0:
    resolution: {integrity: sha512-zJfpXq44yff2hmE0XmwEOzdWin5xwH+QIhMLOScpX91e/NSGPsAzNCvLQDIEPyO2TXi+lBmU6hjLIhV8MwP2kw==}

  hast-util-from-html@2.0.3:
    resolution: {integrity: sha512-CUSRHXyKjzHov8yKsQjGOElXy/3EKpyX56ELnkHH34vDVw1N1XSQ1ZcAvTyAPtGqLTuKP/uxM+aLkSPqF/EtMw==}

  hast-util-from-parse5@8.0.3:
    resolution: {integrity: sha512-3kxEVkEKt0zvcZ3hCRYI8rqrgwtlIOFMWkbclACvjlDw8Li9S2hk/d51OI0nr/gIpdMHNepwgOKqZ/sy0Clpyg==}

  hast-util-has-property@3.0.0:
    resolution: {integrity: sha512-MNilsvEKLFpV604hwfhVStK0usFY/QmM5zX16bo7EjnAEGofr5YyI37kzopBlZJkHD4t887i+q/C8/tr5Q94cA==}

  hast-util-is-body-ok-link@3.0.1:
    resolution: {integrity: sha512-0qpnzOBLztXHbHQenVB8uNuxTnm/QBFUOmdOSsEn7GnBtyY07+ENTWVFBAnXd/zEgd9/SUG3lRY7hSIBWRgGpQ==}

  hast-util-is-element@3.0.0:
    resolution: {integrity: sha512-Val9mnv2IWpLbNPqc/pUem+a7Ipj2aHacCwgNfTiK0vJKl0LF+4Ba4+v1oPHFpf3bLYmreq0/l3Gud9S5OH42g==}

  hast-util-minify-whitespace@1.0.1:
    resolution: {integrity: sha512-L96fPOVpnclQE0xzdWb/D12VT5FabA7SnZOUMtL1DbXmYiHJMXZvFkIZfiMmTCNJHUeO2K9UYNXoVyfz+QHuOw==}

  hast-util-parse-selector@4.0.0:
    resolution: {integrity: sha512-wkQCkSYoOGCRKERFWcxMVMOcYE2K1AaNLU8DXS9arxnLOUEWbOXKXiJUNzEpqZ3JOKpnha3jkFrumEjVliDe7A==}

  hast-util-phrasing@3.0.1:
    resolution: {integrity: sha512-6h60VfI3uBQUxHqTyMymMZnEbNl1XmEGtOxxKYL7stY2o601COo62AWAYBQR9lZbYXYSBoxag8UpPRXK+9fqSQ==}

  hast-util-raw@9.1.0:
    resolution: {integrity: sha512-Y8/SBAHkZGoNkpzqqfCldijcuUKh7/su31kEBp67cFY09Wy0mTRgtsLYsiIxMJxlu0f6AA5SUTbDR8K0rxnbUw==}

  hast-util-sanitize@5.0.2:
    resolution: {integrity: sha512-3yTWghByc50aGS7JlGhk61SPenfE/p1oaFeNwkOOyrscaOkMGrcW9+Cy/QAIOBpZxP1yqDIzFMR0+Np0i0+usg==}

  hast-util-to-estree@3.1.3:
    resolution: {integrity: sha512-48+B/rJWAp0jamNbAAf9M7Uf//UVqAoMmgXhBdxTDJLGKY+LRnZ99qcG+Qjl5HfMpYNzS5v4EAwVEF34LeAj7w==}

  hast-util-to-html@9.0.5:
    resolution: {integrity: sha512-OguPdidb+fbHQSU4Q4ZiLKnzWo8Wwsf5bZfbvu7//a9oTYoqD/fWpe96NuHkoS9h0ccGOTe0C4NGXdtS0iObOw==}

  hast-util-to-jsx-runtime@2.3.6:
    resolution: {integrity: sha512-zl6s8LwNyo1P9uw+XJGvZtdFF1GdAkOg8ujOw+4Pyb76874fLps4ueHXDhXWdk6YHQ6OgUtinliG7RsYvCbbBg==}

  hast-util-to-parse5@8.0.0:
    resolution: {integrity: sha512-3KKrV5ZVI8if87DVSi1vDeByYrkGzg4mEfeu4alwgmmIeARiBLKCZS2uw5Gb6nU9x9Yufyj3iudm6i7nl52PFw==}

  hast-util-to-string@3.0.1:
    resolution: {integrity: sha512-XelQVTDWvqcl3axRfI0xSeoVKzyIFPwsAGSLIsKdJKQMXDYJS4WYrBNF/8J7RdhIcFI2BOHgAifggsvsxp/3+A==}

  hast-util-to-text@4.0.2:
    resolution: {integrity: sha512-KK6y/BN8lbaq654j7JgBydev7wuNMcID54lkRav1P0CaE1e47P72AWWPiGKXTJU271ooYzcvTAn/Zt0REnvc7A==}

  hast-util-whitespace@3.0.0:
    resolution: {integrity: sha512-88JUN06ipLwsnv+dVn+OIYOvAuvBMy/Qoi6O7mQHxdPXpjy+Cd6xRkWwux7DKO+4sYILtLBRIKgsdpS2gQc7qw==}

  hastscript@9.0.1:
    resolution: {integrity: sha512-g7df9rMFX/SPi34tyGCyUBREQoKkapwdY/T04Qn9TDWfHhAYt4/I0gMVirzK5wEzeUqIjEB+LXC/ypb7Aqno5w==}

  highlight.js@11.11.1:
    resolution: {integrity: sha512-Xwwo44whKBVCYoliBQwaPvtd/2tYFkRQtXDWj1nackaV2JPXx3L0+Jvd8/qCJ2p+ML0/XVkJ2q+Mr+UVdpJK5w==}
    engines: {node: '>=12.0.0'}

  highlightjs-curl@1.3.0:
    resolution: {integrity: sha512-50UEfZq1KR0Lfk2Tr6xb/MUIZH3h10oNC0OTy9g7WELcs5Fgy/mKN1vEhuKTkKbdo8vr5F9GXstu2eLhApfQ3A==}

  highlightjs-vue@1.0.0:
    resolution: {integrity: sha512-PDEfEF102G23vHmPhLyPboFCD+BkMGu+GuJe2d9/eH4FsCwvgBpnc9n0pGE+ffKdph38s6foEZiEjdgHdzp+IA==}

  hoist-non-react-statics@3.3.2:
    resolution: {integrity: sha512-/gGivxi8JPKWNm/W0jSmzcMPpfpPLc3dY/6GxhX2hQ9iGj3aDfklV4ET7NjKpSinLpJ5vafa9iiGIEZg10SfBw==}

  hookable@5.5.3:
    resolution: {integrity: sha512-Yc+BQe8SvoXH1643Qez1zqLRmbA5rCL+sSmk6TVos0LWVfNIB7PGncdlId77WzLGSIB5KaWgTaNTs2lNVEI6VQ==}

  hosted-git-info@6.1.3:
    resolution: {integrity: sha512-HVJyzUrLIL1c0QmviVh5E8VGyUS7xCFPS6yydaVd1UegW+ibV/CohqTH9MkOLDp5o+rb82DMo77PTuc9F/8GKw==}
    engines: {node: ^14.17.0 || ^16.13.0 || >=18.0.0}

  hosted-git-info@7.0.2:
    resolution: {integrity: sha512-puUZAUKT5m8Zzvs72XWy3HtvVbTWljRE66cP60bxJzAqf2DgICo7lYTY2IHUmLnNpjYvw5bvmoHvPc0QO2a62w==}
    engines: {node: ^16.14.0 || >=18.0.0}

  html-escaper@2.0.2:
    resolution: {integrity: sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==}

  html-void-elements@3.0.0:
    resolution: {integrity: sha512-bEqo66MRXsUGxWHV5IP0PUiAWwoEjba4VCzg0LjFJBpchPaTfyfCKTG6bc5F8ucKec3q5y6qOdGyYTSBEvhCrg==}

  html-whitespace-sensitive-tag-names@3.0.1:
    resolution: {integrity: sha512-q+310vW8zmymYHALr1da4HyXUQ0zgiIwIicEfotYPWGN0OJVEN/58IJ3A4GBYcEq3LGAZqKb+ugvP0GNB9CEAA==}

  html@1.0.0:
    resolution: {integrity: sha512-lw/7YsdKiP3kk5PnR1INY17iJuzdAtJewxr14ozKJWbbR97znovZ0mh+WEMZ8rjc3lgTK+ID/htTjuyGKB52Kw==}
    hasBin: true

  htmlparser2@10.0.0:
    resolution: {integrity: sha512-TwAZM+zE5Tq3lrEHvOlvwgj1XLWQCtaaibSN11Q+gGBAS7Y1uZSWwXXRe4iF6OXnaq1riyQAPFOBtYc77Mxq0g==}

  http-errors@2.0.0:
    resolution: {integrity: sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==}
    engines: {node: '>= 0.8'}

  http-proxy@1.18.1:
    resolution: {integrity: sha512-7mz/721AbnJwIVbnaSv1Cz3Am0ZLT/UBwkC92VlxhXv/k/BBQfM2fXElQNC27BVGr0uwUpplYPQM9LnaBMR5NQ==}
    engines: {node: '>=8.0.0'}

  http-shutdown@1.2.2:
    resolution: {integrity: sha512-S9wWkJ/VSY9/k4qcjG318bqJNruzE4HySUhFYknwmu6LBP97KLLfwNf+n4V1BHurvFNkSKLFnK/RsuUnRTf9Vw==}
    engines: {iojs: '>= 1.0.0', node: '>= 0.12.0'}

  https-proxy-agent@7.0.6:
    resolution: {integrity: sha512-vK9P5/iUfdl95AI+JVyUuIcVtd4ofvtrOr3HNtM2yxC9bnMbEdp3x01OhQNnjb8IJYi38VlTE3mBXwcfvywuSw==}
    engines: {node: '>= 14'}

  httpxy@0.1.7:
    resolution: {integrity: sha512-pXNx8gnANKAndgga5ahefxc++tJvNL87CXoRwxn1cJE2ZkWEojF3tNfQIEhZX/vfpt+wzeAzpUI4qkediX1MLQ==}

  human-id@4.1.1:
    resolution: {integrity: sha512-3gKm/gCSUipeLsRYZbbdA1BD83lBoWUkZ7G9VFrhWPAU76KwYo5KR8V28bpoPm/ygy0x5/GCbpRQdY7VLYCoIg==}
    hasBin: true

  human-signals@5.0.0:
    resolution: {integrity: sha512-AXcZb6vzzrFAUE61HnN4mpLqd/cSIwNQjtNWR0euPm6y0iqx3G4gOXaIDdtdDwZmhwe82LA6+zinmW4UBWVePQ==}
    engines: {node: '>=16.17.0'}

  iconv-lite@0.4.24:
    resolution: {integrity: sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==}
    engines: {node: '>=0.10.0'}

  iconv-lite@0.6.3:
    resolution: {integrity: sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==}
    engines: {node: '>=0.10.0'}

  ieee754@1.2.1:
    resolution: {integrity: sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==}

  ignore@5.3.2:
    resolution: {integrity: sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==}
    engines: {node: '>= 4'}

  ignore@7.0.5:
    resolution: {integrity: sha512-Hs59xBNfUIunMFgWAbGX5cq6893IbWg4KnrjbYwX3tx0ztorVgTDA6B2sxf8ejHJ4wz8BqGUMYlnzNBer5NvGg==}
    engines: {node: '>= 4'}

  image-size@2.0.2:
    resolution: {integrity: sha512-IRqXKlaXwgSMAMtpNzZa1ZAe8m+Sa1770Dhk8VkSsP9LS+iHD62Zd8FQKs8fbPiagBE7BzoFX23cxFnwshpV6w==}
    engines: {node: '>=16.x'}
    hasBin: true

  import-fresh@3.3.1:
    resolution: {integrity: sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==}
    engines: {node: '>=6'}

  imurmurhash@0.1.4:
    resolution: {integrity: sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==}
    engines: {node: '>=0.8.19'}

  index-to-position@1.1.0:
    resolution: {integrity: sha512-XPdx9Dq4t9Qk1mTMbWONJqU7boCoumEH7fRET37HX5+khDUl3J2W6PdALxhILYlIYx2amlwYcRPp28p0tSiojg==}
    engines: {node: '>=18'}

  inherits@2.0.4:
    resolution: {integrity: sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==}

  ini@1.3.8:
    resolution: {integrity: sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew==}

  inline-style-parser@0.2.4:
    resolution: {integrity: sha512-0aO8FkhNZlj/ZIbNi7Lxxr12obT7cL1moPfE4tg1LkX7LlLfC6DeX4l2ZEud1ukP9jNQyNnfzQVqwbwmAATY4Q==}

  internal-slot@1.1.0:
    resolution: {integrity: sha512-4gd7VpWNQNB4UKKCFFVcp1AVv+FMOgs9NKzjHKusc8jTMhd5eL1NqQqOpE0KzMds804/yHlglp3uxgluOqAPLw==}
    engines: {node: '>= 0.4'}

  internmap@1.0.1:
    resolution: {integrity: sha512-lDB5YccMydFBtasVtxnZ3MRBHuaoE8GKsppq+EchKL2U4nK/DmEpPHNH8MZe5HkMtpSiTSOZwfN0tzYjO/lJEw==}

  internmap@2.0.3:
    resolution: {integrity: sha512-5Hh7Y1wQbvY5ooGgPbDaL5iYLAPzMTUrjMulskHLH6wnv/A+1q5rgEaiuqEjB+oxGXIVZs1FF+R/KPN3ZSQYYg==}
    engines: {node: '>=12'}

  ioredis@5.6.1:
    resolution: {integrity: sha512-UxC0Yv1Y4WRJiGQxQkP0hfdL0/5/6YvdfOOClRgJ0qppSarkhneSa6UvkMkms0AkdGimSH3Ikqm+6mkMmX7vGA==}
    engines: {node: '>=12.22.0'}

  ipaddr.js@1.9.1:
    resolution: {integrity: sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==}
    engines: {node: '>= 0.10'}

  iron-webcrypto@1.2.1:
    resolution: {integrity: sha512-feOM6FaSr6rEABp/eDfVseKyTMDt+KGpeB35SkVn9Tyn0CqvVsY3EwI0v5i8nMHyJnzCIQf7nsy3p41TPkJZhg==}

  is-absolute-url@4.0.1:
    resolution: {integrity: sha512-/51/TKE88Lmm7Gc4/8btclNXWS+g50wXhYJq8HWIBAGUBnoAdRu1aXeh364t/O7wXDAcTJDP8PNuNKWUDWie+A==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  is-alphabetical@2.0.1:
    resolution: {integrity: sha512-FWyyY60MeTNyeSRpkM2Iry0G9hpr7/9kD40mD/cGQEuilcZYS4okz8SN2Q6rLCJ8gbCt6fN+rC+6tMGS99LaxQ==}

  is-alphanumerical@2.0.1:
    resolution: {integrity: sha512-hmbYhX/9MUMF5uh7tOXyK/n0ZvWpad5caBA17GsC6vyuCqaWliRG5K1qS9inmUhEMaOBIW7/whAnSwveW/LtZw==}

  is-array-buffer@3.0.5:
    resolution: {integrity: sha512-DDfANUiiG2wC1qawP66qlTugJeL5HyzMpfr8lLK+jMQirGzNod0B12cFB/9q838Ru27sBwfw78/rdoU7RERz6A==}
    engines: {node: '>= 0.4'}

  is-arrayish@0.2.1:
    resolution: {integrity: sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==}

  is-arrayish@0.3.2:
    resolution: {integrity: sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==}

  is-async-function@2.1.1:
    resolution: {integrity: sha512-9dgM/cZBnNvjzaMYHVoxxfPj2QXt22Ev7SuuPrs+xav0ukGB0S6d4ydZdEiM48kLx5kDV+QBPrpVnFyefL8kkQ==}
    engines: {node: '>= 0.4'}

  is-bigint@1.1.0:
    resolution: {integrity: sha512-n4ZT37wG78iz03xPRKJrHTdZbe3IicyucEtdRsV5yglwc3GyUfbAfpSeD0FJ41NbUNSt5wbhqfp1fS+BgnvDFQ==}
    engines: {node: '>= 0.4'}

  is-binary-path@2.1.0:
    resolution: {integrity: sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==}
    engines: {node: '>=8'}

  is-boolean-object@1.2.2:
    resolution: {integrity: sha512-wa56o2/ElJMYqjCjGkXri7it5FbebW5usLw/nPmCMs5DeZ7eziSYZhSmPRn0txqeW4LnAmQQU7FgqLpsEFKM4A==}
    engines: {node: '>= 0.4'}

  is-builtin-module@3.2.1:
    resolution: {integrity: sha512-BSLE3HnV2syZ0FK0iMA/yUGplUeMmNz4AW5fnTunbCIqZi4vG3WjJT9FHMy5D69xmAYBHXQhJdALdpwVxV501A==}
    engines: {node: '>=6'}

  is-callable@1.2.7:
    resolution: {integrity: sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==}
    engines: {node: '>= 0.4'}

  is-core-module@2.16.1:
    resolution: {integrity: sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==}
    engines: {node: '>= 0.4'}

  is-data-view@1.0.2:
    resolution: {integrity: sha512-RKtWF8pGmS87i2D6gqQu/l7EYRlVdfzemCJN/P3UOs//x1QE7mfhvzHIApBTRf7axvT6DMGwSwBXYCT0nfB9xw==}
    engines: {node: '>= 0.4'}

  is-date-object@1.1.0:
    resolution: {integrity: sha512-PwwhEakHVKTdRNVOw+/Gyh0+MzlCl4R6qKvkhuvLtPMggI1WAHt9sOwZxQLSGpUaDnrdyDsomoRgNnCfKNSXXg==}
    engines: {node: '>= 0.4'}

  is-decimal@2.0.1:
    resolution: {integrity: sha512-AAB9hiomQs5DXWcRB1rqsxGUstbRroFOPPVAomNk/3XHR5JyEZChOyTWe2oayKnsSsr/kcGqF+z6yuH6HHpN0A==}

  is-docker@2.2.1:
    resolution: {integrity: sha512-F+i2BKsFrH66iaUFc0woD8sLy8getkwTwtOBjvs56Cx4CgJDeKQeqfz8wAYiSb8JOprWhHH5p77PbmYCvvUuXQ==}
    engines: {node: '>=8'}
    hasBin: true

  is-docker@3.0.0:
    resolution: {integrity: sha512-eljcgEDlEns/7AXFosB5K/2nCM4P7FQPkGc/DWLy5rmFEWvZayGrik1d9/QIY5nJ4f9YsVvBkA6kJpHn9rISdQ==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}
    hasBin: true

  is-extendable@0.1.1:
    resolution: {integrity: sha512-5BMULNob1vgFX6EjQw5izWDxrecWK9AM72rugNr0TFldMOi0fj6Jk+zeKIt0xGj4cEfQIJth4w3OKWOJ4f+AFw==}
    engines: {node: '>=0.10.0'}

  is-extglob@2.1.1:
    resolution: {integrity: sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==}
    engines: {node: '>=0.10.0'}

  is-finalizationregistry@1.1.1:
    resolution: {integrity: sha512-1pC6N8qWJbWoPtEjgcL2xyhQOP491EQjeUo3qTKcmV8YSDDJrOepfG8pcC7h/QgnQHYSv0mJ3Z/ZWxmatVrysg==}
    engines: {node: '>= 0.4'}

  is-fullwidth-code-point@3.0.0:
    resolution: {integrity: sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==}
    engines: {node: '>=8'}

  is-generator-function@1.1.0:
    resolution: {integrity: sha512-nPUB5km40q9e8UfN/Zc24eLlzdSf9OfKByBw9CIdw4H1giPMeA0OIJvbchsCu4npfI2QcMVBsGEBHKZ7wLTWmQ==}
    engines: {node: '>= 0.4'}

  is-glob@4.0.3:
    resolution: {integrity: sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==}
    engines: {node: '>=0.10.0'}

  is-hexadecimal@2.0.1:
    resolution: {integrity: sha512-DgZQp241c8oO6cA1SbTEWiXeoxV42vlcJxgH+B3hi1AiqqKruZR3ZGF8In3fj4+/y/7rHvlOZLZtgJ/4ttYGZg==}

  is-inside-container@1.0.0:
    resolution: {integrity: sha512-KIYLCCJghfHZxqjYBE7rEy0OBuTd5xCHS7tHVgvCLkx7StIoaxwNW3hCALgEUjFfeRk+MG/Qxmp/vtETEF3tRA==}
    engines: {node: '>=14.16'}
    hasBin: true

  is-map@2.0.3:
    resolution: {integrity: sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==}
    engines: {node: '>= 0.4'}

  is-module@1.0.0:
    resolution: {integrity: sha512-51ypPSPCoTEIN9dy5Oy+h4pShgJmPCygKfyRCISBI+JoWT/2oJvK8QPxmwv7b/p239jXrm9M1mlQbyKJ5A152g==}

  is-number-object@1.1.1:
    resolution: {integrity: sha512-lZhclumE1G6VYD8VHe35wFaIif+CTy5SJIi5+3y4psDgWu4wPDoBhF8NxUOinEc7pHgiTsT6MaBb92rKhhD+Xw==}
    engines: {node: '>= 0.4'}

  is-number@7.0.0:
    resolution: {integrity: sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==}
    engines: {node: '>=0.12.0'}

  is-obj@3.0.0:
    resolution: {integrity: sha512-IlsXEHOjtKhpN8r/tRFj2nDyTmHvcfNeu/nrRIcXE17ROeatXchkojffa1SpdqW4cr/Fj6QkEf/Gn4zf6KKvEQ==}
    engines: {node: '>=12'}

  is-path-inside@4.0.0:
    resolution: {integrity: sha512-lJJV/5dYS+RcL8uQdBDW9c9uWFLLBNRyFhnAKXw5tVqLlKZ4RMGZKv+YQ/IA3OhD+RpbJa1LLFM1FQPGyIXvOA==}
    engines: {node: '>=12'}

  is-plain-obj@2.1.0:
    resolution: {integrity: sha512-YWnfyRwxL/+SsrWYfOpUtz5b3YD+nyfkHvjbcanzk8zgyO4ASD67uVMRt8k5bM4lLMDnXfriRhOpemw+NfT1eA==}
    engines: {node: '>=8'}

  is-plain-obj@4.1.0:
    resolution: {integrity: sha512-+Pgi+vMuUNkJyExiMBt5IlFoMyKnr5zhJ4Uspz58WOhBF5QoIZkFyNHIbBAtHwzVAgk5RtndVNsDRN61/mmDqg==}
    engines: {node: '>=12'}

  is-plain-object@5.0.0:
    resolution: {integrity: sha512-VRSzKkbMm5jMDoKLbltAkFQ5Qr7VDiTFGXxYFXXowVj387GeGNOCsOH6Msy00SGZ3Fp84b1Naa1psqgcCIEP5Q==}
    engines: {node: '>=0.10.0'}

  is-reference@1.2.1:
    resolution: {integrity: sha512-U82MsXXiFIrjCK4otLT+o2NA2Cd2g5MLoOVXUZjIOhLurrRxpEXzI8O0KZHr3IjLvlAH1kTPYSuqer5T9ZVBKQ==}

  is-regex@1.2.1:
    resolution: {integrity: sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==}
    engines: {node: '>= 0.4'}

  is-regexp@3.1.0:
    resolution: {integrity: sha512-rbku49cWloU5bSMI+zaRaXdQHXnthP6DZ/vLnfdSKyL4zUzuWnomtOEiZZOd+ioQ+avFo/qau3KPTc7Fjy1uPA==}
    engines: {node: '>=12'}

  is-set@2.0.3:
    resolution: {integrity: sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==}
    engines: {node: '>= 0.4'}

  is-shared-array-buffer@1.0.4:
    resolution: {integrity: sha512-ISWac8drv4ZGfwKl5slpHG9OwPNty4jOWPRIhBpxOoD+hqITiwuipOQ2bNthAzwA3B4fIjO4Nln74N0S9byq8A==}
    engines: {node: '>= 0.4'}

  is-stream@2.0.1:
    resolution: {integrity: sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==}
    engines: {node: '>=8'}

  is-stream@3.0.0:
    resolution: {integrity: sha512-LnQR4bZ9IADDRSkvpqMGvt/tEJWclzklNgSw48V5EAaAeDd6qGvN8ei6k5p0tvxSR171VmGyHuTiAOfxAbr8kA==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  is-stream@4.0.1:
    resolution: {integrity: sha512-Dnz92NInDqYckGEUJv689RbRiTSEHCQ7wOVeALbkOz999YpqT46yMRIGtSNl2iCL1waAZSx40+h59NV/EwzV/A==}
    engines: {node: '>=18'}

  is-string@1.1.1:
    resolution: {integrity: sha512-BtEeSsoaQjlSPBemMQIrY1MY0uM6vnS1g5fmufYOtnxLGUZM2178PKbhsk7Ffv58IX+ZtcvoGwccYsh0PglkAA==}
    engines: {node: '>= 0.4'}

  is-subdir@1.2.0:
    resolution: {integrity: sha512-2AT6j+gXe/1ueqbW6fLZJiIw3F8iXGJtt0yDrZaBhAZEG1raiTxKWU+IPqMCzQAXOUCKdA4UDMgacKH25XG2Cw==}
    engines: {node: '>=4'}

  is-symbol@1.1.1:
    resolution: {integrity: sha512-9gGx6GTtCQM73BgmHQXfDmLtfjjTUDSyoxTCbp5WtoixAhfgsDirWIcVQ/IHpvI5Vgd5i/J5F7B9cN/WlVbC/w==}
    engines: {node: '>= 0.4'}

  is-typed-array@1.1.15:
    resolution: {integrity: sha512-p3EcsicXjit7SaskXHs1hA91QxgTw46Fv6EFKKGS5DRFLD8yKnohjF3hxoju94b/OcMZoQukzpPpBE9uLVKzgQ==}
    engines: {node: '>= 0.4'}

  is-url-superb@4.0.0:
    resolution: {integrity: sha512-GI+WjezhPPcbM+tqE9LnmsY5qqjwHzTvjJ36wxYX5ujNXefSUJ/T17r5bqDV8yLhcgB59KTPNOc9O9cmHTPWsA==}
    engines: {node: '>=10'}

  is-url@1.2.4:
    resolution: {integrity: sha512-ITvGim8FhRiYe4IQ5uHSkj7pVaPDrCTkNd3yq3cV7iZAcJdHTUMPMEHcqSOy9xZ9qFenQCvi+2wjH9a1nXqHww==}

  is-weakmap@2.0.2:
    resolution: {integrity: sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==}
    engines: {node: '>= 0.4'}

  is-weakref@1.1.1:
    resolution: {integrity: sha512-6i9mGWSlqzNMEqpCp93KwRS1uUOodk2OJ6b+sq7ZPDSy2WuI5NFIxp/254TytR8ftefexkWn5xNiHUNpPOfSew==}
    engines: {node: '>= 0.4'}

  is-weakset@2.0.4:
    resolution: {integrity: sha512-mfcwb6IzQyOKTs84CQMrOwW4gQcaTOAWJ0zzJCl2WSPDrWk/OzDaImWFH3djXhb24g4eudZfLRozAvPGw4d9hQ==}
    engines: {node: '>= 0.4'}

  is-windows@1.0.2:
    resolution: {integrity: sha512-eXK1UInq2bPmjyX6e3VHIzMLobc4J94i4AWn+Hpq3OU5KkrRC96OAcR3PRJ/pGu6m8TRnBHP9dkXQVsT/COVIA==}
    engines: {node: '>=0.10.0'}

  is-wsl@2.2.0:
    resolution: {integrity: sha512-fKzAra0rGJUUBwGBgNkHZuToZcn+TtXHpeCgmkMJMMYx1sQDYaCSyjJBSCa2nH1DGm7s3n1oBnohoVTBaN7Lww==}
    engines: {node: '>=8'}

  is-wsl@3.1.0:
    resolution: {integrity: sha512-UcVfVfaK4Sc4m7X3dUSoHoozQGBEFeDC+zVo06t98xe8CzHSZZBekNXH+tu0NalHolcJ/QAGqS46Hef7QXBIMw==}
    engines: {node: '>=16'}

  is64bit@2.0.0:
    resolution: {integrity: sha512-jv+8jaWCl0g2lSBkNSVXdzfBA0npK1HGC2KtWM9FumFRoGS94g3NbCCLVnCYHLjp4GrW2KZeeSTMo5ddtznmGw==}
    engines: {node: '>=18'}

  isarray@1.0.0:
    resolution: {integrity: sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==}

  isarray@2.0.5:
    resolution: {integrity: sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==}

  isbot@5.1.28:
    resolution: {integrity: sha512-qrOp4g3xj8YNse4biorv6O5ZShwsJM0trsoda4y7j/Su7ZtTTfVXFzbKkpgcSoDrHS8FcTuUwcU04YimZlZOxw==}
    engines: {node: '>=18'}

  isexe@2.0.0:
    resolution: {integrity: sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==}

  isexe@3.1.1:
    resolution: {integrity: sha512-LpB/54B+/2J5hqQ7imZHfdU31OlgQqx7ZicVlkm9kzg9/w8GKLEcFfJl/t7DCEDueOyBAD6zCCwTO6Fzs0NoEQ==}
    engines: {node: '>=16'}

  iterator.prototype@1.1.5:
    resolution: {integrity: sha512-H0dkQoCa3b2VEeKQBOxFph+JAbcrQdE7KC0UkqwpLmv2EC4P41QXP+rqo9wYodACiG5/WM5s9oDApTU8utwj9g==}
    engines: {node: '>= 0.4'}

  jackspeak@3.4.3:
    resolution: {integrity: sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==}

  jackspeak@4.1.0:
    resolution: {integrity: sha512-9DDdhb5j6cpeitCbvLO7n7J4IxnbM6hoF6O1g4HQ5TfhvvKN8ywDM7668ZhMHRqVmxqhps/F6syWK2KcPxYlkw==}
    engines: {node: 20 || >=22}

  jest-worker@27.5.1:
    resolution: {integrity: sha512-7vuh85V5cdDofPyxn58nrPjBktZo0u9x1g8WtjQol+jZDaE+fhN+cIvTj11GndBnMnyfrUOG1sZQxCdjKh+DKg==}
    engines: {node: '>= 10.13.0'}

  jiti@1.21.7:
    resolution: {integrity: sha512-/imKNG4EbWNrVjoNC/1H5/9GFy+tqjGBHCaSsN+P2RnPqjsLmv6UD3Ej+Kj8nBWaRAwyk7kK5ZUc+OEatnTR3A==}
    hasBin: true

  jiti@2.4.2:
    resolution: {integrity: sha512-rg9zJN+G4n2nfJl5MW3BMygZX56zKPNVEYYqq7adpmMh4Jn2QNEwhvQlFy6jPVdcod7txZtKHWnyZiA3a0zP7A==}
    hasBin: true

  joycon@3.1.1:
    resolution: {integrity: sha512-34wB/Y7MW7bzjKRjUKTa46I2Z7eV62Rkhva+KkopW7Qvv/OSWBqvkSY7vusOPrNuZcUG3tApvdVgNB8POj3SPw==}
    engines: {node: '>=10'}

  js-beautify@1.15.4:
    resolution: {integrity: sha512-9/KXeZUKKJwqCXUdBxFJ3vPh467OCckSBmYDwSK/EtV090K+iMJ7zx2S3HLVDIWFQdqMIsZWbnaGiba18aWhaA==}
    engines: {node: '>=14'}
    hasBin: true

  js-cookie@3.0.5:
    resolution: {integrity: sha512-cEiJEAEoIbWfCZYKWhVwFuvPX1gETRYPw6LlaTKoxD3s2AkXzkCjnp6h0V77ozyqj0jakteJ4YqDJT830+lVGw==}
    engines: {node: '>=14'}

  js-tokens@4.0.0:
    resolution: {integrity: sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==}

  js-tokens@9.0.1:
    resolution: {integrity: sha512-mxa9E9ITFOt0ban3j6L5MpjwegGz6lBQmM1IJkWeBZGcMxto50+eWdjC/52xDbS2vy0k7vIMK0Fe2wfL9OQSpQ==}

  js-yaml@3.14.1:
    resolution: {integrity: sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==}
    hasBin: true

  js-yaml@4.1.0:
    resolution: {integrity: sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==}
    hasBin: true

  jsesc@3.0.2:
    resolution: {integrity: sha512-xKqzzWXDttJuOcawBt4KnKHHIf5oQ/Cxax+0PWFG+DFDgHNAdi+TXECADI+RYiFUMmx8792xsMbbgXj4CwnP4g==}
    engines: {node: '>=6'}
    hasBin: true

  jsesc@3.1.0:
    resolution: {integrity: sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==}
    engines: {node: '>=6'}
    hasBin: true

  json-buffer@3.0.1:
    resolution: {integrity: sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==}

  json-parse-even-better-errors@2.3.1:
    resolution: {integrity: sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==}

  json-parse-even-better-errors@3.0.2:
    resolution: {integrity: sha512-fi0NG4bPjCHunUJffmLd0gxssIgkNmArMvis4iNah6Owg1MCJjWhEcDLmsK6iGkJq3tHwbDkTlce70/tmXN4cQ==}
    engines: {node: ^14.17.0 || ^16.13.0 || >=18.0.0}

  json-pointer@0.6.2:
    resolution: {integrity: sha512-vLWcKbOaXlO+jvRy4qNd+TI1QUPZzfJj1tpJ3vAXDych5XJf93ftpUKe5pKCrzyIIwgBJcOcCVRUfqQP25afBw==}

  json-schema-traverse@0.4.1:
    resolution: {integrity: sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==}

  json-schema-traverse@1.0.0:
    resolution: {integrity: sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==}

  json-schema-typed@8.0.1:
    resolution: {integrity: sha512-XQmWYj2Sm4kn4WeTYvmpKEbyPsL7nBsb647c7pMe6l02/yx2+Jfc4dT6UZkEXnIUb5LhD55r2HPsJ1milQ4rDg==}

  json-schema@0.4.0:
    resolution: {integrity: sha512-es94M3nTIfsEPisRafak+HDLfHXnKBhV3vU5eqPcS3flIWqcxJWgXHXiey3YrpaNsanY5ei1VoYEbOzijuq9BA==}

  json-stable-stringify-without-jsonify@1.0.1:
    resolution: {integrity: sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==}

  json-stringify-deterministic@1.0.12:
    resolution: {integrity: sha512-q3PN0lbUdv0pmurkBNdJH3pfFvOTL/Zp0lquqpvcjfKzt6Y0j49EPHAmVHCAS4Ceq/Y+PejWTzyiVpoY71+D6g==}
    engines: {node: '>= 4'}

  json5@2.2.3:
    resolution: {integrity: sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==}
    engines: {node: '>=6'}
    hasBin: true

  jsondiffpatch@0.6.0:
    resolution: {integrity: sha512-3QItJOXp2AP1uv7waBkao5nCvhEv+QmJAd38Ybq7wNI74Q+BBmnLn4EDKz6yI9xGAIQoUF87qHt+kc1IVxB4zQ==}
    engines: {node: ^18.0.0 || >=20.0.0}
    hasBin: true

  jsonfile@4.0.0:
    resolution: {integrity: sha512-m6F1R3z8jjlf2imQHS2Qez5sjKWQzbuuhuJ/FKYFRZvPE3PuHcSMVZzfsLhGVOkfd20obL5SWEBew5ShlquNxg==}

  jsonpointer@5.0.1:
    resolution: {integrity: sha512-p/nXbhSEcu3pZRdkW1OfJhpsVtW1gd4Wa1fnQc9YLiTfAjn0312eMKimbdIQzuZl9aa9xUGaRlP9T/CJE/ditQ==}
    engines: {node: '>=0.10.0'}

  jsx-ast-utils@3.3.5:
    resolution: {integrity: sha512-ZZow9HBI5O6EPgSJLUb8n2NKgmVWTwCvHGwFuJlMjvLFqlGG6pjirPhtdsseaLZjSibD8eegzmYpUZwoIlj2cQ==}
    engines: {node: '>=4.0'}

  junk@4.0.1:
    resolution: {integrity: sha512-Qush0uP+G8ZScpGMZvHUiRfI0YBWuB3gVBYlI0v0vvOJt5FLicco+IkP0a50LqTTQhmts/m6tP5SWE+USyIvcQ==}
    engines: {node: '>=12.20'}

  just-clone@6.2.0:
    resolution: {integrity: sha512-1IynUYEc/HAwxhi3WDpIpxJbZpMCvvrrmZVqvj9EhpvbH8lls7HhdhiByjL7DkAaWlLIzpC0Xc/VPvy/UxLNjA==}

  just-curry-it@5.3.0:
    resolution: {integrity: sha512-silMIRiFjUWlfaDhkgSzpuAyQ6EX/o09Eu8ZBfmFwQMbax7+LQzeIU2CBrICT6Ne4l86ITCGvUCBpCubWYy0Yw==}

  jwt-decode@4.0.0:
    resolution: {integrity: sha512-+KJGIyHgkGuIq3IEBNftfhW/LfWhXUIY6OmyVWjliu5KH1y0fw7VQ8YndE2O4qZdMSd9SqbnC8GOcZEy0Om7sA==}
    engines: {node: '>=18'}

  katex@0.16.22:
    resolution: {integrity: sha512-XCHRdUw4lf3SKBaJe4EvgqIuWwkPSo9XoeO8GjQW94Bp7TWv9hNhzZjZ+OH9yf1UmLygb7DIT5GSFQiyt16zYg==}
    hasBin: true

  keyv@4.5.4:
    resolution: {integrity: sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==}

  khroma@2.1.0:
    resolution: {integrity: sha512-Ls993zuzfayK269Svk9hzpeGUKob/sIgZzyHYdjQoAdQetRKpOLj+k/QQQ/6Qi0Yz65mlROrfd+Ev+1+7dz9Kw==}

  kind-of@6.0.3:
    resolution: {integrity: sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==}
    engines: {node: '>=0.10.0'}

  kleur@4.1.5:
    resolution: {integrity: sha512-o+NO+8WrRiQEE4/7nwRJhN1HWpVmJm511pBHUxPLtp0BUISzlBplORYSmTclCnJvQq2tKu/sgl3xVpkc7ZWuQQ==}
    engines: {node: '>=6'}

  klona@2.0.6:
    resolution: {integrity: sha512-dhG34DXATL5hSxJbIexCft8FChFXtmskoZYnoPWjXQuebWYCNkVeV3KkGegCK9CP1oswI/vQibS2GY7Em/sJJA==}
    engines: {node: '>= 8'}

  knitwork@1.2.0:
    resolution: {integrity: sha512-xYSH7AvuQ6nXkq42x0v5S8/Iry+cfulBz/DJQzhIyESdLD7425jXsPy4vn5cCXU+HhRN2kVw51Vd1K6/By4BQg==}

  kolorist@1.8.0:
    resolution: {integrity: sha512-Y+60/zizpJ3HRH8DCss+q95yr6145JXZo46OTpFvDZWLfRCE4qChOyk1b26nMaNpfHHgxagk9dXT5OP0Tfe+dQ==}

  kuler@2.0.0:
    resolution: {integrity: sha512-Xq9nH7KlWZmXAtodXDDRE7vs6DU1gTU8zYDHDiWLSip45Egwq3plLHzPn27NgvzL2r1LMPC1vdqh98sQxtqj4A==}

  lambda-local@2.2.0:
    resolution: {integrity: sha512-bPcgpIXbHnVGfI/omZIlgucDqlf4LrsunwoKue5JdZeGybt8L6KyJz2Zu19ffuZwIwLj2NAI2ZyaqNT6/cetcg==}
    engines: {node: '>=8'}
    hasBin: true

  langium@3.3.1:
    resolution: {integrity: sha512-QJv/h939gDpvT+9SiLVlY7tZC3xB2qK57v0J04Sh9wpMb6MP1q8gB21L3WIo8T5P1MSMg3Ep14L7KkDCFG3y4w==}
    engines: {node: '>=16.0.0'}

  layout-base@1.0.2:
    resolution: {integrity: sha512-8h2oVEZNktL4BH2JCOI90iD1yXwL6iNW7KcCKT2QZgQJR2vbqDsldCTPRU9NifTCqHZci57XvQQ15YTu+sTYPg==}

  layout-base@2.0.1:
    resolution: {integrity: sha512-dp3s92+uNI1hWIpPGH3jK2kxE2lMjdXdr+DH8ynZHpd6PUlH6x6cbuXnoMmiNumznqaNO31xu9e79F0uuZ0JFg==}

  lazystream@1.0.1:
    resolution: {integrity: sha512-b94GiNHQNy6JNTrt5w6zNyffMrNkXZb3KTkCZJb2V1xaEGCk093vkZ2jk3tpaeP33/OiXC+WvK9AxUebnf5nbw==}
    engines: {node: '>= 0.6.3'}

  leven@4.0.0:
    resolution: {integrity: sha512-puehA3YKku3osqPlNuzGDUHq8WpwXupUg1V6NXdV38G+gr+gkBwFC8g1b/+YcIvp8gnqVIus+eJCH/eGsRmJNw==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  levn@0.4.1:
    resolution: {integrity: sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==}
    engines: {node: '>= 0.8.0'}

  lightningcss-darwin-arm64@1.30.1:
    resolution: {integrity: sha512-c8JK7hyE65X1MHMN+Viq9n11RRC7hgin3HhYKhrMyaXflk5GVplZ60IxyoVtzILeKr+xAJwg6zK6sjTBJ0FKYQ==}
    engines: {node: '>= 12.0.0'}
    cpu: [arm64]
    os: [darwin]

  lightningcss-darwin-x64@1.30.1:
    resolution: {integrity: sha512-k1EvjakfumAQoTfcXUcHQZhSpLlkAuEkdMBsI/ivWw9hL+7FtilQc0Cy3hrx0AAQrVtQAbMI7YjCgYgvn37PzA==}
    engines: {node: '>= 12.0.0'}
    cpu: [x64]
    os: [darwin]

  lightningcss-freebsd-x64@1.30.1:
    resolution: {integrity: sha512-kmW6UGCGg2PcyUE59K5r0kWfKPAVy4SltVeut+umLCFoJ53RdCUWxcRDzO1eTaxf/7Q2H7LTquFHPL5R+Gjyig==}
    engines: {node: '>= 12.0.0'}
    cpu: [x64]
    os: [freebsd]

  lightningcss-linux-arm-gnueabihf@1.30.1:
    resolution: {integrity: sha512-MjxUShl1v8pit+6D/zSPq9S9dQ2NPFSQwGvxBCYaBYLPlCWuPh9/t1MRS8iUaR8i+a6w7aps+B4N0S1TYP/R+Q==}
    engines: {node: '>= 12.0.0'}
    cpu: [arm]
    os: [linux]

  lightningcss-linux-arm64-gnu@1.30.1:
    resolution: {integrity: sha512-gB72maP8rmrKsnKYy8XUuXi/4OctJiuQjcuqWNlJQ6jZiWqtPvqFziskH3hnajfvKB27ynbVCucKSm2rkQp4Bw==}
    engines: {node: '>= 12.0.0'}
    cpu: [arm64]
    os: [linux]

  lightningcss-linux-arm64-musl@1.30.1:
    resolution: {integrity: sha512-jmUQVx4331m6LIX+0wUhBbmMX7TCfjF5FoOH6SD1CttzuYlGNVpA7QnrmLxrsub43ClTINfGSYyHe2HWeLl5CQ==}
    engines: {node: '>= 12.0.0'}
    cpu: [arm64]
    os: [linux]

  lightningcss-linux-x64-gnu@1.30.1:
    resolution: {integrity: sha512-piWx3z4wN8J8z3+O5kO74+yr6ze/dKmPnI7vLqfSqI8bccaTGY5xiSGVIJBDd5K5BHlvVLpUB3S2YCfelyJ1bw==}
    engines: {node: '>= 12.0.0'}
    cpu: [x64]
    os: [linux]

  lightningcss-linux-x64-musl@1.30.1:
    resolution: {integrity: sha512-rRomAK7eIkL+tHY0YPxbc5Dra2gXlI63HL+v1Pdi1a3sC+tJTcFrHX+E86sulgAXeI7rSzDYhPSeHHjqFhqfeQ==}
    engines: {node: '>= 12.0.0'}
    cpu: [x64]
    os: [linux]

  lightningcss-win32-arm64-msvc@1.30.1:
    resolution: {integrity: sha512-mSL4rqPi4iXq5YVqzSsJgMVFENoa4nGTT/GjO2c0Yl9OuQfPsIfncvLrEW6RbbB24WtZ3xP/2CCmI3tNkNV4oA==}
    engines: {node: '>= 12.0.0'}
    cpu: [arm64]
    os: [win32]

  lightningcss-win32-x64-msvc@1.30.1:
    resolution: {integrity: sha512-PVqXh48wh4T53F/1CCu8PIPCxLzWyCnn/9T5W1Jpmdy5h9Cwd+0YQS6/LwhHXSafuc61/xg9Lv5OrCby6a++jg==}
    engines: {node: '>= 12.0.0'}
    cpu: [x64]
    os: [win32]

  lightningcss@1.30.1:
    resolution: {integrity: sha512-xi6IyHML+c9+Q3W0S4fCQJOym42pyurFiJUHEcEyHS0CeKzia4yZDEsLlqOFykxOdHpNy0NmvVO31vcSqAxJCg==}
    engines: {node: '>= 12.0.0'}

  lilconfig@3.1.3:
    resolution: {integrity: sha512-/vlFKAoH5Cgt3Ie+JLhRbwOsCQePABiU3tJ1egGvyQ+33R/vcwM2Zl2QR/LzjsBeItPt3oSVXapn+m4nQDvpzw==}
    engines: {node: '>=14'}

  lines-and-columns@1.2.4:
    resolution: {integrity: sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==}

  listhen@1.9.0:
    resolution: {integrity: sha512-I8oW2+QL5KJo8zXNWX046M134WchxsXC7SawLPvRQpogCbkyQIaFxPE89A2HiwR7vAK2Dm2ERBAmyjTYGYEpBg==}
    hasBin: true

  load-tsconfig@0.2.5:
    resolution: {integrity: sha512-IXO6OCs9yg8tMKzfPZ1YmheJbZCiEsnBdcB03l0OcfK9prKnJb96siuHCr5Fl37/yo9DnKU+TLpxzTUspw9shg==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  loader-runner@4.3.0:
    resolution: {integrity: sha512-3R/1M+yS3j5ou80Me59j7F9IMs4PXs3VqRrm0TU3AbKPxlmpoY1TNscJV/oGJXo8qCatFGTfDbY6W6ipGOYXfg==}
    engines: {node: '>=6.11.5'}

  local-pkg@1.1.1:
    resolution: {integrity: sha512-WunYko2W1NcdfAFpuLUoucsgULmgDBRkdxHxWQ7mK0cQqwPiy8E1enjuRBrhLtZkB5iScJ1XIPdhVEFK8aOLSg==}
    engines: {node: '>=14'}

  locate-path@5.0.0:
    resolution: {integrity: sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==}
    engines: {node: '>=8'}

  locate-path@6.0.0:
    resolution: {integrity: sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==}
    engines: {node: '>=10'}

  locate-path@7.2.0:
    resolution: {integrity: sha512-gvVijfZvn7R+2qyPX8mAuKcFGDf6Nc61GdvGafQsHL0sBIxfKzA+usWn4GFC/bk+QdwPUD4kWFJLhElipq+0VA==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  lodash-es@4.17.21:
    resolution: {integrity: sha512-mKnC+QJ9pWVzv+C4/U3rRsHapFfHvQFoFB92e52xeyGMcX6/OlIl78je1u8vePzYZSkkogMPJ2yjxxsb89cxyw==}

  lodash.debounce@4.0.8:
    resolution: {integrity: sha512-FT1yDzDYEoYWhnSGnpE/4Kj1fLZkDFyqRb7fNt6FdYOSxlUWAtp42Eh6Wb0rGIv/m9Bgo7x4GhQbm5Ys4SG5ow==}

  lodash.defaults@4.2.0:
    resolution: {integrity: sha512-qjxPLHd3r5DnsdGacqOMU6pb/avJzdh9tFX2ymgoZE27BmjXrNy/y4LoaiTeAb+O3gL8AfpJGtqfX/ae2leYYQ==}

  lodash.isarguments@3.1.0:
    resolution: {integrity: sha512-chi4NHZlZqZD18a0imDHnZPrDeBbTtVN7GXMwuGdRH9qotxAjYs3aVLKc7zNOG9eddR5Ksd8rvFEBc9SsggPpg==}

  lodash.merge@4.6.2:
    resolution: {integrity: sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==}

  lodash.sortby@4.7.0:
    resolution: {integrity: sha512-HDWXG8isMntAyRF5vZ7xKuEvOhT4AhlRt/3czTSjvGUxjYCBVRQY48ViDHyfYz9VIoBkW4TMGQNapx+l3RUwdA==}

  lodash.startcase@4.4.0:
    resolution: {integrity: sha512-+WKqsK294HMSc2jEbNgpHpd0JfIBhp7rEV4aqXWqFr6AlXov+SlcgB1Fv01y2kGe3Gc8nMW7VA0SrGuSkRfIEg==}

  lodash@4.17.21:
    resolution: {integrity: sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==}

  logform@2.7.0:
    resolution: {integrity: sha512-TFYA4jnP7PVbmlBIfhlSe+WKxs9dklXMTEGcBCIvLhE/Tn3H6Gk1norupVW7m5Cnd4bLcr08AytbyV/xj7f/kQ==}
    engines: {node: '>= 12.0.0'}

  longest-streak@3.1.0:
    resolution: {integrity: sha512-9Ri+o0JYgehTaVBBDoMqIl8GXtbWg711O3srftcHhZ0dqnETqLaoIK0x17fUw9rFSlK/0NlsKe0Ahhyl5pXE2g==}

  loose-envify@1.4.0:
    resolution: {integrity: sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==}
    hasBin: true

  loupe@3.1.4:
    resolution: {integrity: sha512-wJzkKwJrheKtknCOKNEtDK4iqg/MxmZheEMtSTYvnzRdEYaZzmgH976nenp8WdJRdx5Vc1X/9MO0Oszl6ezeXg==}

  lowlight@3.3.0:
    resolution: {integrity: sha512-0JNhgFoPvP6U6lE/UdVsSq99tn6DhjjpAj5MxG49ewd2mOBVtwWYIT8ClyABhq198aXXODMU6Ox8DrGy/CpTZQ==}

  lru-cache@10.4.3:
    resolution: {integrity: sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==}

  lru-cache@11.1.0:
    resolution: {integrity: sha512-QIXZUBJUx+2zHUdQujWejBkcD9+cs94tLn0+YL8UrCh+D5sCXZ4c7LaEH48pNwRY3MLDgqUFyhlCyjJPf1WP0A==}
    engines: {node: 20 || >=22}

  lru-cache@5.1.1:
    resolution: {integrity: sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==}

  lru-cache@7.18.3:
    resolution: {integrity: sha512-jumlc0BIUrS3qJGgIkWZsyfAM7NCWiBcCDhnd+3NNM5KbBmLTgHVfWBcg6W+rLUsIpzpERPsvwUP7CckAQSOoA==}
    engines: {node: '>=12'}

  lucide-react@0.525.0:
    resolution: {integrity: sha512-Tm1txJ2OkymCGkvwoHt33Y2JpN5xucVq1slHcgE6Lk0WjDfjgKWor5CdVER8U6DvcfMwh4M8XxmpTiyzfmfDYQ==}
    peerDependencies:
      react: ^16.5.1 || ^17.0.0 || ^18.0.0 || ^19.0.0

  lucide-static@0.525.0:
    resolution: {integrity: sha512-dPQiibOV/kRv/UnaNFbiTxdDFZ267rIjHVWLv6GoUXVD5YSW71cyF4tYJVD27zSb0OOWdeWrqZsuBtRaYc4FHw==}

  luxon@3.6.1:
    resolution: {integrity: sha512-tJLxrKJhO2ukZ5z0gyjY1zPh3Rh88Ej9P7jNrZiHMUXHae1yvI2imgOZtL1TO8TW6biMMKfTtAOoEJANgtWBMQ==}
    engines: {node: '>=12'}

  magic-string@0.30.17:
    resolution: {integrity: sha512-sNPKHvyjVf7gyjwS4xGTaW/mCnF8wnjtifKBEhxfZ7E/S8tQ0rssrwGNn6q8JH/ohItJfSQp9mBtQYuTlH5QnA==}

  magicast@0.3.5:
    resolution: {integrity: sha512-L0WhttDl+2BOsybvEOLK7fW3UA0OQ0IQ2d6Zl2x/a6vVRs3bAY0ECOSHHeL5jD+SbOpOCUEi0y1DgHEn9Qn1AQ==}

  markdown-extensions@2.0.0:
    resolution: {integrity: sha512-o5vL7aDWatOTX8LzaS1WMoaoxIiLRQJuIKKe2wAw6IeULDHaqbiqiggmx+pKvZDb1Sj+pE46Sn1T7lCqfFtg1Q==}
    engines: {node: '>=16'}

  markdown-table@3.0.4:
    resolution: {integrity: sha512-wiYz4+JrLyb/DqW2hkFJxP7Vd7JuTDm77fvbM8VfEQdmSMqcImWeeRbHwZjBjIFki/VaMK2BhFi7oUUZeM5bqw==}

  marked@15.0.12:
    resolution: {integrity: sha512-8dD6FusOQSrpv9Z1rdNMdlSgQOIP880DHqnohobOmYLElGEqAL/JvxvuxZO16r4HtjTlfPRDC1hbvxC9dPN2nA==}
    engines: {node: '>= 18'}
    hasBin: true

  math-intrinsics@1.1.0:
    resolution: {integrity: sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==}
    engines: {node: '>= 0.4'}

  mdast-util-find-and-replace@3.0.2:
    resolution: {integrity: sha512-Tmd1Vg/m3Xz43afeNxDIhWRtFZgM2VLyaf4vSTYwudTyeuTneoL3qtWMA5jeLyz/O1vDJmmV4QuScFCA2tBPwg==}

  mdast-util-from-markdown@2.0.2:
    resolution: {integrity: sha512-uZhTV/8NBuw0WHkPTrCqDOl0zVe1BIng5ZtHoDk49ME1qqcjYmmLmOf0gELgcRMxN4w2iuIeVso5/6QymSrgmA==}

  mdast-util-frontmatter@2.0.1:
    resolution: {integrity: sha512-LRqI9+wdgC25P0URIJY9vwocIzCcksduHQ9OF2joxQoyTNVduwLAFUzjoopuRJbJAReaKrNQKAZKL3uCMugWJA==}

  mdast-util-gfm-autolink-literal@2.0.1:
    resolution: {integrity: sha512-5HVP2MKaP6L+G6YaxPNjuL0BPrq9orG3TsrZ9YXbA3vDw/ACI4MEsnoDpn6ZNm7GnZgtAcONJyPhOP8tNJQavQ==}

  mdast-util-gfm-footnote@2.1.0:
    resolution: {integrity: sha512-sqpDWlsHn7Ac9GNZQMeUzPQSMzR6Wv0WKRNvQRg0KqHh02fpTz69Qc1QSseNX29bhz1ROIyNyxExfawVKTm1GQ==}

  mdast-util-gfm-strikethrough@2.0.0:
    resolution: {integrity: sha512-mKKb915TF+OC5ptj5bJ7WFRPdYtuHv0yTRxK2tJvi+BDqbkiG7h7u/9SI89nRAYcmap2xHQL9D+QG/6wSrTtXg==}

  mdast-util-gfm-table@2.0.0:
    resolution: {integrity: sha512-78UEvebzz/rJIxLvE7ZtDd/vIQ0RHv+3Mh5DR96p7cS7HsBhYIICDBCu8csTNWNO6tBWfqXPWekRuj2FNOGOZg==}

  mdast-util-gfm-task-list-item@2.0.0:
    resolution: {integrity: sha512-IrtvNvjxC1o06taBAVJznEnkiHxLFTzgonUdy8hzFVeDun0uTjxxrRGVaNFqkU1wJR3RBPEfsxmU6jDWPofrTQ==}

  mdast-util-gfm@3.1.0:
    resolution: {integrity: sha512-0ulfdQOM3ysHhCJ1p06l0b0VKlhU0wuQs3thxZQagjcjPrlFRqY215uZGHHJan9GEAXd9MbfPjFJz+qMkVR6zQ==}

  mdast-util-math@3.0.0:
    resolution: {integrity: sha512-Tl9GBNeG/AhJnQM221bJR2HPvLOSnLE/T9cJI9tlc6zwQk2nPk/4f0cHkOdEixQPC/j8UtKDdITswvLAy1OZ1w==}

  mdast-util-mdx-expression@2.0.1:
    resolution: {integrity: sha512-J6f+9hUp+ldTZqKRSg7Vw5V6MqjATc+3E4gf3CFNcuZNWD8XdyI6zQ8GqH7f8169MM6P7hMBRDVGnn7oHB9kXQ==}

  mdast-util-mdx-jsx@3.2.0:
    resolution: {integrity: sha512-lj/z8v0r6ZtsN/cGNNtemmmfoLAFZnjMbNyLzBafjzikOM+glrjNHPlf6lQDOTccj9n5b0PPihEBbhneMyGs1Q==}

  mdast-util-mdx@3.0.0:
    resolution: {integrity: sha512-JfbYLAW7XnYTTbUsmpu0kdBUVe+yKVJZBItEjwyYJiDJuZ9w4eeaqks4HQO+R7objWgS2ymV60GYpI14Ug554w==}

  mdast-util-mdxjs-esm@2.0.1:
    resolution: {integrity: sha512-EcmOpxsZ96CvlP03NghtH1EsLtr0n9Tm4lPUJUBccV9RwUOneqSycg19n5HGzCf+10LozMRSObtVr3ee1WoHtg==}

  mdast-util-phrasing@4.1.0:
    resolution: {integrity: sha512-TqICwyvJJpBwvGAMZjj4J2n0X8QWp21b9l0o7eXyVJ25YNWYbJDVIyD1bZXE6WtV6RmKJVYmQAKWa0zWOABz2w==}

  mdast-util-to-hast@13.2.0:
    resolution: {integrity: sha512-QGYKEuUsYT9ykKBCMOEDLsU5JRObWQusAolFMeko/tYPufNkRffBAQjIE+99jbA87xv6FgmjLtwjh9wBWajwAA==}

  mdast-util-to-markdown@2.1.2:
    resolution: {integrity: sha512-xj68wMTvGXVOKonmog6LwyJKrYXZPvlwabaryTjLh9LuvovB/KAH+kvi8Gjj+7rJjsFi23nkUxRQv1KqSroMqA==}

  mdast-util-to-string@4.0.0:
    resolution: {integrity: sha512-0H44vDimn51F0YwvxSJSm0eCDOJTRlmN0R1yBh4HLj9wiV1Dn0QoXGbvFAWj2hSItVTlCmBF1hqKlIyUBVFLPg==}

  mdx-bundler@10.1.1:
    resolution: {integrity: sha512-87FtxC7miUPznwqEaAlJARinHJ6Qin9kDuG2E2BCCNEOszr62kHpqivI/IF/CmwObVSpvApVFFxN1ftM/Gykvw==}
    engines: {node: '>=18', npm: '>=6'}
    peerDependencies:
      esbuild: 0.*

  media-typer@0.3.0:
    resolution: {integrity: sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==}
    engines: {node: '>= 0.6'}

  memoize-one@6.0.0:
    resolution: {integrity: sha512-rkpe71W0N0c0Xz6QD0eJETuWAJGnJ9afsl1srmwPrI+yBCkge5EycXXbYRyvL29zZVUWQCY7InPRCv3GDXuZNw==}

  merge-descriptors@1.0.3:
    resolution: {integrity: sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==}

  merge-options@3.0.4:
    resolution: {integrity: sha512-2Sug1+knBjkaMsMgf1ctR1Ujx+Ayku4EdJN4Z+C2+JzoeF7A3OZ9KM2GY0CpQS51NR61LTurMJrRKPhSs3ZRTQ==}
    engines: {node: '>=10'}

  merge-stream@2.0.0:
    resolution: {integrity: sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==}

  merge2@1.4.1:
    resolution: {integrity: sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==}
    engines: {node: '>= 8'}

  mermaid@11.8.1:
    resolution: {integrity: sha512-VSXJLqP1Sqw5sGr273mhvpPRhXwE6NlmMSqBZQw+yZJoAJkOIPPn/uT3teeCBx60Fkt5zEI3FrH2eVT0jXRDzw==}

  methods@1.1.2:
    resolution: {integrity: sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==}
    engines: {node: '>= 0.6'}

  micro-api-client@3.3.0:
    resolution: {integrity: sha512-y0y6CUB9RLVsy3kfgayU28746QrNMpSm9O/AYGNsBgOkJr/X/Jk0VLGoO8Ude7Bpa8adywzF+MzXNZRFRsNPhg==}

  microdiff@1.5.0:
    resolution: {integrity: sha512-Drq+/THMvDdzRYrK0oxJmOKiC24ayUV8ahrt8l3oRK51PWt6gdtrIGrlIH3pT/lFh1z93FbAcidtsHcWbnRz8Q==}

  micromark-core-commonmark@2.0.3:
    resolution: {integrity: sha512-RDBrHEMSxVFLg6xvnXmb1Ayr2WzLAWjeSATAoxwKYJV94TeNavgoIdA0a9ytzDSVzBy2YKFK+emCPOEibLeCrg==}

  micromark-extension-frontmatter@2.0.0:
    resolution: {integrity: sha512-C4AkuM3dA58cgZha7zVnuVxBhDsbttIMiytjgsM2XbHAB2faRVaHRle40558FBN+DJcrLNCoqG5mlrpdU4cRtg==}

  micromark-extension-gfm-autolink-literal@2.1.0:
    resolution: {integrity: sha512-oOg7knzhicgQ3t4QCjCWgTmfNhvQbDDnJeVu9v81r7NltNCVmhPy1fJRX27pISafdjL+SVc4d3l48Gb6pbRypw==}

  micromark-extension-gfm-footnote@2.1.0:
    resolution: {integrity: sha512-/yPhxI1ntnDNsiHtzLKYnE3vf9JZ6cAisqVDauhp4CEHxlb4uoOTxOCJ+9s51bIB8U1N1FJ1RXOKTIlD5B/gqw==}

  micromark-extension-gfm-strikethrough@2.1.0:
    resolution: {integrity: sha512-ADVjpOOkjz1hhkZLlBiYA9cR2Anf8F4HqZUO6e5eDcPQd0Txw5fxLzzxnEkSkfnD0wziSGiv7sYhk/ktvbf1uw==}

  micromark-extension-gfm-table@2.1.1:
    resolution: {integrity: sha512-t2OU/dXXioARrC6yWfJ4hqB7rct14e8f7m0cbI5hUmDyyIlwv5vEtooptH8INkbLzOatzKuVbQmAYcbWoyz6Dg==}

  micromark-extension-gfm-tagfilter@2.0.0:
    resolution: {integrity: sha512-xHlTOmuCSotIA8TW1mDIM6X2O1SiX5P9IuDtqGonFhEK0qgRI4yeC6vMxEV2dgyr2TiD+2PQ10o+cOhdVAcwfg==}

  micromark-extension-gfm-task-list-item@2.1.0:
    resolution: {integrity: sha512-qIBZhqxqI6fjLDYFTBIa4eivDMnP+OZqsNwmQ3xNLE4Cxwc+zfQEfbs6tzAo2Hjq+bh6q5F+Z8/cksrLFYWQQw==}

  micromark-extension-gfm@3.0.0:
    resolution: {integrity: sha512-vsKArQsicm7t0z2GugkCKtZehqUm31oeGBV/KVSorWSy8ZlNAv7ytjFhvaryUiCUJYqs+NoE6AFhpQvBTM6Q4w==}

  micromark-extension-math@3.1.0:
    resolution: {integrity: sha512-lvEqd+fHjATVs+2v/8kg9i5Q0AP2k85H0WUOwpIVvUML8BapsMvh1XAogmQjOCsLpoKRCVQqEkQBB3NhVBcsOg==}

  micromark-extension-mdx-expression@3.0.1:
    resolution: {integrity: sha512-dD/ADLJ1AeMvSAKBwO22zG22N4ybhe7kFIZ3LsDI0GlsNr2A3KYxb0LdC1u5rj4Nw+CHKY0RVdnHX8vj8ejm4Q==}

  micromark-extension-mdx-jsx@3.0.2:
    resolution: {integrity: sha512-e5+q1DjMh62LZAJOnDraSSbDMvGJ8x3cbjygy2qFEi7HCeUT4BDKCvMozPozcD6WmOt6sVvYDNBKhFSz3kjOVQ==}

  micromark-extension-mdx-md@2.0.0:
    resolution: {integrity: sha512-EpAiszsB3blw4Rpba7xTOUptcFeBFi+6PY8VnJ2hhimH+vCQDirWgsMpz7w1XcZE7LVrSAUGb9VJpG9ghlYvYQ==}

  micromark-extension-mdxjs-esm@3.0.0:
    resolution: {integrity: sha512-DJFl4ZqkErRpq/dAPyeWp15tGrcrrJho1hKK5uBS70BCtfrIFg81sqcTVu3Ta+KD1Tk5vAtBNElWxtAa+m8K9A==}

  micromark-extension-mdxjs@3.0.0:
    resolution: {integrity: sha512-A873fJfhnJ2siZyUrJ31l34Uqwy4xIFmvPY1oj+Ean5PHcPBYzEsvqvWGaWcfEIr11O5Dlw3p2y0tZWpKHDejQ==}

  micromark-factory-destination@2.0.1:
    resolution: {integrity: sha512-Xe6rDdJlkmbFRExpTOmRj9N3MaWmbAgdpSrBQvCFqhezUn4AHqJHbaEnfbVYYiexVSs//tqOdY/DxhjdCiJnIA==}

  micromark-factory-label@2.0.1:
    resolution: {integrity: sha512-VFMekyQExqIW7xIChcXn4ok29YE3rnuyveW3wZQWWqF4Nv9Wk5rgJ99KzPvHjkmPXF93FXIbBp6YdW3t71/7Vg==}

  micromark-factory-mdx-expression@2.0.3:
    resolution: {integrity: sha512-kQnEtA3vzucU2BkrIa8/VaSAsP+EJ3CKOvhMuJgOEGg9KDC6OAY6nSnNDVRiVNRqj7Y4SlSzcStaH/5jge8JdQ==}

  micromark-factory-space@2.0.1:
    resolution: {integrity: sha512-zRkxjtBxxLd2Sc0d+fbnEunsTj46SWXgXciZmHq0kDYGnck/ZSGj9/wULTV95uoeYiK5hRXP2mJ98Uo4cq/LQg==}

  micromark-factory-title@2.0.1:
    resolution: {integrity: sha512-5bZ+3CjhAd9eChYTHsjy6TGxpOFSKgKKJPJxr293jTbfry2KDoWkhBb6TcPVB4NmzaPhMs1Frm9AZH7OD4Cjzw==}

  micromark-factory-whitespace@2.0.1:
    resolution: {integrity: sha512-Ob0nuZ3PKt/n0hORHyvoD9uZhr+Za8sFoP+OnMcnWK5lngSzALgQYKMr9RJVOWLqQYuyn6ulqGWSXdwf6F80lQ==}

  micromark-util-character@2.1.1:
    resolution: {integrity: sha512-wv8tdUTJ3thSFFFJKtpYKOYiGP2+v96Hvk4Tu8KpCAsTMs6yi+nVmGh1syvSCsaxz45J6Jbw+9DD6g97+NV67Q==}

  micromark-util-chunked@2.0.1:
    resolution: {integrity: sha512-QUNFEOPELfmvv+4xiNg2sRYeS/P84pTW0TCgP5zc9FpXetHY0ab7SxKyAQCNCc1eK0459uoLI1y5oO5Vc1dbhA==}

  micromark-util-classify-character@2.0.1:
    resolution: {integrity: sha512-K0kHzM6afW/MbeWYWLjoHQv1sgg2Q9EccHEDzSkxiP/EaagNzCm7T/WMKZ3rjMbvIpvBiZgwR3dKMygtA4mG1Q==}

  micromark-util-combine-extensions@2.0.1:
    resolution: {integrity: sha512-OnAnH8Ujmy59JcyZw8JSbK9cGpdVY44NKgSM7E9Eh7DiLS2E9RNQf0dONaGDzEG9yjEl5hcqeIsj4hfRkLH/Bg==}

  micromark-util-decode-numeric-character-reference@2.0.2:
    resolution: {integrity: sha512-ccUbYk6CwVdkmCQMyr64dXz42EfHGkPQlBj5p7YVGzq8I7CtjXZJrubAYezf7Rp+bjPseiROqe7G6foFd+lEuw==}

  micromark-util-decode-string@2.0.1:
    resolution: {integrity: sha512-nDV/77Fj6eH1ynwscYTOsbK7rR//Uj0bZXBwJZRfaLEJ1iGBR6kIfNmlNqaqJf649EP0F3NWNdeJi03elllNUQ==}

  micromark-util-encode@2.0.1:
    resolution: {integrity: sha512-c3cVx2y4KqUnwopcO9b/SCdo2O67LwJJ/UyqGfbigahfegL9myoEFoDYZgkT7f36T0bLrM9hZTAaAyH+PCAXjw==}

  micromark-util-events-to-acorn@2.0.3:
    resolution: {integrity: sha512-jmsiEIiZ1n7X1Rr5k8wVExBQCg5jy4UXVADItHmNk1zkwEVhBuIUKRu3fqv+hs4nxLISi2DQGlqIOGiFxgbfHg==}

  micromark-util-html-tag-name@2.0.1:
    resolution: {integrity: sha512-2cNEiYDhCWKI+Gs9T0Tiysk136SnR13hhO8yW6BGNyhOC4qYFnwF1nKfD3HFAIXA5c45RrIG1ub11GiXeYd1xA==}

  micromark-util-normalize-identifier@2.0.1:
    resolution: {integrity: sha512-sxPqmo70LyARJs0w2UclACPUUEqltCkJ6PhKdMIDuJ3gSf/Q+/GIe3WKl0Ijb/GyH9lOpUkRAO2wp0GVkLvS9Q==}

  micromark-util-resolve-all@2.0.1:
    resolution: {integrity: sha512-VdQyxFWFT2/FGJgwQnJYbe1jjQoNTS4RjglmSjTUlpUMa95Htx9NHeYW4rGDJzbjvCsl9eLjMQwGeElsqmzcHg==}

  micromark-util-sanitize-uri@2.0.1:
    resolution: {integrity: sha512-9N9IomZ/YuGGZZmQec1MbgxtlgougxTodVwDzzEouPKo3qFWvymFHWcnDi2vzV1ff6kas9ucW+o3yzJK9YB1AQ==}

  micromark-util-subtokenize@2.1.0:
    resolution: {integrity: sha512-XQLu552iSctvnEcgXw6+Sx75GflAPNED1qx7eBJ+wydBb2KCbRZe+NwvIEEMM83uml1+2WSXpBAcp9IUCgCYWA==}

  micromark-util-symbol@2.0.1:
    resolution: {integrity: sha512-vs5t8Apaud9N28kgCrRUdEed4UJ+wWNvicHLPxCa9ENlYuAY31M0ETy5y1vA33YoNPDFTghEbnh6efaE8h4x0Q==}

  micromark-util-types@2.0.2:
    resolution: {integrity: sha512-Yw0ECSpJoViF1qTU4DC6NwtC4aWGt1EkzaQB8KPPyCRR8z9TWeV0HbEFGTO+ZY1wB22zmxnJqhPyTpOVCpeHTA==}

  micromark@4.0.2:
    resolution: {integrity: sha512-zpe98Q6kvavpCr1NPVSCMebCKfD7CA2NqZ+rykeNhONIJBpc1tFKt9hucLGwha3jNTNI8lHpctWJWoimVF4PfA==}

  micromatch@4.0.8:
    resolution: {integrity: sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==}
    engines: {node: '>=8.6'}

  mime-db@1.52.0:
    resolution: {integrity: sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==}
    engines: {node: '>= 0.6'}

  mime-db@1.54.0:
    resolution: {integrity: sha512-aU5EJuIN2WDemCcAp2vFBfp/m4EAhWJnUNSSw0ixs7/kXbd6Pg64EmwJkNdFhB8aWt1sH2CTXrLxo/iAGV3oPQ==}
    engines: {node: '>= 0.6'}

  mime-types@2.1.35:
    resolution: {integrity: sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==}
    engines: {node: '>= 0.6'}

  mime-types@3.0.1:
    resolution: {integrity: sha512-xRc4oEhT6eaBpU1XF7AjpOFD+xQmXNB5OVKwp4tqCuBpHLS/ZbBDrc07mYTDqVMg6PfxUjjNp85O6Cd2Z/5HWA==}
    engines: {node: '>= 0.6'}

  mime@1.6.0:
    resolution: {integrity: sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==}
    engines: {node: '>=4'}
    hasBin: true

  mime@3.0.0:
    resolution: {integrity: sha512-jSCU7/VB1loIWBZe14aEYHU/+1UMEHoaO7qxCOVJOw9GgH72VAWppxNcjU+x9a2k3GSIBXNKxXQFqRvvZ7vr3A==}
    engines: {node: '>=10.0.0'}
    hasBin: true

  mime@4.0.7:
    resolution: {integrity: sha512-2OfDPL+e03E0LrXaGYOtTFIYhiuzep94NSsuhrNULq+stylcJedcHdzHtz0atMUuGwJfFYs0YL5xeC/Ca2x0eQ==}
    engines: {node: '>=16'}
    hasBin: true

  mimic-fn@4.0.0:
    resolution: {integrity: sha512-vqiC06CuhBTUdZH+RYl8sFrL096vA45Ok5ISO6sE/Mr1jRbGH4Csnhi8f3wKVl7x8mO4Au7Ir9D3Oyv1VYMFJw==}
    engines: {node: '>=12'}

  minimatch@10.0.1:
    resolution: {integrity: sha512-ethXTt3SGGR+95gudmqJ1eNhRO7eGEGIgYA9vnPatK4/etz2MEVDno5GMCibdMTuBMyElzIlgxMna3K94XDIDQ==}
    engines: {node: 20 || >=22}

  minimatch@3.1.2:
    resolution: {integrity: sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==}

  minimatch@5.1.6:
    resolution: {integrity: sha512-lKwV/1brpG6mBUFHtb7NUmtABCb2WZZmm2wNiOA5hAb8VdCS4B3dtMWyvcoViccwAW/COERjXLt0zP1zXUN26g==}
    engines: {node: '>=10'}

  minimatch@9.0.1:
    resolution: {integrity: sha512-0jWhJpD/MdhPXwPuiRkCbfYfSKp2qnn2eOc279qI7f+osl/l+prKSrvhg157zSYvx/1nmgn2NqdT6k2Z7zSH9w==}
    engines: {node: '>=16 || 14 >=14.17'}

  minimatch@9.0.5:
    resolution: {integrity: sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==}
    engines: {node: '>=16 || 14 >=14.17'}

  minimist@1.2.8:
    resolution: {integrity: sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==}

  minipass@7.1.2:
    resolution: {integrity: sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==}
    engines: {node: '>=16 || 14 >=14.17'}

  minizlib@3.0.2:
    resolution: {integrity: sha512-oG62iEk+CYt5Xj2YqI5Xi9xWUeZhDI8jjQmC5oThVH5JGCTgIjr7ciJDzC7MBzYd//WvR1OTmP5Q38Q8ShQtVA==}
    engines: {node: '>= 18'}

  mkdirp@3.0.1:
    resolution: {integrity: sha512-+NsyUUAZDmo6YVHzL/stxSu3t9YS1iljliy3BSDrXJ/dkn1KYdmtZODGGjLcc9XLgVVpH4KshHB8XmZgMhaBXg==}
    engines: {node: '>=10'}
    hasBin: true

  mlly@1.7.4:
    resolution: {integrity: sha512-qmdSIPC4bDJXgZTCR7XosJiNKySV7O215tsPtDN9iEO/7q/76b/ijtgRu/+epFXSJhijtTCCGp3DWS549P3xKw==}

  module-definition@6.0.1:
    resolution: {integrity: sha512-FeVc50FTfVVQnolk/WQT8MX+2WVcDnTGiq6Wo+/+lJ2ET1bRVi3HG3YlJUfqagNMc/kUlFSoR96AJkxGpKz13g==}
    engines: {node: '>=18'}
    hasBin: true

  morgan@1.10.0:
    resolution: {integrity: sha512-AbegBVI4sh6El+1gNwvD5YIck7nSA36weD7xvIxG4in80j/UoK8AEGaWnnz8v1GxonMCltmlNs5ZKbGvl9b1XQ==}
    engines: {node: '>= 0.8.0'}

  motion-dom@12.12.1:
    resolution: {integrity: sha512-GXq/uUbZBEiFFE+K1Z/sxdPdadMdfJ/jmBALDfIuHGi0NmtealLOfH9FqT+6aNPgVx8ilq0DtYmyQlo6Uj9LKQ==}

  motion-utils@12.12.1:
    resolution: {integrity: sha512-f9qiqUHm7hWSLlNW8gS9pisnsN7CRFRD58vNjptKdsqFLpkVnX00TNeD6Q0d27V9KzT7ySFyK1TZ/DShfVOv6w==}

  mri@1.2.0:
    resolution: {integrity: sha512-tzzskb3bG8LvYGFF/mDTpq3jpI6Q9wc3LEmBaghu+DdCssd1FakN7Bc0hVNmEyGq1bq3RgfkCb3cmQLpNPOroA==}
    engines: {node: '>=4'}

  mrmime@2.0.1:
    resolution: {integrity: sha512-Y3wQdFg2Va6etvQ5I82yUhGdsKrcYox6p7FfL1LbK2J4V01F9TGlepTIhnK24t7koZibmg82KGglhA1XK5IsLQ==}
    engines: {node: '>=10'}

  ms@2.0.0:
    resolution: {integrity: sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==}

  ms@2.1.3:
    resolution: {integrity: sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==}

  mylas@2.1.13:
    resolution: {integrity: sha512-+MrqnJRtxdF+xngFfUUkIMQrUUL0KsxbADUkn23Z/4ibGg192Q+z+CQyiYwvWTsYjJygmMR8+w3ZDa98Zh6ESg==}
    engines: {node: '>=12.0.0'}

  mz@2.7.0:
    resolution: {integrity: sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==}

  nanoid@3.3.11:
    resolution: {integrity: sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==}
    engines: {node: ^10 || ^12 || ^13.7 || ^14 || >=15.0.1}
    hasBin: true

  nanoid@5.1.5:
    resolution: {integrity: sha512-Ir/+ZpE9fDsNH0hQ3C68uyThDXzYcim2EqcZ8zn8Chtt1iylPT9xXJB0kPCnqzgcEGikO9RxSrh63MsmVCU7Fw==}
    engines: {node: ^18 || >=20}
    hasBin: true

  natural-compare@1.4.0:
    resolution: {integrity: sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==}

  negotiator@0.6.3:
    resolution: {integrity: sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==}
    engines: {node: '>= 0.6'}

  negotiator@0.6.4:
    resolution: {integrity: sha512-myRT3DiWPHqho5PrJaIRyaMv2kgYf0mUVgBNOYMuCH5Ki1yEiQaf/ZJuQ62nvpc44wL5WDbTX7yGJi1Neevw8w==}
    engines: {node: '>= 0.6'}

  negotiator@1.0.0:
    resolution: {integrity: sha512-8Ofs/AUQh8MaEcrlq5xOX0CQ9ypTF5dl78mjlMNfOK08fzpgTHQRQPBxcPlEtIw0yRpws+Zo/3r+5WRby7u3Gg==}
    engines: {node: '>= 0.6'}

  neo-async@2.6.2:
    resolution: {integrity: sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw==}

  netlify@13.3.5:
    resolution: {integrity: sha512-Nc3loyVASW59W+8fLDZT1lncpG7llffyZ2o0UQLx/Fr20i7P8oP+lE7+TEcFvXj9IUWU6LjB9P3BH+iFGyp+mg==}
    engines: {node: ^14.16.0 || >=16.0.0}

  next-themes@0.4.6:
    resolution: {integrity: sha512-pZvgD5L0IEvX5/9GWyHMf3m8BKiVQwsCMHfoFosXtXBMnaS0ZnIJ9ST4b4NqLVKDEm8QBxoNNGNaBv2JNF6XNA==}
    peerDependencies:
      react: ^16.8 || ^17 || ^18 || ^19 || ^19.0.0-rc
      react-dom: ^16.8 || ^17 || ^18 || ^19 || ^19.0.0-rc

  next-validate-link@1.5.2:
    resolution: {integrity: sha512-BMGyo0qJqscSJw0gSCUy3gDrF7LEID6qkVhHtLSIdPPtOYONq0+fidWvLteUzEUqHeKz1GBI9QN3bpfT6Me42A==}

  next@15.3.5:
    resolution: {integrity: sha512-RkazLBMMDJSJ4XZQ81kolSpwiCt907l0xcgcpF4xC2Vml6QVcPNXW0NQRwQ80FFtSn7UM52XN0anaw8TEJXaiw==}
    engines: {node: ^18.18.0 || ^19.8.0 || >= 20.0.0}
    hasBin: true
    peerDependencies:
      '@opentelemetry/api': ^1.1.0
      '@playwright/test': ^1.41.2
      babel-plugin-react-compiler: '*'
      react: ^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0
      react-dom: ^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0
      sass: ^1.3.0
    peerDependenciesMeta:
      '@opentelemetry/api':
        optional: true
      '@playwright/test':
        optional: true
      babel-plugin-react-compiler:
        optional: true
      sass:
        optional: true

  nitropack@2.11.13:
    resolution: {integrity: sha512-xKng/szRZmFEsrB1Z+sFzYDhXL5KUtUkEouPCj9LiBPhJ7qV3jdOv1MSis++8H8zNI6dEurt51ZlK4VRDvedsA==}
    engines: {node: ^16.11.0 || >=17.0.0}
    hasBin: true
    peerDependencies:
      xml2js: ^0.6.2
    peerDependenciesMeta:
      xml2js:
        optional: true

  node-addon-api@7.1.1:
    resolution: {integrity: sha512-5m3bsyrjFWE1xf7nz7YXdN4udnVtXK6/Yfgn5qnahL6bCkf2yKt4k3nuTKAtT4r3IG8JNR2ncsIMdZuAzJjHQQ==}

  node-domexception@1.0.0:
    resolution: {integrity: sha512-/jKZoMpw0F8GRwl4/eLROPA3cfcXtLApP0QzLmUT/HuPCZWyB7IY9ZrMeKw2O/nFIqPQB3PVM9aYm0F312AXDQ==}
    engines: {node: '>=10.5.0'}
    deprecated: Use your platform's native DOMException instead

  node-fetch-native@1.6.6:
    resolution: {integrity: sha512-8Mc2HhqPdlIfedsuZoc3yioPuzp6b+L5jRCRY1QzuWZh2EGJVQrGppC6V6cF0bLdbW0+O2YpqCA25aF/1lvipQ==}

  node-fetch@2.7.0:
    resolution: {integrity: sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==}
    engines: {node: 4.x || >=6.0.0}
    peerDependencies:
      encoding: ^0.1.0
    peerDependenciesMeta:
      encoding:
        optional: true

  node-fetch@3.3.2:
    resolution: {integrity: sha512-dRB78srN/l6gqWulah9SrxeYnxeddIG30+GOqK/9OlLVyLg3HPnr6SqOWTWOXKRwC2eGYCkZ59NNuSgvSrpgOA==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  node-forge@1.3.1:
    resolution: {integrity: sha512-dPEtOeMvF9VMcYV/1Wb8CPoVAXtp6MKMlcbAt4ddqmGqUJ6fQZFXkNZNkNlfevtNkGtaSoXf/vNNNSvgrdXwtA==}
    engines: {node: '>= 6.13.0'}

  node-gyp-build@4.8.4:
    resolution: {integrity: sha512-LA4ZjwlnUblHVgq0oBF3Jl/6h/Nvs5fzBLwdEF4nuxnFdsfajde4WfxtJr3CaiH+F6ewcIB/q4jQ4UzPyid+CQ==}
    hasBin: true

  node-mock-http@1.0.1:
    resolution: {integrity: sha512-0gJJgENizp4ghds/Ywu2FCmcRsgBTmRQzYPZm61wy+Em2sBarSka0OhQS5huLBg6od1zkNpnWMCZloQDFVvOMQ==}

  node-releases@2.0.19:
    resolution: {integrity: sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==}

  node-source-walk@7.0.1:
    resolution: {integrity: sha512-3VW/8JpPqPvnJvseXowjZcirPisssnBuDikk6JIZ8jQzF7KJQX52iPFX4RYYxLycYH7IbMRSPUOga/esVjy5Yg==}
    engines: {node: '>=18'}

  nopt@7.2.1:
    resolution: {integrity: sha512-taM24ViiimT/XntxbPyJQzCG+p4EKOpgD3mxFwW38mGjVUrfERQOeY4EDHjdnptttfHuHQXFx+lTP08Q+mLa/w==}
    engines: {node: ^14.17.0 || ^16.13.0 || >=18.0.0}
    hasBin: true

  nopt@8.1.0:
    resolution: {integrity: sha512-ieGu42u/Qsa4TFktmaKEwM6MQH0pOWnaB3htzh0JRtx84+Mebc0cbZYN5bC+6WTZ4+77xrL9Pn5m7CV6VIkV7A==}
    engines: {node: ^18.17.0 || >=20.5.0}
    hasBin: true

  normalize-package-data@5.0.0:
    resolution: {integrity: sha512-h9iPVIfrVZ9wVYQnxFgtw1ugSvGEMOlyPWWtm8BMJhnwyEL/FLbYbTY3V3PpjI/BUK67n9PEWDu6eHzu1fB15Q==}
    engines: {node: ^14.17.0 || ^16.13.0 || >=18.0.0}

  normalize-package-data@6.0.2:
    resolution: {integrity: sha512-V6gygoYb/5EmNI+MEGrWkC+e6+Rr7mTmfHrxDbLzxQogBkgzo76rkok0Am6thgSF7Mv2nLOajAJj5vDJZEFn7g==}
    engines: {node: ^16.14.0 || >=18.0.0}

  normalize-path@2.1.1:
    resolution: {integrity: sha512-3pKJwH184Xo/lnH6oyP1q2pMd7HcypqqmRs91/6/i2CGtWwIKGCkOOMTm/zXbgTEWHw1uNpNi/igc3ePOYHb6w==}
    engines: {node: '>=0.10.0'}

  normalize-path@3.0.0:
    resolution: {integrity: sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==}
    engines: {node: '>=0.10.0'}

  npm-install-checks@6.3.0:
    resolution: {integrity: sha512-W29RiK/xtpCGqn6f3ixfRYGk+zRyr+Ew9F2E20BfXxT5/euLdA/Nm7fO7OeTGuAmTs30cpgInyJ0cYe708YTZw==}
    engines: {node: ^14.17.0 || ^16.13.0 || >=18.0.0}

  npm-normalize-package-bin@3.0.1:
    resolution: {integrity: sha512-dMxCf+zZ+3zeQZXKxmyuCKlIDPGuv8EF940xbkC4kQVDTtqoh6rJFO+JTKSA6/Rwi0getWmtuy4Itup0AMcaDQ==}
    engines: {node: ^14.17.0 || ^16.13.0 || >=18.0.0}

  npm-package-arg@10.1.0:
    resolution: {integrity: sha512-uFyyCEmgBfZTtrKk/5xDfHp6+MdrqGotX/VoOyEEl3mBwiEE5FlBaePanazJSVMPT7vKepcjYBY2ztg9A3yPIA==}
    engines: {node: ^14.17.0 || ^16.13.0 || >=18.0.0}

  npm-pick-manifest@8.0.2:
    resolution: {integrity: sha512-1dKY+86/AIiq1tkKVD3l0WI+Gd3vkknVGAggsFeBkTvbhMQ1OND/LKkYv4JtXPKUJ8bOTCyLiqEg2P6QNdK+Gg==}
    engines: {node: ^14.17.0 || ^16.13.0 || >=18.0.0}

  npm-run-path@5.3.0:
    resolution: {integrity: sha512-ppwTtiJZq0O/ai0z7yfudtBpWIoxM8yE6nHi1X47eFR2EWORqfbu6CnPlNsjeN683eT0qG6H/Pyf9fCcvjnnnQ==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  npm-to-yarn@3.0.1:
    resolution: {integrity: sha512-tt6PvKu4WyzPwWUzy/hvPFqn+uwXO0K1ZHka8az3NnrhWJDmSqI8ncWq0fkL0k/lmmi5tAC11FXwXuh0rFbt1A==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  nth-check@2.1.1:
    resolution: {integrity: sha512-lqjrjmaOoAnWfMmBPL+XNnynZh2+swxiX3WUE0s4yEHI6m+AwrK2UZOimIRl3X/4QctVqS8AiZjFqyOGrMXb/w==}

  nypm@0.6.0:
    resolution: {integrity: sha512-mn8wBFV9G9+UFHIrq+pZ2r2zL4aPau/by3kJb3cM7+5tQHMt6HGQB8FDIeKFYp8o0D2pnH6nVsO88N4AmUxIWg==}
    engines: {node: ^14.16.0 || >=16.10.0}
    hasBin: true

  object-assign@4.1.1:
    resolution: {integrity: sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==}
    engines: {node: '>=0.10.0'}

  object-inspect@1.13.4:
    resolution: {integrity: sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==}
    engines: {node: '>= 0.4'}

  object-keys@1.1.1:
    resolution: {integrity: sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==}
    engines: {node: '>= 0.4'}

  object.assign@4.1.7:
    resolution: {integrity: sha512-nK28WOo+QIjBkDduTINE4JkF/UJJKyf2EJxvJKfblDpyg0Q+pkOHNTL0Qwy6NP6FhE/EnzV73BxxqcJaXY9anw==}
    engines: {node: '>= 0.4'}

  object.entries@1.1.9:
    resolution: {integrity: sha512-8u/hfXFRBD1O0hPUjioLhoWFHRmt6tKA4/vZPyckBr18l1KE9uHrFaFaUi8MDRTpi4uak2goyPTSNJLXX2k2Hw==}
    engines: {node: '>= 0.4'}

  object.fromentries@2.0.8:
    resolution: {integrity: sha512-k6E21FzySsSK5a21KRADBd/NGneRegFO5pLHfdQLpRDETUNJueLXs3WCzyQ3tFRDYgbq3KHGXfTbi2bs8WQ6rQ==}
    engines: {node: '>= 0.4'}

  object.values@1.2.1:
    resolution: {integrity: sha512-gXah6aZrcUxjWg2zR2MwouP2eHlCBzdV4pygudehaKXSGW4v2AsRQUK+lwwXhii6KFZcunEnmSUoYp5CXibxtA==}
    engines: {node: '>= 0.4'}

  octokit@5.0.3:
    resolution: {integrity: sha512-+bwYsAIRmYv30NTmBysPIlgH23ekVDriB07oRxlPIAH5PI0yTMSxg5i5Xy0OetcnZw+nk/caD4szD7a9YZ3QyQ==}
    engines: {node: '>= 20'}

  ofetch@1.4.1:
    resolution: {integrity: sha512-QZj2DfGplQAr2oj9KzceK9Hwz6Whxazmn85yYeVuS3u9XTMOGMRx0kO95MQ+vLsj/S/NwBDMMLU5hpxvI6Tklw==}

  ohash@1.1.6:
    resolution: {integrity: sha512-TBu7PtV8YkAZn0tSxobKY2n2aAQva936lhRrj6957aDaCf9IEtqsKbgMzXE/F/sjqYOwmrukeORHNLe5glk7Cg==}

  ohash@2.0.11:
    resolution: {integrity: sha512-RdR9FQrFwNBNXAr4GixM8YaRZRJ5PUWbKYbE5eOsrwAjJW0q2REGcf79oYPsLyskQCZG1PLN+S/K1V00joZAoQ==}

  on-finished@2.3.0:
    resolution: {integrity: sha512-ikqdkGAAyf/X/gPhXGvfgAytDZtDbr+bkNUJ0N9h5MI/dmdgCs3l6hoHrcUv41sRKew3jIwrp4qQDXiK99Utww==}
    engines: {node: '>= 0.8'}

  on-finished@2.4.1:
    resolution: {integrity: sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==}
    engines: {node: '>= 0.8'}

  on-headers@1.0.2:
    resolution: {integrity: sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA==}
    engines: {node: '>= 0.8'}

  once@1.4.0:
    resolution: {integrity: sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==}

  one-time@1.0.0:
    resolution: {integrity: sha512-5DXOiRKwuSEcQ/l0kGCF6Q3jcADFv5tSmRaJck/OqkVFcOzutB134KRSfF0xDrL39MNnqxbHBbUUcjZIhTgb2g==}

  onetime@6.0.0:
    resolution: {integrity: sha512-1FlR+gjXK7X+AsAHso35MnyN5KqGwJRi/31ft6x0M194ht7S+rWAvd7PHss9xSKMzE0asv1pyIHaJYq+BbacAQ==}
    engines: {node: '>=12'}

  oniguruma-parser@0.12.1:
    resolution: {integrity: sha512-8Unqkvk1RYc6yq2WBYRj4hdnsAxVze8i7iPfQr8e4uSP3tRv0rpZcbGUDvxfQQcdwHt/e9PrMvGCsa8OqG9X3w==}

  oniguruma-to-es@4.3.3:
    resolution: {integrity: sha512-rPiZhzC3wXwE59YQMRDodUwwT9FZ9nNBwQQfsd1wfdtlKEyCdRV0avrTcSZ5xlIvGRVPd/cx6ZN45ECmS39xvg==}

  open@8.4.2:
    resolution: {integrity: sha512-7x81NCL719oNbsq/3mh+hVrAWmFuEYUqrq/Iw3kUzH8ReypT9QQ0BLoJS7/G9k6N81XjW4qHWtjWwe/9eLy1EQ==}
    engines: {node: '>=12'}

  openapi-sampler@1.6.1:
    resolution: {integrity: sha512-s1cIatOqrrhSj2tmJ4abFYZQK6l5v+V4toO5q1Pa0DyN8mtyqy2I+Qrj5W9vOELEtybIMQs/TBZGVO/DtTFK8w==}

  openapi-types@12.1.3:
    resolution: {integrity: sha512-N4YtSYJqghVu4iek2ZUvcN/0aqH1kRDuNqzcycDxhOUpg7GdvLa2F3DgS6yBNhInhv2r/6I0Flkn7CqL8+nIcw==}

  opener@1.5.2:
    resolution: {integrity: sha512-ur5UIdyw5Y7yEj9wLzhqXiy6GZ3Mwx0yGI+5sMn2r0N0v3cKJvUmFH5yPP+WXh9e0xfyzyJX95D8l088DNFj7A==}
    hasBin: true

  optionator@0.9.4:
    resolution: {integrity: sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==}
    engines: {node: '>= 0.8.0'}

  os-tmpdir@1.0.2:
    resolution: {integrity: sha512-D2FR03Vir7FIu45XBY20mTb+/ZSWB00sjU9jdQXt83gDrI4Ztz5Fs7/yy74g2N5SVQY4xY1qDr4rNddwYRVX0g==}
    engines: {node: '>=0.10.0'}

  outdent@0.5.0:
    resolution: {integrity: sha512-/jHxFIzoMXdqPzTaCpFzAAWhpkSjZPF4Vsn6jAfNpmbH/ymsmd7Qc6VE9BGn0L6YMj6uwpQLxCECpus4ukKS9Q==}

  own-keys@1.0.1:
    resolution: {integrity: sha512-qFOyK5PjiWZd+QQIh+1jhdb9LpxTF0qs7Pm8o5QHYZ0M3vKqSqzsZaEB6oWlxZ+q2sJBMI/Ktgd2N5ZwQoRHfg==}
    engines: {node: '>= 0.4'}

  oxc-transform@0.76.0:
    resolution: {integrity: sha512-E3Ne/inNuOEspzLf4QOZZoHskX4jgWB/dtis4y2CruVhRC9qQZMTa6kqxYB7kQwrOKw4U3By/pGrqU8CMbXF5A==}
    engines: {node: '>=14.0.0'}

  p-event@6.0.1:
    resolution: {integrity: sha512-Q6Bekk5wpzW5qIyUP4gdMEujObYstZl6DMMOSenwBvV0BlE5LkDwkjs5yHbZmdCEq2o4RJx4tE1vwxFVf2FG1w==}
    engines: {node: '>=16.17'}

  p-filter@2.1.0:
    resolution: {integrity: sha512-ZBxxZ5sL2HghephhpGAQdoskxplTwr7ICaehZwLIlfL6acuVgZPm8yBNuRAFBGEqtD/hmUeq9eqLg2ys9Xr/yw==}
    engines: {node: '>=8'}

  p-limit@2.3.0:
    resolution: {integrity: sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==}
    engines: {node: '>=6'}

  p-limit@3.1.0:
    resolution: {integrity: sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==}
    engines: {node: '>=10'}

  p-limit@4.0.0:
    resolution: {integrity: sha512-5b0R4txpzjPWVw/cXXUResoD4hb6U/x9BH08L7nw+GN1sezDzPdxeRvpc9c433fZhBan/wusjbCsqwqm4EIBIQ==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  p-limit@6.2.0:
    resolution: {integrity: sha512-kuUqqHNUqoIWp/c467RI4X6mmyuojY5jGutNU0wVTmEOOfcuwLqyMVoAi9MKi2Ak+5i9+nhmrK4ufZE8069kHA==}
    engines: {node: '>=18'}

  p-locate@4.1.0:
    resolution: {integrity: sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==}
    engines: {node: '>=8'}

  p-locate@5.0.0:
    resolution: {integrity: sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==}
    engines: {node: '>=10'}

  p-locate@6.0.0:
    resolution: {integrity: sha512-wPrq66Llhl7/4AGC6I+cqxT07LhXvWL08LNXz1fENOw0Ap4sRZZ/gZpTTJ5jpurzzzfS2W/Ge9BY3LgLjCShcw==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  p-map@2.1.0:
    resolution: {integrity: sha512-y3b8Kpd8OAN444hxfBbFfj1FY/RjtTd8tzYwhUqNYXx0fXx2iX4maP4Qr6qhIKbQXI02wTLAda4fYUbDagTUFw==}
    engines: {node: '>=6'}

  p-map@7.0.3:
    resolution: {integrity: sha512-VkndIv2fIB99swvQoA65bm+fsmt6UNdGeIB0oxBs+WhAhdh08QA04JXpI7rbB9r08/nkbysKoya9rtDERYOYMA==}
    engines: {node: '>=18'}

  p-timeout@6.1.4:
    resolution: {integrity: sha512-MyIV3ZA/PmyBN/ud8vV9XzwTrNtR4jFrObymZYnZqMmW0zA8Z17vnT0rBgFE/TlohB+YCHqXMgZzb3Csp49vqg==}
    engines: {node: '>=14.16'}

  p-try@2.2.0:
    resolution: {integrity: sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==}
    engines: {node: '>=6'}

  p-wait-for@5.0.2:
    resolution: {integrity: sha512-lwx6u1CotQYPVju77R+D0vFomni/AqRfqLmqQ8hekklqZ6gAY9rONh7lBQ0uxWMkC2AuX9b2DVAl8To0NyP1JA==}
    engines: {node: '>=12'}

  package-json-from-dist@1.0.1:
    resolution: {integrity: sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==}

  package-manager-detector@0.2.11:
    resolution: {integrity: sha512-BEnLolu+yuz22S56CU1SUKq3XC3PkwD5wv4ikR4MfGvnRVcmzXR9DwSlW2fEamyTPyXHomBJRzgapeuBvRNzJQ==}

  package-manager-detector@1.3.0:
    resolution: {integrity: sha512-ZsEbbZORsyHuO00lY1kV3/t72yp6Ysay6Pd17ZAlNGuGwmWDLCJxFpRs0IzfXfj1o4icJOkUEioexFHzyPurSQ==}

  parent-module@1.0.1:
    resolution: {integrity: sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==}
    engines: {node: '>=6'}

  parse-entities@4.0.2:
    resolution: {integrity: sha512-GG2AQYWoLgL877gQIKeRPGO1xF9+eG1ujIb5soS5gPvLQ1y2o8FL90w2QWNdf9I361Mpp7726c+lj3U0qK1uGw==}

  parse-gitignore@2.0.0:
    resolution: {integrity: sha512-RmVuCHWsfu0QPNW+mraxh/xjQVw/lhUCUru8Zni3Ctq3AoMhpDTq0OVdKS6iesd6Kqb7viCV3isAL43dciOSog==}
    engines: {node: '>=14'}

  parse-json@5.2.0:
    resolution: {integrity: sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==}
    engines: {node: '>=8'}

  parse-json@8.3.0:
    resolution: {integrity: sha512-ybiGyvspI+fAoRQbIPRddCcSTV9/LsJbf0e/S85VLowVGzRmokfneg2kwVW/KU5rOXrPSbF1qAKPMgNTqqROQQ==}
    engines: {node: '>=18'}

  parse-ms@3.0.0:
    resolution: {integrity: sha512-Tpb8Z7r7XbbtBTrM9UhpkzzaMrqA2VXMT3YChzYltwV3P3pM6t8wl7TvpMnSTosz1aQAdVib7kdoys7vYOPerw==}
    engines: {node: '>=12'}

  parse5-htmlparser2-tree-adapter@7.1.0:
    resolution: {integrity: sha512-ruw5xyKs6lrpo9x9rCZqZZnIUntICjQAd0Wsmp396Ul9lN/h+ifgVV1x1gZHi8euej6wTfpqX8j+BFQxF0NS/g==}

  parse5-parser-stream@7.1.2:
    resolution: {integrity: sha512-JyeQc9iwFLn5TbvvqACIF/VXG6abODeB3Fwmv/TGdLk2LfbWkaySGY72at4+Ty7EkPZj854u4CrICqNk2qIbow==}

  parse5@7.3.0:
    resolution: {integrity: sha512-IInvU7fabl34qmi9gY8XOVxhYyMyuH2xUNpb2q8/Y+7552KlejkRvqvD19nMoUW/uQGGbqNpA6Tufu5FL5BZgw==}

  parseurl@1.3.3:
    resolution: {integrity: sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==}
    engines: {node: '>= 0.8'}

  path-browserify@1.0.1:
    resolution: {integrity: sha512-b7uo2UCUOYZcnF/3ID0lulOJi/bafxa1xPe7ZPsammBSpjSWQkjNxlt635YGS2MiR9GjvuXCtz2emr3jbsz98g==}

  path-data-parser@0.1.0:
    resolution: {integrity: sha512-NOnmBpt5Y2RWbuv0LMzsayp3lVylAHLPUTut412ZA3l+C4uw4ZVkQbjShYCQ8TCpUMdPapr4YjUqLYD6v68j+w==}

  path-exists@4.0.0:
    resolution: {integrity: sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==}
    engines: {node: '>=8'}

  path-exists@5.0.0:
    resolution: {integrity: sha512-RjhtfwJOxzcFmNOi6ltcbcu4Iu+FL3zEj83dk4kAS+fVpTxXLO1b38RvJgT/0QwvV/L3aY9TAnyv0EOqW4GoMQ==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  path-key@3.1.1:
    resolution: {integrity: sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==}
    engines: {node: '>=8'}

  path-key@4.0.0:
    resolution: {integrity: sha512-haREypq7xkM7ErfgIyA0z+Bj4AGKlMSdlQE2jvJo6huWD1EdkKYV+G/T4nq0YEF2vgTT8kqMFKo1uHn950r4SQ==}
    engines: {node: '>=12'}

  path-parse@1.0.7:
    resolution: {integrity: sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==}

  path-scurry@1.11.1:
    resolution: {integrity: sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==}
    engines: {node: '>=16 || 14 >=14.18'}

  path-scurry@2.0.0:
    resolution: {integrity: sha512-ypGJsmGtdXUOeM5u93TyeIEfEhM6s+ljAhrk5vAvSx8uyY/02OvrZnA0YNGUrPXfpJMgI1ODd3nwz8Npx4O4cg==}
    engines: {node: 20 || >=22}

  path-to-regexp@0.1.12:
    resolution: {integrity: sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==}

  path-to-regexp@6.3.0:
    resolution: {integrity: sha512-Yhpw4T9C6hPpgPeA28us07OJeqZ5EzQTkbfwuhsUg0c237RomFoETJgmp2sa3F/41gfLE6G5cqcYwznmeEeOlQ==}

  path-type@4.0.0:
    resolution: {integrity: sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==}
    engines: {node: '>=8'}

  path-type@6.0.0:
    resolution: {integrity: sha512-Vj7sf++t5pBD637NSfkxpHSMfWaeig5+DKWLhcqIYx6mWQz5hdJTGDVMQiJcw1ZYkhs7AazKDGpRVji1LJCZUQ==}
    engines: {node: '>=18'}

  pathe@1.1.2:
    resolution: {integrity: sha512-whLdWMYL2TwI08hn8/ZqAbrVemu0LNaNNJZX73O6qaIdCTfXutsLhMkjdENX0qhsQ9uIimo4/aQOmXkoon2nDQ==}

  pathe@2.0.3:
    resolution: {integrity: sha512-WUjGcAqP1gQacoQe+OBJsFA7Ld4DyXuUIjZ5cc75cLHvJ7dtNsTugphxIADwspS+AraAUePCKrSVtPLFj/F88w==}

  pathval@2.0.0:
    resolution: {integrity: sha512-vE7JKRyES09KiunauX7nd2Q9/L7lhok4smP9RZTDeD4MVs72Dp2qNFVz39Nz5a0FVEW0BJR6C0DYrq6unoziZA==}
    engines: {node: '>= 14.16'}

  pend@1.2.0:
    resolution: {integrity: sha512-F3asv42UuXchdzt+xXqfW1OGlVBe+mxa2mqI0pg5yAHZPvFmY3Y6drSf/GQ1A86WgWEN9Kzh/WrgKa6iGcHXLg==}

  perfect-debounce@1.0.0:
    resolution: {integrity: sha512-xCy9V055GLEqoFaHoC1SoLIaLmWctgCUaBaWxDZ7/Zx4CTyX7cJQLJOok/orfjZAh9kEYpjJa4d0KcJmCbctZA==}

  picocolors@1.1.1:
    resolution: {integrity: sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==}

  picomatch@2.3.1:
    resolution: {integrity: sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==}
    engines: {node: '>=8.6'}

  picomatch@4.0.2:
    resolution: {integrity: sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==}
    engines: {node: '>=12'}

  pify@4.0.1:
    resolution: {integrity: sha512-uB80kBFb/tfd68bVleG9T5GGsGPjJrLAUpR5PZIrhBnIaRTQRjqdJSsIKkOP6OAIFbj7GOrcudc5pNjZ+geV2g==}
    engines: {node: '>=6'}

  pirates@4.0.7:
    resolution: {integrity: sha512-TfySrs/5nm8fQJDcBDuUng3VOUKsd7S+zqvbOTiGXHfxX4wK31ard+hoNuvkicM/2YFzlpDgABOevKSsB4G/FA==}
    engines: {node: '>= 6'}

  pkg-types@1.3.1:
    resolution: {integrity: sha512-/Jm5M4RvtBFVkKWRu2BLUTNP8/M2a+UwuAX+ae4770q1qVGtfjG+WTCupoZixokjmHiry8uI+dlY8KXYV5HVVQ==}

  pkg-types@2.2.0:
    resolution: {integrity: sha512-2SM/GZGAEkPp3KWORxQZns4M+WSeXbC2HEvmOIJe3Cmiv6ieAJvdVhDldtHqM5J1Y7MrR1XhkBT/rMlhh9FdqQ==}

  plimit-lit@1.6.1:
    resolution: {integrity: sha512-B7+VDyb8Tl6oMJT9oSO2CW8XC/T4UcJGrwOVoNGwOQsQYhlpfajmrMj5xeejqaASq3V/EqThyOeATEOMuSEXiA==}
    engines: {node: '>=12'}

  pluralize@8.0.0:
    resolution: {integrity: sha512-Nc3IT5yHzflTfbjgqWcCPpo7DaKy4FnpB0l/zCAW0Tc7jxAiuqSxHasntB3D7887LSrA93kDJ9IXovxJYxyLCA==}
    engines: {node: '>=4'}

  points-on-curve@0.2.0:
    resolution: {integrity: sha512-0mYKnYYe9ZcqMCWhUjItv/oHjvgEsfKvnUTg8sAtnHr3GVy7rGkXCb6d5cSyqrWqL4k81b9CPg3urd+T7aop3A==}

  points-on-path@0.2.1:
    resolution: {integrity: sha512-25ClnWWuw7JbWZcgqY/gJ4FQWadKxGWk+3kR/7kD0tCaDtPPMj7oHu2ToLaVhfpnHrZzYby2w6tUA0eOIuUg8g==}

  possible-typed-array-names@1.1.0:
    resolution: {integrity: sha512-/+5VFTchJDoVj3bhoqi6UeymcD00DAwb1nJwamzPvHEszJ4FpF6SNNbUbOS8yI56qHzdV8eK0qEfOSiodkTdxg==}
    engines: {node: '>= 0.4'}

  postcss-load-config@6.0.1:
    resolution: {integrity: sha512-oPtTM4oerL+UXmx+93ytZVN82RrlY/wPUV8IeDxFrzIjXOLF1pN+EmKPLbubvKHT2HC20xXsCAH2Z+CKV6Oz/g==}
    engines: {node: '>= 18'}
    peerDependencies:
      jiti: '>=1.21.0'
      postcss: '>=8.0.9'
      tsx: ^4.8.1
      yaml: ^2.4.2
    peerDependenciesMeta:
      jiti:
        optional: true
      postcss:
        optional: true
      tsx:
        optional: true
      yaml:
        optional: true

  postcss-selector-parser@7.1.0:
    resolution: {integrity: sha512-8sLjZwK0R+JlxlYcTuVnyT2v+htpdrjDOKuMcOVdYjt52Lh8hWRYpxBPoKx/Zg+bcjc3wx6fmQevMmUztS/ccA==}
    engines: {node: '>=4'}

  postcss-values-parser@6.0.2:
    resolution: {integrity: sha512-YLJpK0N1brcNJrs9WatuJFtHaV9q5aAOj+S4DI5S7jgHlRfm0PIbDCAFRYMQD5SHq7Fy6xsDhyutgS0QOAs0qw==}
    engines: {node: '>=10'}
    peerDependencies:
      postcss: ^8.2.9

  postcss@8.4.31:
    resolution: {integrity: sha512-PS08Iboia9mts/2ygV3eLpY5ghnUcfLV/EXTOW1E2qYxJKGGBUtNjN76FYHnMs36RmARn41bC0AZmn+rR0OVpQ==}
    engines: {node: ^10 || ^12 || >=14}

  postcss@8.5.6:
    resolution: {integrity: sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==}
    engines: {node: ^10 || ^12 || >=14}

  precinct@12.2.0:
    resolution: {integrity: sha512-NFBMuwIfaJ4SocE9YXPU/n4AcNSoFMVFjP72nvl3cx69j/ke61/hPOWFREVxLkFhhEGnA8ZuVfTqJBa+PK3b5w==}
    engines: {node: '>=18'}
    hasBin: true

  prelude-ls@1.2.1:
    resolution: {integrity: sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==}
    engines: {node: '>= 0.8.0'}

  prettier-plugin-astro@0.14.1:
    resolution: {integrity: sha512-RiBETaaP9veVstE4vUwSIcdATj6dKmXljouXc/DDNwBSPTp8FRkLGDSGFClKsAFeeg+13SB0Z1JZvbD76bigJw==}
    engines: {node: ^14.15.0 || >=16.0.0}

  prettier@2.8.8:
    resolution: {integrity: sha512-tdN8qQGvNjw4CHbY+XXk0JgCXn9QiF21a55rBe5LJAU+kDyC4WQn4+awm2Xfk2lQMk5fKup9XgzTZtGkjBdP9Q==}
    engines: {node: '>=10.13.0'}
    hasBin: true

  prettier@3.6.2:
    resolution: {integrity: sha512-I7AIg5boAr5R0FFtJ6rCfD+LFsWHp81dolrFD8S79U9tb8Az2nGrJncnMSnys+bpQJfRUzqs9hnA81OAA3hCuQ==}
    engines: {node: '>=14'}
    hasBin: true

  pretty-bytes@6.1.1:
    resolution: {integrity: sha512-mQUvGU6aUFQ+rNvTIAcZuWGRT9a6f6Yrg9bHs4ImKF+HZCEK+plBvnAZYSIQztknZF2qnzNtr6F8s0+IuptdlQ==}
    engines: {node: ^14.13.1 || >=16.0.0}

  pretty-ms@8.0.0:
    resolution: {integrity: sha512-ASJqOugUF1bbzI35STMBUpZqdfYKlJugy6JBziGi2EE+AL5JPJGSzvpeVXojxrr0ViUYoToUjb5kjSEGf7Y83Q==}
    engines: {node: '>=14.16'}

  proc-log@3.0.0:
    resolution: {integrity: sha512-++Vn7NS4Xf9NacaU9Xq3URUuqZETPsf8L4j5/ckhaRYsfPeRyzGw+iDjFhV/Jr3uNmTvvddEJFWh5R1gRgUH8A==}
    engines: {node: ^14.17.0 || ^16.13.0 || >=18.0.0}

  process-nextick-args@2.0.1:
    resolution: {integrity: sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==}

  process@0.11.10:
    resolution: {integrity: sha512-cdGef/drWFoydD1JsMzuFf8100nZl+GT+yacc2bEced5f9Rjk4z+WtFUTBu9PhOi9j/jfmBPu0mMEY4wIdAF8A==}
    engines: {node: '>= 0.6.0'}

  promise-inflight@1.0.1:
    resolution: {integrity: sha512-6zWPyEOFaQBJYcGMHBKTKJ3u6TBsnMFOIZSa6ce1e/ZrrsOlnHRHbabMjLiBYKp+n44X9eUI6VUPaukCXHuG4g==}
    peerDependencies:
      bluebird: '*'
    peerDependenciesMeta:
      bluebird:
        optional: true

  promise-retry@2.0.1:
    resolution: {integrity: sha512-y+WKFlBR8BGXnsNlIHFGPZmyDf3DFMoLhaflAnyZgV6rG6xu+JwesTo2Q9R6XwYmtmwAFCkAk3e35jEdoeh/3g==}
    engines: {node: '>=10'}

  prop-types@15.8.1:
    resolution: {integrity: sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==}

  property-information@6.5.0:
    resolution: {integrity: sha512-PgTgs/BlvHxOu8QuEN7wi5A0OmXaBcHpmCSTehcs6Uuu9IkDIEo13Hy7n898RHfrQ49vKCoGeWZSaAK01nwVig==}

  property-information@7.1.0:
    resolution: {integrity: sha512-TwEZ+X+yCJmYfL7TPUOcvBZ4QfoT5YenQiJuX//0th53DE6w0xxLEtfK3iyryQFddXuvkIk51EEgrJQ0WJkOmQ==}

  proto-list@1.2.4:
    resolution: {integrity: sha512-vtK/94akxsTMhe0/cbfpR+syPuszcuwhqVjJq26CuNDgFGj682oRBXOP5MJpv2r7JtE8MsiepGIqvvOTBwn2vA==}

  proxy-addr@2.0.7:
    resolution: {integrity: sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==}
    engines: {node: '>= 0.10'}

  pump@3.0.3:
    resolution: {integrity: sha512-todwxLMY7/heScKmntwQG8CXVkWUOdYxIvY2s0VWAAMh/nd8SoYiRaKjlr7+iCs984f2P8zvrfWcDDYVb73NfA==}

  punycode@2.3.1:
    resolution: {integrity: sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==}
    engines: {node: '>=6'}

  qs@6.13.0:
    resolution: {integrity: sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==}
    engines: {node: '>=0.6'}

  qs@6.14.0:
    resolution: {integrity: sha512-YWWTjgABSKcvs/nWBi9PycY/JiPJqOD4JA6o9Sej2AtvSGarXxKC3OQSk4pAarbdQlKAh5D4FCQkJNkW+GAn3w==}
    engines: {node: '>=0.6'}

  quansync@0.2.10:
    resolution: {integrity: sha512-t41VRkMYbkHyCYmOvx/6URnN80H7k4X0lLdBMGsz+maAwrJQYB1djpV6vHrQIBE0WBSGqhtEHrK9U3DWWH8v7A==}

  queue-lit@1.5.2:
    resolution: {integrity: sha512-tLc36IOPeMAubu8BkW8YDBV+WyIgKlYU7zUNs0J5Vk9skSZ4JfGlPOqplP0aHdfv7HL0B2Pg6nwiq60Qc6M2Hw==}
    engines: {node: '>=12'}

  queue-microtask@1.2.3:
    resolution: {integrity: sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==}

  quote-unquote@1.0.0:
    resolution: {integrity: sha512-twwRO/ilhlG/FIgYeKGFqyHhoEhqgnKVkcmqMKi2r524gz3ZbDTcyFt38E9xjJI2vT+KbRNHVbnJ/e0I25Azwg==}

  radix-vue@1.9.17:
    resolution: {integrity: sha512-mVCu7I2vXt1L2IUYHTt0sZMz7s1K2ZtqKeTIxG3yC5mMFfLBG4FtE1FDeRMpDd+Hhg/ybi9+iXmAP1ISREndoQ==}
    peerDependencies:
      vue: '>= 3.2.0'

  radix3@1.1.2:
    resolution: {integrity: sha512-b484I/7b8rDEdSDKckSSBA8knMpcdsXudlE/LNL639wFoHKwLbEkQFZHWEYwDC0wa0FKUcCY+GAF73Z7wxNVFA==}

  randombytes@2.1.0:
    resolution: {integrity: sha512-vYl3iOX+4CKUWuxGi9Ukhie6fsqXqS9FE2Zaic4tNFD2N2QQaXOMFbuKK4QmDHC0JO6B1Zp41J0LpT0oR68amQ==}

  range-parser@1.2.1:
    resolution: {integrity: sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==}
    engines: {node: '>= 0.6'}

  raw-body@2.5.2:
    resolution: {integrity: sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==}
    engines: {node: '>= 0.8'}

  rc9@2.1.2:
    resolution: {integrity: sha512-btXCnMmRIBINM2LDZoEmOogIZU7Qe7zn4BpomSKZ/ykbLObuBdvG+mFq11DL6fjH1DRwHhrlgtYWG96bJiC7Cg==}

  react-d3-tree@3.6.6:
    resolution: {integrity: sha512-E9ByUdeqvlxLlF9BSL7KWQH3ikYHtHO+g1rAPcVgj6mu92tjRUCan2AWxoD4eTSzzAATf8BZtf+CXGSoSd6ioQ==}
    peerDependencies:
      react: 16.x || 17.x || 18.x || 19.x
      react-dom: 16.x || 17.x || 18.x || 19.x

  react-diff-viewer-continued@4.0.6:
    resolution: {integrity: sha512-QtJuaAlAu9w7vLrEvjkUD4XFY/uvA4k4kfRI0SP0xQXLjOXw2QuE/Cg6VSE6qdJCwIWw8FZl5p7NJjW4yVuEUA==}
    engines: {node: '>= 16'}
    peerDependencies:
      react: ^15.3.0 || ^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0
      react-dom: ^15.3.0 || ^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0

  react-dom@19.1.0:
    resolution: {integrity: sha512-Xs1hdnE+DyKgeHJeJznQmYMIBG3TKIHJJT95Q58nHLSrElKlGQqDTR2HQ9fx5CN/Gk6Vh/kupBTDLU11/nDk/g==}
    peerDependencies:
      react: ^19.1.0

  react-hook-form@7.60.0:
    resolution: {integrity: sha512-SBrYOvMbDB7cV8ZfNpaiLcgjH/a1c7aK0lK+aNigpf4xWLO8q+o4tcvVurv3c4EOyzn/3dCsYt4GKD42VvJ/+A==}
    engines: {node: '>=18.0.0'}
    peerDependencies:
      react: ^16.8.0 || ^17 || ^18 || ^19

  react-hotkeys-hook@4.6.2:
    resolution: {integrity: sha512-FmP+ZriY3EG59Ug/lxNfrObCnW9xQShgk7Nb83+CkpfkcCpfS95ydv+E9JuXA5cp8KtskU7LGlIARpkc92X22Q==}
    peerDependencies:
      react: '>=16.8.1'
      react-dom: '>=16.8.1'

  react-is@16.13.1:
    resolution: {integrity: sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==}

  react-lifecycles-compat@3.0.4:
    resolution: {integrity: sha512-fBASbA6LnOU9dOU2eW7aQ8xmYBSXUIWr+UmF9b1efZBazGNO+rcXT/icdKnYm2pTwcRylVUYwW7H1PHfLekVzA==}

  react-medium-image-zoom@5.2.14:
    resolution: {integrity: sha512-nfTVYcAUnBzXQpPDcZL+cG/e6UceYUIG+zDcnemL7jtAqbJjVVkA85RgneGtJeni12dTyiRPZVM6Szkmwd/o8w==}
    peerDependencies:
      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0
      react-dom: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0

  react-refresh@0.14.2:
    resolution: {integrity: sha512-jCvmsr+1IUSMUyzOkRcvnVbX3ZYC6g9TDrDbFuFmRDq7PD4yaGbLKNQL6k2jnArV8hjYxh7hVhAZB6s9HDGpZA==}
    engines: {node: '>=0.10.0'}

  react-refresh@0.17.0:
    resolution: {integrity: sha512-z6F7K9bV85EfseRCp2bzrpyQ0Gkw1uLoCel9XBVWPg/TjRj94SkJzUTGfOa4bs7iJvBWtQG0Wq7wnI0syw3EBQ==}
    engines: {node: '>=0.10.0'}

  react-remove-scroll-bar@2.3.8:
    resolution: {integrity: sha512-9r+yi9+mgU33AKcj6IbT9oRCO78WriSj6t/cF8DWBZJ9aOGPOTEDvdUDz1FwKim7QXWwmHqtdHnRJfhAxEG46Q==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  react-remove-scroll@2.7.1:
    resolution: {integrity: sha512-HpMh8+oahmIdOuS5aFKKY6Pyog+FNaZV/XyJOq7b4YFwsFHe5yYfdbIalI4k3vU2nSDql7YskmUseHsRrJqIPA==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  react-router-devtools@5.0.6:
    resolution: {integrity: sha512-AoCBvYrp7E6cbplfWTJME6UyNQHLx/URnsSZPG92+XAKzrtmKwKfuwfm0mVf4dXTo1+JBJfpNhx+Gz7SYe0YoA==}
    peerDependencies:
      '@types/react': '>=17'
      '@types/react-dom': '>=17'
      react: '>=17'
      react-dom: '>=17'
      react-router: '>=7.0.0'
      vite: '>=5.0.0 || >=6.0.0'

  react-router@7.6.3:
    resolution: {integrity: sha512-zf45LZp5skDC6I3jDLXQUu0u26jtuP4lEGbc7BbdyxenBN1vJSTA18czM2D+h5qyMBuMrD+9uB+mU37HIoKGRA==}
    engines: {node: '>=20.0.0'}
    peerDependencies:
      react: '>=18'
      react-dom: '>=18'
    peerDependenciesMeta:
      react-dom:
        optional: true

  react-style-singleton@2.2.3:
    resolution: {integrity: sha512-b6jSvxvVnyptAiLjbkWLE/lOnR4lfTtDAl+eUC7RZy+QQWc6wRzIV2CE6xBuMmDxc2qIihtDCZD5NPOFl7fRBQ==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  react-tooltip@5.28.1:
    resolution: {integrity: sha512-ZA4oHwoIIK09TS7PvSLFcRlje1wGZaxw6xHvfrzn6T82UcMEfEmHVCad16Gnr4NDNDh93HyN037VK4HDi5odfQ==}
    peerDependencies:
      react: '>=16.14.0'
      react-dom: '>=16.14.0'

  react@19.1.0:
    resolution: {integrity: sha512-FS+XFBNvn3GTAWq26joslQgWNoFu08F4kl0J4CgdNKADkdSGXQyTCnKteIAJy96Br6YbpEU1LSzV5dYtjMkMDg==}
    engines: {node: '>=0.10.0'}

  read-package-up@11.0.0:
    resolution: {integrity: sha512-MbgfoNPANMdb4oRBNg5eqLbB2t2r+o5Ua1pNt8BqGp4I0FJZhuVSOj3PaBPni4azWuSzEdNn2evevzVmEk1ohQ==}
    engines: {node: '>=18'}

  read-pkg@9.0.1:
    resolution: {integrity: sha512-9viLL4/n1BJUCT1NXVTdS1jtm80yDEgR5T4yCelII49Mbj0v1rZdKqj7zCiYdbB0CuCgdrvHcNogAKTFPBocFA==}
    engines: {node: '>=18'}

  read-yaml-file@1.1.0:
    resolution: {integrity: sha512-VIMnQi/Z4HT2Fxuwg5KrY174U1VdUIASQVWXXyqtNRtxSr9IYkn1rsI6Tb6HsrHCmB7gVpNwX6JxPTHcH6IoTA==}
    engines: {node: '>=6'}

  readable-stream@2.3.8:
    resolution: {integrity: sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==}

  readable-stream@3.6.2:
    resolution: {integrity: sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==}
    engines: {node: '>= 6'}

  readable-stream@4.7.0:
    resolution: {integrity: sha512-oIGGmcpTLwPga8Bn6/Z75SVaH1z5dUut2ibSyAMVhmUggWpmDn2dapB0n7f8nwaSiRtepAsfJyfXIO5DCVAODg==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  readdir-glob@1.1.3:
    resolution: {integrity: sha512-v05I2k7xN8zXvPD9N+z/uhXPaj0sUFCe2rcWZIpBsqxfP7xXFQ0tipAd/wjj1YxWyWtUS5IDJpOG82JKt2EAVA==}

  readdirp@3.6.0:
    resolution: {integrity: sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==}
    engines: {node: '>=8.10.0'}

  readdirp@4.1.2:
    resolution: {integrity: sha512-GDhwkLfywWL2s6vEjyhri+eXmfH6j1L7JE27WhqLeYzoh/A3DBaYGEj2H/HFZCn/kMfim73FXxEJTw06WtxQwg==}
    engines: {node: '>= 14.18.0'}

  recast@0.23.11:
    resolution: {integrity: sha512-YTUo+Flmw4ZXiWfQKGcwwc11KnoRAYgzAE2E7mXKCjSviTKShtxBsN6YUUBB2gtaBzKzeKunxhUwNHQuRryhWA==}
    engines: {node: '>= 4'}

  recma-build-jsx@1.0.0:
    resolution: {integrity: sha512-8GtdyqaBcDfva+GUKDr3nev3VpKAhup1+RvkMvUxURHpW7QyIvk9F5wz7Vzo06CEMSilw6uArgRqhpiUcWp8ew==}

  recma-jsx@1.0.0:
    resolution: {integrity: sha512-5vwkv65qWwYxg+Atz95acp8DMu1JDSqdGkA2Of1j6rCreyFUE/gp15fC8MnGEuG1W68UKjM6x6+YTWIh7hZM/Q==}

  recma-parse@1.0.0:
    resolution: {integrity: sha512-OYLsIGBB5Y5wjnSnQW6t3Xg7q3fQ7FWbw/vcXtORTnyaSFscOtABg+7Pnz6YZ6c27fG1/aN8CjfwoUEUIdwqWQ==}

  recma-stringify@1.0.0:
    resolution: {integrity: sha512-cjwII1MdIIVloKvC9ErQ+OgAtwHBmcZ0Bg4ciz78FtbT8In39aAYbaA7zvxQ61xVMSPE8WxhLwLbhif4Js2C+g==}

  redis-errors@1.2.0:
    resolution: {integrity: sha512-1qny3OExCf0UvUV/5wpYKf2YwPcOqXzkwKKSmKHiE6ZMQs5heeE/c8eXK+PNllPvmjgAbfnsbpkGZWy8cBpn9w==}
    engines: {node: '>=4'}

  redis-parser@3.0.0:
    resolution: {integrity: sha512-DJnGAeenTdpMEH6uAJRK/uiyEIH9WVsUmoLwzudwGJUwZPp80PDBWPHXSAGNPwNvIXAbe7MSUB1zQFugFml66A==}
    engines: {node: '>=4'}

  reflect.getprototypeof@1.0.10:
    resolution: {integrity: sha512-00o4I+DVrefhv+nX0ulyi3biSHCPDe+yLv5o/p6d/UVlirijB8E16FtfwSAi4g3tcqrQ4lRAqQSoFEZJehYEcw==}
    engines: {node: '>= 0.4'}

  regex-recursion@6.0.2:
    resolution: {integrity: sha512-0YCaSCq2VRIebiaUviZNs0cBz1kg5kVS2UKUfNIx8YVs1cN3AV7NTctO5FOKBA+UT2BPJIWZauYHPqJODG50cg==}

  regex-utilities@2.3.0:
    resolution: {integrity: sha512-8VhliFJAWRaUiVvREIiW2NXXTmHs4vMNnSzuJVhscgmGav3g9VDxLrQndI3dZZVVdp0ZO/5v0xmX516/7M9cng==}

  regex@6.0.1:
    resolution: {integrity: sha512-uorlqlzAKjKQZ5P+kTJr3eeJGSVroLKoHmquUj4zHWuR+hEyNqlXsSKlYYF5F4NI6nl7tWCs0apKJ0lmfsXAPA==}

  regexp.prototype.flags@1.5.4:
    resolution: {integrity: sha512-dYqgNSZbDwkaJ2ceRd9ojCGjBq+mOm9LmtXnAnEGyHhN/5R7iDW2TRw3h+o/jCFxus3P2LfWIIiwowAjANm7IA==}
    engines: {node: '>= 0.4'}

  rehype-external-links@3.0.0:
    resolution: {integrity: sha512-yp+e5N9V3C6bwBeAC4n796kc86M4gJCdlVhiMTxIrJG5UHDMh+PJANf9heqORJbt1nrCbDwIlAZKjANIaVBbvw==}

  rehype-format@5.0.1:
    resolution: {integrity: sha512-zvmVru9uB0josBVpr946OR8ui7nJEdzZobwLOOqHb/OOD88W0Vk2SqLwoVOj0fM6IPCCO6TaV9CvQvJMWwukFQ==}

  rehype-katex@7.0.1:
    resolution: {integrity: sha512-OiM2wrZ/wuhKkigASodFoo8wimG3H12LWQaH8qSPVJn9apWKFSH3YOCtbKpBorTVw/eI7cuT21XBbvwEswbIOA==}

  rehype-parse@9.0.1:
    resolution: {integrity: sha512-ksCzCD0Fgfh7trPDxr2rSylbwq9iYDkSn8TCDmEJ49ljEUBxDVCzCHv7QNzZOfODanX4+bWQ4WZqLCRWYLfhag==}

  rehype-raw@7.0.0:
    resolution: {integrity: sha512-/aE8hCfKlQeA8LmyeyQvQF3eBiLRGNlfBJEvWH7ivp9sBqs7TNqBL5X3v157rM4IFETqDnIOO+z5M/biZbo9Ww==}

  rehype-recma@1.0.0:
    resolution: {integrity: sha512-lqA4rGUf1JmacCNWWZx0Wv1dHqMwxzsDWYMTowuplHF3xH0N/MmrZ/G3BDZnzAkRmxDadujCjaKM2hqYdCBOGw==}

  rehype-sanitize@6.0.0:
    resolution: {integrity: sha512-CsnhKNsyI8Tub6L4sm5ZFsme4puGfc6pYylvXo1AeqaGbjOYyzNv3qZPwvs0oMJ39eryyeOdmxwUIo94IpEhqg==}

  rehype-stringify@10.0.1:
    resolution: {integrity: sha512-k9ecfXHmIPuFVI61B9DeLPN0qFHfawM6RsuX48hoqlaKSF61RskNjSm1lI8PhBEM0MRdLxVVm4WmTqJQccH9mA==}

  remark-frontmatter@5.0.0:
    resolution: {integrity: sha512-XTFYvNASMe5iPN0719nPrdItC9aU0ssC4v14mH1BCi1u0n1gAocqcujWUrByftZTbLhRtiKRyjYTSIOcr69UVQ==}

  remark-gfm@4.0.1:
    resolution: {integrity: sha512-1quofZ2RQ9EWdeN34S79+KExV1764+wCUGop5CPL1WGdD0ocPpu91lzPGbwWMECpEpd42kJGQwzRfyov9j4yNg==}

  remark-math@6.0.0:
    resolution: {integrity: sha512-MMqgnP74Igy+S3WwnhQ7kqGlEerTETXMvJhrUzDikVZ2/uogJCb+WHUg97hK9/jcfc0dkD73s3LN8zU49cTEtA==}

  remark-mdx-frontmatter@4.0.0:
    resolution: {integrity: sha512-PZzAiDGOEfv1Ua7exQ8S5kKxkD8CDaSb4nM+1Mprs6u8dyvQifakh+kCj6NovfGXW+bTvrhjaR3srzjS2qJHKg==}

  remark-mdx@3.1.0:
    resolution: {integrity: sha512-Ngl/H3YXyBV9RcRNdlYsZujAmhsxwzxpDzpDEhFBVAGthS4GDgnctpDjgFl/ULx5UEDzqtW1cyBSNKqYYrqLBA==}

  remark-parse@11.0.0:
    resolution: {integrity: sha512-FCxlKLNGknS5ba/1lmpYijMUzX2esxW5xQqjWxw2eHFfS2MSdaHVINFmhjo+qN1WhZhNimq0dZATN9pH0IDrpA==}

  remark-rehype@11.1.2:
    resolution: {integrity: sha512-Dh7l57ianaEoIpzbp0PC9UKAdCSVklD8E5Rpw7ETfbTl3FqcOOgq5q2LVDhgGCkaBv7p24JXikPdvhhmHvKMsw==}

  remark-stringify@11.0.0:
    resolution: {integrity: sha512-1OSmLd3awB/t8qdoEOMazZkNsfVTeY4fTsgzcQFdXNq8ToTN4ZGwrMnlda4K6smTFKD+GRV6O48i6Z4iKgPPpw==}

  remark@15.0.1:
    resolution: {integrity: sha512-Eht5w30ruCXgFmxVUSlNWQ9iiimq07URKeFS3hNc8cUWy1llX4KDWfyEDZRycMc+znsN9Ux5/tJ/BFdgdOwA3A==}

  remove-trailing-separator@1.1.0:
    resolution: {integrity: sha512-/hS+Y0u3aOfIETiaiirUFwDBDzmXPvO+jAfKTitUngIPzdKc6Z0LoFjM/CK5PL4C+eKwHohlHAb6H0VFfmmUsw==}

  require-directory@2.1.1:
    resolution: {integrity: sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==}
    engines: {node: '>=0.10.0'}

  require-from-string@2.0.2:
    resolution: {integrity: sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==}
    engines: {node: '>=0.10.0'}

  require-package-name@2.0.1:
    resolution: {integrity: sha512-uuoJ1hU/k6M0779t3VMVIYpb2VMJk05cehCaABFhXaibcbvfgR8wKiozLjVFSzJPmQMRqIcO0HMyTFqfV09V6Q==}

  requires-port@1.0.0:
    resolution: {integrity: sha512-KigOCHcocU3XODJxsu8i/j8T9tzT4adHiecwORRQ0ZZFcp7ahwXuRU1m+yuO90C5ZUyGeGfocHDI14M3L3yDAQ==}

  resolve-from@4.0.0:
    resolution: {integrity: sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==}
    engines: {node: '>=4'}

  resolve-from@5.0.0:
    resolution: {integrity: sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==}
    engines: {node: '>=8'}

  resolve-pkg-maps@1.0.0:
    resolution: {integrity: sha512-seS2Tj26TBVOC2NIc2rOe2y2ZO7efxITtLZcGSOnHHNOQ7CkiUBfw0Iw2ck6xkIhPwLhKNLS8BO+hEpngQlqzw==}

  resolve@1.22.10:
    resolution: {integrity: sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==}
    engines: {node: '>= 0.4'}
    hasBin: true

  resolve@2.0.0-next.5:
    resolution: {integrity: sha512-U7WjGVG9sH8tvjW5SmGbQuui75FiyjAX72HX15DwBBwF9dNiQZRQAg9nnPhYy+TUnE0+VcrttuvNI8oSxZcocA==}
    hasBin: true

  retry@0.12.0:
    resolution: {integrity: sha512-9LkiTwjUh6rT555DtE9rTX+BKByPfrMzEAtnlEtdEwr3Nkffwiihqe2bWADg+OQRjt9gl6ICdmB/ZFDCGAtSow==}
    engines: {node: '>= 4'}

  reusify@1.1.0:
    resolution: {integrity: sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==}
    engines: {iojs: '>=1.0.0', node: '>=0.10.0'}

  rimraf@6.0.1:
    resolution: {integrity: sha512-9dkvaxAsk/xNXSJzMgFqqMCuFgt2+KsOFek3TMLfo8NCPfWpBmqwyNn5Y+NX56QUYfCtsyhF3ayiboEoUmJk/A==}
    engines: {node: 20 || >=22}
    hasBin: true

  robust-predicates@3.0.2:
    resolution: {integrity: sha512-IXgzBWvWQwE6PrDI05OvmXUIruQTcoMDzRsOd5CDvHCVLcLHMTSYvOK5Cm46kWqlV3yAbuSpBZdJ5oP5OUoStg==}

  rollup-plugin-visualizer@6.0.3:
    resolution: {integrity: sha512-ZU41GwrkDcCpVoffviuM9Clwjy5fcUxlz0oMoTXTYsK+tcIFzbdacnrr2n8TXcHxbGKKXtOdjxM2HUS4HjkwIw==}
    engines: {node: '>=18'}
    hasBin: true
    peerDependencies:
      rolldown: 1.x || ^1.0.0-beta
      rollup: 2.x || 3.x || 4.x
    peerDependenciesMeta:
      rolldown:
        optional: true
      rollup:
        optional: true

  rollup@4.44.2:
    resolution: {integrity: sha512-PVoapzTwSEcelaWGth3uR66u7ZRo6qhPHc0f2uRO9fX6XDVNrIiGYS0Pj9+R8yIIYSD/mCx2b16Ws9itljKSPg==}
    engines: {node: '>=18.0.0', npm: '>=8.0.0'}
    hasBin: true

  roughjs@4.6.6:
    resolution: {integrity: sha512-ZUz/69+SYpFN/g/lUlo2FXcIjRkSu3nDarreVdGGndHEBJ6cXPdKguS8JGxwj5HA5xIbVKSmLgr5b3AWxtRfvQ==}

  run-parallel@1.2.0:
    resolution: {integrity: sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==}

  rw@1.3.3:
    resolution: {integrity: sha512-PdhdWy89SiZogBLaw42zdeqtRJ//zFd2PgQavcICDUgJT5oW10QCRKbJ6bg4r0/UY2M6BWd5tkxuGFRvCkgfHQ==}

  rxjs@7.8.2:
    resolution: {integrity: sha512-dhKf903U/PQZY6boNNtAGdWbG85WAbjT/1xYoZIC7FAY0yWapOBQVsVrDl58W86//e1VpMNBtRV4MaXfdMySFA==}

  s.color@0.0.15:
    resolution: {integrity: sha512-AUNrbEUHeKY8XsYr/DYpl+qk5+aM+DChopnWOPEzn8YKzOhv4l2zH6LzZms3tOZP3wwdOyc0RmTciyi46HLIuA==}

  safe-array-concat@1.1.3:
    resolution: {integrity: sha512-AURm5f0jYEOydBj7VQlVvDrjeFgthDdEF5H1dP+6mNpoXOMo1quQqJ4wvJDyRZ9+pO3kGWoOdmV08cSv2aJV6Q==}
    engines: {node: '>=0.4'}

  safe-buffer@5.1.2:
    resolution: {integrity: sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==}

  safe-buffer@5.2.1:
    resolution: {integrity: sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==}

  safe-push-apply@1.0.0:
    resolution: {integrity: sha512-iKE9w/Z7xCzUMIZqdBsp6pEQvwuEebH4vdpjcDWnyzaI6yl6O9FHvVpmGelvEHNsoY6wGblkxR6Zty/h00WiSA==}
    engines: {node: '>= 0.4'}

  safe-regex-test@1.1.0:
    resolution: {integrity: sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==}
    engines: {node: '>= 0.4'}

  safe-stable-stringify@2.5.0:
    resolution: {integrity: sha512-b3rppTKm9T+PsVCBEOUR46GWI7fdOs00VKZ1+9c1EWDaDMvjQc6tUwuFyIprgGgTcWoVHSKrU8H31ZHA2e0RHA==}
    engines: {node: '>=10'}

  safer-buffer@2.1.2:
    resolution: {integrity: sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==}

  sass-formatter@0.7.9:
    resolution: {integrity: sha512-CWZ8XiSim+fJVG0cFLStwDvft1VI7uvXdCNJYXhDvowiv+DsbD1nXLiQ4zrE5UBvj5DWZJ93cwN0NX5PMsr1Pw==}

  sax@1.4.1:
    resolution: {integrity: sha512-+aWOz7yVScEGoKNd4PA10LZ8sk0A/z5+nXQG5giUO5rprX9jgYsTdov9qCchZiPIZezbZH+jRut8nPodFAX4Jg==}

  scheduler@0.26.0:
    resolution: {integrity: sha512-NlHwttCI/l5gCPR3D1nNXtWABUmBwvZpEQiD4IXSbIDq8BzLIK/7Ir5gTFSGZDUu37K5cMNp0hFtzO38sC7gWA==}

  schema-utils@4.3.2:
    resolution: {integrity: sha512-Gn/JaSk/Mt9gYubxTtSn/QCV4em9mpAPiR1rqy/Ocu19u/G9J5WWdNoUT4SiV6mFC3y6cxyFcFwdzPM3FgxGAQ==}
    engines: {node: '>= 10.13.0'}

  scroll-into-view-if-needed@3.1.0:
    resolution: {integrity: sha512-49oNpRjWRvnU8NyGVmUaYG4jtTkNonFZI86MmGRDqBphEK2EXT9gdEUoQPZhuBM8yWHxCWbobltqYO5M4XrUvQ==}

  scule@1.3.0:
    resolution: {integrity: sha512-6FtHJEvt+pVMIB9IBY+IcCJ6Z5f1iQnytgyfKMhDKgmzYG+TeH/wx1y3l27rshSbLiSanrR9ffZDrEsmjlQF2g==}

  section-matter@1.0.0:
    resolution: {integrity: sha512-vfD3pmTzGpufjScBh50YHKzEu2lxBWhVEHsNGoEXmCmn2hKGfeNLYMzCJpe8cD7gqX7TJluOVpBkAequ6dgMmA==}
    engines: {node: '>=4'}

  secure-json-parse@2.7.0:
    resolution: {integrity: sha512-6aU+Rwsezw7VR8/nyvKTx8QpWH9FrcYiXXlqC4z5d5XQBDRqtbfsRjnwGyqbi3gddNtWHuEk9OANUotL26qKUw==}

  semver@6.3.1:
    resolution: {integrity: sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==}
    hasBin: true

  semver@7.7.2:
    resolution: {integrity: sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==}
    engines: {node: '>=10'}
    hasBin: true

  send@0.19.0:
    resolution: {integrity: sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==}
    engines: {node: '>= 0.8.0'}

  send@1.2.0:
    resolution: {integrity: sha512-uaW0WwXKpL9blXE2o0bRhoL2EGXIrZxQ2ZQ4mgcfoBxdFmQold+qWsD2jLrfZ0trjKL6vOw0j//eAwcALFjKSw==}
    engines: {node: '>= 18'}

  serialize-javascript@6.0.2:
    resolution: {integrity: sha512-Saa1xPByTTq2gdeFZYLLo+RFE35NHZkAbqZeWNd3BpzppeVisAqpDjcp8dyf6uIvEqJRd46jemmyA4iFIeVk8g==}

  seroval-plugins@1.3.2:
    resolution: {integrity: sha512-0QvCV2lM3aj/U3YozDiVwx9zpH0q8A60CTWIv4Jszj/givcudPb48B+rkU5D51NJ0pTpweGMttHjboPa9/zoIQ==}
    engines: {node: '>=10'}
    peerDependencies:
      seroval: ^1.0

  seroval@1.3.2:
    resolution: {integrity: sha512-RbcPH1n5cfwKrru7v7+zrZvjLurgHhGyso3HTyGtRivGWgYjbOmGuivCQaORNELjNONoK35nj28EoWul9sb1zQ==}
    engines: {node: '>=10'}

  serve-placeholder@2.0.2:
    resolution: {integrity: sha512-/TMG8SboeiQbZJWRlfTCqMs2DD3SZgWp0kDQePz9yUuCnDfDh/92gf7/PxGhzXTKBIPASIHxFcZndoNbp6QOLQ==}

  serve-static@1.16.2:
    resolution: {integrity: sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==}
    engines: {node: '>= 0.8.0'}

  serve-static@2.2.0:
    resolution: {integrity: sha512-61g9pCh0Vnh7IutZjtLGGpTA355+OPn2TyDv/6ivP2h/AdAVX9azsoxmg2/M6nZeQZNYBEwIcsne1mJd9oQItQ==}
    engines: {node: '>= 18'}

  set-cookie-parser@2.7.1:
    resolution: {integrity: sha512-IOc8uWeOZgnb3ptbCURJWNjWUPcO3ZnTTdzsurqERrP6nPyv+paC55vJM0LpOlT2ne+Ix+9+CRG1MNLlyZ4GjQ==}

  set-function-length@1.2.2:
    resolution: {integrity: sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==}
    engines: {node: '>= 0.4'}

  set-function-name@2.0.2:
    resolution: {integrity: sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==}
    engines: {node: '>= 0.4'}

  set-proto@1.0.0:
    resolution: {integrity: sha512-RJRdvCo6IAnPdsvP/7m6bsQqNnn1FCBX5ZNtFL98MmFF/4xAIJTIg1YbHW5DC2W5SKZanrC6i4HsJqlajw/dZw==}
    engines: {node: '>= 0.4'}

  setprototypeof@1.2.0:
    resolution: {integrity: sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==}

  sharp@0.34.3:
    resolution: {integrity: sha512-eX2IQ6nFohW4DbvHIOLRB3MHFpYqaqvXd3Tp5e/T/dSH83fxaNJQRvDMhASmkNTsNTVF2/OOopzRCt7xokgPfg==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}

  shebang-command@2.0.0:
    resolution: {integrity: sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==}
    engines: {node: '>=8'}

  shebang-regex@3.0.0:
    resolution: {integrity: sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==}
    engines: {node: '>=8'}

  shell-quote@1.8.3:
    resolution: {integrity: sha512-ObmnIF4hXNg1BqhnHmgbDETF8dLPCggZWBjkQfhZpbszZnYur5DUljTcCHii5LC3J5E0yeO/1LIMyH+UvHQgyw==}
    engines: {node: '>= 0.4'}

  shiki@3.7.0:
    resolution: {integrity: sha512-ZcI4UT9n6N2pDuM2n3Jbk0sR4Swzq43nLPgS/4h0E3B/NrFn2HKElrDtceSf8Zx/OWYOo7G1SAtBLypCp+YXqg==}

  side-channel-list@1.0.0:
    resolution: {integrity: sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==}
    engines: {node: '>= 0.4'}

  side-channel-map@1.0.1:
    resolution: {integrity: sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==}
    engines: {node: '>= 0.4'}

  side-channel-weakmap@1.0.2:
    resolution: {integrity: sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==}
    engines: {node: '>= 0.4'}

  side-channel@1.1.0:
    resolution: {integrity: sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==}
    engines: {node: '>= 0.4'}

  siginfo@2.0.0:
    resolution: {integrity: sha512-ybx0WO1/8bSBLEWXZvEd7gMW3Sn3JFlW3TvX1nREbDLRNQNaeNN8WK0meBwPdAaOI7TtRRRJn/Es1zhrrCHu7g==}

  signal-exit@4.1.0:
    resolution: {integrity: sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==}
    engines: {node: '>=14'}

  simple-swizzle@0.2.2:
    resolution: {integrity: sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==}

  sirv@2.0.4:
    resolution: {integrity: sha512-94Bdh3cC2PKrbgSOUqTiGPWVZeSiXfKOVZNJniWoqrWrRkB1CJzBU3NEbiTsPcYy1lDsANA/THzS+9WBiy5nfQ==}
    engines: {node: '>= 10'}

  sisteransi@1.0.5:
    resolution: {integrity: sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==}

  slash@3.0.0:
    resolution: {integrity: sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==}
    engines: {node: '>=8'}

  slash@5.1.0:
    resolution: {integrity: sha512-ZA6oR3T/pEyuqwMgAKT0/hAv8oAXckzbkmR0UkUosQ+Mc4RxGoJkRmwHgHufaenlyAgE1Mxgpdcrf75y6XcnDg==}
    engines: {node: '>=14.16'}

  smob@1.5.0:
    resolution: {integrity: sha512-g6T+p7QO8npa+/hNx9ohv1E5pVCmWrVCUzUXJyLdMmftX6ER0oiWY/w9knEonLpnOp6b6FenKnMfR8gqwWdwig==}

  solid-js@1.9.7:
    resolution: {integrity: sha512-/saTKi8iWEM233n5OSi1YHCCuh66ZIQ7aK2hsToPe4tqGm7qAejU1SwNuTPivbWAYq7SjuHVVYxxuZQNRbICiw==}

  source-map-js@1.2.1:
    resolution: {integrity: sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==}
    engines: {node: '>=0.10.0'}

  source-map-support@0.5.21:
    resolution: {integrity: sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==}

  source-map@0.5.7:
    resolution: {integrity: sha512-LbrmJOMUSdEVxIKvdcJzQC+nQhe8FUZQTXQy6+I75skNgn3OoQ0DZA8YnFa7gp8tqtL3KPf1kmo0R5DoApeSGQ==}
    engines: {node: '>=0.10.0'}

  source-map@0.6.1:
    resolution: {integrity: sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==}
    engines: {node: '>=0.10.0'}

  source-map@0.7.4:
    resolution: {integrity: sha512-l3BikUxvPOcn5E74dZiq5BGsTb5yEwhaTSzccU6t4sDOH8NWJCstKO5QT2CvtFoK6F0saL7p9xHAqHOlCPJygA==}
    engines: {node: '>= 8'}

  source-map@0.8.0-beta.0:
    resolution: {integrity: sha512-2ymg6oRBpebeZi9UUNsgQ89bhx01TcTkmNTGnNO88imTmbSgy4nfujrgVEFKWpMTEGA11EDkTt7mqObTPdigIA==}
    engines: {node: '>= 8'}

  space-separated-tokens@2.0.2:
    resolution: {integrity: sha512-PEGlAwrG8yXGXRjW32fGbg66JAlOAwbObuqVoJpv/mRgoWDQfgH1wDPvtzWyUSNAXBGSk8h755YDbbcEy3SH2Q==}

  spawndamnit@3.0.1:
    resolution: {integrity: sha512-MmnduQUuHCoFckZoWnXsTg7JaiLBJrKFj9UI2MbRPGaJeVpsLcVBu6P/IGZovziM/YBsellCmsprgNA+w0CzVg==}

  spdx-correct@3.2.0:
    resolution: {integrity: sha512-kN9dJbvnySHULIluDHy32WHRUu3Og7B9sbY7tsFLctQkIqnMh3hErYgdMjTYuqmcXX+lK5T1lnUt3G7zNswmZA==}

  spdx-exceptions@2.5.0:
    resolution: {integrity: sha512-PiU42r+xO4UbUS1buo3LPJkjlO7430Xn5SVAhdpzzsPHsjbYVflnnFdATgabnLude+Cqu25p6N+g2lw/PFsa4w==}

  spdx-expression-parse@3.0.1:
    resolution: {integrity: sha512-cbqHunsQWnJNE6KhVSMsMeH5H/L9EpymbzqTQ3uLwNCLZ1Q481oWaofqH7nO6V07xlXwY6PhQdQ2IedWx/ZK4Q==}

  spdx-license-ids@3.0.21:
    resolution: {integrity: sha512-Bvg/8F5XephndSK3JffaRqdT+gyhfqIPwDHpX80tJrF8QQRYMo8sNMeaZ2Dp5+jhwKnUmIOyFFQfHRkjJm5nXg==}

  sprintf-js@1.0.3:
    resolution: {integrity: sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==}

  stack-trace@0.0.10:
    resolution: {integrity: sha512-KGzahc7puUKkzyMt+IqAep+TVNbKP+k2Lmwhub39m1AsTSkaDutx56aDCo+HLDzf/D26BIHTJWNiTG1KAJiQCg==}

  stackback@0.0.2:
    resolution: {integrity: sha512-1XMJE5fQo1jGH6Y/7ebnwPOBEkIEnT4QF32d5R1+VXdXveM0IBMJt8zfaxX1P3QhVwrYe+576+jkANtSS2mBbw==}

  standard-as-callback@2.1.0:
    resolution: {integrity: sha512-qoRRSyROncaz1z0mvYqIE4lCd9p2R90i6GxW3uZv5ucSu8tU7B5HXUP1gG8pVZsYNVaXjk8ClXHPttLyxAL48A==}

  statuses@2.0.1:
    resolution: {integrity: sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==}
    engines: {node: '>= 0.8'}

  statuses@2.0.2:
    resolution: {integrity: sha512-DvEy55V3DB7uknRo+4iOGT5fP1slR8wQohVdknigZPMpMstaKJQWhwiYBACJE3Ul2pTnATihhBYnRhZQHGBiRw==}
    engines: {node: '>= 0.8'}

  std-env@3.9.0:
    resolution: {integrity: sha512-UGvjygr6F6tpH7o2qyqR6QYpwraIjKSdtzyBdyytFOHmPZY917kwdwLG0RbOjWOnKmnm3PeHjaoLLMie7kPLQw==}

  streamsearch@1.1.0:
    resolution: {integrity: sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==}
    engines: {node: '>=10.0.0'}

  streamx@2.22.1:
    resolution: {integrity: sha512-znKXEBxfatz2GBNK02kRnCXjV+AA4kjZIUxeWSr3UGirZMJfTE9uiwKHobnbgxWyL/JWro8tTq+vOqAK1/qbSA==}

  string-width@4.2.3:
    resolution: {integrity: sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==}
    engines: {node: '>=8'}

  string-width@5.1.2:
    resolution: {integrity: sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==}
    engines: {node: '>=12'}

  string-width@7.2.0:
    resolution: {integrity: sha512-tsaTIkKW9b4N+AEj+SVA+WhJzV7/zMhcSu78mLKWSk7cXMOSHsBKFWUs0fWwq8QyK3MgJBQRX6Gbi4kYbdvGkQ==}
    engines: {node: '>=18'}

  string.prototype.matchall@4.0.12:
    resolution: {integrity: sha512-6CC9uyBL+/48dYizRf7H7VAYCMCNTBeM78x/VTUe9bFEaxBepPJDa1Ow99LqI/1yF7kuy7Q3cQsYMrcjGUcskA==}
    engines: {node: '>= 0.4'}

  string.prototype.repeat@1.0.0:
    resolution: {integrity: sha512-0u/TldDbKD8bFCQ/4f5+mNRrXwZ8hg2w7ZR8wa16e8z9XpePWl3eGEcUD0OXpEH/VJH/2G3gjUtR3ZOiBe2S/w==}

  string.prototype.trim@1.2.10:
    resolution: {integrity: sha512-Rs66F0P/1kedk5lyYyH9uBzuiI/kNRmwJAR9quK6VOtIpZ2G+hMZd+HQbbv25MgCA6gEffoMZYxlTod4WcdrKA==}
    engines: {node: '>= 0.4'}

  string.prototype.trimend@1.0.9:
    resolution: {integrity: sha512-G7Ok5C6E/j4SGfyLCloXTrngQIQU3PWtXGst3yM7Bea9FRURf1S42ZHlZZtsNque2FN2PoUhfZXYLNWwEr4dLQ==}
    engines: {node: '>= 0.4'}

  string.prototype.trimstart@1.0.8:
    resolution: {integrity: sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==}
    engines: {node: '>= 0.4'}

  string_decoder@1.1.1:
    resolution: {integrity: sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==}

  string_decoder@1.3.0:
    resolution: {integrity: sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==}

  stringify-entities@4.0.4:
    resolution: {integrity: sha512-IwfBptatlO+QCJUo19AqvrPNqlVMpW9YEL2LIVY+Rpv2qsjCGxaDLNRgeGsQWJhfItebuJhsGSLjaBbNSQ+ieg==}

  stringify-object@5.0.0:
    resolution: {integrity: sha512-zaJYxz2FtcMb4f+g60KsRNFOpVMUyuJgA51Zi5Z1DOTC3S59+OQiVOzE9GZt0x72uBGWKsQIuBKeF9iusmKFsg==}
    engines: {node: '>=14.16'}

  strip-ansi@6.0.1:
    resolution: {integrity: sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==}
    engines: {node: '>=8'}

  strip-ansi@7.1.0:
    resolution: {integrity: sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==}
    engines: {node: '>=12'}

  strip-bom-string@1.0.0:
    resolution: {integrity: sha512-uCC2VHvQRYu+lMh4My/sFNmF2klFymLX1wHJeXnbEJERpV/ZsVuonzerjfrGpIGF7LBVa1O7i9kjiWvJiFck8g==}
    engines: {node: '>=0.10.0'}

  strip-bom@3.0.0:
    resolution: {integrity: sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==}
    engines: {node: '>=4'}

  strip-final-newline@3.0.0:
    resolution: {integrity: sha512-dOESqjYr96iWYylGObzd39EuNTa5VJxyvVAEm5Jnh7KGo75V43Hk1odPQkNDyXNmUR6k+gEiDVXnjB8HJ3crXw==}
    engines: {node: '>=12'}

  strip-json-comments@3.1.1:
    resolution: {integrity: sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==}
    engines: {node: '>=8'}

  strip-literal@3.0.0:
    resolution: {integrity: sha512-TcccoMhJOM3OebGhSBEmp3UZ2SfDMZUEBdRA/9ynfLi8yYajyWX3JiXArcJt4Umh4vISpspkQIY8ZZoCqjbviA==}

  strnum@1.1.2:
    resolution: {integrity: sha512-vrN+B7DBIoTTZjnPNewwhx6cBA/H+IS7rfW68n7XxC1y7uoiGQBxaKzqucGUgavX15dJgiGztLJ8vxuEzwqBdA==}

  style-mod@4.1.2:
    resolution: {integrity: sha512-wnD1HyVqpJUI2+eKZ+eo1UwghftP6yuFheBqqe+bWCotBjC2K1YnteJILRMs3SM4V/0dLEW1SC27MWP5y+mwmw==}

  style-to-js@1.1.16:
    resolution: {integrity: sha512-/Q6ld50hKYPH3d/r6nr117TZkHR0w0kGGIVfpG9N6D8NymRPM9RqCUv4pRpJ62E5DqOYx2AFpbZMyCPnjQCnOw==}

  style-to-object@1.0.8:
    resolution: {integrity: sha512-xT47I/Eo0rwJmaXC4oilDGDWLohVhR6o/xAQcPQN8q6QBuZVL8qMYL85kLmST5cPjAorwvqIA4qXTRQoYHaL6g==}

  styled-jsx@5.1.6:
    resolution: {integrity: sha512-qSVyDTeMotdvQYoHWLNGwRFJHC+i+ZvdBRYosOFgC+Wg1vx4frN2/RG/NA7SYqqvKNLf39P2LSRA2pu6n0XYZA==}
    engines: {node: '>= 12.0.0'}
    peerDependencies:
      '@babel/core': '*'
      babel-plugin-macros: '*'
      react: '>= 16.8.0 || 17.x.x || ^18.0.0-0 || ^19.0.0-0'
    peerDependenciesMeta:
      '@babel/core':
        optional: true
      babel-plugin-macros:
        optional: true

  stylis@4.2.0:
    resolution: {integrity: sha512-Orov6g6BB1sDfYgzWfTHDOxamtX1bE/zo104Dh9e6fqJ3PooipYyfJ0pUmrZO2wAvO8YbEyeFrkV91XTsGMSrw==}

  stylis@4.3.6:
    resolution: {integrity: sha512-yQ3rwFWRfwNUY7H5vpU0wfdkNSnvnJinhF9830Swlaxl03zsOjCfmX0ugac+3LtK0lYSgwL/KXc8oYL3mG4YFQ==}

  sucrase@3.35.0:
    resolution: {integrity: sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==}
    engines: {node: '>=16 || 14 >=14.17'}
    hasBin: true

  suf-log@2.5.3:
    resolution: {integrity: sha512-KvC8OPjzdNOe+xQ4XWJV2whQA0aM1kGVczMQ8+dStAO6KfEB140JEVQ9dE76ONZ0/Ylf67ni4tILPJB41U0eow==}

  supports-color@10.0.0:
    resolution: {integrity: sha512-HRVVSbCCMbj7/kdWF9Q+bbckjBHLtHMEoJWlkmYzzdwhYMkjkOwubLM6t7NbWKjgKamGDrWL1++KrjUO1t9oAQ==}
    engines: {node: '>=18'}

  supports-color@7.2.0:
    resolution: {integrity: sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==}
    engines: {node: '>=8'}

  supports-color@8.1.1:
    resolution: {integrity: sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==}
    engines: {node: '>=10'}

  supports-preserve-symlinks-flag@1.0.0:
    resolution: {integrity: sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==}
    engines: {node: '>= 0.4'}

  swr@2.3.3:
    resolution: {integrity: sha512-dshNvs3ExOqtZ6kJBaAsabhPdHyeY4P2cKwRCniDVifBMoG/SVI7tfLWqPXriVspf2Rg4tPzXJTnwaihIeFw2A==}
    peerDependencies:
      react: ^16.11.0 || ^17.0.0 || ^18.0.0 || ^19.0.0

  system-architecture@0.1.0:
    resolution: {integrity: sha512-ulAk51I9UVUyJgxlv9M6lFot2WP3e7t8Kz9+IS6D4rVba1tR9kON+Ey69f+1R4Q8cd45Lod6a4IcJIxnzGc/zA==}
    engines: {node: '>=18'}

  tabbable@6.2.0:
    resolution: {integrity: sha512-Cat63mxsVJlzYvN51JmVXIgNoUokrIaT2zLclCXjRd8boZ0004U4KCs/sToJ75C6sdlByWxpYnb5Boif1VSFew==}

  tailwind-merge@2.6.0:
    resolution: {integrity: sha512-P+Vu1qXfzediirmHOC3xKGAYeZtPcV9g76X+xg2FD4tYgR71ewMA35Y3sCz3zhiN/dwefRpJX0yBcgwi1fXNQA==}

  tailwind-merge@3.3.1:
    resolution: {integrity: sha512-gBXpgUm/3rp1lMZZrM/w7D8GKqshif0zAymAhbCyIt8KMe+0v9DQ7cdYLR4FHH/cKpdTXb+A/tKKU3eolfsI+g==}

  tailwindcss-animate@1.0.7:
    resolution: {integrity: sha512-bl6mpH3T7I3UFxuvDEXLxy/VuFxBk5bbzplh7tXI68mwMokNYd1t9qPBHlnyTwfa4JGC4zP516I1hYYtQ/vspA==}
    peerDependencies:
      tailwindcss: '>=3.0.0 || insiders'

  tailwindcss@4.1.11:
    resolution: {integrity: sha512-2E9TBm6MDD/xKYe+dvJZAmg3yxIEDNRc0jwlNyDg/4Fil2QcSLjFKGVff0lAf1jjeaArlG/M75Ey/EYr/OJtBA==}

  tapable@2.2.2:
    resolution: {integrity: sha512-Re10+NauLTMCudc7T5WLFLAwDhQ0JWdrMK+9B2M8zR5hRExKmsRDCBA7/aV/pNJFltmBFO5BAMlQFi/vq3nKOg==}
    engines: {node: '>=6'}

  tar-stream@3.1.7:
    resolution: {integrity: sha512-qJj60CXt7IU1Ffyc3NJMjh6EkuCFej46zUqJ4J7pqYlThyd9bO0XBTmcOIhSzZJVWfsLks0+nle/j538YAW9RQ==}

  tar@7.4.3:
    resolution: {integrity: sha512-5S7Va8hKfV7W5U6g3aYxXmlPoZVAwUMy9AOKyF2fVuZa2UD3qZjg578OrLRt8PcNN1PleVaL/5/yYATNL0ICUw==}
    engines: {node: '>=18'}

  term-size@2.2.1:
    resolution: {integrity: sha512-wK0Ri4fOGjv/XPy8SBHZChl8CM7uMc5VML7SqiQ0zG7+J5Vr+RMQDoHa2CNT6KHUnTGIXH34UDMkPzAUyapBZg==}
    engines: {node: '>=8'}

  terser-webpack-plugin@5.3.14:
    resolution: {integrity: sha512-vkZjpUjb6OMS7dhV+tILUW6BhpDR7P2L/aQSAv+Uwk+m8KATX9EccViHTJR2qDtACKPIYndLGCyl3FMo+r2LMw==}
    engines: {node: '>= 10.13.0'}
    peerDependencies:
      '@swc/core': '*'
      esbuild: '*'
      uglify-js: '*'
      webpack: ^5.1.0
    peerDependenciesMeta:
      '@swc/core':
        optional: true
      esbuild:
        optional: true
      uglify-js:
        optional: true

  terser@5.43.1:
    resolution: {integrity: sha512-+6erLbBm0+LROX2sPXlUYx/ux5PyE9K/a92Wrt6oA+WDAoFTdpHE5tCYCI5PNzq2y8df4rA+QgHLJuR4jNymsg==}
    engines: {node: '>=10'}
    hasBin: true

  text-decoder@1.2.3:
    resolution: {integrity: sha512-3/o9z3X0X0fTupwsYvR03pJ/DjWuqqrfwBgTQzdWDiQSm9KitAyz/9WqsT2JQW7KV2m+bC2ol/zqpW37NHxLaA==}

  text-hex@1.0.0:
    resolution: {integrity: sha512-uuVGNWzgJ4yhRaNSiubPY7OjISw4sw4E5Uv0wbjp+OzcbmVU/rsT8ujgcXJhn9ypzsgr5vlzpPqP+MBBKcGvbg==}

  thenify-all@1.6.0:
    resolution: {integrity: sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==}
    engines: {node: '>=0.8'}

  thenify@3.3.1:
    resolution: {integrity: sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==}

  throttleit@2.1.0:
    resolution: {integrity: sha512-nt6AMGKW1p/70DF/hGBdJB57B8Tspmbp5gfJ8ilhLnt7kkr2ye7hzD6NVG8GGErk2HWF34igrL2CXmNIkzKqKw==}
    engines: {node: '>=18'}

  tiny-invariant@1.3.3:
    resolution: {integrity: sha512-+FbBPE1o9QAYvviau/qC5SE3caw21q3xkvWKBtja5vgqOWIHHJ3ioaq1VPfn/Szqctz2bU/oYeKd9/z5BL+PVg==}

  tiny-warning@1.0.3:
    resolution: {integrity: sha512-lBN9zLN/oAf68o3zNXYrdCt1kP8WsiGW8Oo2ka41b2IM5JL/S1CTyX1rW0mb/zSuJun0ZUrDxx4sqvYS2FWzPA==}

  tinybench@2.9.0:
    resolution: {integrity: sha512-0+DUvqWMValLmha6lr4kD8iAMK1HzV0/aKnCtWb9v9641TnP/MFb7Pc2bxoxQjTXAErryXVgUOfv2YqNllqGeg==}

  tinyexec@0.3.2:
    resolution: {integrity: sha512-KQQR9yN7R5+OSwaK0XQoj22pwHoTlgYqmUscPYoknOoWCWfj/5/ABTMRi69FrKU5ffPVh5QcFikpWJI/P1ocHA==}

  tinyexec@1.0.1:
    resolution: {integrity: sha512-5uC6DDlmeqiOwCPmK9jMSdOuZTh8bU39Ys6yidB+UTt5hfZUPGAypSgFRiEp+jbi9qH40BLDvy85jIU88wKSqw==}

  tinyglobby@0.2.14:
    resolution: {integrity: sha512-tX5e7OM1HnYr2+a2C/4V0htOcSQcoSTH9KgJnVvNm5zm/cyEWKJ7j7YutsH9CxMdtOkkLFy2AHrMci9IM8IPZQ==}
    engines: {node: '>=12.0.0'}

  tinypool@1.1.1:
    resolution: {integrity: sha512-Zba82s87IFq9A9XmjiX5uZA/ARWDrB03OHlq+Vw1fSdt0I+4/Kutwy8BP4Y/y/aORMo61FQ0vIb5j44vSo5Pkg==}
    engines: {node: ^18.0.0 || >=20.0.0}

  tinyrainbow@2.0.0:
    resolution: {integrity: sha512-op4nsTR47R6p0vMUUoYl/a+ljLFVtlfaXkLQmqfLR1qHma1h/ysYk4hEXZ880bf2CYgTskvTa/e196Vd5dDQXw==}
    engines: {node: '>=14.0.0'}

  tinyspy@4.0.3:
    resolution: {integrity: sha512-t2T/WLB2WRgZ9EpE4jgPJ9w+i66UZfDc8wHh0xrwiRNN+UwH98GIJkTeZqX9rg0i0ptwzqW+uYeIF0T4F8LR7A==}
    engines: {node: '>=14.0.0'}

  tippy.js@6.3.7:
    resolution: {integrity: sha512-E1d3oP2emgJ9dRQZdf3Kkn0qJgI6ZLpyS5z6ZkY1DF3kaQaBsGZsndEpHwx+eC+tYM41HaSNvNtLx8tU57FzTQ==}

  tmp-promise@3.0.3:
    resolution: {integrity: sha512-RwM7MoPojPxsOBYnyd2hy0bxtIlVrihNs9pj5SUvY8Zz1sQcQG2tG1hSr8PDxfgEB8RNKDhqbIlroIarSNDNsQ==}

  tmp@0.0.33:
    resolution: {integrity: sha512-jRCJlojKnZ3addtTOjdIqoRuPEKBvNXcGYqzO6zWZX8KfKEpnGY5jfggJQ3EjKuu8D4bJRr0y+cYJFmYbImXGw==}
    engines: {node: '>=0.6.0'}

  tmp@0.2.3:
    resolution: {integrity: sha512-nZD7m9iCPC5g0pYmcaxogYKggSfLsdxl8of3Q/oIbqCqLLIO9IAF0GWjX1z9NZRHPiXv8Wex4yDCaZsgEw0Y8w==}
    engines: {node: '>=14.14'}

  to-regex-range@5.0.1:
    resolution: {integrity: sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==}
    engines: {node: '>=8.0'}

  toad-cache@3.7.0:
    resolution: {integrity: sha512-/m8M+2BJUpoJdgAHoG+baCwBT+tf2VraSfkBgl0Y00qIWt41DJ8R5B8nsEw0I58YwF5IZH6z24/2TobDKnqSWw==}
    engines: {node: '>=12'}

  toidentifier@1.0.1:
    resolution: {integrity: sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==}
    engines: {node: '>=0.6'}

  toml@3.0.0:
    resolution: {integrity: sha512-y/mWCZinnvxjTKYhJ+pYxwD0mRLVvOtdS2Awbgxln6iEnt4rk0yBxeSBHkGJcPucRiG0e55mwWp+g/05rsrd6w==}

  totalist@3.0.1:
    resolution: {integrity: sha512-sf4i37nQ2LBx4m3wB74y+ubopq6W/dIzXg0FDGjsYnZHVa1Da8FH853wlL2gtUhg+xJXjfk3kUZS3BRoQeoQBQ==}
    engines: {node: '>=6'}

  tr46@0.0.3:
    resolution: {integrity: sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==}

  tr46@1.0.1:
    resolution: {integrity: sha512-dTpowEjclQ7Kgx5SdBkqRzVhERQXov8/l9Ft9dVM9fmg0W0KQSVaXX9T4i6twCPNtYiZM53lpSSUAwJbFPOHxA==}

  tree-kill@1.2.2:
    resolution: {integrity: sha512-L0Orpi8qGpRG//Nd+H90vFB+3iHnue1zSSGmNOOCh1GLJ7rUKVwV2HvijphGQS2UmhUZewS9VgvxYIdgr+fG1A==}
    hasBin: true

  trim-lines@3.0.1:
    resolution: {integrity: sha512-kRj8B+YHZCc9kQYdWfJB2/oUl9rA99qbowYYBtr4ui4mZyAQ2JpvVBd/6U2YloATfqBhBTSMhTpgBHtU0Mf3Rg==}

  triple-beam@1.4.1:
    resolution: {integrity: sha512-aZbgViZrg1QNcG+LULa7nhZpJTZSLm/mXnHXnbAbjmN5aSa0y7V+wvv6+4WaBtpISJzThKy+PIPxc1Nq1EJ9mg==}
    engines: {node: '>= 14.0.0'}

  trough@2.2.0:
    resolution: {integrity: sha512-tmMpK00BjZiUyVyvrBK7knerNgmgvcV/KLVyuma/SC+TQN167GrMRciANTz09+k3zW8L8t60jWO1GpfkZdjTaw==}

  ts-api-utils@2.1.0:
    resolution: {integrity: sha512-CUgTZL1irw8u29bzrOD/nH85jqyc74D6SshFgujOIA7osm2Rz7dYH77agkx7H4FBNxDq7Cjf+IjaX/8zwFW+ZQ==}
    engines: {node: '>=18.12'}
    peerDependencies:
      typescript: '>=4.8.4'

  ts-dedent@2.2.0:
    resolution: {integrity: sha512-q5W7tVM71e2xjHZTlgfTDoPF/SmqKG5hddq9SzR49CH2hayqRKJtQ4mtRlSxKaJlR/+9rEM+mnBHf7I2/BQcpQ==}
    engines: {node: '>=6.10'}

  ts-deepmerge@7.0.3:
    resolution: {integrity: sha512-Du/ZW2RfwV/D4cmA5rXafYjBQVuvu4qGiEEla4EmEHVHgRdx68Gftx7i66jn2bzHPwSVZY36Ae6OuDn9el4ZKA==}
    engines: {node: '>=14.13.1'}

  ts-interface-checker@0.1.13:
    resolution: {integrity: sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==}

  ts-morph@26.0.0:
    resolution: {integrity: sha512-ztMO++owQnz8c/gIENcM9XfCEzgoGphTv+nKpYNM1bgsdOVC/jRZuEBf6N+mLLDNg68Kl+GgUZfOySaRiG1/Ug==}

  tsc-alias@1.8.16:
    resolution: {integrity: sha512-QjCyu55NFyRSBAl6+MTFwplpFcnm2Pq01rR/uxfqJoLMm6X3O14KEGtaSDZpJYaE1bJBGDjD0eSuiIWPe2T58g==}
    engines: {node: '>=16.20.2'}
    hasBin: true

  tsconfck@3.1.5:
    resolution: {integrity: sha512-CLDfGgUp7XPswWnezWwsCRxNmgQjhYq3VXHM0/XIRxhVrKw0M1if9agzryh1QS3nxjCROvV+xWxoJO1YctzzWg==}
    engines: {node: ^18 || >=20}
    hasBin: true
    peerDependencies:
      typescript: ^5.0.0
    peerDependenciesMeta:
      typescript:
        optional: true

  tslib@2.8.1:
    resolution: {integrity: sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==}

  tsup@8.5.0:
    resolution: {integrity: sha512-VmBp77lWNQq6PfuMqCHD3xWl22vEoWsKajkF8t+yMBawlUS8JzEI+vOVMeuNZIuMML8qXRizFKi9oD5glKQVcQ==}
    engines: {node: '>=18'}
    hasBin: true
    peerDependencies:
      '@microsoft/api-extractor': ^7.36.0
      '@swc/core': ^1
      postcss: ^8.4.12
      typescript: '>=4.5.0'
    peerDependenciesMeta:
      '@microsoft/api-extractor':
        optional: true
      '@swc/core':
        optional: true
      postcss:
        optional: true
      typescript:
        optional: true

  tsx@4.20.3:
    resolution: {integrity: sha512-qjbnuR9Tr+FJOMBqJCW5ehvIo/buZq7vH7qD7JziU98h6l3qGy0a/yPFjwO+y0/T7GFpNgNAvEcPPVfyT8rrPQ==}
    engines: {node: '>=18.0.0'}
    hasBin: true

  turbo-darwin-64@2.5.4:
    resolution: {integrity: sha512-ah6YnH2dErojhFooxEzmvsoZQTMImaruZhFPfMKPBq8sb+hALRdvBNLqfc8NWlZq576FkfRZ/MSi4SHvVFT9PQ==}
    cpu: [x64]
    os: [darwin]

  turbo-darwin-arm64@2.5.4:
    resolution: {integrity: sha512-2+Nx6LAyuXw2MdXb7pxqle3MYignLvS7OwtsP9SgtSBaMlnNlxl9BovzqdYAgkUW3AsYiQMJ/wBRb7d+xemM5A==}
    cpu: [arm64]
    os: [darwin]

  turbo-linux-64@2.5.4:
    resolution: {integrity: sha512-5May2kjWbc8w4XxswGAl74GZ5eM4Gr6IiroqdLhXeXyfvWEdm2mFYCSWOzz0/z5cAgqyGidF1jt1qzUR8hTmOA==}
    cpu: [x64]
    os: [linux]

  turbo-linux-arm64@2.5.4:
    resolution: {integrity: sha512-/2yqFaS3TbfxV3P5yG2JUI79P7OUQKOUvAnx4MV9Bdz6jqHsHwc9WZPpO4QseQm+NvmgY6ICORnoVPODxGUiJg==}
    cpu: [arm64]
    os: [linux]

  turbo-windows-64@2.5.4:
    resolution: {integrity: sha512-EQUO4SmaCDhO6zYohxIjJpOKRN3wlfU7jMAj3CgcyTPvQR/UFLEKAYHqJOnJtymbQmiiM/ihX6c6W6Uq0yC7mA==}
    cpu: [x64]
    os: [win32]

  turbo-windows-arm64@2.5.4:
    resolution: {integrity: sha512-oQ8RrK1VS8lrxkLriotFq+PiF7iiGgkZtfLKF4DDKsmdbPo0O9R2mQxm7jHLuXraRCuIQDWMIw6dpcr7Iykf4A==}
    cpu: [arm64]
    os: [win32]

  turbo@2.5.4:
    resolution: {integrity: sha512-kc8ZibdRcuWUG1pbYSBFWqmIjynlD8Lp7IB6U3vIzvOv9VG+6Sp8bzyeBWE3Oi8XV5KsQrznyRTBPvrf99E4mA==}
    hasBin: true

  twoslash-protocol@0.3.2:
    resolution: {integrity: sha512-lWIL1dGcMr7cywSLSn8ufCoeyPab3bIwPE6DmAlQYQSMjJUgzzRvSz/LsQ179eNJafRghYDlIgF2v7pmsjV3Ww==}

  twoslash@0.3.2:
    resolution: {integrity: sha512-TB+ja888uMKhbng8HzpTHm+JfxIWbngIHPy4nKEt2N93MFjpqmkqn8ppnPhIKj4kDnrohEsiogMF7T1gMY06rw==}
    peerDependencies:
      typescript: ^5.5.0

  type-check@0.4.0:
    resolution: {integrity: sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==}
    engines: {node: '>= 0.8.0'}

  type-fest@4.41.0:
    resolution: {integrity: sha512-TeTSQ6H5YHvpqVwBRcnLDCBnDOHWYu7IvGbHT6N8AOymcr9PJGjc1GTtiWZTYg0NCgYwvnYWEkVChQAr9bjfwA==}
    engines: {node: '>=16'}

  type-is@1.6.18:
    resolution: {integrity: sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==}
    engines: {node: '>= 0.6'}

  typed-array-buffer@1.0.3:
    resolution: {integrity: sha512-nAYYwfY3qnzX30IkA6AQZjVbtK6duGontcQm1WSG1MD94YLqK0515GNApXkoxKOWMusVssAHWLh9SeaoefYFGw==}
    engines: {node: '>= 0.4'}

  typed-array-byte-length@1.0.3:
    resolution: {integrity: sha512-BaXgOuIxz8n8pIq3e7Atg/7s+DpiYrxn4vdot3w9KbnBhcRQq6o3xemQdIfynqSeXeDrF32x+WvfzmOjPiY9lg==}
    engines: {node: '>= 0.4'}

  typed-array-byte-offset@1.0.4:
    resolution: {integrity: sha512-bTlAFB/FBYMcuX81gbL4OcpH5PmlFHqlCCpAl8AlEzMz5k53oNDvN8p1PNOWLEmI2x4orp3raOFB51tv9X+MFQ==}
    engines: {node: '>= 0.4'}

  typed-array-length@1.0.7:
    resolution: {integrity: sha512-3KS2b+kL7fsuk/eJZ7EQdnEmQoaho/r6KUef7hxvltNA5DR8NAUM+8wJMbJyZ4G9/7i3v5zPBIMN5aybAh2/Jg==}
    engines: {node: '>= 0.4'}

  typedarray@0.0.6:
    resolution: {integrity: sha512-/aCDEGatGvZ2BIk+HmLf4ifCJFwvKFNb9/JeZPMulfgFracn9QFcAf5GO8B/mweUjSoblS5In0cWhqpfs/5PQA==}

  typescript-eslint@8.36.0:
    resolution: {integrity: sha512-fTCqxthY+h9QbEgSIBfL9iV6CvKDFuoxg6bHPNpJ9HIUzS+jy2lCEyCmGyZRWEBSaykqcDPf1SJ+BfCI8DRopA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^8.57.0 || ^9.0.0
      typescript: '>=4.8.4 <5.9.0'

  typescript@5.8.3:
    resolution: {integrity: sha512-p1diW6TqL9L07nNxvRMM7hMMw4c5XOo/1ibL4aAIGmSAt9slTE1Xgw5KWuof2uTOvCg9BY7ZRi+GaF+7sfgPeQ==}
    engines: {node: '>=14.17'}
    hasBin: true

  ufo@1.6.1:
    resolution: {integrity: sha512-9a4/uxlTWJ4+a5i0ooc1rU7C7YOw3wT+UGqdeNNHWnOF9qcMBgLRS+4IYUqbczewFx4mLEig6gawh7X6mFlEkA==}

  ultrahtml@1.6.0:
    resolution: {integrity: sha512-R9fBn90VTJrqqLDwyMph+HGne8eqY1iPfYhPzZrvKpIfwkWZbcYlfpsb8B9dTvBfpy1/hqAD7Wi8EKfP9e8zdw==}

  unbox-primitive@1.1.0:
    resolution: {integrity: sha512-nWJ91DjeOkej/TA8pXQ3myruKpKEYgqvpw9lz4OPHj/NWFNluYrjbz9j01CJ8yKQd2g4jFoOkINCTW2I5LEEyw==}
    engines: {node: '>= 0.4'}

  uncrypto@0.1.3:
    resolution: {integrity: sha512-Ql87qFHB3s/De2ClA9e0gsnS6zXG27SkTiSJwjCc9MebbfapQfuPzumMIUMi38ezPZVNFcHI9sUIepeQfw8J8Q==}

  unctx@2.4.1:
    resolution: {integrity: sha512-AbaYw0Nm4mK4qjhns67C+kgxR2YWiwlDBPzxrN8h8C6VtAdCgditAY5Dezu3IJy4XVqAnbrXt9oQJvsn3fyozg==}

  undici-types@5.28.4:
    resolution: {integrity: sha512-3OeMF5Lyowe8VW0skf5qaIE7Or3yS9LS7fvMUI0gg4YxpIBVg0L8BxCmROw2CcYhSkpR68Epz7CGc8MPj94Uww==}

  undici-types@6.21.0:
    resolution: {integrity: sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==}

  undici-types@7.8.0:
    resolution: {integrity: sha512-9UJ2xGDvQ43tYyVMpuHlsgApydB8ZKfVYTsLDhXkFL/6gfkp+U8xTGdh8pMJv1SpZna0zxG1DwsKZsreLbXBxw==}

  undici@7.11.0:
    resolution: {integrity: sha512-heTSIac3iLhsmZhUCjyS3JQEkZELateufzZuBaVM5RHXdSBMb1LPMQf5x+FH7qjsZYDP0ttAc3nnVpUB+wYbOg==}
    engines: {node: '>=20.18.1'}

  unenv@1.10.0:
    resolution: {integrity: sha512-wY5bskBQFL9n3Eca5XnhH6KbUo/tfvkwm9OpcdCvLaeA7piBNbavbOKJySEwQ1V0RH6HvNlSAFRTpvTqgKRQXQ==}

  unenv@2.0.0-rc.18:
    resolution: {integrity: sha512-O0oVQVJ2X3Q8H4HITJr4e2cWxMYBeZ+p8S25yoKCxVCgDWtIJDcgwWNonYz12tI3ylVQCRyPV/Bdq0KJeXo7AA==}

  unicorn-magic@0.1.0:
    resolution: {integrity: sha512-lRfVq8fE8gz6QMBuDM6a+LO3IAzTi05H6gCVaUpir2E1Rwpo4ZUog45KpNXKC/Mn3Yb9UDuHumeFTo9iV/D9FQ==}
    engines: {node: '>=18'}

  unicorn-magic@0.3.0:
    resolution: {integrity: sha512-+QBBXBCvifc56fsbuxZQ6Sic3wqqc3WWaqxs58gvJrcOuN83HGTCwz3oS5phzU9LthRNE9VrJCFCLUgHeeFnfA==}
    engines: {node: '>=18'}

  unified@11.0.5:
    resolution: {integrity: sha512-xKvGhPWw3k84Qjh8bI3ZeJjqnyadK+GEFtazSfZv/rKeTkTjOJho6mFqh2SM96iIcZokxiOpg78GazTSg8+KHA==}

  unimport@5.1.0:
    resolution: {integrity: sha512-wMmuG+wkzeHh2KCE6yiDlHmKelN8iE/maxkUYMbmrS6iV8+n6eP1TH3yKKlepuF4hrkepinEGmBXdfo9XZUvAw==}
    engines: {node: '>=18.12.0'}

  unist-util-find-after@5.0.0:
    resolution: {integrity: sha512-amQa0Ep2m6hE2g72AugUItjbuM8X8cGQnFoHk0pGfrFeT9GZhzN5SW8nRsiGKK7Aif4CrACPENkA6P/Lw6fHGQ==}

  unist-util-is@6.0.0:
    resolution: {integrity: sha512-2qCTHimwdxLfz+YzdGfkqNlH0tLi9xjTnHddPmJwtIG9MGsdbutfTc4P+haPD7l7Cjxf/WZj+we5qfVPvvxfYw==}

  unist-util-position-from-estree@2.0.0:
    resolution: {integrity: sha512-KaFVRjoqLyF6YXCbVLNad/eS4+OfPQQn2yOd7zF/h5T/CSL2v8NpN6a5TPvtbXthAGw5nG+PuTtq+DdIZr+cRQ==}

  unist-util-position@5.0.0:
    resolution: {integrity: sha512-fucsC7HjXvkB5R3kTCO7kUjRdrS0BJt3M/FPxmHMBOm8JQi2BsHAHFsy27E0EolP8rp0NzXsJ+jNPyDWvOJZPA==}

  unist-util-remove-position@5.0.0:
    resolution: {integrity: sha512-Hp5Kh3wLxv0PHj9m2yZhhLt58KzPtEYKQQ4yxfYFEO7EvHwzyDYnduhHnY1mDxoqr7VUwVuHXk9RXKIiYS1N8Q==}

  unist-util-stringify-position@4.0.0:
    resolution: {integrity: sha512-0ASV06AAoKCDkS2+xw5RXJywruurpbC4JZSm7nr7MOt1ojAzvyyaO+UxZf18j8FCF6kmzCZKcAgN/yu2gm2XgQ==}

  unist-util-visit-parents@6.0.1:
    resolution: {integrity: sha512-L/PqWzfTP9lzzEa6CKs0k2nARxTdZduw3zyh8d2NVBnsyvHjSX4TWse388YrrQKbvI8w20fGjGlhgT96WwKykw==}

  unist-util-visit@5.0.0:
    resolution: {integrity: sha512-MR04uvD+07cwl/yhVuVWAtw+3GOR/knlL55Nd/wAdblk27GCVt3lqpTivy/tkJcZoNPzTwS1Y+KMojlLDhoTzg==}

  universal-github-app-jwt@2.2.2:
    resolution: {integrity: sha512-dcmbeSrOdTnsjGjUfAlqNDJrhxXizjAz94ija9Qw8YkZ1uu0d+GoZzyH+Jb9tIIqvGsadUfwg+22k5aDqqwzbw==}

  universal-user-agent@7.0.3:
    resolution: {integrity: sha512-TmnEAEAsBJVZM/AADELsK76llnwcf9vMKuPz8JflO1frO8Lchitr0fNaN9d+Ap0BjKtqWqd/J17qeDnXh8CL2A==}

  universalify@0.1.2:
    resolution: {integrity: sha512-rBJeI5CXAlmy1pV+617WB9J63U6XcazHHF2f2dbJix4XzpUF0RS3Zbj0FGIOCAva5P/d/GBOYaACQ1w+0azUkg==}
    engines: {node: '>= 4.0.0'}

  unixify@1.0.0:
    resolution: {integrity: sha512-6bc58dPYhCMHHuwxldQxO3RRNZ4eCogZ/st++0+fcC1nr0jiGUtAdBJ2qzmLQWSxbtz42pWt4QQMiZ9HvZf5cg==}
    engines: {node: '>=0.10.0'}

  unpipe@1.0.0:
    resolution: {integrity: sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==}
    engines: {node: '>= 0.8'}

  unplugin-utils@0.2.4:
    resolution: {integrity: sha512-8U/MtpkPkkk3Atewj1+RcKIjb5WBimZ/WSLhhR3w6SsIj8XJuKTacSP8g+2JhfSGw0Cb125Y+2zA/IzJZDVbhA==}
    engines: {node: '>=18.12.0'}

  unplugin@1.16.1:
    resolution: {integrity: sha512-4/u/j4FrCKdi17jaxuJA0jClGxB1AvU2hw/IuayPc4ay1XGaJs/rbb4v5WKwAjNifjmXK9PIFyuPiaK8azyR9w==}
    engines: {node: '>=14.0.0'}

  unplugin@2.3.5:
    resolution: {integrity: sha512-RyWSb5AHmGtjjNQ6gIlA67sHOsWpsbWpwDokLwTcejVdOjEkJZh7QKu14J00gDDVSh8kGH4KYC/TNBceXFZhtw==}
    engines: {node: '>=18.12.0'}

  unstorage@1.16.0:
    resolution: {integrity: sha512-WQ37/H5A7LcRPWfYOrDa1Ys02xAbpPJq6q5GkO88FBXVSQzHd7+BjEwfRqyaSWCv9MbsJy058GWjjPjcJ16GGA==}
    peerDependencies:
      '@azure/app-configuration': ^1.8.0
      '@azure/cosmos': ^4.2.0
      '@azure/data-tables': ^13.3.0
      '@azure/identity': ^4.6.0
      '@azure/keyvault-secrets': ^4.9.0
      '@azure/storage-blob': ^12.26.0
      '@capacitor/preferences': ^6.0.3 || ^7.0.0
      '@deno/kv': '>=0.9.0'
      '@netlify/blobs': ^6.5.0 || ^7.0.0 || ^8.1.0
      '@planetscale/database': ^1.19.0
      '@upstash/redis': ^1.34.3
      '@vercel/blob': '>=0.27.1'
      '@vercel/kv': ^1.0.1
      aws4fetch: ^1.0.20
      db0: '>=0.2.1'
      idb-keyval: ^6.2.1
      ioredis: ^5.4.2
      uploadthing: ^7.4.4
    peerDependenciesMeta:
      '@azure/app-configuration':
        optional: true
      '@azure/cosmos':
        optional: true
      '@azure/data-tables':
        optional: true
      '@azure/identity':
        optional: true
      '@azure/keyvault-secrets':
        optional: true
      '@azure/storage-blob':
        optional: true
      '@capacitor/preferences':
        optional: true
      '@deno/kv':
        optional: true
      '@netlify/blobs':
        optional: true
      '@planetscale/database':
        optional: true
      '@upstash/redis':
        optional: true
      '@vercel/blob':
        optional: true
      '@vercel/kv':
        optional: true
      aws4fetch:
        optional: true
      db0:
        optional: true
      idb-keyval:
        optional: true
      ioredis:
        optional: true
      uploadthing:
        optional: true

  untun@0.1.3:
    resolution: {integrity: sha512-4luGP9LMYszMRZwsvyUd9MrxgEGZdZuZgpVQHEEX0lCYFESasVRvZd0EYpCkOIbJKHMuv0LskpXc/8Un+MJzEQ==}
    hasBin: true

  untyped@2.0.0:
    resolution: {integrity: sha512-nwNCjxJTjNuLCgFr42fEak5OcLuB3ecca+9ksPFNvtfYSLpjf+iJqSIaSnIile6ZPbKYxI5k2AfXqeopGudK/g==}
    hasBin: true

  unwasm@0.3.9:
    resolution: {integrity: sha512-LDxTx/2DkFURUd+BU1vUsF/moj0JsoTvl+2tcg2AUOiEzVturhGGx17/IMgGvKUYdZwr33EJHtChCJuhu9Ouvg==}

  update-browserslist-db@1.1.3:
    resolution: {integrity: sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==}
    hasBin: true
    peerDependencies:
      browserslist: '>= 4.21.0'

  uqr@0.1.2:
    resolution: {integrity: sha512-MJu7ypHq6QasgF5YRTjqscSzQp/W11zoUk6kvmlH+fmWEs63Y0Eib13hYFwAzagRJcVY8WVnlV+eBDUGMJ5IbA==}

  uri-js@4.4.1:
    resolution: {integrity: sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==}

  urlpattern-polyfill@10.1.0:
    resolution: {integrity: sha512-IGjKp/o0NL3Bso1PymYURCJxMPNAf/ILOpendP9f5B6e1rTJgdgiOvgfoT8VxCAdY+Wisb9uhGaJJf3yZ2V9nw==}

  urlpattern-polyfill@8.0.2:
    resolution: {integrity: sha512-Qp95D4TPJl1kC9SKigDcqgyM2VDVO4RiJc2d4qe5GrYm+zbIQCWWKAFaJNQ4BhdFeDGwBmAxqJBwWSJDb9T3BQ==}

  use-callback-ref@1.3.3:
    resolution: {integrity: sha512-jQL3lRnocaFtu3V00JToYz/4QkNWswxijDaCVNZRiRTO3HQDLsdu1ZtmIUvV4yPp+rvWm5j0y0TG/S61cuijTg==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  use-sidecar@1.1.3:
    resolution: {integrity: sha512-Fedw0aZvkhynoPYlA5WXrMCAMm+nSWdZt6lzJQ7Ok8S6Q+VsHmHpRWndVRJ8Be0ZbkfPc5LRYH+5XrzXcEeLRQ==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  use-sync-external-store@1.5.0:
    resolution: {integrity: sha512-Rb46I4cGGVBmjamjphe8L/UnvJD+uPPtTkNvX5mZgqdbavhI4EbgIWJiIHXJ8bc/i9EQGPRh4DwEURJ552Do0A==}
    peerDependencies:
      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0

  util-deprecate@1.0.2:
    resolution: {integrity: sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==}

  utils-merge@1.0.1:
    resolution: {integrity: sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==}
    engines: {node: '>= 0.4.0'}

  uuid@11.1.0:
    resolution: {integrity: sha512-0/A9rDy9P7cJ+8w1c9WD9V//9Wj15Ce2MPz8Ri6032usz+NfePxx5AcN3bN+r6ZL6jEo066/yNYB3tn4pQEx+A==}
    hasBin: true

  uuid@8.3.2:
    resolution: {integrity: sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==}
    hasBin: true

  uuid@9.0.1:
    resolution: {integrity: sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==}
    hasBin: true

  valibot@0.41.0:
    resolution: {integrity: sha512-igDBb8CTYr8YTQlOKgaN9nSS0Be7z+WRuaeYqGf3Cjz3aKmSnqEmYnkfVjzIuumGqfHpa3fLIvMEAfhrpqN8ng==}
    peerDependencies:
      typescript: '>=5'
    peerDependenciesMeta:
      typescript:
        optional: true

  validate-npm-package-license@3.0.4:
    resolution: {integrity: sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew==}

  validate-npm-package-name@5.0.1:
    resolution: {integrity: sha512-OljLrQ9SQdOUqTaQxqL5dEfZWrXExyyWsozYlAWFawPVNuD83igl7uJD2RTkNMbniIYgt8l81eCJGIdQF7avLQ==}
    engines: {node: ^14.17.0 || ^16.13.0 || >=18.0.0}

  vary@1.1.2:
    resolution: {integrity: sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==}
    engines: {node: '>= 0.8'}

  vfile-location@5.0.3:
    resolution: {integrity: sha512-5yXvWDEgqeiYiBe1lbxYF7UMAIm/IcopxMHrMQDq3nvKcjPKIhZklUKL+AE7J7uApI4kwe2snsK+eI6UTj9EHg==}

  vfile-message@4.0.2:
    resolution: {integrity: sha512-jRDZ1IMLttGj41KcZvlrYAaI3CfqpLpfpf+Mfig13viT6NKvRzWZ+lXz0Y5D60w6uJIBAOGq9mSHf0gktF0duw==}

  vfile@6.0.3:
    resolution: {integrity: sha512-KzIbH/9tXat2u30jf+smMwFCsno4wHVdNmzFyL+T/L3UGqqk6JKfVqOFOZEpZSHADH1k40ab6NUIXZq422ov3Q==}

  vinxi@0.5.8:
    resolution: {integrity: sha512-1pGA+cU1G9feBQ1sd5FMftPuLUT8NSX880AvELhNWqoqWhe2jeSOQxjDPxlA3f1AC+Bbknl4UPKHyVXmfLZQjw==}
    hasBin: true

  vite-node@3.2.4:
    resolution: {integrity: sha512-EbKSKh+bh1E1IFxeO0pg1n4dvoOTt0UDiXMd/qn++r98+jPO1xtJilvXldeuQ8giIB5IkpjCgMleHMNEsGH6pg==}
    engines: {node: ^18.0.0 || ^20.0.0 || >=22.0.0}
    hasBin: true

  vite-tsconfig-paths@5.1.4:
    resolution: {integrity: sha512-cYj0LRuLV2c2sMqhqhGpaO3LretdtMn/BVX4cPLanIZuwwrkVl+lK84E/miEXkCHWXuq65rhNN4rXsBcOB3S4w==}
    peerDependencies:
      vite: '*'
    peerDependenciesMeta:
      vite:
        optional: true

  vite@6.3.5:
    resolution: {integrity: sha512-cZn6NDFE7wdTpINgs++ZJ4N49W2vRp8LCKrn3Ob1kYNtOo21vfDoaV5GzBfLU4MovSAB8uNRm4jgzVQZ+mBzPQ==}
    engines: {node: ^18.0.0 || ^20.0.0 || >=22.0.0}
    hasBin: true
    peerDependencies:
      '@types/node': ^18.0.0 || ^20.0.0 || >=22.0.0
      jiti: '>=1.21.0'
      less: '*'
      lightningcss: ^1.21.0
      sass: '*'
      sass-embedded: '*'
      stylus: '*'
      sugarss: '*'
      terser: ^5.16.0
      tsx: ^4.8.1
      yaml: ^2.4.2
    peerDependenciesMeta:
      '@types/node':
        optional: true
      jiti:
        optional: true
      less:
        optional: true
      lightningcss:
        optional: true
      sass:
        optional: true
      sass-embedded:
        optional: true
      stylus:
        optional: true
      sugarss:
        optional: true
      terser:
        optional: true
      tsx:
        optional: true
      yaml:
        optional: true

  vite@7.0.3:
    resolution: {integrity: sha512-y2L5oJZF7bj4c0jgGYgBNSdIu+5HF+m68rn2cQXFbGoShdhV1phX9rbnxy9YXj82aS8MMsCLAAFkRxZeWdldrQ==}
    engines: {node: ^20.19.0 || >=22.12.0}
    hasBin: true
    peerDependencies:
      '@types/node': ^20.19.0 || >=22.12.0
      jiti: '>=1.21.0'
      less: ^4.0.0
      lightningcss: ^1.21.0
      sass: ^1.70.0
      sass-embedded: ^1.70.0
      stylus: '>=0.54.8'
      sugarss: ^5.0.0
      terser: ^5.16.0
      tsx: ^4.8.1
      yaml: ^2.4.2
    peerDependenciesMeta:
      '@types/node':
        optional: true
      jiti:
        optional: true
      less:
        optional: true
      lightningcss:
        optional: true
      sass:
        optional: true
      sass-embedded:
        optional: true
      stylus:
        optional: true
      sugarss:
        optional: true
      terser:
        optional: true
      tsx:
        optional: true
      yaml:
        optional: true

  vitest@3.2.4:
    resolution: {integrity: sha512-LUCP5ev3GURDysTWiP47wRRUpLKMOfPh+yKTx3kVIEiu5KOMeqzpnYNsKyOoVrULivR8tLcks4+lga33Whn90A==}
    engines: {node: ^18.0.0 || ^20.0.0 || >=22.0.0}
    hasBin: true
    peerDependencies:
      '@edge-runtime/vm': '*'
      '@types/debug': ^4.1.12
      '@types/node': ^18.0.0 || ^20.0.0 || >=22.0.0
      '@vitest/browser': 3.2.4
      '@vitest/ui': 3.2.4
      happy-dom: '*'
      jsdom: '*'
    peerDependenciesMeta:
      '@edge-runtime/vm':
        optional: true
      '@types/debug':
        optional: true
      '@types/node':
        optional: true
      '@vitest/browser':
        optional: true
      '@vitest/ui':
        optional: true
      happy-dom:
        optional: true
      jsdom:
        optional: true

  vscode-jsonrpc@8.2.0:
    resolution: {integrity: sha512-C+r0eKJUIfiDIfwJhria30+TYWPtuHJXHtI7J0YlOmKAo7ogxP20T0zxB7HZQIFhIyvoBPwWskjxrvAtfjyZfA==}
    engines: {node: '>=14.0.0'}

  vscode-languageserver-protocol@3.17.5:
    resolution: {integrity: sha512-mb1bvRJN8SVznADSGWM9u/b07H7Ecg0I3OgXDuLdn307rl/J3A9YD6/eYOssqhecL27hK1IPZAsaqh00i/Jljg==}

  vscode-languageserver-textdocument@1.0.12:
    resolution: {integrity: sha512-cxWNPesCnQCcMPeenjKKsOCKQZ/L6Tv19DTRIGuLWe32lyzWhihGVJ/rcckZXJxfdKCFvRLS3fpBIsV/ZGX4zA==}

  vscode-languageserver-types@3.17.5:
    resolution: {integrity: sha512-Ld1VelNuX9pdF39h2Hgaeb5hEZM2Z3jUrrMgWQAu82jMtZp7p3vJT3BzToKtZI7NgQssZje5o0zryOrhQvzQAg==}

  vscode-languageserver@9.0.1:
    resolution: {integrity: sha512-woByF3PDpkHFUreUa7Hos7+pUWdeWMXRd26+ZX2A8cFx6v/JPTtd4/uN0/jB6XQHYaOlHbio03NTHCqrgG5n7g==}
    hasBin: true

  vscode-uri@3.0.8:
    resolution: {integrity: sha512-AyFQ0EVmsOZOlAnxoFOGOq1SQDWAB7C6aqMGS23svWAllfOaxbuFvcT8D1i8z3Gyn8fraVeZNNmN6e9bxxXkKw==}

  vue-demi@0.14.10:
    resolution: {integrity: sha512-nMZBOwuzabUO0nLgIcc6rycZEebF6eeUfaiQx9+WSk8e29IbLvPU9feI6tqW4kTo3hvoYAJkMh8n8D0fuISphg==}
    engines: {node: '>=12'}
    hasBin: true
    peerDependencies:
      '@vue/composition-api': ^1.0.0-rc.1
      vue: ^3.0.0-0 || ^2.6.0
    peerDependenciesMeta:
      '@vue/composition-api':
        optional: true

  vue-router@4.5.1:
    resolution: {integrity: sha512-ogAF3P97NPm8fJsE4by9dwSYtDwXIY1nFY9T6DyQnGHd1E2Da94w9JIolpe42LJGIl0DwOHBi8TcRPlPGwbTtw==}
    peerDependencies:
      vue: ^3.2.0

  vue-sonner@1.3.2:
    resolution: {integrity: sha512-UbZ48E9VIya3ToiRHAZUbodKute/z/M1iT8/3fU8zEbwBRE11AKuHikssv18LMk2gTTr6eMQT4qf6JoLHWuj/A==}

  vue@3.5.17:
    resolution: {integrity: sha512-LbHV3xPN9BeljML+Xctq4lbz2lVHCR6DtbpTf5XIO6gugpXUN49j2QQPcMj086r9+AkJ0FfUT8xjulKKBkkr9g==}
    peerDependencies:
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  w3c-keyname@2.2.8:
    resolution: {integrity: sha512-dpojBhNsCNN7T82Tm7k26A6G9ML3NkhDsnw9n/eoxSRlVBB4CEtIQ/KTCLI2Fwf3ataSXRhYFkQi3SlnFwPvPQ==}

  warning@3.0.0:
    resolution: {integrity: sha512-jMBt6pUrKn5I+OGgtQ4YZLdhIeJmObddh6CsibPxyQ5yPZm1XExSyzC1LCNX7BzhxWgiHmizBWJTHJIjMjTQYQ==}

  watchpack@2.4.4:
    resolution: {integrity: sha512-c5EGNOiyxxV5qmTtAB7rbiXxi1ooX1pQKMLX/MIabJjRA0SJBQOjKF+KSVfHkr9U1cADPon0mRiVe/riyaiDUA==}
    engines: {node: '>=10.13.0'}

  web-namespaces@2.0.1:
    resolution: {integrity: sha512-bKr1DkiNa2krS7qxNtdrtHAmzuYGFQLiQ13TsorsdT6ULTkPLKuu5+GsFpDlg6JFjUTwX2DyhMPG2be8uPrqsQ==}

  web-streams-polyfill@3.3.3:
    resolution: {integrity: sha512-d2JWLCivmZYTSIoge9MsgFCZrt571BikcWGYkjC1khllbTeDlGqZ2D8vD8E/lJa8WGWbb7Plm8/XJYV7IJHZZw==}
    engines: {node: '>= 8'}

  webidl-conversions@3.0.1:
    resolution: {integrity: sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==}

  webidl-conversions@4.0.2:
    resolution: {integrity: sha512-YQ+BmxuTgd6UXZW3+ICGfyqRyHXVlD5GtQr5+qjiNW7bF0cqrzX500HVXPBOvgXb5YnzDd+h0zqyv61KUD7+Sg==}

  webpack-bundle-analyzer@4.10.1:
    resolution: {integrity: sha512-s3P7pgexgT/HTUSYgxJyn28A+99mmLq4HsJepMPzu0R8ImJc52QNqaFYW1Z2z2uIb1/J3eYgaAWVpaC+v/1aAQ==}
    engines: {node: '>= 10.13.0'}
    hasBin: true

  webpack-sources@3.3.3:
    resolution: {integrity: sha512-yd1RBzSGanHkitROoPFd6qsrxt+oFhg/129YzheDGqeustzX0vTZJZsSsQjVQC4yzBQ56K55XU8gaNCtIzOnTg==}
    engines: {node: '>=10.13.0'}

  webpack-virtual-modules@0.6.2:
    resolution: {integrity: sha512-66/V2i5hQanC51vBQKPH4aI8NMAcBW59FVBs+rC7eGHupMyfn34q7rZIE+ETlJ+XTevqfUhVVBgSUNSW2flEUQ==}

  webpack@5.100.0:
    resolution: {integrity: sha512-H8yBSBTk+BqxrINJnnRzaxU94SVP2bjd7WmA+PfCphoIdDpeQMJ77pq9/4I7xjLq38cB1bNKfzYPZu8pB3zKtg==}
    engines: {node: '>=10.13.0'}
    hasBin: true
    peerDependencies:
      webpack-cli: '*'
    peerDependenciesMeta:
      webpack-cli:
        optional: true

  whatwg-encoding@3.1.1:
    resolution: {integrity: sha512-6qN4hJdMwfYBtE3YBTTHhoeuUrDBPZmbQaxWAqSALV/MeEnR5z1xd8UKud2RAkFoPkmB+hli1TZSnyi84xz1vQ==}
    engines: {node: '>=18'}

  whatwg-mimetype@4.0.0:
    resolution: {integrity: sha512-QaKxh0eNIi2mE9p2vEdzfagOKHCcj1pJ56EEHGQOVxp8r9/iszLUUV7v89x9O1p/T+NlTM5W7jW6+cz4Fq1YVg==}
    engines: {node: '>=18'}

  whatwg-url@5.0.0:
    resolution: {integrity: sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==}

  whatwg-url@7.1.0:
    resolution: {integrity: sha512-WUu7Rg1DroM7oQvGWfOiAK21n74Gg+T4elXEQYkOhtyLeWiJFoOGLXPKI/9gzIie9CtwVLm8wtw6YJdKyxSjeg==}

  which-boxed-primitive@1.1.1:
    resolution: {integrity: sha512-TbX3mj8n0odCBFVlY8AxkqcHASw3L60jIuF8jFP78az3C2YhmGvqbHBpAjTRH2/xqYunrJ9g1jSyjCjpoWzIAA==}
    engines: {node: '>= 0.4'}

  which-builtin-type@1.2.1:
    resolution: {integrity: sha512-6iBczoX+kDQ7a3+YJBnh3T+KZRxM/iYNPXicqk66/Qfm1b93iu+yOImkg0zHbj5LNOcNv1TEADiZ0xa34B4q6Q==}
    engines: {node: '>= 0.4'}

  which-collection@1.0.2:
    resolution: {integrity: sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==}
    engines: {node: '>= 0.4'}

  which-typed-array@1.1.19:
    resolution: {integrity: sha512-rEvr90Bck4WZt9HHFC4DJMsjvu7x+r6bImz0/BrbWb7A2djJ8hnZMrWnHo9F8ssv0OMErasDhftrfROTyqSDrw==}
    engines: {node: '>= 0.4'}

  which@2.0.2:
    resolution: {integrity: sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==}
    engines: {node: '>= 8'}
    hasBin: true

  which@3.0.1:
    resolution: {integrity: sha512-XA1b62dzQzLfaEOSQFTCOd5KFf/1VSzZo7/7TUjnya6u0vGGKzU96UQBZTAThCb2j4/xjBAyii1OhRLJEivHvg==}
    engines: {node: ^14.17.0 || ^16.13.0 || >=18.0.0}
    hasBin: true

  which@4.0.0:
    resolution: {integrity: sha512-GlaYyEb07DPxYCKhKzplCWBJtvxZcZMrL+4UkrTSJHHPyZU4mYYTv3qaOe77H7EODLSSopAUFAc6W8U4yqvscg==}
    engines: {node: ^16.13.0 || >=18.0.0}
    hasBin: true

  why-is-node-running@2.3.0:
    resolution: {integrity: sha512-hUrmaWBdVDcxvYqnyh09zunKzROWjbZTiNy8dBEjkS7ehEDQibXJ7XvlmtbwuTclUiIyN+CyXQD4Vmko8fNm8w==}
    engines: {node: '>=8'}
    hasBin: true

  widest-line@5.0.0:
    resolution: {integrity: sha512-c9bZp7b5YtRj2wOe6dlj32MK+Bx/M/d+9VB2SHM1OtsUHR0aV0tdP6DWh/iMt0kWi1t5g1Iudu6hQRNd1A4PVA==}
    engines: {node: '>=18'}

  winston-transport@4.9.0:
    resolution: {integrity: sha512-8drMJ4rkgaPo1Me4zD/3WLfI/zPdA9o2IipKODunnGDcuqbHwjsbB79ylv04LCGGzU0xQ6vTznOMpQGaLhhm6A==}
    engines: {node: '>= 12.0.0'}

  winston@3.17.0:
    resolution: {integrity: sha512-DLiFIXYC5fMPxaRg832S6F5mJYvePtmO5G9v9IgUFPhXm9/GkXarH/TUrBAVzhTCzAj9anE/+GjrgXp/54nOgw==}
    engines: {node: '>= 12.0.0'}

  word-wrap@1.2.5:
    resolution: {integrity: sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==}
    engines: {node: '>=0.10.0'}

  wrap-ansi@7.0.0:
    resolution: {integrity: sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==}
    engines: {node: '>=10'}

  wrap-ansi@8.1.0:
    resolution: {integrity: sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==}
    engines: {node: '>=12'}

  wrap-ansi@9.0.0:
    resolution: {integrity: sha512-G8ura3S+3Z2G+mkgNRq8dqaFZAuxfsxpBB8OCTGRTCtp+l/v9nbFNmCUP1BZMts3G1142MsZfn6eeUKrr4PD1Q==}
    engines: {node: '>=18'}

  wrappy@1.0.2:
    resolution: {integrity: sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==}

  write-file-atomic@6.0.0:
    resolution: {integrity: sha512-GmqrO8WJ1NuzJ2DrziEI2o57jKAVIQNf8a18W3nCYU3H7PNWqCCVTeH6/NQE93CIllIgQS98rrmVkYgTX9fFJQ==}
    engines: {node: ^18.17.0 || >=20.5.0}

  ws@7.5.10:
    resolution: {integrity: sha512-+dbF1tHwZpXcbOJdVOkzLDxZP1ailvSxM6ZweXTegylPny803bFhA+vqBYw4s31NSAk4S2Qz+AKXK9a4wkdjcQ==}
    engines: {node: '>=8.3.0'}
    peerDependencies:
      bufferutil: ^4.0.1
      utf-8-validate: ^5.0.2
    peerDependenciesMeta:
      bufferutil:
        optional: true
      utf-8-validate:
        optional: true

  xml-js@1.6.11:
    resolution: {integrity: sha512-7rVi2KMfwfWFl+GpPg6m80IVMWXLRjO+PxTq7V2CDhoGak0wzYzFgUY2m4XJ47OGdXd8eLE8EmwfAmdjw7lC1g==}
    hasBin: true

  xmlbuilder2@3.1.1:
    resolution: {integrity: sha512-WCSfbfZnQDdLQLiMdGUQpMxxckeQ4oZNMNhLVkcekTu7xhD4tuUDyAPoY8CwXvBYE6LwBHd6QW2WZXlOWr1vCw==}
    engines: {node: '>=12.0'}

  y18n@5.0.8:
    resolution: {integrity: sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==}
    engines: {node: '>=10'}

  yallist@3.1.1:
    resolution: {integrity: sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==}

  yallist@5.0.0:
    resolution: {integrity: sha512-YgvUTfwqyc7UXVMrB+SImsVYSmTS8X/tSrtdNZMImM+n7+QTriRXyXim0mBrTXNeqzVF0KWGgHPeiyViFFrNDw==}
    engines: {node: '>=18'}

  yaml@1.10.2:
    resolution: {integrity: sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg==}
    engines: {node: '>= 6'}

  yaml@2.8.0:
    resolution: {integrity: sha512-4lLa/EcQCB0cJkyts+FpIRx5G/llPxfP6VQU5KByHEhLxY3IJCH0f0Hy1MHI8sClTvsIb8qwRJ6R/ZdlDJ/leQ==}
    engines: {node: '>= 14.6'}
    hasBin: true

  yargs-parser@21.1.1:
    resolution: {integrity: sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==}
    engines: {node: '>=12'}

  yargs@17.7.2:
    resolution: {integrity: sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==}
    engines: {node: '>=12'}

  yauzl@2.10.0:
    resolution: {integrity: sha512-p4a9I6X6nu6IhoGmBqAcbJy1mlC4j27vEPZX9F4L4/vZT3Lyq1VkFHw/V/PUcB9Buo+DG3iHkT0x3Qya58zc3g==}

  yocto-queue@0.1.0:
    resolution: {integrity: sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==}
    engines: {node: '>=10'}

  yocto-queue@1.2.1:
    resolution: {integrity: sha512-AyeEbWOu/TAXdxlV9wmGcR0+yh2j3vYPGOECcIj2S7MkrLyC7ne+oye2BKTItt0ii2PHk4cDy+95+LshzbXnGg==}
    engines: {node: '>=12.20'}

  youch-core@0.3.2:
    resolution: {integrity: sha512-fusrlIMLeRvTFYLUjJ9KzlGC3N+6MOPJ68HNj/yJv2nz7zq8t4HEviLms2gkdRPUS7F5rZ5n+pYx9r88m6IE1g==}
    engines: {node: '>=18'}

  youch@4.1.0-beta.8:
    resolution: {integrity: sha512-rY2A2lSF7zC+l7HH9Mq+83D1dLlsPnEvy8jTouzaptDZM6geqZ3aJe/b7ULCwRURPtWV3vbDjA2DDMdoBol0HQ==}
    engines: {node: '>=18'}

  zip-stream@6.0.1:
    resolution: {integrity: sha512-zK7YHHz4ZXpW89AHXUPbQVGKI7uvkd3hzusTdotCg1UxyaVtg0zFJSTfW/Dq5f7OBBVnq6cZIaC8Ti4hb6dtCA==}
    engines: {node: '>= 14'}

  zod-to-json-schema@3.24.5:
    resolution: {integrity: sha512-/AuWwMP+YqiPbsJx5D6TfgRTc4kTLjsh5SOcd4bLsfUg2RcEXrFMJl1DGgdHy2aCfsIA/cr/1JM0xcB2GZji8g==}
    peerDependencies:
      zod: ^3.24.1

  zod@3.24.1:
    resolution: {integrity: sha512-muH7gBL9sI1nciMZV67X5fTKKBLtwpZ5VBp1vsOQzj1MhrBZ4wlVCm3gedKZWLp0Oyel8sIGfeiz54Su+OVT+A==}

  zod@3.25.76:
    resolution: {integrity: sha512-gzUt/qt81nXsFGKIFcC3YnfEAx5NkunCfnDlvuBSSFS02bcXu4Lmea0AFIUwbLWxWPx3d9p8S5QoaujKcNQxcQ==}

  zod@4.0.2:
    resolution: {integrity: sha512-X2niJNY54MGam4L6Kj0AxeedeDIi/E5QFW0On2faSX5J4/pfLk1tW+cRMIMoojnCavn/u5W/kX17e1CSGnKMxA==}

  zwitch@2.0.4:
    resolution: {integrity: sha512-bXE4cR/kVZhKZX/RjPEflHaKVhUVl85noU3v6b8apfQEc1x4A+zBxjZ4lN8LqGd6WZ3dl98pY4o717VFmoPp+A==}

snapshots:

  '@ai-sdk/openai@1.3.23(zod@4.0.2)':
    dependencies:
      '@ai-sdk/provider': 1.1.3
      '@ai-sdk/provider-utils': 2.2.8(zod@4.0.2)
      zod: 4.0.2

  '@ai-sdk/provider-utils@2.2.8(zod@4.0.2)':
    dependencies:
      '@ai-sdk/provider': 1.1.3
      nanoid: 3.3.11
      secure-json-parse: 2.7.0
      zod: 4.0.2

  '@ai-sdk/provider@1.1.3':
    dependencies:
      json-schema: 0.4.0

  '@ai-sdk/react@1.2.12(react@19.1.0)(zod@4.0.2)':
    dependencies:
      '@ai-sdk/provider-utils': 2.2.8(zod@4.0.2)
      '@ai-sdk/ui-utils': 1.2.11(zod@4.0.2)
      react: 19.1.0
      swr: 2.3.3(react@19.1.0)
      throttleit: 2.1.0
    optionalDependencies:
      zod: 4.0.2

  '@ai-sdk/ui-utils@1.2.11(zod@4.0.2)':
    dependencies:
      '@ai-sdk/provider': 1.1.3
      '@ai-sdk/provider-utils': 2.2.8(zod@4.0.2)
      zod: 4.0.2
      zod-to-json-schema: 3.24.5(zod@4.0.2)

  '@algolia/client-abtesting@5.32.0':
    dependencies:
      '@algolia/client-common': 5.32.0
      '@algolia/requester-browser-xhr': 5.32.0
      '@algolia/requester-fetch': 5.32.0
      '@algolia/requester-node-http': 5.32.0

  '@algolia/client-analytics@5.32.0':
    dependencies:
      '@algolia/client-common': 5.32.0
      '@algolia/requester-browser-xhr': 5.32.0
      '@algolia/requester-fetch': 5.32.0
      '@algolia/requester-node-http': 5.32.0

  '@algolia/client-common@5.32.0': {}

  '@algolia/client-insights@5.32.0':
    dependencies:
      '@algolia/client-common': 5.32.0
      '@algolia/requester-browser-xhr': 5.32.0
      '@algolia/requester-fetch': 5.32.0
      '@algolia/requester-node-http': 5.32.0

  '@algolia/client-personalization@5.32.0':
    dependencies:
      '@algolia/client-common': 5.32.0
      '@algolia/requester-browser-xhr': 5.32.0
      '@algolia/requester-fetch': 5.32.0
      '@algolia/requester-node-http': 5.32.0

  '@algolia/client-query-suggestions@5.32.0':
    dependencies:
      '@algolia/client-common': 5.32.0
      '@algolia/requester-browser-xhr': 5.32.0
      '@algolia/requester-fetch': 5.32.0
      '@algolia/requester-node-http': 5.32.0

  '@algolia/client-search@5.32.0':
    dependencies:
      '@algolia/client-common': 5.32.0
      '@algolia/requester-browser-xhr': 5.32.0
      '@algolia/requester-fetch': 5.32.0
      '@algolia/requester-node-http': 5.32.0

  '@algolia/ingestion@1.32.0':
    dependencies:
      '@algolia/client-common': 5.32.0
      '@algolia/requester-browser-xhr': 5.32.0
      '@algolia/requester-fetch': 5.32.0
      '@algolia/requester-node-http': 5.32.0

  '@algolia/monitoring@1.32.0':
    dependencies:
      '@algolia/client-common': 5.32.0
      '@algolia/requester-browser-xhr': 5.32.0
      '@algolia/requester-fetch': 5.32.0
      '@algolia/requester-node-http': 5.32.0

  '@algolia/recommend@5.32.0':
    dependencies:
      '@algolia/client-common': 5.32.0
      '@algolia/requester-browser-xhr': 5.32.0
      '@algolia/requester-fetch': 5.32.0
      '@algolia/requester-node-http': 5.32.0

  '@algolia/requester-browser-xhr@5.32.0':
    dependencies:
      '@algolia/client-common': 5.32.0

  '@algolia/requester-fetch@5.32.0':
    dependencies:
      '@algolia/client-common': 5.32.0

  '@algolia/requester-node-http@5.32.0':
    dependencies:
      '@algolia/client-common': 5.32.0

  '@alloc/quick-lru@5.2.0': {}

  '@ampproject/remapping@2.3.0':
    dependencies:
      '@jridgewell/gen-mapping': 0.3.12
      '@jridgewell/trace-mapping': 0.3.29

  '@antfu/install-pkg@1.1.0':
    dependencies:
      package-manager-detector: 1.3.0
      tinyexec: 1.0.1

  '@antfu/utils@8.1.1': {}

  '@apidevtools/json-schema-ref-parser@11.9.3':
    dependencies:
      '@jsdevtools/ono': 7.1.3
      '@types/json-schema': 7.0.15
      js-yaml: 4.1.0

  '@astrojs/compiler@2.12.0': {}

  '@babel/code-frame@7.26.2':
    dependencies:
      '@babel/helper-validator-identifier': 7.27.1
      js-tokens: 4.0.0
      picocolors: 1.1.1

  '@babel/code-frame@7.27.1':
    dependencies:
      '@babel/helper-validator-identifier': 7.27.1
      js-tokens: 4.0.0
      picocolors: 1.1.1

  '@babel/compat-data@7.27.2': {}

  '@babel/core@7.28.0':
    dependencies:
      '@ampproject/remapping': 2.3.0
      '@babel/code-frame': 7.27.1
      '@babel/generator': 7.28.0
      '@babel/helper-compilation-targets': 7.27.2
      '@babel/helper-module-transforms': 7.27.3(@babel/core@7.28.0)
      '@babel/helpers': 7.27.6
      '@babel/parser': 7.28.0
      '@babel/template': 7.27.2
      '@babel/traverse': 7.28.0
      '@babel/types': 7.28.0
      convert-source-map: 2.0.0
      debug: 4.4.1
      gensync: 1.0.0-beta.2
      json5: 2.2.3
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color

  '@babel/generator@7.28.0':
    dependencies:
      '@babel/parser': 7.28.0
      '@babel/types': 7.28.0
      '@jridgewell/gen-mapping': 0.3.12
      '@jridgewell/trace-mapping': 0.3.29
      jsesc: 3.1.0

  '@babel/helper-annotate-as-pure@7.27.3':
    dependencies:
      '@babel/types': 7.28.0

  '@babel/helper-compilation-targets@7.27.2':
    dependencies:
      '@babel/compat-data': 7.27.2
      '@babel/helper-validator-option': 7.27.1
      browserslist: 4.25.1
      lru-cache: 5.1.1
      semver: 6.3.1

  '@babel/helper-create-class-features-plugin@7.27.1(@babel/core@7.28.0)':
    dependencies:
      '@babel/core': 7.28.0
      '@babel/helper-annotate-as-pure': 7.27.3
      '@babel/helper-member-expression-to-functions': 7.27.1
      '@babel/helper-optimise-call-expression': 7.27.1
      '@babel/helper-replace-supers': 7.27.1(@babel/core@7.28.0)
      '@babel/helper-skip-transparent-expression-wrappers': 7.27.1
      '@babel/traverse': 7.28.0
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-globals@7.28.0': {}

  '@babel/helper-member-expression-to-functions@7.27.1':
    dependencies:
      '@babel/traverse': 7.28.0
      '@babel/types': 7.28.0
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-module-imports@7.27.1':
    dependencies:
      '@babel/traverse': 7.28.0
      '@babel/types': 7.28.0
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-module-transforms@7.27.3(@babel/core@7.28.0)':
    dependencies:
      '@babel/core': 7.28.0
      '@babel/helper-module-imports': 7.27.1
      '@babel/helper-validator-identifier': 7.27.1
      '@babel/traverse': 7.28.0
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-optimise-call-expression@7.27.1':
    dependencies:
      '@babel/types': 7.28.0

  '@babel/helper-plugin-utils@7.27.1': {}

  '@babel/helper-replace-supers@7.27.1(@babel/core@7.28.0)':
    dependencies:
      '@babel/core': 7.28.0
      '@babel/helper-member-expression-to-functions': 7.27.1
      '@babel/helper-optimise-call-expression': 7.27.1
      '@babel/traverse': 7.28.0
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-skip-transparent-expression-wrappers@7.27.1':
    dependencies:
      '@babel/traverse': 7.28.0
      '@babel/types': 7.28.0
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-string-parser@7.27.1': {}

  '@babel/helper-validator-identifier@7.27.1': {}

  '@babel/helper-validator-option@7.27.1': {}

  '@babel/helpers@7.27.6':
    dependencies:
      '@babel/template': 7.27.2
      '@babel/types': 7.28.0

  '@babel/parser@7.28.0':
    dependencies:
      '@babel/types': 7.28.0

  '@babel/plugin-syntax-decorators@7.27.1(@babel/core@7.28.0)':
    dependencies:
      '@babel/core': 7.28.0
      '@babel/helper-plugin-utils': 7.27.1

  '@babel/plugin-syntax-jsx@7.27.1(@babel/core@7.28.0)':
    dependencies:
      '@babel/core': 7.28.0
      '@babel/helper-plugin-utils': 7.27.1

  '@babel/plugin-syntax-typescript@7.27.1(@babel/core@7.28.0)':
    dependencies:
      '@babel/core': 7.28.0
      '@babel/helper-plugin-utils': 7.27.1

  '@babel/plugin-transform-modules-commonjs@7.27.1(@babel/core@7.28.0)':
    dependencies:
      '@babel/core': 7.28.0
      '@babel/helper-module-transforms': 7.27.3(@babel/core@7.28.0)
      '@babel/helper-plugin-utils': 7.27.1
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-react-jsx-self@7.27.1(@babel/core@7.28.0)':
    dependencies:
      '@babel/core': 7.28.0
      '@babel/helper-plugin-utils': 7.27.1

  '@babel/plugin-transform-react-jsx-source@7.27.1(@babel/core@7.28.0)':
    dependencies:
      '@babel/core': 7.28.0
      '@babel/helper-plugin-utils': 7.27.1

  '@babel/plugin-transform-typescript@7.27.1(@babel/core@7.28.0)':
    dependencies:
      '@babel/core': 7.28.0
      '@babel/helper-annotate-as-pure': 7.27.3
      '@babel/helper-create-class-features-plugin': 7.27.1(@babel/core@7.28.0)
      '@babel/helper-plugin-utils': 7.27.1
      '@babel/helper-skip-transparent-expression-wrappers': 7.27.1
      '@babel/plugin-syntax-typescript': 7.27.1(@babel/core@7.28.0)
    transitivePeerDependencies:
      - supports-color

  '@babel/preset-typescript@7.27.1(@babel/core@7.28.0)':
    dependencies:
      '@babel/core': 7.28.0
      '@babel/helper-plugin-utils': 7.27.1
      '@babel/helper-validator-option': 7.27.1
      '@babel/plugin-syntax-jsx': 7.27.1(@babel/core@7.28.0)
      '@babel/plugin-transform-modules-commonjs': 7.27.1(@babel/core@7.28.0)
      '@babel/plugin-transform-typescript': 7.27.1(@babel/core@7.28.0)
    transitivePeerDependencies:
      - supports-color

  '@babel/runtime@7.27.6': {}

  '@babel/template@7.27.2':
    dependencies:
      '@babel/code-frame': 7.27.1
      '@babel/parser': 7.28.0
      '@babel/types': 7.28.0

  '@babel/traverse@7.28.0':
    dependencies:
      '@babel/code-frame': 7.27.1
      '@babel/generator': 7.28.0
      '@babel/helper-globals': 7.28.0
      '@babel/parser': 7.28.0
      '@babel/template': 7.27.2
      '@babel/types': 7.28.0
      debug: 4.4.1
    transitivePeerDependencies:
      - supports-color

  '@babel/types@7.27.6':
    dependencies:
      '@babel/helper-string-parser': 7.27.1
      '@babel/helper-validator-identifier': 7.27.1

  '@babel/types@7.28.0':
    dependencies:
      '@babel/helper-string-parser': 7.27.1
      '@babel/helper-validator-identifier': 7.27.1

  '@biomejs/cli-darwin-arm64@1.9.4':
    optional: true

  '@bkrem/react-transition-group@1.3.5(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      chain-function: 1.0.1
      dom-helpers: 3.4.0
      loose-envify: 1.4.0
      prop-types: 15.8.1
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
      react-lifecycles-compat: 3.0.4
      warning: 3.0.0

  '@braintree/sanitize-url@7.1.1': {}

  '@changesets/apply-release-plan@7.0.12':
    dependencies:
      '@changesets/config': 3.1.1
      '@changesets/get-version-range-type': 0.4.0
      '@changesets/git': 3.0.4
      '@changesets/should-skip-package': 0.1.2
      '@changesets/types': 6.1.0
      '@manypkg/get-packages': 1.1.3
      detect-indent: 6.1.0
      fs-extra: 7.0.1
      lodash.startcase: 4.4.0
      outdent: 0.5.0
      prettier: 2.8.8
      resolve-from: 5.0.0
      semver: 7.7.2

  '@changesets/assemble-release-plan@6.0.9':
    dependencies:
      '@changesets/errors': 0.2.0
      '@changesets/get-dependents-graph': 2.1.3
      '@changesets/should-skip-package': 0.1.2
      '@changesets/types': 6.1.0
      '@manypkg/get-packages': 1.1.3
      semver: 7.7.2

  '@changesets/changelog-git@0.2.1':
    dependencies:
      '@changesets/types': 6.1.0

  '@changesets/cli@2.29.5':
    dependencies:
      '@changesets/apply-release-plan': 7.0.12
      '@changesets/assemble-release-plan': 6.0.9
      '@changesets/changelog-git': 0.2.1
      '@changesets/config': 3.1.1
      '@changesets/errors': 0.2.0
      '@changesets/get-dependents-graph': 2.1.3
      '@changesets/get-release-plan': 4.0.13
      '@changesets/git': 3.0.4
      '@changesets/logger': 0.1.1
      '@changesets/pre': 2.0.2
      '@changesets/read': 0.6.5
      '@changesets/should-skip-package': 0.1.2
      '@changesets/types': 6.1.0
      '@changesets/write': 0.4.0
      '@manypkg/get-packages': 1.1.3
      ansi-colors: 4.1.3
      ci-info: 3.9.0
      enquirer: 2.4.1
      external-editor: 3.1.0
      fs-extra: 7.0.1
      mri: 1.2.0
      p-limit: 2.3.0
      package-manager-detector: 0.2.11
      picocolors: 1.1.1
      resolve-from: 5.0.0
      semver: 7.7.2
      spawndamnit: 3.0.1
      term-size: 2.2.1

  '@changesets/config@3.1.1':
    dependencies:
      '@changesets/errors': 0.2.0
      '@changesets/get-dependents-graph': 2.1.3
      '@changesets/logger': 0.1.1
      '@changesets/types': 6.1.0
      '@manypkg/get-packages': 1.1.3
      fs-extra: 7.0.1
      micromatch: 4.0.8

  '@changesets/errors@0.2.0':
    dependencies:
      extendable-error: 0.1.7

  '@changesets/get-dependents-graph@2.1.3':
    dependencies:
      '@changesets/types': 6.1.0
      '@manypkg/get-packages': 1.1.3
      picocolors: 1.1.1
      semver: 7.7.2

  '@changesets/get-release-plan@4.0.13':
    dependencies:
      '@changesets/assemble-release-plan': 6.0.9
      '@changesets/config': 3.1.1
      '@changesets/pre': 2.0.2
      '@changesets/read': 0.6.5
      '@changesets/types': 6.1.0
      '@manypkg/get-packages': 1.1.3

  '@changesets/get-version-range-type@0.4.0': {}

  '@changesets/git@3.0.4':
    dependencies:
      '@changesets/errors': 0.2.0
      '@manypkg/get-packages': 1.1.3
      is-subdir: 1.2.0
      micromatch: 4.0.8
      spawndamnit: 3.0.1

  '@changesets/logger@0.1.1':
    dependencies:
      picocolors: 1.1.1

  '@changesets/parse@0.4.1':
    dependencies:
      '@changesets/types': 6.1.0
      js-yaml: 3.14.1

  '@changesets/pre@2.0.2':
    dependencies:
      '@changesets/errors': 0.2.0
      '@changesets/types': 6.1.0
      '@manypkg/get-packages': 1.1.3
      fs-extra: 7.0.1

  '@changesets/read@0.6.5':
    dependencies:
      '@changesets/git': 3.0.4
      '@changesets/logger': 0.1.1
      '@changesets/parse': 0.4.1
      '@changesets/types': 6.1.0
      fs-extra: 7.0.1
      p-filter: 2.1.0
      picocolors: 1.1.1

  '@changesets/should-skip-package@0.1.2':
    dependencies:
      '@changesets/types': 6.1.0
      '@manypkg/get-packages': 1.1.3

  '@changesets/types@4.1.0': {}

  '@changesets/types@6.1.0': {}

  '@changesets/write@0.4.0':
    dependencies:
      '@changesets/types': 6.1.0
      fs-extra: 7.0.1
      human-id: 4.1.1
      prettier: 2.8.8

  '@chevrotain/cst-dts-gen@11.0.3':
    dependencies:
      '@chevrotain/gast': 11.0.3
      '@chevrotain/types': 11.0.3
      lodash-es: 4.17.21

  '@chevrotain/gast@11.0.3':
    dependencies:
      '@chevrotain/types': 11.0.3
      lodash-es: 4.17.21

  '@chevrotain/regexp-to-ast@11.0.3': {}

  '@chevrotain/types@11.0.3': {}

  '@chevrotain/utils@11.0.3': {}

  '@clack/core@0.5.0':
    dependencies:
      picocolors: 1.1.1
      sisteransi: 1.0.5

  '@clack/prompts@0.11.0':
    dependencies:
      '@clack/core': 0.5.0
      picocolors: 1.1.1
      sisteransi: 1.0.5

  '@cloudflare/kv-asset-handler@0.4.0':
    dependencies:
      mime: 3.0.0

  '@codemirror/autocomplete@6.18.6':
    dependencies:
      '@codemirror/language': 6.11.2
      '@codemirror/state': 6.5.2
      '@codemirror/view': 6.38.0
      '@lezer/common': 1.2.3

  '@codemirror/commands@6.8.1':
    dependencies:
      '@codemirror/language': 6.11.2
      '@codemirror/state': 6.5.2
      '@codemirror/view': 6.38.0
      '@lezer/common': 1.2.3

  '@codemirror/lang-css@6.3.1':
    dependencies:
      '@codemirror/autocomplete': 6.18.6
      '@codemirror/language': 6.11.2
      '@codemirror/state': 6.5.2
      '@lezer/common': 1.2.3
      '@lezer/css': 1.3.0

  '@codemirror/lang-html@6.4.9':
    dependencies:
      '@codemirror/autocomplete': 6.18.6
      '@codemirror/lang-css': 6.3.1
      '@codemirror/lang-javascript': 6.2.4
      '@codemirror/language': 6.11.2
      '@codemirror/state': 6.5.2
      '@codemirror/view': 6.38.0
      '@lezer/common': 1.2.3
      '@lezer/css': 1.3.0
      '@lezer/html': 1.3.10

  '@codemirror/lang-javascript@6.2.4':
    dependencies:
      '@codemirror/autocomplete': 6.18.6
      '@codemirror/language': 6.11.2
      '@codemirror/lint': 6.8.5
      '@codemirror/state': 6.5.2
      '@codemirror/view': 6.38.0
      '@lezer/common': 1.2.3
      '@lezer/javascript': 1.5.1

  '@codemirror/lang-json@6.0.2':
    dependencies:
      '@codemirror/language': 6.11.2
      '@lezer/json': 1.0.3

  '@codemirror/lang-xml@6.1.0':
    dependencies:
      '@codemirror/autocomplete': 6.18.6
      '@codemirror/language': 6.11.2
      '@codemirror/state': 6.5.2
      '@codemirror/view': 6.38.0
      '@lezer/common': 1.2.3
      '@lezer/xml': 1.0.6

  '@codemirror/lang-yaml@6.1.2':
    dependencies:
      '@codemirror/autocomplete': 6.18.6
      '@codemirror/language': 6.11.2
      '@codemirror/state': 6.5.2
      '@lezer/common': 1.2.3
      '@lezer/highlight': 1.2.1
      '@lezer/lr': 1.4.2
      '@lezer/yaml': 1.0.3

  '@codemirror/language@6.11.2':
    dependencies:
      '@codemirror/state': 6.5.2
      '@codemirror/view': 6.38.0
      '@lezer/common': 1.2.3
      '@lezer/highlight': 1.2.1
      '@lezer/lr': 1.4.2
      style-mod: 4.1.2

  '@codemirror/lint@6.8.5':
    dependencies:
      '@codemirror/state': 6.5.2
      '@codemirror/view': 6.38.0
      crelt: 1.0.6

  '@codemirror/search@6.5.11':
    dependencies:
      '@codemirror/state': 6.5.2
      '@codemirror/view': 6.38.0
      crelt: 1.0.6

  '@codemirror/state@6.5.2':
    dependencies:
      '@marijn/find-cluster-break': 1.0.2

  '@codemirror/view@6.38.0':
    dependencies:
      '@codemirror/state': 6.5.2
      crelt: 1.0.6
      style-mod: 4.1.2
      w3c-keyname: 2.2.8

  '@colors/colors@1.6.0': {}

  '@content-collections/core@0.10.0(typescript@5.8.3)':
    dependencies:
      '@standard-schema/spec': 1.0.0
      camelcase: 8.0.0
      chokidar: 4.0.3
      esbuild: 0.25.6
      gray-matter: 4.0.3
      p-limit: 6.2.0
      picomatch: 4.0.2
      pluralize: 8.0.0
      serialize-javascript: 6.0.2
      tinyglobby: 0.2.14
      typescript: 5.8.3
      yaml: 2.8.0
      zod: 3.25.76

  '@content-collections/integrations@0.2.1(@content-collections/core@0.10.0(typescript@5.8.3))':
    dependencies:
      '@content-collections/core': 0.10.0(typescript@5.8.3)

  '@content-collections/mdx@0.2.2(@content-collections/core@0.10.0(typescript@5.8.3))(acorn@8.15.0)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@content-collections/core': 0.10.0(typescript@5.8.3)
      esbuild: 0.25.6
      mdx-bundler: 10.1.1(acorn@8.15.0)(esbuild@0.25.6)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
      unified: 11.0.5
    transitivePeerDependencies:
      - acorn
      - supports-color

  '@content-collections/next@0.2.6(@content-collections/core@0.10.0(typescript@5.8.3))(next@15.3.5(@babel/core@7.28.0)(@opentelemetry/api@1.9.0)(babel-plugin-macros@3.1.0)(react-dom@19.1.0(react@19.1.0))(react@19.1.0))':
    dependencies:
      '@content-collections/core': 0.10.0(typescript@5.8.3)
      '@content-collections/integrations': 0.2.1(@content-collections/core@0.10.0(typescript@5.8.3))
      next: 15.3.5(@babel/core@7.28.0)(@opentelemetry/api@1.9.0)(babel-plugin-macros@3.1.0)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)

  '@dabh/diagnostics@2.0.3':
    dependencies:
      colorspace: 1.1.4
      enabled: 2.0.0
      kuler: 2.0.0

  '@deno/shim-deno-test@0.5.0': {}

  '@deno/shim-deno@0.19.2':
    dependencies:
      '@deno/shim-deno-test': 0.5.0
      which: 4.0.0

  '@dependents/detective-less@5.0.1':
    dependencies:
      gonzales-pe: 4.3.0
      node-source-walk: 7.0.1

  '@discoveryjs/json-ext@0.5.7': {}

  '@emnapi/core@1.4.4':
    dependencies:
      '@emnapi/wasi-threads': 1.0.3
      tslib: 2.8.1
    optional: true

  '@emnapi/runtime@1.4.4':
    dependencies:
      tslib: 2.8.1
    optional: true

  '@emnapi/wasi-threads@1.0.3':
    dependencies:
      tslib: 2.8.1
    optional: true

  '@emotion/babel-plugin@11.13.5':
    dependencies:
      '@babel/helper-module-imports': 7.27.1
      '@babel/runtime': 7.27.6
      '@emotion/hash': 0.9.2
      '@emotion/memoize': 0.9.0
      '@emotion/serialize': 1.3.3
      babel-plugin-macros: 3.1.0
      convert-source-map: 1.9.0
      escape-string-regexp: 4.0.0
      find-root: 1.1.0
      source-map: 0.5.7
      stylis: 4.2.0
    transitivePeerDependencies:
      - supports-color

  '@emotion/cache@11.14.0':
    dependencies:
      '@emotion/memoize': 0.9.0
      '@emotion/sheet': 1.4.0
      '@emotion/utils': 1.4.2
      '@emotion/weak-memoize': 0.4.0
      stylis: 4.2.0

  '@emotion/css@11.13.5':
    dependencies:
      '@emotion/babel-plugin': 11.13.5
      '@emotion/cache': 11.14.0
      '@emotion/serialize': 1.3.3
      '@emotion/sheet': 1.4.0
      '@emotion/utils': 1.4.2
    transitivePeerDependencies:
      - supports-color

  '@emotion/hash@0.9.2': {}

  '@emotion/memoize@0.9.0': {}

  '@emotion/react@11.14.0(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      '@babel/runtime': 7.27.6
      '@emotion/babel-plugin': 11.13.5
      '@emotion/cache': 11.14.0
      '@emotion/serialize': 1.3.3
      '@emotion/use-insertion-effect-with-fallbacks': 1.2.0(react@19.1.0)
      '@emotion/utils': 1.4.2
      '@emotion/weak-memoize': 0.4.0
      hoist-non-react-statics: 3.3.2
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8
    transitivePeerDependencies:
      - supports-color

  '@emotion/serialize@1.3.3':
    dependencies:
      '@emotion/hash': 0.9.2
      '@emotion/memoize': 0.9.0
      '@emotion/unitless': 0.10.0
      '@emotion/utils': 1.4.2
      csstype: 3.1.3

  '@emotion/sheet@1.4.0': {}

  '@emotion/unitless@0.10.0': {}

  '@emotion/use-insertion-effect-with-fallbacks@1.2.0(react@19.1.0)':
    dependencies:
      react: 19.1.0

  '@emotion/utils@1.4.2': {}

  '@emotion/weak-memoize@0.4.0': {}

  '@esbuild-plugins/node-resolve@0.2.2(esbuild@0.25.6)':
    dependencies:
      '@types/resolve': 1.20.6
      debug: 4.4.1
      esbuild: 0.25.6
      escape-string-regexp: 4.0.0
      resolve: 1.22.10
    transitivePeerDependencies:
      - supports-color

  '@esbuild/aix-ppc64@0.25.5':
    optional: true

  '@esbuild/aix-ppc64@0.25.6':
    optional: true

  '@esbuild/android-arm64@0.25.5':
    optional: true

  '@esbuild/android-arm64@0.25.6':
    optional: true

  '@esbuild/android-arm@0.25.5':
    optional: true

  '@esbuild/android-arm@0.25.6':
    optional: true

  '@esbuild/android-x64@0.25.5':
    optional: true

  '@esbuild/android-x64@0.25.6':
    optional: true

  '@esbuild/darwin-arm64@0.25.5':
    optional: true

  '@esbuild/darwin-arm64@0.25.6':
    optional: true

  '@esbuild/darwin-x64@0.25.5':
    optional: true

  '@esbuild/darwin-x64@0.25.6':
    optional: true

  '@esbuild/freebsd-arm64@0.25.5':
    optional: true

  '@esbuild/freebsd-arm64@0.25.6':
    optional: true

  '@esbuild/freebsd-x64@0.25.5':
    optional: true

  '@esbuild/freebsd-x64@0.25.6':
    optional: true

  '@esbuild/linux-arm64@0.25.5':
    optional: true

  '@esbuild/linux-arm64@0.25.6':
    optional: true

  '@esbuild/linux-arm@0.25.5':
    optional: true

  '@esbuild/linux-arm@0.25.6':
    optional: true

  '@esbuild/linux-ia32@0.25.5':
    optional: true

  '@esbuild/linux-ia32@0.25.6':
    optional: true

  '@esbuild/linux-loong64@0.25.5':
    optional: true

  '@esbuild/linux-loong64@0.25.6':
    optional: true

  '@esbuild/linux-mips64el@0.25.5':
    optional: true

  '@esbuild/linux-mips64el@0.25.6':
    optional: true

  '@esbuild/linux-ppc64@0.25.5':
    optional: true

  '@esbuild/linux-ppc64@0.25.6':
    optional: true

  '@esbuild/linux-riscv64@0.25.5':
    optional: true

  '@esbuild/linux-riscv64@0.25.6':
    optional: true

  '@esbuild/linux-s390x@0.25.5':
    optional: true

  '@esbuild/linux-s390x@0.25.6':
    optional: true

  '@esbuild/linux-x64@0.25.5':
    optional: true

  '@esbuild/linux-x64@0.25.6':
    optional: true

  '@esbuild/netbsd-arm64@0.25.5':
    optional: true

  '@esbuild/netbsd-arm64@0.25.6':
    optional: true

  '@esbuild/netbsd-x64@0.25.5':
    optional: true

  '@esbuild/netbsd-x64@0.25.6':
    optional: true

  '@esbuild/openbsd-arm64@0.25.5':
    optional: true

  '@esbuild/openbsd-arm64@0.25.6':
    optional: true

  '@esbuild/openbsd-x64@0.25.5':
    optional: true

  '@esbuild/openbsd-x64@0.25.6':
    optional: true

  '@esbuild/openharmony-arm64@0.25.6':
    optional: true

  '@esbuild/sunos-x64@0.25.5':
    optional: true

  '@esbuild/sunos-x64@0.25.6':
    optional: true

  '@esbuild/win32-arm64@0.25.5':
    optional: true

  '@esbuild/win32-arm64@0.25.6':
    optional: true

  '@esbuild/win32-ia32@0.25.5':
    optional: true

  '@esbuild/win32-ia32@0.25.6':
    optional: true

  '@esbuild/win32-x64@0.25.5':
    optional: true

  '@esbuild/win32-x64@0.25.6':
    optional: true

  '@eslint-community/eslint-utils@4.7.0(eslint@9.30.1(jiti@2.4.2))':
    dependencies:
      eslint: 9.30.1(jiti@2.4.2)
      eslint-visitor-keys: 3.4.3

  '@eslint-community/regexpp@4.12.1': {}

  '@eslint/config-array@0.21.0':
    dependencies:
      '@eslint/object-schema': 2.1.6
      debug: 4.4.1
      minimatch: 3.1.2
    transitivePeerDependencies:
      - supports-color

  '@eslint/config-helpers@0.3.0': {}

  '@eslint/core@0.14.0':
    dependencies:
      '@types/json-schema': 7.0.15

  '@eslint/core@0.15.1':
    dependencies:
      '@types/json-schema': 7.0.15

  '@eslint/eslintrc@3.3.1':
    dependencies:
      ajv: 6.12.6
      debug: 4.4.1
      espree: 10.4.0
      globals: 14.0.0
      ignore: 5.3.2
      import-fresh: 3.3.1
      js-yaml: 4.1.0
      minimatch: 3.1.2
      strip-json-comments: 3.1.1
    transitivePeerDependencies:
      - supports-color

  '@eslint/js@9.30.1': {}

  '@eslint/object-schema@2.1.6': {}

  '@eslint/plugin-kit@0.3.3':
    dependencies:
      '@eslint/core': 0.15.1
      levn: 0.4.1

  '@fal-works/esbuild-plugin-global-externals@2.1.2': {}

  '@fastify/busboy@3.1.1': {}

  '@floating-ui/core@1.7.2':
    dependencies:
      '@floating-ui/utils': 0.2.10

  '@floating-ui/dom@1.7.2':
    dependencies:
      '@floating-ui/core': 1.7.2
      '@floating-ui/utils': 0.2.10

  '@floating-ui/react-dom@2.1.2(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@floating-ui/dom': 1.7.2
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)

  '@floating-ui/utils@0.2.10': {}

  '@floating-ui/vue@1.1.7(vue@3.5.17(typescript@5.8.3))':
    dependencies:
      '@floating-ui/dom': 1.7.2
      '@floating-ui/utils': 0.2.10
      vue-demi: 0.14.10(vue@3.5.17(typescript@5.8.3))
    transitivePeerDependencies:
      - '@vue/composition-api'
      - vue

  '@formatjs/intl-localematcher@0.6.1':
    dependencies:
      tslib: 2.8.1

  '@fumari/json-schema-to-typescript@1.1.3':
    dependencies:
      '@apidevtools/json-schema-ref-parser': 11.9.3
      js-yaml: 4.1.0
      prettier: 3.6.2

  '@headlessui/tailwindcss@0.2.2(tailwindcss@4.1.11)':
    dependencies:
      tailwindcss: 4.1.11

  '@headlessui/vue@1.7.23(vue@3.5.17(typescript@5.8.3))':
    dependencies:
      '@tanstack/vue-virtual': 3.13.12(vue@3.5.17(typescript@5.8.3))
      vue: 3.5.17(typescript@5.8.3)

  '@humanfs/core@0.19.1': {}

  '@humanfs/node@0.16.6':
    dependencies:
      '@humanfs/core': 0.19.1
      '@humanwhocodes/retry': 0.3.1

  '@humanwhocodes/module-importer@1.0.1': {}

  '@humanwhocodes/retry@0.3.1': {}

  '@humanwhocodes/retry@0.4.3': {}

  '@hyperjump/browser@1.3.1':
    dependencies:
      '@hyperjump/json-pointer': 1.1.1
      '@hyperjump/uri': 1.3.1
      content-type: 1.0.5
      just-curry-it: 5.3.0

  '@hyperjump/json-pointer@1.1.1': {}

  '@hyperjump/json-schema@1.16.1(@hyperjump/browser@1.3.1)':
    dependencies:
      '@hyperjump/browser': 1.3.1
      '@hyperjump/json-pointer': 1.1.1
      '@hyperjump/pact': 1.4.0
      '@hyperjump/uri': 1.3.1
      content-type: 1.0.5
      json-stringify-deterministic: 1.0.12
      just-curry-it: 5.3.0
      uuid: 9.0.1

  '@hyperjump/pact@1.4.0': {}

  '@hyperjump/uri@1.3.1': {}

  '@iconify/types@2.0.0': {}

  '@iconify/utils@2.3.0':
    dependencies:
      '@antfu/install-pkg': 1.1.0
      '@antfu/utils': 8.1.1
      '@iconify/types': 2.0.0
      debug: 4.4.1
      globals: 15.15.0
      kolorist: 1.8.0
      local-pkg: 1.1.1
      mlly: 1.7.4
    transitivePeerDependencies:
      - supports-color

  '@img/sharp-darwin-arm64@0.34.3':
    optionalDependencies:
      '@img/sharp-libvips-darwin-arm64': 1.2.0
    optional: true

  '@img/sharp-darwin-x64@0.34.3':
    optionalDependencies:
      '@img/sharp-libvips-darwin-x64': 1.2.0
    optional: true

  '@img/sharp-libvips-darwin-arm64@1.2.0':
    optional: true

  '@img/sharp-libvips-darwin-x64@1.2.0':
    optional: true

  '@img/sharp-libvips-linux-arm64@1.2.0':
    optional: true

  '@img/sharp-libvips-linux-arm@1.2.0':
    optional: true

  '@img/sharp-libvips-linux-ppc64@1.2.0':
    optional: true

  '@img/sharp-libvips-linux-s390x@1.2.0':
    optional: true

  '@img/sharp-libvips-linux-x64@1.2.0':
    optional: true

  '@img/sharp-libvips-linuxmusl-arm64@1.2.0':
    optional: true

  '@img/sharp-libvips-linuxmusl-x64@1.2.0':
    optional: true

  '@img/sharp-linux-arm64@0.34.3':
    optionalDependencies:
      '@img/sharp-libvips-linux-arm64': 1.2.0
    optional: true

  '@img/sharp-linux-arm@0.34.3':
    optionalDependencies:
      '@img/sharp-libvips-linux-arm': 1.2.0
    optional: true

  '@img/sharp-linux-ppc64@0.34.3':
    optionalDependencies:
      '@img/sharp-libvips-linux-ppc64': 1.2.0
    optional: true

  '@img/sharp-linux-s390x@0.34.3':
    optionalDependencies:
      '@img/sharp-libvips-linux-s390x': 1.2.0
    optional: true

  '@img/sharp-linux-x64@0.34.3':
    optionalDependencies:
      '@img/sharp-libvips-linux-x64': 1.2.0
    optional: true

  '@img/sharp-linuxmusl-arm64@0.34.3':
    optionalDependencies:
      '@img/sharp-libvips-linuxmusl-arm64': 1.2.0
    optional: true

  '@img/sharp-linuxmusl-x64@0.34.3':
    optionalDependencies:
      '@img/sharp-libvips-linuxmusl-x64': 1.2.0
    optional: true

  '@img/sharp-wasm32@0.34.3':
    dependencies:
      '@emnapi/runtime': 1.4.4
    optional: true

  '@img/sharp-win32-arm64@0.34.3':
    optional: true

  '@img/sharp-win32-ia32@0.34.3':
    optional: true

  '@img/sharp-win32-x64@0.34.3':
    optional: true

  '@internationalized/date@3.8.2':
    dependencies:
      '@swc/helpers': 0.5.17

  '@internationalized/number@3.6.3':
    dependencies:
      '@swc/helpers': 0.5.17

  '@ioredis/commands@1.2.0': {}

  '@isaacs/cliui@8.0.2':
    dependencies:
      string-width: 5.1.2
      string-width-cjs: string-width@4.2.3
      strip-ansi: 7.1.0
      strip-ansi-cjs: strip-ansi@6.0.1
      wrap-ansi: 8.1.0
      wrap-ansi-cjs: wrap-ansi@7.0.0

  '@isaacs/fs-minipass@4.0.1':
    dependencies:
      minipass: 7.1.2

  '@jridgewell/gen-mapping@0.3.12':
    dependencies:
      '@jridgewell/sourcemap-codec': 1.5.4
      '@jridgewell/trace-mapping': 0.3.29

  '@jridgewell/resolve-uri@3.1.2': {}

  '@jridgewell/source-map@0.3.6':
    dependencies:
      '@jridgewell/gen-mapping': 0.3.12
      '@jridgewell/trace-mapping': 0.3.29

  '@jridgewell/sourcemap-codec@1.5.4': {}

  '@jridgewell/trace-mapping@0.3.29':
    dependencies:
      '@jridgewell/resolve-uri': 3.1.2
      '@jridgewell/sourcemap-codec': 1.5.4

  '@jsdevtools/ono@7.1.3': {}

  '@lezer/common@1.2.3': {}

  '@lezer/css@1.3.0':
    dependencies:
      '@lezer/common': 1.2.3
      '@lezer/highlight': 1.2.1
      '@lezer/lr': 1.4.2

  '@lezer/highlight@1.2.1':
    dependencies:
      '@lezer/common': 1.2.3

  '@lezer/html@1.3.10':
    dependencies:
      '@lezer/common': 1.2.3
      '@lezer/highlight': 1.2.1
      '@lezer/lr': 1.4.2

  '@lezer/javascript@1.5.1':
    dependencies:
      '@lezer/common': 1.2.3
      '@lezer/highlight': 1.2.1
      '@lezer/lr': 1.4.2

  '@lezer/json@1.0.3':
    dependencies:
      '@lezer/common': 1.2.3
      '@lezer/highlight': 1.2.1
      '@lezer/lr': 1.4.2

  '@lezer/lr@1.4.2':
    dependencies:
      '@lezer/common': 1.2.3

  '@lezer/xml@1.0.6':
    dependencies:
      '@lezer/common': 1.2.3
      '@lezer/highlight': 1.2.1
      '@lezer/lr': 1.4.2

  '@lezer/yaml@1.0.3':
    dependencies:
      '@lezer/common': 1.2.3
      '@lezer/highlight': 1.2.1
      '@lezer/lr': 1.4.2

  '@manypkg/find-root@1.1.0':
    dependencies:
      '@babel/runtime': 7.27.6
      '@types/node': 12.20.55
      find-up: 4.1.0
      fs-extra: 8.1.0

  '@manypkg/get-packages@1.1.3':
    dependencies:
      '@babel/runtime': 7.27.6
      '@changesets/types': 4.1.0
      '@manypkg/find-root': 1.1.0
      fs-extra: 8.1.0
      globby: 11.1.0
      read-yaml-file: 1.1.0

  '@mapbox/node-pre-gyp@2.0.0':
    dependencies:
      consola: 3.4.2
      detect-libc: 2.0.4
      https-proxy-agent: 7.0.6
      node-fetch: 2.7.0
      nopt: 8.1.0
      semver: 7.7.2
      tar: 7.4.3
    transitivePeerDependencies:
      - encoding
      - supports-color

  '@marijn/find-cluster-break@1.0.2': {}

  '@mdx-js/esbuild@3.1.0(acorn@8.15.0)(esbuild@0.25.6)':
    dependencies:
      '@mdx-js/mdx': 3.1.0(acorn@8.15.0)
      '@types/unist': 3.0.3
      esbuild: 0.25.6
      source-map: 0.7.4
      vfile: 6.0.3
      vfile-message: 4.0.2
    transitivePeerDependencies:
      - acorn
      - supports-color

  '@mdx-js/mdx@3.1.0(acorn@8.15.0)':
    dependencies:
      '@types/estree': 1.0.8
      '@types/estree-jsx': 1.0.5
      '@types/hast': 3.0.4
      '@types/mdx': 2.0.13
      collapse-white-space: 2.1.0
      devlop: 1.1.0
      estree-util-is-identifier-name: 3.0.0
      estree-util-scope: 1.0.0
      estree-walker: 3.0.3
      hast-util-to-jsx-runtime: 2.3.6
      markdown-extensions: 2.0.0
      recma-build-jsx: 1.0.0
      recma-jsx: 1.0.0(acorn@8.15.0)
      recma-stringify: 1.0.0
      rehype-recma: 1.0.0
      remark-mdx: 3.1.0
      remark-parse: 11.0.0
      remark-rehype: 11.1.2
      source-map: 0.7.4
      unified: 11.0.5
      unist-util-position-from-estree: 2.0.0
      unist-util-stringify-position: 4.0.0
      unist-util-visit: 5.0.0
      vfile: 6.0.3
    transitivePeerDependencies:
      - acorn
      - supports-color

  '@mermaid-js/parser@0.6.1':
    dependencies:
      langium: 3.3.1

  '@mjackson/node-fetch-server@0.2.0': {}

  '@napi-rs/wasm-runtime@0.2.11':
    dependencies:
      '@emnapi/core': 1.4.4
      '@emnapi/runtime': 1.4.4
      '@tybys/wasm-util': 0.9.0
    optional: true

  '@netlify/binary-info@1.0.0': {}

  '@netlify/blobs@9.1.2':
    dependencies:
      '@netlify/dev-utils': 2.2.0
      '@netlify/runtime-utils': 1.3.1

  '@netlify/dev-utils@2.2.0':
    dependencies:
      '@whatwg-node/server': 0.9.71
      chokidar: 4.0.3
      decache: 4.6.2
      dot-prop: 9.0.0
      env-paths: 3.0.0
      find-up: 7.0.0
      lodash.debounce: 4.0.8
      netlify: 13.3.5
      parse-gitignore: 2.0.0
      uuid: 11.1.0
      write-file-atomic: 6.0.0

  '@netlify/functions@3.1.10(rollup@4.44.2)':
    dependencies:
      '@netlify/blobs': 9.1.2
      '@netlify/dev-utils': 2.2.0
      '@netlify/serverless-functions-api': 1.41.2
      '@netlify/zip-it-and-ship-it': 12.2.0(rollup@4.44.2)
      cron-parser: 4.9.0
      decache: 4.6.2
      extract-zip: 2.0.1
      is-stream: 4.0.1
      jwt-decode: 4.0.0
      lambda-local: 2.2.0
      read-package-up: 11.0.0
      source-map-support: 0.5.21
    transitivePeerDependencies:
      - encoding
      - rollup
      - supports-color

  '@netlify/open-api@2.37.0': {}

  '@netlify/runtime-utils@1.3.1': {}

  '@netlify/serverless-functions-api@1.41.2': {}

  '@netlify/serverless-functions-api@2.1.2': {}

  '@netlify/zip-it-and-ship-it@12.2.0(rollup@4.44.2)':
    dependencies:
      '@babel/parser': 7.28.0
      '@babel/types': 7.27.6
      '@netlify/binary-info': 1.0.0
      '@netlify/serverless-functions-api': 2.1.2
      '@vercel/nft': 0.29.4(rollup@4.44.2)
      archiver: 7.0.1
      common-path-prefix: 3.0.0
      copy-file: 11.0.0
      es-module-lexer: 1.7.0
      esbuild: 0.25.5
      execa: 8.0.1
      fast-glob: 3.3.3
      filter-obj: 6.1.0
      find-up: 7.0.0
      is-builtin-module: 3.2.1
      is-path-inside: 4.0.0
      junk: 4.0.1
      locate-path: 7.2.0
      merge-options: 3.0.4
      minimatch: 9.0.5
      normalize-path: 3.0.0
      p-map: 7.0.3
      path-exists: 5.0.0
      precinct: 12.2.0
      require-package-name: 2.0.1
      resolve: 2.0.0-next.5
      semver: 7.7.2
      tmp-promise: 3.0.3
      toml: 3.0.0
      unixify: 1.0.0
      urlpattern-polyfill: 8.0.2
      yargs: 17.7.2
      zod: 3.25.76
    transitivePeerDependencies:
      - encoding
      - rollup
      - supports-color

  '@next/bundle-analyzer@15.3.5':
    dependencies:
      webpack-bundle-analyzer: 4.10.1
    transitivePeerDependencies:
      - bufferutil
      - utf-8-validate

  '@next/env@15.3.5': {}

  '@next/eslint-plugin-next@15.3.5':
    dependencies:
      fast-glob: 3.3.1

  '@next/swc-darwin-arm64@15.3.5':
    optional: true

  '@next/swc-darwin-x64@15.3.5':
    optional: true

  '@next/swc-linux-arm64-gnu@15.3.5':
    optional: true

  '@next/swc-linux-arm64-musl@15.3.5':
    optional: true

  '@next/swc-linux-x64-gnu@15.3.5':
    optional: true

  '@next/swc-linux-x64-musl@15.3.5':
    optional: true

  '@next/swc-win32-arm64-msvc@15.3.5':
    optional: true

  '@next/swc-win32-x64-msvc@15.3.5':
    optional: true

  '@noble/hashes@1.8.0': {}

  '@nodelib/fs.scandir@2.1.5':
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      run-parallel: 1.2.0

  '@nodelib/fs.stat@2.0.5': {}

  '@nodelib/fs.walk@1.2.8':
    dependencies:
      '@nodelib/fs.scandir': 2.1.5
      fastq: 1.19.1

  '@npmcli/git@4.1.0':
    dependencies:
      '@npmcli/promise-spawn': 6.0.2
      lru-cache: 7.18.3
      npm-pick-manifest: 8.0.2
      proc-log: 3.0.0
      promise-inflight: 1.0.1
      promise-retry: 2.0.1
      semver: 7.7.2
      which: 3.0.1
    transitivePeerDependencies:
      - bluebird

  '@npmcli/package-json@4.0.1':
    dependencies:
      '@npmcli/git': 4.1.0
      glob: 10.4.5
      hosted-git-info: 6.1.3
      json-parse-even-better-errors: 3.0.2
      normalize-package-data: 5.0.0
      proc-log: 3.0.0
      semver: 7.7.2
    transitivePeerDependencies:
      - bluebird

  '@npmcli/promise-spawn@6.0.2':
    dependencies:
      which: 3.0.1

  '@octokit/app@16.0.1':
    dependencies:
      '@octokit/auth-app': 8.0.1
      '@octokit/auth-unauthenticated': 7.0.1
      '@octokit/core': 7.0.2
      '@octokit/oauth-app': 8.0.1
      '@octokit/plugin-paginate-rest': 13.0.1(@octokit/core@7.0.2)
      '@octokit/types': 14.1.0
      '@octokit/webhooks': 14.0.0

  '@octokit/auth-app@8.0.1':
    dependencies:
      '@octokit/auth-oauth-app': 9.0.1
      '@octokit/auth-oauth-user': 6.0.0
      '@octokit/request': 10.0.2
      '@octokit/request-error': 7.0.0
      '@octokit/types': 14.1.0
      toad-cache: 3.7.0
      universal-github-app-jwt: 2.2.2
      universal-user-agent: 7.0.3

  '@octokit/auth-oauth-app@9.0.1':
    dependencies:
      '@octokit/auth-oauth-device': 8.0.1
      '@octokit/auth-oauth-user': 6.0.0
      '@octokit/request': 10.0.2
      '@octokit/types': 14.1.0
      universal-user-agent: 7.0.3

  '@octokit/auth-oauth-device@8.0.1':
    dependencies:
      '@octokit/oauth-methods': 6.0.0
      '@octokit/request': 10.0.2
      '@octokit/types': 14.1.0
      universal-user-agent: 7.0.3

  '@octokit/auth-oauth-user@6.0.0':
    dependencies:
      '@octokit/auth-oauth-device': 8.0.1
      '@octokit/oauth-methods': 6.0.0
      '@octokit/request': 10.0.2
      '@octokit/types': 14.1.0
      universal-user-agent: 7.0.3

  '@octokit/auth-token@6.0.0': {}

  '@octokit/auth-unauthenticated@7.0.1':
    dependencies:
      '@octokit/request-error': 7.0.0
      '@octokit/types': 14.1.0

  '@octokit/core@7.0.2':
    dependencies:
      '@octokit/auth-token': 6.0.0
      '@octokit/graphql': 9.0.1
      '@octokit/request': 10.0.2
      '@octokit/request-error': 7.0.0
      '@octokit/types': 14.1.0
      before-after-hook: 4.0.0
      universal-user-agent: 7.0.3

  '@octokit/endpoint@11.0.0':
    dependencies:
      '@octokit/types': 14.1.0
      universal-user-agent: 7.0.3

  '@octokit/graphql@9.0.1':
    dependencies:
      '@octokit/request': 10.0.2
      '@octokit/types': 14.1.0
      universal-user-agent: 7.0.3

  '@octokit/oauth-app@8.0.1':
    dependencies:
      '@octokit/auth-oauth-app': 9.0.1
      '@octokit/auth-oauth-user': 6.0.0
      '@octokit/auth-unauthenticated': 7.0.1
      '@octokit/core': 7.0.2
      '@octokit/oauth-authorization-url': 8.0.0
      '@octokit/oauth-methods': 6.0.0
      '@types/aws-lambda': 8.10.149
      universal-user-agent: 7.0.3

  '@octokit/oauth-authorization-url@8.0.0': {}

  '@octokit/oauth-methods@6.0.0':
    dependencies:
      '@octokit/oauth-authorization-url': 8.0.0
      '@octokit/request': 10.0.2
      '@octokit/request-error': 7.0.0
      '@octokit/types': 14.1.0

  '@octokit/openapi-types@25.1.0': {}

  '@octokit/openapi-webhooks-types@11.0.0': {}

  '@octokit/plugin-paginate-graphql@6.0.0(@octokit/core@7.0.2)':
    dependencies:
      '@octokit/core': 7.0.2

  '@octokit/plugin-paginate-rest@13.0.1(@octokit/core@7.0.2)':
    dependencies:
      '@octokit/core': 7.0.2
      '@octokit/types': 14.1.0

  '@octokit/plugin-rest-endpoint-methods@16.0.0(@octokit/core@7.0.2)':
    dependencies:
      '@octokit/core': 7.0.2
      '@octokit/types': 14.1.0

  '@octokit/plugin-retry@8.0.1(@octokit/core@7.0.2)':
    dependencies:
      '@octokit/core': 7.0.2
      '@octokit/request-error': 7.0.0
      '@octokit/types': 14.1.0
      bottleneck: 2.19.5

  '@octokit/plugin-throttling@11.0.1(@octokit/core@7.0.2)':
    dependencies:
      '@octokit/core': 7.0.2
      '@octokit/types': 14.1.0
      bottleneck: 2.19.5

  '@octokit/request-error@7.0.0':
    dependencies:
      '@octokit/types': 14.1.0

  '@octokit/request@10.0.2':
    dependencies:
      '@octokit/endpoint': 11.0.0
      '@octokit/request-error': 7.0.0
      '@octokit/types': 14.1.0
      fast-content-type-parse: 3.0.0
      universal-user-agent: 7.0.3

  '@octokit/types@14.1.0':
    dependencies:
      '@octokit/openapi-types': 25.1.0

  '@octokit/webhooks-methods@6.0.0': {}

  '@octokit/webhooks@14.0.0':
    dependencies:
      '@octokit/openapi-webhooks-types': 11.0.0
      '@octokit/request-error': 7.0.0
      '@octokit/webhooks-methods': 6.0.0

  '@one-ini/wasm@0.1.1': {}

  '@oozcitak/dom@1.15.10':
    dependencies:
      '@oozcitak/infra': 1.0.8
      '@oozcitak/url': 1.0.4
      '@oozcitak/util': 8.3.8

  '@oozcitak/infra@1.0.8':
    dependencies:
      '@oozcitak/util': 8.3.8

  '@oozcitak/url@1.0.4':
    dependencies:
      '@oozcitak/infra': 1.0.8
      '@oozcitak/util': 8.3.8

  '@oozcitak/util@8.3.8': {}

  '@opentelemetry/api@1.9.0': {}

  '@orama/cuid2@2.2.3':
    dependencies:
      '@noble/hashes': 1.8.0

  '@orama/orama@3.1.10': {}

  '@orama/tokenizers@3.1.10':
    dependencies:
      '@orama/orama': 3.1.10

  '@oramacloud/client@2.1.4':
    dependencies:
      '@orama/cuid2': 2.2.3
      '@orama/orama': 3.1.10
      lodash: 4.17.21

  '@oxc-transform/binding-android-arm64@0.76.0':
    optional: true

  '@oxc-transform/binding-darwin-arm64@0.76.0':
    optional: true

  '@oxc-transform/binding-darwin-x64@0.76.0':
    optional: true

  '@oxc-transform/binding-freebsd-x64@0.76.0':
    optional: true

  '@oxc-transform/binding-linux-arm-gnueabihf@0.76.0':
    optional: true

  '@oxc-transform/binding-linux-arm-musleabihf@0.76.0':
    optional: true

  '@oxc-transform/binding-linux-arm64-gnu@0.76.0':
    optional: true

  '@oxc-transform/binding-linux-arm64-musl@0.76.0':
    optional: true

  '@oxc-transform/binding-linux-riscv64-gnu@0.76.0':
    optional: true

  '@oxc-transform/binding-linux-s390x-gnu@0.76.0':
    optional: true

  '@oxc-transform/binding-linux-x64-gnu@0.76.0':
    optional: true

  '@oxc-transform/binding-linux-x64-musl@0.76.0':
    optional: true

  '@oxc-transform/binding-wasm32-wasi@0.76.0':
    dependencies:
      '@napi-rs/wasm-runtime': 0.2.11
    optional: true

  '@oxc-transform/binding-win32-arm64-msvc@0.76.0':
    optional: true

  '@oxc-transform/binding-win32-x64-msvc@0.76.0':
    optional: true

  '@parcel/watcher-android-arm64@2.5.1':
    optional: true

  '@parcel/watcher-darwin-arm64@2.5.1':
    optional: true

  '@parcel/watcher-darwin-x64@2.5.1':
    optional: true

  '@parcel/watcher-freebsd-x64@2.5.1':
    optional: true

  '@parcel/watcher-linux-arm-glibc@2.5.1':
    optional: true

  '@parcel/watcher-linux-arm-musl@2.5.1':
    optional: true

  '@parcel/watcher-linux-arm64-glibc@2.5.1':
    optional: true

  '@parcel/watcher-linux-arm64-musl@2.5.1':
    optional: true

  '@parcel/watcher-linux-x64-glibc@2.5.1':
    optional: true

  '@parcel/watcher-linux-x64-musl@2.5.1':
    optional: true

  '@parcel/watcher-wasm@2.3.0':
    dependencies:
      is-glob: 4.0.3
      micromatch: 4.0.8

  '@parcel/watcher-wasm@2.5.1':
    dependencies:
      is-glob: 4.0.3
      micromatch: 4.0.8

  '@parcel/watcher-win32-arm64@2.5.1':
    optional: true

  '@parcel/watcher-win32-ia32@2.5.1':
    optional: true

  '@parcel/watcher-win32-x64@2.5.1':
    optional: true

  '@parcel/watcher@2.5.1':
    dependencies:
      detect-libc: 1.0.3
      is-glob: 4.0.3
      micromatch: 4.0.8
      node-addon-api: 7.1.1
    optionalDependencies:
      '@parcel/watcher-android-arm64': 2.5.1
      '@parcel/watcher-darwin-arm64': 2.5.1
      '@parcel/watcher-darwin-x64': 2.5.1
      '@parcel/watcher-freebsd-x64': 2.5.1
      '@parcel/watcher-linux-arm-glibc': 2.5.1
      '@parcel/watcher-linux-arm-musl': 2.5.1
      '@parcel/watcher-linux-arm64-glibc': 2.5.1
      '@parcel/watcher-linux-arm64-musl': 2.5.1
      '@parcel/watcher-linux-x64-glibc': 2.5.1
      '@parcel/watcher-linux-x64-musl': 2.5.1
      '@parcel/watcher-win32-arm64': 2.5.1
      '@parcel/watcher-win32-ia32': 2.5.1
      '@parcel/watcher-win32-x64': 2.5.1

  '@phosphor-icons/core@2.1.1': {}

  '@pkgjs/parseargs@0.11.0':
    optional: true

  '@polka/url@1.0.0-next.29': {}

  '@popperjs/core@2.11.8': {}

  '@poppinss/colors@4.1.4':
    dependencies:
      kleur: 4.1.5

  '@poppinss/dumper@0.6.3':
    dependencies:
      '@poppinss/colors': 4.1.4
      '@sindresorhus/is': 7.0.2
      supports-color: 10.0.0

  '@poppinss/exception@1.2.1': {}

  '@radix-ui/number@1.1.1': {}

  '@radix-ui/primitive@1.1.2': {}

  '@radix-ui/react-accordion@1.2.11(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.2
      '@radix-ui/react-collapsible': 1.1.11(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-collection': 1.1.7(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-compose-refs': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-direction': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-id': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.2.2(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-arrow@1.1.7(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-collapsible@1.1.11(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.2
      '@radix-ui/react-compose-refs': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-id': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-presence': 1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.2.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-layout-effect': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-collection@1.1.7(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-compose-refs': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-slot': 1.2.3(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-compose-refs@1.1.2(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-context@1.1.2(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-dialog@1.1.14(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.2
      '@radix-ui/react-compose-refs': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-dismissable-layer': 1.1.10(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-focus-guards': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-focus-scope': 1.1.7(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-id': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-portal': 1.1.9(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-presence': 1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-slot': 1.2.3(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.2.2(@types/react@19.1.8)(react@19.1.0)
      aria-hidden: 1.2.6
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
      react-remove-scroll: 2.7.1(@types/react@19.1.8)(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-direction@1.1.1(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-dismissable-layer@1.1.10(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.2
      '@radix-ui/react-compose-refs': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-escape-keydown': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-focus-guards@1.1.2(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-focus-scope@1.1.7(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-compose-refs': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-hover-card@1.1.14(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.2
      '@radix-ui/react-compose-refs': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-dismissable-layer': 1.1.10(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-popper': 1.2.7(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-portal': 1.1.9(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-presence': 1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.2.2(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-id@1.1.1(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      '@radix-ui/react-use-layout-effect': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-navigation-menu@1.2.13(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.2
      '@radix-ui/react-collection': 1.1.7(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-compose-refs': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-direction': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-dismissable-layer': 1.1.10(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-id': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-presence': 1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.2.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-layout-effect': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-previous': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-visually-hidden': 1.2.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-popover@1.1.14(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.2
      '@radix-ui/react-compose-refs': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-dismissable-layer': 1.1.10(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-focus-guards': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-focus-scope': 1.1.7(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-id': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-popper': 1.2.7(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-portal': 1.1.9(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-presence': 1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-slot': 1.2.3(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.2.2(@types/react@19.1.8)(react@19.1.0)
      aria-hidden: 1.2.6
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
      react-remove-scroll: 2.7.1(@types/react@19.1.8)(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-popper@1.2.7(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@floating-ui/react-dom': 2.1.2(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-arrow': 1.1.7(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-compose-refs': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-layout-effect': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-rect': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-size': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/rect': 1.1.1
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-portal@1.1.9(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-layout-effect': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-presence@1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-compose-refs': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-layout-effect': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-primitive@2.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-slot': 1.2.3(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-roving-focus@1.1.10(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.2
      '@radix-ui/react-collection': 1.1.7(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-compose-refs': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-direction': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-id': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.2.2(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-scroll-area@1.2.9(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/number': 1.1.1
      '@radix-ui/primitive': 1.1.2
      '@radix-ui/react-compose-refs': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-direction': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-presence': 1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-layout-effect': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-select@2.2.5(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/number': 1.1.1
      '@radix-ui/primitive': 1.1.2
      '@radix-ui/react-collection': 1.1.7(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-compose-refs': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-direction': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-dismissable-layer': 1.1.10(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-focus-guards': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-focus-scope': 1.1.7(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-id': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-popper': 1.2.7(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-portal': 1.1.9(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-slot': 1.2.3(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.2.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-layout-effect': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-previous': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-visually-hidden': 1.2.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      aria-hidden: 1.2.6
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
      react-remove-scroll: 2.7.1(@types/react@19.1.8)(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-slot@1.2.3(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      '@radix-ui/react-compose-refs': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-tabs@1.1.12(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.2
      '@radix-ui/react-context': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-direction': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-id': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-presence': 1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-roving-focus': 1.1.10(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.2.2(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-tooltip@1.2.7(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.2
      '@radix-ui/react-compose-refs': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-dismissable-layer': 1.1.10(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-id': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-popper': 1.2.7(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-portal': 1.1.9(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-presence': 1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-slot': 1.2.3(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.2.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-visually-hidden': 1.2.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-use-callback-ref@1.1.1(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-use-controllable-state@1.2.2(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      '@radix-ui/react-use-effect-event': 0.0.2(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-layout-effect': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-use-effect-event@0.0.2(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      '@radix-ui/react-use-layout-effect': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-use-escape-keydown@1.1.1(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      '@radix-ui/react-use-callback-ref': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-use-layout-effect@1.1.1(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-use-previous@1.1.1(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-use-rect@1.1.1(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      '@radix-ui/rect': 1.1.1
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-use-size@1.1.1(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      '@radix-ui/react-use-layout-effect': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-visually-hidden@1.2.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/rect@1.1.1': {}

  '@react-router/dev@7.6.3(@react-router/serve@7.6.3(react-router@7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(typescript@5.8.3))(@types/node@24.0.12)(babel-plugin-macros@3.1.0)(jiti@2.4.2)(lightningcss@1.30.1)(react-router@7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(terser@5.43.1)(tsx@4.20.3)(typescript@5.8.3)(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))(yaml@2.8.0)':
    dependencies:
      '@babel/core': 7.28.0
      '@babel/generator': 7.28.0
      '@babel/parser': 7.28.0
      '@babel/plugin-syntax-decorators': 7.27.1(@babel/core@7.28.0)
      '@babel/plugin-syntax-jsx': 7.27.1(@babel/core@7.28.0)
      '@babel/preset-typescript': 7.27.1(@babel/core@7.28.0)
      '@babel/traverse': 7.28.0
      '@babel/types': 7.28.0
      '@npmcli/package-json': 4.0.1
      '@react-router/node': 7.6.3(react-router@7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(typescript@5.8.3)
      arg: 5.0.2
      babel-dead-code-elimination: 1.0.10
      chokidar: 4.0.3
      dedent: 1.6.0(babel-plugin-macros@3.1.0)
      es-module-lexer: 1.7.0
      exit-hook: 2.2.1
      jsesc: 3.0.2
      lodash: 4.17.21
      pathe: 1.1.2
      picocolors: 1.1.1
      prettier: 2.8.8
      react-refresh: 0.14.2
      react-router: 7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      semver: 7.7.2
      set-cookie-parser: 2.7.1
      tinyglobby: 0.2.14
      valibot: 0.41.0(typescript@5.8.3)
      vite: 7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)
      vite-node: 3.2.4(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)
    optionalDependencies:
      '@react-router/serve': 7.6.3(react-router@7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(typescript@5.8.3)
      typescript: 5.8.3
    transitivePeerDependencies:
      - '@types/node'
      - babel-plugin-macros
      - bluebird
      - jiti
      - less
      - lightningcss
      - sass
      - sass-embedded
      - stylus
      - sugarss
      - supports-color
      - terser
      - tsx
      - yaml

  '@react-router/express@7.6.3(express@4.21.2)(react-router@7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(typescript@5.8.3)':
    dependencies:
      '@react-router/node': 7.6.3(react-router@7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(typescript@5.8.3)
      express: 4.21.2
      react-router: 7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
    optionalDependencies:
      typescript: 5.8.3

  '@react-router/node@7.6.3(react-router@7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(typescript@5.8.3)':
    dependencies:
      '@mjackson/node-fetch-server': 0.2.0
      react-router: 7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
    optionalDependencies:
      typescript: 5.8.3

  '@react-router/serve@7.6.3(react-router@7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(typescript@5.8.3)':
    dependencies:
      '@react-router/express': 7.6.3(express@4.21.2)(react-router@7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(typescript@5.8.3)
      '@react-router/node': 7.6.3(react-router@7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(typescript@5.8.3)
      compression: 1.8.0
      express: 4.21.2
      get-port: 5.1.1
      morgan: 1.10.0
      react-router: 7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      source-map-support: 0.5.21
    transitivePeerDependencies:
      - supports-color
      - typescript

  '@replit/codemirror-css-color-picker@6.3.0(@codemirror/language@6.11.2)(@codemirror/state@6.5.2)(@codemirror/view@6.38.0)':
    dependencies:
      '@codemirror/language': 6.11.2
      '@codemirror/state': 6.5.2
      '@codemirror/view': 6.38.0

  '@rolldown/pluginutils@1.0.0-beta.19': {}

  '@rollup/plugin-alias@5.1.1(rollup@4.44.2)':
    optionalDependencies:
      rollup: 4.44.2

  '@rollup/plugin-commonjs@28.0.6(rollup@4.44.2)':
    dependencies:
      '@rollup/pluginutils': 5.2.0(rollup@4.44.2)
      commondir: 1.0.1
      estree-walker: 2.0.2
      fdir: 6.4.6(picomatch@4.0.2)
      is-reference: 1.2.1
      magic-string: 0.30.17
      picomatch: 4.0.2
    optionalDependencies:
      rollup: 4.44.2

  '@rollup/plugin-inject@5.0.5(rollup@4.44.2)':
    dependencies:
      '@rollup/pluginutils': 5.2.0(rollup@4.44.2)
      estree-walker: 2.0.2
      magic-string: 0.30.17
    optionalDependencies:
      rollup: 4.44.2

  '@rollup/plugin-json@6.1.0(rollup@4.44.2)':
    dependencies:
      '@rollup/pluginutils': 5.2.0(rollup@4.44.2)
    optionalDependencies:
      rollup: 4.44.2

  '@rollup/plugin-node-resolve@16.0.1(rollup@4.44.2)':
    dependencies:
      '@rollup/pluginutils': 5.2.0(rollup@4.44.2)
      '@types/resolve': 1.20.2
      deepmerge: 4.3.1
      is-module: 1.0.0
      resolve: 1.22.10
    optionalDependencies:
      rollup: 4.44.2

  '@rollup/plugin-replace@6.0.2(rollup@4.44.2)':
    dependencies:
      '@rollup/pluginutils': 5.2.0(rollup@4.44.2)
      magic-string: 0.30.17
    optionalDependencies:
      rollup: 4.44.2

  '@rollup/plugin-terser@0.4.4(rollup@4.44.2)':
    dependencies:
      serialize-javascript: 6.0.2
      smob: 1.5.0
      terser: 5.43.1
    optionalDependencies:
      rollup: 4.44.2

  '@rollup/pluginutils@5.2.0(rollup@4.44.2)':
    dependencies:
      '@types/estree': 1.0.8
      estree-walker: 2.0.2
      picomatch: 4.0.2
    optionalDependencies:
      rollup: 4.44.2

  '@rollup/rollup-android-arm-eabi@4.44.2':
    optional: true

  '@rollup/rollup-android-arm64@4.44.2':
    optional: true

  '@rollup/rollup-darwin-arm64@4.44.2':
    optional: true

  '@rollup/rollup-darwin-x64@4.44.2':
    optional: true

  '@rollup/rollup-freebsd-arm64@4.44.2':
    optional: true

  '@rollup/rollup-freebsd-x64@4.44.2':
    optional: true

  '@rollup/rollup-linux-arm-gnueabihf@4.44.2':
    optional: true

  '@rollup/rollup-linux-arm-musleabihf@4.44.2':
    optional: true

  '@rollup/rollup-linux-arm64-gnu@4.44.2':
    optional: true

  '@rollup/rollup-linux-arm64-musl@4.44.2':
    optional: true

  '@rollup/rollup-linux-loongarch64-gnu@4.44.2':
    optional: true

  '@rollup/rollup-linux-powerpc64le-gnu@4.44.2':
    optional: true

  '@rollup/rollup-linux-riscv64-gnu@4.44.2':
    optional: true

  '@rollup/rollup-linux-riscv64-musl@4.44.2':
    optional: true

  '@rollup/rollup-linux-s390x-gnu@4.44.2':
    optional: true

  '@rollup/rollup-linux-x64-gnu@4.44.2':
    optional: true

  '@rollup/rollup-linux-x64-musl@4.44.2':
    optional: true

  '@rollup/rollup-win32-arm64-msvc@4.44.2':
    optional: true

  '@rollup/rollup-win32-ia32-msvc@4.44.2':
    optional: true

  '@rollup/rollup-win32-x64-msvc@4.44.2':
    optional: true

  '@scalar/api-client-react@1.3.20(jwt-decode@4.0.0)(react@19.1.0)(tailwindcss@4.1.11)(typescript@5.8.3)':
    dependencies:
      '@scalar/api-client': 2.5.15(jwt-decode@4.0.0)(tailwindcss@4.1.11)(typescript@5.8.3)
      '@scalar/types': 0.2.7
      react: 19.1.0
      vue: 3.5.17(typescript@5.8.3)
    transitivePeerDependencies:
      - '@vue/composition-api'
      - async-validator
      - axios
      - change-case
      - drauu
      - idb-keyval
      - jwt-decode
      - nprogress
      - qrcode
      - sortablejs
      - supports-color
      - tailwindcss
      - typescript
      - universal-cookie

  '@scalar/api-client@2.5.15(jwt-decode@4.0.0)(tailwindcss@4.1.11)(typescript@5.8.3)':
    dependencies:
      '@headlessui/tailwindcss': 0.2.2(tailwindcss@4.1.11)
      '@headlessui/vue': 1.7.23(vue@3.5.17(typescript@5.8.3))
      '@scalar/components': 0.14.16(typescript@5.8.3)
      '@scalar/draggable': 0.2.0(typescript@5.8.3)
      '@scalar/helpers': 0.0.6
      '@scalar/icons': 0.4.6(typescript@5.8.3)
      '@scalar/import': 0.4.13
      '@scalar/oas-utils': 0.4.11(typescript@5.8.3)
      '@scalar/object-utils': 1.2.2
      '@scalar/openapi-parser': 0.18.1
      '@scalar/openapi-types': 0.3.5
      '@scalar/postman-to-openapi': 0.3.14(typescript@5.8.3)
      '@scalar/snippetz': 0.4.0
      '@scalar/themes': 0.13.8
      '@scalar/types': 0.2.7
      '@scalar/use-codemirror': 0.12.17(typescript@5.8.3)
      '@scalar/use-hooks': 0.2.4(typescript@5.8.3)
      '@scalar/use-toasts': 0.8.0(typescript@5.8.3)
      '@scalar/use-tooltip': 1.1.0(typescript@5.8.3)
      '@types/har-format': 1.2.16
      '@vueuse/core': 10.11.1(vue@3.5.17(typescript@5.8.3))
      '@vueuse/integrations': 11.3.0(focus-trap@7.6.5)(fuse.js@7.1.0)(jwt-decode@4.0.0)(vue@3.5.17(typescript@5.8.3))
      focus-trap: 7.6.5
      fuse.js: 7.1.0
      microdiff: 1.5.0
      nanoid: 5.1.5
      pretty-bytes: 6.1.1
      pretty-ms: 8.0.0
      shell-quote: 1.8.3
      type-fest: 4.41.0
      vue: 3.5.17(typescript@5.8.3)
      vue-router: 4.5.1(vue@3.5.17(typescript@5.8.3))
      whatwg-mimetype: 4.0.0
      yaml: 2.8.0
      zod: 3.24.1
    transitivePeerDependencies:
      - '@vue/composition-api'
      - async-validator
      - axios
      - change-case
      - drauu
      - idb-keyval
      - jwt-decode
      - nprogress
      - qrcode
      - sortablejs
      - supports-color
      - tailwindcss
      - typescript
      - universal-cookie

  '@scalar/code-highlight@0.1.5':
    dependencies:
      hast-util-to-text: 4.0.2
      highlight.js: 11.11.1
      highlightjs-curl: 1.3.0
      highlightjs-vue: 1.0.0
      lowlight: 3.3.0
      rehype-external-links: 3.0.0
      rehype-format: 5.0.1
      rehype-parse: 9.0.1
      rehype-raw: 7.0.0
      rehype-sanitize: 6.0.0
      rehype-stringify: 10.0.1
      remark-gfm: 4.0.1
      remark-parse: 11.0.0
      remark-rehype: 11.1.2
      remark-stringify: 11.0.0
      unified: 11.0.5
      unist-util-visit: 5.0.0
    transitivePeerDependencies:
      - supports-color

  '@scalar/components@0.14.16(typescript@5.8.3)':
    dependencies:
      '@floating-ui/utils': 0.2.10
      '@floating-ui/vue': 1.1.7(vue@3.5.17(typescript@5.8.3))
      '@headlessui/vue': 1.7.23(vue@3.5.17(typescript@5.8.3))
      '@scalar/code-highlight': 0.1.5
      '@scalar/icons': 0.4.6(typescript@5.8.3)
      '@scalar/oas-utils': 0.4.11(typescript@5.8.3)
      '@scalar/themes': 0.13.8
      '@scalar/use-hooks': 0.2.4(typescript@5.8.3)
      '@scalar/use-toasts': 0.8.0(typescript@5.8.3)
      '@vueuse/core': 10.11.1(vue@3.5.17(typescript@5.8.3))
      cva: 1.0.0-beta.2(typescript@5.8.3)
      nanoid: 5.1.5
      pretty-bytes: 6.1.1
      radix-vue: 1.9.17(vue@3.5.17(typescript@5.8.3))
      vue: 3.5.17(typescript@5.8.3)
    transitivePeerDependencies:
      - '@vue/composition-api'
      - supports-color
      - typescript

  '@scalar/draggable@0.2.0(typescript@5.8.3)':
    dependencies:
      vue: 3.5.17(typescript@5.8.3)
    transitivePeerDependencies:
      - typescript

  '@scalar/helpers@0.0.6': {}

  '@scalar/icons@0.4.6(typescript@5.8.3)':
    dependencies:
      '@phosphor-icons/core': 2.1.1
      '@types/node': 22.16.2
      chalk: 5.4.1
      vue: 3.5.17(typescript@5.8.3)
    transitivePeerDependencies:
      - typescript

  '@scalar/import@0.4.13':
    dependencies:
      '@scalar/helpers': 0.0.6
      '@scalar/openapi-parser': 0.18.1
      yaml: 2.8.0

  '@scalar/json-diff@0.0.4': {}

  '@scalar/oas-utils@0.4.11(typescript@5.8.3)':
    dependencies:
      '@hyperjump/browser': 1.3.1
      '@hyperjump/json-schema': 1.16.1(@hyperjump/browser@1.3.1)
      '@scalar/helpers': 0.0.6
      '@scalar/object-utils': 1.2.2
      '@scalar/openapi-types': 0.3.5
      '@scalar/themes': 0.13.8
      '@scalar/types': 0.2.7
      '@scalar/workspace-store': 0.8.0(typescript@5.8.3)
      '@types/har-format': 1.2.16
      flatted: 3.3.3
      microdiff: 1.5.0
      nanoid: 5.1.5
      type-fest: 4.41.0
      yaml: 2.8.0
      zod: 3.24.1
    transitivePeerDependencies:
      - supports-color
      - typescript

  '@scalar/object-utils@1.2.2':
    dependencies:
      flatted: 3.3.3
      just-clone: 6.2.0
      ts-deepmerge: 7.0.3
      type-fest: 4.41.0

  '@scalar/openapi-parser@0.18.1':
    dependencies:
      ajv: 8.17.1
      ajv-draft-04: 1.0.0(ajv@8.17.1)
      ajv-formats: 3.0.1(ajv@8.17.1)
      jsonpointer: 5.0.1
      leven: 4.0.0
      yaml: 2.8.0

  '@scalar/openapi-types@0.3.5':
    dependencies:
      zod: 3.24.1

  '@scalar/postman-to-openapi@0.3.14(typescript@5.8.3)':
    dependencies:
      '@scalar/helpers': 0.0.6
      '@scalar/oas-utils': 0.4.11(typescript@5.8.3)
      '@scalar/openapi-types': 0.3.5
    transitivePeerDependencies:
      - supports-color
      - typescript

  '@scalar/snippetz@0.4.0':
    dependencies:
      '@scalar/types': 0.2.7
      stringify-object: 5.0.0

  '@scalar/themes@0.13.8':
    dependencies:
      '@scalar/types': 0.2.7
      nanoid: 5.1.5

  '@scalar/types@0.2.7':
    dependencies:
      '@scalar/openapi-types': 0.3.5
      nanoid: 5.1.5
      zod: 3.24.1

  '@scalar/use-codemirror@0.12.17(typescript@5.8.3)':
    dependencies:
      '@codemirror/autocomplete': 6.18.6
      '@codemirror/commands': 6.8.1
      '@codemirror/lang-css': 6.3.1
      '@codemirror/lang-html': 6.4.9
      '@codemirror/lang-json': 6.0.2
      '@codemirror/lang-xml': 6.1.0
      '@codemirror/lang-yaml': 6.1.2
      '@codemirror/language': 6.11.2
      '@codemirror/lint': 6.8.5
      '@codemirror/state': 6.5.2
      '@codemirror/view': 6.38.0
      '@lezer/common': 1.2.3
      '@lezer/highlight': 1.2.1
      '@replit/codemirror-css-color-picker': 6.3.0(@codemirror/language@6.11.2)(@codemirror/state@6.5.2)(@codemirror/view@6.38.0)
      '@scalar/components': 0.14.16(typescript@5.8.3)
      codemirror: 6.0.2
      vue: 3.5.17(typescript@5.8.3)
    transitivePeerDependencies:
      - '@vue/composition-api'
      - supports-color
      - typescript

  '@scalar/use-hooks@0.2.4(typescript@5.8.3)':
    dependencies:
      '@scalar/use-toasts': 0.8.0(typescript@5.8.3)
      '@vueuse/core': 10.11.1(vue@3.5.17(typescript@5.8.3))
      cva: 1.0.0-beta.2(typescript@5.8.3)
      tailwind-merge: 2.6.0
      vue: 3.5.17(typescript@5.8.3)
      zod: 3.24.1
    transitivePeerDependencies:
      - '@vue/composition-api'
      - typescript

  '@scalar/use-toasts@0.8.0(typescript@5.8.3)':
    dependencies:
      nanoid: 5.1.5
      vue: 3.5.17(typescript@5.8.3)
      vue-sonner: 1.3.2
    transitivePeerDependencies:
      - typescript

  '@scalar/use-tooltip@1.1.0(typescript@5.8.3)':
    dependencies:
      tippy.js: 6.3.7
      vue: 3.5.17(typescript@5.8.3)
    transitivePeerDependencies:
      - typescript

  '@scalar/workspace-store@0.8.0(typescript@5.8.3)':
    dependencies:
      '@scalar/code-highlight': 0.1.5
      '@scalar/helpers': 0.0.6
      '@scalar/json-diff': 0.0.4
      '@scalar/openapi-parser': 0.18.1
      '@scalar/openapi-types': 0.3.5
      '@scalar/types': 0.2.7
      '@sinclair/typebox': 0.34.37
      github-slugger: 2.0.0
      vue: 3.5.17(typescript@5.8.3)
      yaml: 2.8.0
    transitivePeerDependencies:
      - supports-color
      - typescript

  '@shikijs/core@3.7.0':
    dependencies:
      '@shikijs/types': 3.7.0
      '@shikijs/vscode-textmate': 10.0.2
      '@types/hast': 3.0.4
      hast-util-to-html: 9.0.5

  '@shikijs/engine-javascript@3.7.0':
    dependencies:
      '@shikijs/types': 3.7.0
      '@shikijs/vscode-textmate': 10.0.2
      oniguruma-to-es: 4.3.3

  '@shikijs/engine-oniguruma@3.7.0':
    dependencies:
      '@shikijs/types': 3.7.0
      '@shikijs/vscode-textmate': 10.0.2

  '@shikijs/langs@3.7.0':
    dependencies:
      '@shikijs/types': 3.7.0

  '@shikijs/rehype@3.7.0':
    dependencies:
      '@shikijs/types': 3.7.0
      '@types/hast': 3.0.4
      hast-util-to-string: 3.0.1
      shiki: 3.7.0
      unified: 11.0.5
      unist-util-visit: 5.0.0

  '@shikijs/themes@3.7.0':
    dependencies:
      '@shikijs/types': 3.7.0

  '@shikijs/transformers@3.7.0':
    dependencies:
      '@shikijs/core': 3.7.0
      '@shikijs/types': 3.7.0

  '@shikijs/twoslash@3.7.0(typescript@5.8.3)':
    dependencies:
      '@shikijs/core': 3.7.0
      '@shikijs/types': 3.7.0
      twoslash: 0.3.2(typescript@5.8.3)
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  '@shikijs/types@3.7.0':
    dependencies:
      '@shikijs/vscode-textmate': 10.0.2
      '@types/hast': 3.0.4

  '@shikijs/vscode-textmate@10.0.2': {}

  '@sinclair/typebox@0.34.37': {}

  '@sindresorhus/is@7.0.2': {}

  '@sindresorhus/merge-streams@2.3.0': {}

  '@speed-highlight/core@1.2.7': {}

  '@standard-schema/spec@1.0.0': {}

  '@swc/counter@0.1.3': {}

  '@swc/helpers@0.5.15':
    dependencies:
      tslib: 2.8.1

  '@swc/helpers@0.5.17':
    dependencies:
      tslib: 2.8.1

  '@tailwindcss/cli@4.1.11':
    dependencies:
      '@parcel/watcher': 2.5.1
      '@tailwindcss/node': 4.1.11
      '@tailwindcss/oxide': 4.1.11
      enhanced-resolve: 5.18.2
      mri: 1.2.0
      picocolors: 1.1.1
      tailwindcss: 4.1.11

  '@tailwindcss/node@4.1.11':
    dependencies:
      '@ampproject/remapping': 2.3.0
      enhanced-resolve: 5.18.2
      jiti: 2.4.2
      lightningcss: 1.30.1
      magic-string: 0.30.17
      source-map-js: 1.2.1
      tailwindcss: 4.1.11

  '@tailwindcss/oxide-android-arm64@4.1.11':
    optional: true

  '@tailwindcss/oxide-darwin-arm64@4.1.11':
    optional: true

  '@tailwindcss/oxide-darwin-x64@4.1.11':
    optional: true

  '@tailwindcss/oxide-freebsd-x64@4.1.11':
    optional: true

  '@tailwindcss/oxide-linux-arm-gnueabihf@4.1.11':
    optional: true

  '@tailwindcss/oxide-linux-arm64-gnu@4.1.11':
    optional: true

  '@tailwindcss/oxide-linux-arm64-musl@4.1.11':
    optional: true

  '@tailwindcss/oxide-linux-x64-gnu@4.1.11':
    optional: true

  '@tailwindcss/oxide-linux-x64-musl@4.1.11':
    optional: true

  '@tailwindcss/oxide-wasm32-wasi@4.1.11':
    optional: true

  '@tailwindcss/oxide-win32-arm64-msvc@4.1.11':
    optional: true

  '@tailwindcss/oxide-win32-x64-msvc@4.1.11':
    optional: true

  '@tailwindcss/oxide@4.1.11':
    dependencies:
      detect-libc: 2.0.4
      tar: 7.4.3
    optionalDependencies:
      '@tailwindcss/oxide-android-arm64': 4.1.11
      '@tailwindcss/oxide-darwin-arm64': 4.1.11
      '@tailwindcss/oxide-darwin-x64': 4.1.11
      '@tailwindcss/oxide-freebsd-x64': 4.1.11
      '@tailwindcss/oxide-linux-arm-gnueabihf': 4.1.11
      '@tailwindcss/oxide-linux-arm64-gnu': 4.1.11
      '@tailwindcss/oxide-linux-arm64-musl': 4.1.11
      '@tailwindcss/oxide-linux-x64-gnu': 4.1.11
      '@tailwindcss/oxide-linux-x64-musl': 4.1.11
      '@tailwindcss/oxide-wasm32-wasi': 4.1.11
      '@tailwindcss/oxide-win32-arm64-msvc': 4.1.11
      '@tailwindcss/oxide-win32-x64-msvc': 4.1.11

  '@tailwindcss/postcss@4.1.11':
    dependencies:
      '@alloc/quick-lru': 5.2.0
      '@tailwindcss/node': 4.1.11
      '@tailwindcss/oxide': 4.1.11
      postcss: 8.5.6
      tailwindcss: 4.1.11

  '@tailwindcss/vite@4.1.11(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))':
    dependencies:
      '@tailwindcss/node': 4.1.11
      '@tailwindcss/oxide': 4.1.11
      tailwindcss: 4.1.11
      vite: 7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)

  '@tanstack/directive-functions-plugin@1.124.1(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))':
    dependencies:
      '@babel/code-frame': 7.27.1
      '@babel/core': 7.28.0
      '@babel/traverse': 7.28.0
      '@babel/types': 7.28.0
      '@tanstack/router-utils': 1.121.21
      babel-dead-code-elimination: 1.0.10
      tiny-invariant: 1.3.3
      vite: 7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)
    transitivePeerDependencies:
      - supports-color

  '@tanstack/history@1.121.34': {}

  '@tanstack/react-router-devtools@1.125.6(@tanstack/react-router@1.125.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(@tanstack/router-core@1.125.4)(csstype@3.1.3)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)(solid-js@1.9.7)(tiny-invariant@1.3.3)':
    dependencies:
      '@tanstack/react-router': 1.125.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@tanstack/router-devtools-core': 1.125.4(@tanstack/router-core@1.125.4)(csstype@3.1.3)(solid-js@1.9.7)(tiny-invariant@1.3.3)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    transitivePeerDependencies:
      - '@tanstack/router-core'
      - csstype
      - solid-js
      - tiny-invariant

  '@tanstack/react-router@1.125.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@tanstack/history': 1.121.34
      '@tanstack/react-store': 0.7.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@tanstack/router-core': 1.125.4
      isbot: 5.1.28
      jsesc: 3.1.0
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
      tiny-invariant: 1.3.3
      tiny-warning: 1.0.3

  '@tanstack/react-start-client@1.125.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@tanstack/react-router': 1.125.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@tanstack/router-core': 1.125.4
      '@tanstack/start-client-core': 1.125.4
      cookie-es: 1.2.2
      jsesc: 3.1.0
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
      tiny-invariant: 1.3.3
      tiny-warning: 1.0.3

  '@tanstack/react-start-plugin@1.126.1(@tanstack/react-router@1.125.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(@vitejs/plugin-react@4.6.0(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)))(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))(webpack@5.100.0(esbuild@0.25.6))':
    dependencies:
      '@tanstack/start-plugin-core': 1.126.1(@tanstack/react-router@1.125.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))(webpack@5.100.0(esbuild@0.25.6))
      '@vitejs/plugin-react': 4.6.0(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))
      vite: 7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)
      zod: 3.25.76
    transitivePeerDependencies:
      - '@azure/app-configuration'
      - '@azure/cosmos'
      - '@azure/data-tables'
      - '@azure/identity'
      - '@azure/keyvault-secrets'
      - '@azure/storage-blob'
      - '@capacitor/preferences'
      - '@deno/kv'
      - '@electric-sql/pglite'
      - '@libsql/client'
      - '@netlify/blobs'
      - '@planetscale/database'
      - '@rsbuild/core'
      - '@tanstack/react-router'
      - '@upstash/redis'
      - '@vercel/blob'
      - '@vercel/kv'
      - aws4fetch
      - better-sqlite3
      - drizzle-orm
      - encoding
      - idb-keyval
      - mysql2
      - rolldown
      - sqlite3
      - supports-color
      - uploadthing
      - vite-plugin-solid
      - webpack
      - xml2js

  '@tanstack/react-start-server@1.126.1(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@tanstack/history': 1.121.34
      '@tanstack/react-router': 1.125.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@tanstack/router-core': 1.125.4
      '@tanstack/start-client-core': 1.125.4
      '@tanstack/start-server-core': 1.126.1
      h3: 1.13.0
      isbot: 5.1.28
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)

  '@tanstack/react-start@1.126.1(@tanstack/react-router@1.125.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(@vitejs/plugin-react@4.6.0(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)))(react-dom@19.1.0(react@19.1.0))(react@19.1.0)(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))(webpack@5.100.0(esbuild@0.25.6))':
    dependencies:
      '@tanstack/react-start-client': 1.125.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@tanstack/react-start-plugin': 1.126.1(@tanstack/react-router@1.125.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(@vitejs/plugin-react@4.6.0(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)))(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))(webpack@5.100.0(esbuild@0.25.6))
      '@tanstack/react-start-server': 1.126.1(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@tanstack/start-server-functions-client': 1.125.4(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))
      '@tanstack/start-server-functions-server': 1.124.1(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))
      '@vitejs/plugin-react': 4.6.0(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
      vite: 7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)
    transitivePeerDependencies:
      - '@azure/app-configuration'
      - '@azure/cosmos'
      - '@azure/data-tables'
      - '@azure/identity'
      - '@azure/keyvault-secrets'
      - '@azure/storage-blob'
      - '@capacitor/preferences'
      - '@deno/kv'
      - '@electric-sql/pglite'
      - '@libsql/client'
      - '@netlify/blobs'
      - '@planetscale/database'
      - '@rsbuild/core'
      - '@tanstack/react-router'
      - '@upstash/redis'
      - '@vercel/blob'
      - '@vercel/kv'
      - aws4fetch
      - better-sqlite3
      - drizzle-orm
      - encoding
      - idb-keyval
      - mysql2
      - rolldown
      - sqlite3
      - supports-color
      - uploadthing
      - vite-plugin-solid
      - webpack
      - xml2js

  '@tanstack/react-store@0.7.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@tanstack/store': 0.7.2
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
      use-sync-external-store: 1.5.0(react@19.1.0)

  '@tanstack/router-core@1.125.4':
    dependencies:
      '@tanstack/history': 1.121.34
      '@tanstack/store': 0.7.2
      cookie-es: 1.2.2
      jsesc: 3.1.0
      tiny-invariant: 1.3.3
      tiny-warning: 1.0.3

  '@tanstack/router-devtools-core@1.125.4(@tanstack/router-core@1.125.4)(csstype@3.1.3)(solid-js@1.9.7)(tiny-invariant@1.3.3)':
    dependencies:
      '@tanstack/router-core': 1.125.4
      clsx: 2.1.1
      goober: 2.1.16(csstype@3.1.3)
      solid-js: 1.9.7
      tiny-invariant: 1.3.3
    optionalDependencies:
      csstype: 3.1.3

  '@tanstack/router-generator@1.125.4':
    dependencies:
      '@tanstack/router-core': 1.125.4
      '@tanstack/router-utils': 1.121.21
      '@tanstack/virtual-file-routes': 1.121.21
      prettier: 3.6.2
      recast: 0.23.11
      source-map: 0.7.4
      tsx: 4.20.3
      zod: 3.25.76
    transitivePeerDependencies:
      - supports-color

  '@tanstack/router-plugin@1.125.6(@tanstack/react-router@1.125.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))(webpack@5.100.0(esbuild@0.25.6))':
    dependencies:
      '@babel/core': 7.28.0
      '@babel/plugin-syntax-jsx': 7.27.1(@babel/core@7.28.0)
      '@babel/plugin-syntax-typescript': 7.27.1(@babel/core@7.28.0)
      '@babel/template': 7.27.2
      '@babel/traverse': 7.28.0
      '@babel/types': 7.28.0
      '@tanstack/router-core': 1.125.4
      '@tanstack/router-generator': 1.125.4
      '@tanstack/router-utils': 1.121.21
      '@tanstack/virtual-file-routes': 1.121.21
      babel-dead-code-elimination: 1.0.10
      chokidar: 3.6.0
      unplugin: 2.3.5
      zod: 3.25.76
    optionalDependencies:
      '@tanstack/react-router': 1.125.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      vite: 7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)
      webpack: 5.100.0(esbuild@0.25.6)
    transitivePeerDependencies:
      - supports-color

  '@tanstack/router-utils@1.121.21':
    dependencies:
      '@babel/core': 7.28.0
      '@babel/generator': 7.28.0
      '@babel/parser': 7.28.0
      '@babel/preset-typescript': 7.27.1(@babel/core@7.28.0)
      ansis: 4.1.0
      diff: 8.0.2
    transitivePeerDependencies:
      - supports-color

  '@tanstack/server-functions-plugin@1.124.1(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))':
    dependencies:
      '@babel/code-frame': 7.27.1
      '@babel/core': 7.28.0
      '@babel/plugin-syntax-jsx': 7.27.1(@babel/core@7.28.0)
      '@babel/plugin-syntax-typescript': 7.27.1(@babel/core@7.28.0)
      '@babel/template': 7.27.2
      '@babel/traverse': 7.28.0
      '@babel/types': 7.28.0
      '@tanstack/directive-functions-plugin': 1.124.1(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))
      babel-dead-code-elimination: 1.0.10
      tiny-invariant: 1.3.3
    transitivePeerDependencies:
      - supports-color
      - vite

  '@tanstack/start-client-core@1.125.4':
    dependencies:
      '@tanstack/router-core': 1.125.4
      cookie-es: 1.2.2
      tiny-invariant: 1.3.3
      tiny-warning: 1.0.3

  '@tanstack/start-plugin-core@1.126.1(@tanstack/react-router@1.125.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))(webpack@5.100.0(esbuild@0.25.6))':
    dependencies:
      '@babel/code-frame': 7.26.2
      '@babel/core': 7.28.0
      '@babel/types': 7.28.0
      '@tanstack/router-core': 1.125.4
      '@tanstack/router-generator': 1.125.4
      '@tanstack/router-plugin': 1.125.6(@tanstack/react-router@1.125.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))(webpack@5.100.0(esbuild@0.25.6))
      '@tanstack/router-utils': 1.121.21
      '@tanstack/server-functions-plugin': 1.124.1(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))
      '@tanstack/start-server-core': 1.126.1
      '@types/babel__code-frame': 7.0.6
      '@types/babel__core': 7.20.5
      babel-dead-code-elimination: 1.0.10
      cheerio: 1.1.0
      h3: 1.13.0
      nitropack: 2.11.13
      pathe: 2.0.3
      ufo: 1.6.1
      vite: 7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)
      xmlbuilder2: 3.1.1
      zod: 3.25.76
    transitivePeerDependencies:
      - '@azure/app-configuration'
      - '@azure/cosmos'
      - '@azure/data-tables'
      - '@azure/identity'
      - '@azure/keyvault-secrets'
      - '@azure/storage-blob'
      - '@capacitor/preferences'
      - '@deno/kv'
      - '@electric-sql/pglite'
      - '@libsql/client'
      - '@netlify/blobs'
      - '@planetscale/database'
      - '@rsbuild/core'
      - '@tanstack/react-router'
      - '@upstash/redis'
      - '@vercel/blob'
      - '@vercel/kv'
      - aws4fetch
      - better-sqlite3
      - drizzle-orm
      - encoding
      - idb-keyval
      - mysql2
      - rolldown
      - sqlite3
      - supports-color
      - uploadthing
      - vite-plugin-solid
      - webpack
      - xml2js

  '@tanstack/start-server-core@1.126.1':
    dependencies:
      '@tanstack/history': 1.121.34
      '@tanstack/router-core': 1.125.4
      '@tanstack/start-client-core': 1.125.4
      h3: 1.13.0
      isbot: 5.1.28
      jsesc: 3.1.0
      tiny-invariant: 1.3.3
      tiny-warning: 1.0.3
      unctx: 2.4.1

  '@tanstack/start-server-functions-client@1.125.4(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))':
    dependencies:
      '@tanstack/server-functions-plugin': 1.124.1(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))
      '@tanstack/start-server-functions-fetcher': 1.125.4
    transitivePeerDependencies:
      - supports-color
      - vite

  '@tanstack/start-server-functions-fetcher@1.125.4':
    dependencies:
      '@tanstack/router-core': 1.125.4
      '@tanstack/start-client-core': 1.125.4

  '@tanstack/start-server-functions-server@1.124.1(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))':
    dependencies:
      '@tanstack/server-functions-plugin': 1.124.1(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))
      tiny-invariant: 1.3.3
    transitivePeerDependencies:
      - supports-color
      - vite

  '@tanstack/store@0.7.2': {}

  '@tanstack/virtual-core@3.13.12': {}

  '@tanstack/virtual-file-routes@1.121.21': {}

  '@tanstack/vue-virtual@3.13.12(vue@3.5.17(typescript@5.8.3))':
    dependencies:
      '@tanstack/virtual-core': 3.13.12
      vue: 3.5.17(typescript@5.8.3)

  '@ts-morph/common@0.27.0':
    dependencies:
      fast-glob: 3.3.3
      minimatch: 10.0.1
      path-browserify: 1.0.1

  '@tybys/wasm-util@0.9.0':
    dependencies:
      tslib: 2.8.1
    optional: true

  '@types/aws-lambda@8.10.149': {}

  '@types/babel__code-frame@7.0.6': {}

  '@types/babel__core@7.20.5':
    dependencies:
      '@babel/parser': 7.28.0
      '@babel/types': 7.28.0
      '@types/babel__generator': 7.27.0
      '@types/babel__template': 7.4.4
      '@types/babel__traverse': 7.20.7

  '@types/babel__generator@7.27.0':
    dependencies:
      '@babel/types': 7.28.0

  '@types/babel__template@7.4.4':
    dependencies:
      '@babel/parser': 7.28.0
      '@babel/types': 7.28.0

  '@types/babel__traverse@7.20.7':
    dependencies:
      '@babel/types': 7.28.0

  '@types/braces@3.0.5': {}

  '@types/chai@5.2.2':
    dependencies:
      '@types/deep-eql': 4.0.2

  '@types/cross-spawn@6.0.6':
    dependencies:
      '@types/node': 24.0.12

  '@types/d3-array@3.2.1': {}

  '@types/d3-axis@3.0.6':
    dependencies:
      '@types/d3-selection': 3.0.11

  '@types/d3-brush@3.0.6':
    dependencies:
      '@types/d3-selection': 3.0.11

  '@types/d3-chord@3.0.6': {}

  '@types/d3-color@3.1.3': {}

  '@types/d3-contour@3.0.6':
    dependencies:
      '@types/d3-array': 3.2.1
      '@types/geojson': 7946.0.16

  '@types/d3-delaunay@6.0.4': {}

  '@types/d3-dispatch@3.0.6': {}

  '@types/d3-drag@3.0.7':
    dependencies:
      '@types/d3-selection': 3.0.11

  '@types/d3-dsv@3.0.7': {}

  '@types/d3-ease@3.0.2': {}

  '@types/d3-fetch@3.0.7':
    dependencies:
      '@types/d3-dsv': 3.0.7

  '@types/d3-force@3.0.10': {}

  '@types/d3-format@3.0.4': {}

  '@types/d3-geo@3.1.0':
    dependencies:
      '@types/geojson': 7946.0.16

  '@types/d3-hierarchy@1.1.11': {}

  '@types/d3-hierarchy@3.1.7': {}

  '@types/d3-interpolate@3.0.4':
    dependencies:
      '@types/d3-color': 3.1.3

  '@types/d3-path@3.1.1': {}

  '@types/d3-polygon@3.0.2': {}

  '@types/d3-quadtree@3.0.6': {}

  '@types/d3-random@3.0.3': {}

  '@types/d3-scale-chromatic@3.1.0': {}

  '@types/d3-scale@4.0.9':
    dependencies:
      '@types/d3-time': 3.0.4

  '@types/d3-selection@3.0.11': {}

  '@types/d3-shape@3.1.7':
    dependencies:
      '@types/d3-path': 3.1.1

  '@types/d3-time-format@4.0.3': {}

  '@types/d3-time@3.0.4': {}

  '@types/d3-timer@3.0.2': {}

  '@types/d3-transition@3.0.9':
    dependencies:
      '@types/d3-selection': 3.0.11

  '@types/d3-zoom@3.0.8':
    dependencies:
      '@types/d3-interpolate': 3.0.4
      '@types/d3-selection': 3.0.11

  '@types/d3@7.4.3':
    dependencies:
      '@types/d3-array': 3.2.1
      '@types/d3-axis': 3.0.6
      '@types/d3-brush': 3.0.6
      '@types/d3-chord': 3.0.6
      '@types/d3-color': 3.1.3
      '@types/d3-contour': 3.0.6
      '@types/d3-delaunay': 6.0.4
      '@types/d3-dispatch': 3.0.6
      '@types/d3-drag': 3.0.7
      '@types/d3-dsv': 3.0.7
      '@types/d3-ease': 3.0.2
      '@types/d3-fetch': 3.0.7
      '@types/d3-force': 3.0.10
      '@types/d3-format': 3.0.4
      '@types/d3-geo': 3.1.0
      '@types/d3-hierarchy': 3.1.7
      '@types/d3-interpolate': 3.0.4
      '@types/d3-path': 3.1.1
      '@types/d3-polygon': 3.0.2
      '@types/d3-quadtree': 3.0.6
      '@types/d3-random': 3.0.3
      '@types/d3-scale': 4.0.9
      '@types/d3-scale-chromatic': 3.1.0
      '@types/d3-selection': 3.0.11
      '@types/d3-shape': 3.1.7
      '@types/d3-time': 3.0.4
      '@types/d3-time-format': 4.0.3
      '@types/d3-timer': 3.0.2
      '@types/d3-transition': 3.0.9
      '@types/d3-zoom': 3.0.8

  '@types/debug@4.1.12':
    dependencies:
      '@types/ms': 2.1.0

  '@types/deep-eql@4.0.2': {}

  '@types/diff-match-patch@1.0.36': {}

  '@types/eslint-scope@3.7.7':
    dependencies:
      '@types/eslint': 9.6.1
      '@types/estree': 1.0.8

  '@types/eslint@9.6.1':
    dependencies:
      '@types/estree': 1.0.8
      '@types/json-schema': 7.0.15

  '@types/estree-jsx@1.0.5':
    dependencies:
      '@types/estree': 1.0.8

  '@types/estree@1.0.8': {}

  '@types/geojson@7946.0.16': {}

  '@types/har-format@1.2.16': {}

  '@types/hast@3.0.4':
    dependencies:
      '@types/unist': 3.0.3

  '@types/js-yaml@4.0.9': {}

  '@types/json-schema@7.0.15': {}

  '@types/katex@0.16.7': {}

  '@types/lodash.merge@4.6.9':
    dependencies:
      '@types/lodash': 4.17.16

  '@types/lodash@4.17.16': {}

  '@types/mdast@4.0.4':
    dependencies:
      '@types/unist': 3.0.3

  '@types/mdx@2.0.13': {}

  '@types/micromatch@4.0.9':
    dependencies:
      '@types/braces': 3.0.5

  '@types/ms@2.1.0': {}

  '@types/negotiator@0.6.4': {}

  '@types/node@12.20.55': {}

  '@types/node@22.16.2':
    dependencies:
      undici-types: 6.21.0

  '@types/node@24.0.12':
    dependencies:
      undici-types: 7.8.0

  '@types/normalize-package-data@2.4.4': {}

  '@types/openapi-sampler@1.0.3': {}

  '@types/parse-json@4.0.2': {}

  '@types/react-dom@19.1.6(@types/react@19.1.8)':
    dependencies:
      '@types/react': 19.1.8

  '@types/react-reconciler@0.28.9(@types/react@19.1.8)':
    dependencies:
      '@types/react': 19.1.8

  '@types/react@19.1.8':
    dependencies:
      csstype: 3.1.3

  '@types/resolve@1.20.2': {}

  '@types/resolve@1.20.6': {}

  '@types/triple-beam@1.3.5': {}

  '@types/trusted-types@2.0.7':
    optional: true

  '@types/unist@2.0.11': {}

  '@types/unist@3.0.3': {}

  '@types/web-bluetooth@0.0.20': {}

  '@types/yauzl@2.10.3':
    dependencies:
      '@types/node': 24.0.12
    optional: true

  '@typescript-eslint/eslint-plugin@8.36.0(@typescript-eslint/parser@8.36.0(eslint@9.30.1(jiti@2.4.2))(typescript@5.8.3))(eslint@9.30.1(jiti@2.4.2))(typescript@5.8.3)':
    dependencies:
      '@eslint-community/regexpp': 4.12.1
      '@typescript-eslint/parser': 8.36.0(eslint@9.30.1(jiti@2.4.2))(typescript@5.8.3)
      '@typescript-eslint/scope-manager': 8.36.0
      '@typescript-eslint/type-utils': 8.36.0(eslint@9.30.1(jiti@2.4.2))(typescript@5.8.3)
      '@typescript-eslint/utils': 8.36.0(eslint@9.30.1(jiti@2.4.2))(typescript@5.8.3)
      '@typescript-eslint/visitor-keys': 8.36.0
      eslint: 9.30.1(jiti@2.4.2)
      graphemer: 1.4.0
      ignore: 7.0.5
      natural-compare: 1.4.0
      ts-api-utils: 2.1.0(typescript@5.8.3)
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/parser@8.36.0(eslint@9.30.1(jiti@2.4.2))(typescript@5.8.3)':
    dependencies:
      '@typescript-eslint/scope-manager': 8.36.0
      '@typescript-eslint/types': 8.36.0
      '@typescript-eslint/typescript-estree': 8.36.0(typescript@5.8.3)
      '@typescript-eslint/visitor-keys': 8.36.0
      debug: 4.4.1
      eslint: 9.30.1(jiti@2.4.2)
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/project-service@8.36.0(typescript@5.8.3)':
    dependencies:
      '@typescript-eslint/tsconfig-utils': 8.36.0(typescript@5.8.3)
      '@typescript-eslint/types': 8.36.0
      debug: 4.4.1
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/scope-manager@8.36.0':
    dependencies:
      '@typescript-eslint/types': 8.36.0
      '@typescript-eslint/visitor-keys': 8.36.0

  '@typescript-eslint/tsconfig-utils@8.36.0(typescript@5.8.3)':
    dependencies:
      typescript: 5.8.3

  '@typescript-eslint/type-utils@8.36.0(eslint@9.30.1(jiti@2.4.2))(typescript@5.8.3)':
    dependencies:
      '@typescript-eslint/typescript-estree': 8.36.0(typescript@5.8.3)
      '@typescript-eslint/utils': 8.36.0(eslint@9.30.1(jiti@2.4.2))(typescript@5.8.3)
      debug: 4.4.1
      eslint: 9.30.1(jiti@2.4.2)
      ts-api-utils: 2.1.0(typescript@5.8.3)
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/types@8.36.0': {}

  '@typescript-eslint/typescript-estree@8.36.0(typescript@5.8.3)':
    dependencies:
      '@typescript-eslint/project-service': 8.36.0(typescript@5.8.3)
      '@typescript-eslint/tsconfig-utils': 8.36.0(typescript@5.8.3)
      '@typescript-eslint/types': 8.36.0
      '@typescript-eslint/visitor-keys': 8.36.0
      debug: 4.4.1
      fast-glob: 3.3.3
      is-glob: 4.0.3
      minimatch: 9.0.5
      semver: 7.7.2
      ts-api-utils: 2.1.0(typescript@5.8.3)
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/utils@8.36.0(eslint@9.30.1(jiti@2.4.2))(typescript@5.8.3)':
    dependencies:
      '@eslint-community/eslint-utils': 4.7.0(eslint@9.30.1(jiti@2.4.2))
      '@typescript-eslint/scope-manager': 8.36.0
      '@typescript-eslint/types': 8.36.0
      '@typescript-eslint/typescript-estree': 8.36.0(typescript@5.8.3)
      eslint: 9.30.1(jiti@2.4.2)
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/visitor-keys@8.36.0':
    dependencies:
      '@typescript-eslint/types': 8.36.0
      eslint-visitor-keys: 4.2.1

  '@typescript/vfs@1.6.1(typescript@5.8.3)':
    dependencies:
      debug: 4.4.1
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  '@ungap/structured-clone@1.3.0': {}

  '@vercel/nft@0.29.4(rollup@4.44.2)':
    dependencies:
      '@mapbox/node-pre-gyp': 2.0.0
      '@rollup/pluginutils': 5.2.0(rollup@4.44.2)
      acorn: 8.15.0
      acorn-import-attributes: 1.9.5(acorn@8.15.0)
      async-sema: 3.1.1
      bindings: 1.5.0
      estree-walker: 2.0.2
      glob: 10.4.5
      graceful-fs: 4.2.11
      node-gyp-build: 4.8.4
      picomatch: 4.0.2
      resolve-from: 5.0.0
    transitivePeerDependencies:
      - encoding
      - rollup
      - supports-color

  '@vinxi/listhen@1.5.6':
    dependencies:
      '@parcel/watcher': 2.5.1
      '@parcel/watcher-wasm': 2.3.0
      citty: 0.1.6
      clipboardy: 4.0.0
      consola: 3.4.2
      defu: 6.1.4
      get-port-please: 3.1.2
      h3: 1.15.3
      http-shutdown: 1.2.2
      jiti: 1.21.7
      mlly: 1.7.4
      node-forge: 1.3.1
      pathe: 1.1.2
      std-env: 3.9.0
      ufo: 1.6.1
      untun: 0.1.3
      uqr: 0.1.2

  '@vitejs/plugin-react@4.6.0(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))':
    dependencies:
      '@babel/core': 7.28.0
      '@babel/plugin-transform-react-jsx-self': 7.27.1(@babel/core@7.28.0)
      '@babel/plugin-transform-react-jsx-source': 7.27.1(@babel/core@7.28.0)
      '@rolldown/pluginutils': 1.0.0-beta.19
      '@types/babel__core': 7.20.5
      react-refresh: 0.17.0
      vite: 7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)
    transitivePeerDependencies:
      - supports-color

  '@vitest/expect@3.2.4':
    dependencies:
      '@types/chai': 5.2.2
      '@vitest/spy': 3.2.4
      '@vitest/utils': 3.2.4
      chai: 5.2.0
      tinyrainbow: 2.0.0

  '@vitest/mocker@3.2.4(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))':
    dependencies:
      '@vitest/spy': 3.2.4
      estree-walker: 3.0.3
      magic-string: 0.30.17
    optionalDependencies:
      vite: 7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)

  '@vitest/pretty-format@3.2.4':
    dependencies:
      tinyrainbow: 2.0.0

  '@vitest/runner@3.2.4':
    dependencies:
      '@vitest/utils': 3.2.4
      pathe: 2.0.3
      strip-literal: 3.0.0

  '@vitest/snapshot@3.2.4':
    dependencies:
      '@vitest/pretty-format': 3.2.4
      magic-string: 0.30.17
      pathe: 2.0.3

  '@vitest/spy@3.2.4':
    dependencies:
      tinyspy: 4.0.3

  '@vitest/utils@3.2.4':
    dependencies:
      '@vitest/pretty-format': 3.2.4
      loupe: 3.1.4
      tinyrainbow: 2.0.0

  '@vue/compiler-core@3.5.17':
    dependencies:
      '@babel/parser': 7.28.0
      '@vue/shared': 3.5.17
      entities: 4.5.0
      estree-walker: 2.0.2
      source-map-js: 1.2.1

  '@vue/compiler-dom@3.5.17':
    dependencies:
      '@vue/compiler-core': 3.5.17
      '@vue/shared': 3.5.17

  '@vue/compiler-sfc@3.5.17':
    dependencies:
      '@babel/parser': 7.28.0
      '@vue/compiler-core': 3.5.17
      '@vue/compiler-dom': 3.5.17
      '@vue/compiler-ssr': 3.5.17
      '@vue/shared': 3.5.17
      estree-walker: 2.0.2
      magic-string: 0.30.17
      postcss: 8.5.6
      source-map-js: 1.2.1

  '@vue/compiler-ssr@3.5.17':
    dependencies:
      '@vue/compiler-dom': 3.5.17
      '@vue/shared': 3.5.17

  '@vue/devtools-api@6.6.4': {}

  '@vue/reactivity@3.5.17':
    dependencies:
      '@vue/shared': 3.5.17

  '@vue/runtime-core@3.5.17':
    dependencies:
      '@vue/reactivity': 3.5.17
      '@vue/shared': 3.5.17

  '@vue/runtime-dom@3.5.17':
    dependencies:
      '@vue/reactivity': 3.5.17
      '@vue/runtime-core': 3.5.17
      '@vue/shared': 3.5.17
      csstype: 3.1.3

  '@vue/server-renderer@3.5.17(vue@3.5.17(typescript@5.8.3))':
    dependencies:
      '@vue/compiler-ssr': 3.5.17
      '@vue/shared': 3.5.17
      vue: 3.5.17(typescript@5.8.3)

  '@vue/shared@3.5.17': {}

  '@vueuse/core@10.11.1(vue@3.5.17(typescript@5.8.3))':
    dependencies:
      '@types/web-bluetooth': 0.0.20
      '@vueuse/metadata': 10.11.1
      '@vueuse/shared': 10.11.1(vue@3.5.17(typescript@5.8.3))
      vue-demi: 0.14.10(vue@3.5.17(typescript@5.8.3))
    transitivePeerDependencies:
      - '@vue/composition-api'
      - vue

  '@vueuse/core@11.3.0(vue@3.5.17(typescript@5.8.3))':
    dependencies:
      '@types/web-bluetooth': 0.0.20
      '@vueuse/metadata': 11.3.0
      '@vueuse/shared': 11.3.0(vue@3.5.17(typescript@5.8.3))
      vue-demi: 0.14.10(vue@3.5.17(typescript@5.8.3))
    transitivePeerDependencies:
      - '@vue/composition-api'
      - vue

  '@vueuse/integrations@11.3.0(focus-trap@7.6.5)(fuse.js@7.1.0)(jwt-decode@4.0.0)(vue@3.5.17(typescript@5.8.3))':
    dependencies:
      '@vueuse/core': 11.3.0(vue@3.5.17(typescript@5.8.3))
      '@vueuse/shared': 11.3.0(vue@3.5.17(typescript@5.8.3))
      vue-demi: 0.14.10(vue@3.5.17(typescript@5.8.3))
    optionalDependencies:
      focus-trap: 7.6.5
      fuse.js: 7.1.0
      jwt-decode: 4.0.0
    transitivePeerDependencies:
      - '@vue/composition-api'
      - vue

  '@vueuse/metadata@10.11.1': {}

  '@vueuse/metadata@11.3.0': {}

  '@vueuse/shared@10.11.1(vue@3.5.17(typescript@5.8.3))':
    dependencies:
      vue-demi: 0.14.10(vue@3.5.17(typescript@5.8.3))
    transitivePeerDependencies:
      - '@vue/composition-api'
      - vue

  '@vueuse/shared@11.3.0(vue@3.5.17(typescript@5.8.3))':
    dependencies:
      vue-demi: 0.14.10(vue@3.5.17(typescript@5.8.3))
    transitivePeerDependencies:
      - '@vue/composition-api'
      - vue

  '@webassemblyjs/ast@1.14.1':
    dependencies:
      '@webassemblyjs/helper-numbers': 1.13.2
      '@webassemblyjs/helper-wasm-bytecode': 1.13.2

  '@webassemblyjs/floating-point-hex-parser@1.13.2': {}

  '@webassemblyjs/helper-api-error@1.13.2': {}

  '@webassemblyjs/helper-buffer@1.14.1': {}

  '@webassemblyjs/helper-numbers@1.13.2':
    dependencies:
      '@webassemblyjs/floating-point-hex-parser': 1.13.2
      '@webassemblyjs/helper-api-error': 1.13.2
      '@xtuc/long': 4.2.2

  '@webassemblyjs/helper-wasm-bytecode@1.13.2': {}

  '@webassemblyjs/helper-wasm-section@1.14.1':
    dependencies:
      '@webassemblyjs/ast': 1.14.1
      '@webassemblyjs/helper-buffer': 1.14.1
      '@webassemblyjs/helper-wasm-bytecode': 1.13.2
      '@webassemblyjs/wasm-gen': 1.14.1

  '@webassemblyjs/ieee754@1.13.2':
    dependencies:
      '@xtuc/ieee754': 1.2.0

  '@webassemblyjs/leb128@1.13.2':
    dependencies:
      '@xtuc/long': 4.2.2

  '@webassemblyjs/utf8@1.13.2': {}

  '@webassemblyjs/wasm-edit@1.14.1':
    dependencies:
      '@webassemblyjs/ast': 1.14.1
      '@webassemblyjs/helper-buffer': 1.14.1
      '@webassemblyjs/helper-wasm-bytecode': 1.13.2
      '@webassemblyjs/helper-wasm-section': 1.14.1
      '@webassemblyjs/wasm-gen': 1.14.1
      '@webassemblyjs/wasm-opt': 1.14.1
      '@webassemblyjs/wasm-parser': 1.14.1
      '@webassemblyjs/wast-printer': 1.14.1

  '@webassemblyjs/wasm-gen@1.14.1':
    dependencies:
      '@webassemblyjs/ast': 1.14.1
      '@webassemblyjs/helper-wasm-bytecode': 1.13.2
      '@webassemblyjs/ieee754': 1.13.2
      '@webassemblyjs/leb128': 1.13.2
      '@webassemblyjs/utf8': 1.13.2

  '@webassemblyjs/wasm-opt@1.14.1':
    dependencies:
      '@webassemblyjs/ast': 1.14.1
      '@webassemblyjs/helper-buffer': 1.14.1
      '@webassemblyjs/wasm-gen': 1.14.1
      '@webassemblyjs/wasm-parser': 1.14.1

  '@webassemblyjs/wasm-parser@1.14.1':
    dependencies:
      '@webassemblyjs/ast': 1.14.1
      '@webassemblyjs/helper-api-error': 1.13.2
      '@webassemblyjs/helper-wasm-bytecode': 1.13.2
      '@webassemblyjs/ieee754': 1.13.2
      '@webassemblyjs/leb128': 1.13.2
      '@webassemblyjs/utf8': 1.13.2

  '@webassemblyjs/wast-printer@1.14.1':
    dependencies:
      '@webassemblyjs/ast': 1.14.1
      '@xtuc/long': 4.2.2

  '@whatwg-node/disposablestack@0.0.6':
    dependencies:
      '@whatwg-node/promise-helpers': 1.3.2
      tslib: 2.8.1

  '@whatwg-node/fetch@0.10.8':
    dependencies:
      '@whatwg-node/node-fetch': 0.7.21
      urlpattern-polyfill: 10.1.0

  '@whatwg-node/node-fetch@0.7.21':
    dependencies:
      '@fastify/busboy': 3.1.1
      '@whatwg-node/disposablestack': 0.0.6
      '@whatwg-node/promise-helpers': 1.3.2
      tslib: 2.8.1

  '@whatwg-node/promise-helpers@1.3.2':
    dependencies:
      tslib: 2.8.1

  '@whatwg-node/server@0.9.71':
    dependencies:
      '@whatwg-node/disposablestack': 0.0.6
      '@whatwg-node/fetch': 0.10.8
      '@whatwg-node/promise-helpers': 1.3.2
      tslib: 2.8.1

  '@xtuc/ieee754@1.2.0': {}

  '@xtuc/long@4.2.2': {}

  abbrev@2.0.0: {}

  abbrev@3.0.1: {}

  abort-controller@3.0.0:
    dependencies:
      event-target-shim: 5.0.1

  accepts@1.3.8:
    dependencies:
      mime-types: 2.1.35
      negotiator: 0.6.3

  acorn-import-attributes@1.9.5(acorn@8.15.0):
    dependencies:
      acorn: 8.15.0

  acorn-import-phases@1.0.3(acorn@8.15.0):
    dependencies:
      acorn: 8.15.0

  acorn-jsx@5.3.2(acorn@8.15.0):
    dependencies:
      acorn: 8.15.0

  acorn-walk@8.3.4:
    dependencies:
      acorn: 8.15.0

  acorn@8.15.0: {}

  agent-base@7.1.3: {}

  ai@4.3.17(react@19.1.0)(zod@4.0.2):
    dependencies:
      '@ai-sdk/provider': 1.1.3
      '@ai-sdk/provider-utils': 2.2.8(zod@4.0.2)
      '@ai-sdk/react': 1.2.12(react@19.1.0)(zod@4.0.2)
      '@ai-sdk/ui-utils': 1.2.11(zod@4.0.2)
      '@opentelemetry/api': 1.9.0
      jsondiffpatch: 0.6.0
      zod: 4.0.2
    optionalDependencies:
      react: 19.1.0

  ajv-draft-04@1.0.0(ajv@8.17.1):
    optionalDependencies:
      ajv: 8.17.1

  ajv-formats@2.1.1(ajv@8.17.1):
    optionalDependencies:
      ajv: 8.17.1

  ajv-formats@3.0.1(ajv@8.17.1):
    optionalDependencies:
      ajv: 8.17.1

  ajv-keywords@5.1.0(ajv@8.17.1):
    dependencies:
      ajv: 8.17.1
      fast-deep-equal: 3.1.3

  ajv@6.12.6:
    dependencies:
      fast-deep-equal: 3.1.3
      fast-json-stable-stringify: 2.1.0
      json-schema-traverse: 0.4.1
      uri-js: 4.4.1

  ajv@8.17.1:
    dependencies:
      fast-deep-equal: 3.1.3
      fast-uri: 3.0.6
      json-schema-traverse: 1.0.0
      require-from-string: 2.0.2

  algoliasearch@5.32.0:
    dependencies:
      '@algolia/client-abtesting': 5.32.0
      '@algolia/client-analytics': 5.32.0
      '@algolia/client-common': 5.32.0
      '@algolia/client-insights': 5.32.0
      '@algolia/client-personalization': 5.32.0
      '@algolia/client-query-suggestions': 5.32.0
      '@algolia/client-search': 5.32.0
      '@algolia/ingestion': 1.32.0
      '@algolia/monitoring': 1.32.0
      '@algolia/recommend': 5.32.0
      '@algolia/requester-browser-xhr': 5.32.0
      '@algolia/requester-fetch': 5.32.0
      '@algolia/requester-node-http': 5.32.0

  ansi-align@3.0.1:
    dependencies:
      string-width: 4.2.3

  ansi-colors@4.1.3: {}

  ansi-regex@5.0.1: {}

  ansi-regex@6.1.0: {}

  ansi-styles@4.3.0:
    dependencies:
      color-convert: 2.0.1

  ansi-styles@6.2.1: {}

  ansis@4.1.0: {}

  any-promise@1.3.0: {}

  anymatch@3.1.3:
    dependencies:
      normalize-path: 3.0.0
      picomatch: 2.3.1

  archiver-utils@5.0.2:
    dependencies:
      glob: 10.4.5
      graceful-fs: 4.2.11
      is-stream: 2.0.1
      lazystream: 1.0.1
      lodash: 4.17.21
      normalize-path: 3.0.0
      readable-stream: 4.7.0

  archiver@7.0.1:
    dependencies:
      archiver-utils: 5.0.2
      async: 3.2.6
      buffer-crc32: 1.0.0
      readable-stream: 4.7.0
      readdir-glob: 1.1.3
      tar-stream: 3.1.7
      zip-stream: 6.0.1

  arg@5.0.2: {}

  argparse@1.0.10:
    dependencies:
      sprintf-js: 1.0.3

  argparse@2.0.1: {}

  aria-hidden@1.2.6:
    dependencies:
      tslib: 2.8.1

  array-buffer-byte-length@1.0.2:
    dependencies:
      call-bound: 1.0.4
      is-array-buffer: 3.0.5

  array-flatten@1.1.1: {}

  array-includes@3.1.8:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-object-atoms: 1.1.1
      get-intrinsic: 1.3.0
      is-string: 1.1.1

  array-union@2.1.0: {}

  array.prototype.findlast@1.2.5:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      es-shim-unscopables: 1.1.0

  array.prototype.flat@1.3.3:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-shim-unscopables: 1.1.0

  array.prototype.flatmap@1.3.3:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-shim-unscopables: 1.1.0

  array.prototype.tosorted@1.1.4:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-errors: 1.3.0
      es-shim-unscopables: 1.1.0

  arraybuffer.prototype.slice@1.0.4:
    dependencies:
      array-buffer-byte-length: 1.0.2
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-errors: 1.3.0
      get-intrinsic: 1.3.0
      is-array-buffer: 3.0.5

  assertion-error@2.0.1: {}

  ast-module-types@6.0.1: {}

  ast-types@0.16.1:
    dependencies:
      tslib: 2.8.1

  astring@1.9.0: {}

  async-function@1.0.0: {}

  async-sema@3.1.1: {}

  async@3.2.6: {}

  available-typed-arrays@1.0.7:
    dependencies:
      possible-typed-array-names: 1.1.0

  b4a@1.6.7: {}

  babel-dead-code-elimination@1.0.10:
    dependencies:
      '@babel/core': 7.28.0
      '@babel/parser': 7.28.0
      '@babel/traverse': 7.28.0
      '@babel/types': 7.28.0
    transitivePeerDependencies:
      - supports-color

  babel-plugin-macros@3.1.0:
    dependencies:
      '@babel/runtime': 7.27.6
      cosmiconfig: 7.1.0
      resolve: 1.22.10

  bail@2.0.2: {}

  balanced-match@1.0.2: {}

  bare-events@2.5.4:
    optional: true

  base64-js@1.5.1: {}

  basic-auth@2.0.1:
    dependencies:
      safe-buffer: 5.1.2

  beautify@0.0.8:
    dependencies:
      cssbeautify: 0.3.1
      html: 1.0.0
      js-beautify: 1.15.4

  before-after-hook@4.0.0: {}

  better-path-resolve@1.0.0:
    dependencies:
      is-windows: 1.0.2

  binary-extensions@2.3.0: {}

  bindings@1.5.0:
    dependencies:
      file-uri-to-path: 1.0.0

  bippy@0.3.11(@types/react@19.1.8)(react@19.1.0):
    dependencies:
      '@types/react-reconciler': 0.28.9(@types/react@19.1.8)
      react: 19.1.0
    transitivePeerDependencies:
      - '@types/react'

  body-parser@1.20.3:
    dependencies:
      bytes: 3.1.2
      content-type: 1.0.5
      debug: 2.6.9
      depd: 2.0.0
      destroy: 1.2.0
      http-errors: 2.0.0
      iconv-lite: 0.4.24
      on-finished: 2.4.1
      qs: 6.13.0
      raw-body: 2.5.2
      type-is: 1.6.18
      unpipe: 1.0.0
    transitivePeerDependencies:
      - supports-color

  boolbase@1.0.0: {}

  bottleneck@2.19.5: {}

  boxen@8.0.1:
    dependencies:
      ansi-align: 3.0.1
      camelcase: 8.0.0
      chalk: 5.4.1
      cli-boxes: 3.0.0
      string-width: 7.2.0
      type-fest: 4.41.0
      widest-line: 5.0.0
      wrap-ansi: 9.0.0

  brace-expansion@1.1.11:
    dependencies:
      balanced-match: 1.0.2
      concat-map: 0.0.1

  brace-expansion@2.0.2:
    dependencies:
      balanced-match: 1.0.2

  braces@3.0.3:
    dependencies:
      fill-range: 7.1.1

  browserslist@4.25.1:
    dependencies:
      caniuse-lite: 1.0.30001727
      electron-to-chromium: 1.5.181
      node-releases: 2.0.19
      update-browserslist-db: 1.1.3(browserslist@4.25.1)

  buffer-crc32@0.2.13: {}

  buffer-crc32@1.0.0: {}

  buffer-from@1.1.2: {}

  buffer@6.0.3:
    dependencies:
      base64-js: 1.5.1
      ieee754: 1.2.1

  builtin-modules@3.3.0: {}

  bundle-require@5.1.0(esbuild@0.25.6):
    dependencies:
      esbuild: 0.25.6
      load-tsconfig: 0.2.5

  busboy@1.6.0:
    dependencies:
      streamsearch: 1.1.0

  bytes@3.1.2: {}

  c12@3.0.4(magicast@0.3.5):
    dependencies:
      chokidar: 4.0.3
      confbox: 0.2.2
      defu: 6.1.4
      dotenv: 16.6.1
      exsolve: 1.0.7
      giget: 2.0.0
      jiti: 2.4.2
      ohash: 2.0.11
      pathe: 2.0.3
      perfect-debounce: 1.0.0
      pkg-types: 2.2.0
      rc9: 2.1.2
    optionalDependencies:
      magicast: 0.3.5

  cac@6.7.14: {}

  call-bind-apply-helpers@1.0.2:
    dependencies:
      es-errors: 1.3.0
      function-bind: 1.1.2

  call-bind@1.0.8:
    dependencies:
      call-bind-apply-helpers: 1.0.2
      es-define-property: 1.0.1
      get-intrinsic: 1.3.0
      set-function-length: 1.2.2

  call-bound@1.0.4:
    dependencies:
      call-bind-apply-helpers: 1.0.2
      get-intrinsic: 1.3.0

  callsite@1.0.0: {}

  callsites@3.1.0: {}

  camelcase@8.0.0: {}

  caniuse-lite@1.0.30001727: {}

  ccount@2.0.1: {}

  chai@5.2.0:
    dependencies:
      assertion-error: 2.0.1
      check-error: 2.1.1
      deep-eql: 5.0.2
      loupe: 3.1.4
      pathval: 2.0.0

  chain-function@1.0.1: {}

  chalk@4.1.2:
    dependencies:
      ansi-styles: 4.3.0
      supports-color: 7.2.0

  chalk@5.4.1: {}

  character-entities-html4@2.1.0: {}

  character-entities-legacy@3.0.0: {}

  character-entities@2.0.2: {}

  character-reference-invalid@2.0.1: {}

  chardet@0.7.0: {}

  check-error@2.1.1: {}

  cheerio-select@2.1.0:
    dependencies:
      boolbase: 1.0.0
      css-select: 5.2.2
      css-what: 6.2.2
      domelementtype: 2.3.0
      domhandler: 5.0.3
      domutils: 3.2.2

  cheerio@1.1.0:
    dependencies:
      cheerio-select: 2.1.0
      dom-serializer: 2.0.0
      domhandler: 5.0.3
      domutils: 3.2.2
      encoding-sniffer: 0.2.1
      htmlparser2: 10.0.0
      parse5: 7.3.0
      parse5-htmlparser2-tree-adapter: 7.1.0
      parse5-parser-stream: 7.1.2
      undici: 7.11.0
      whatwg-mimetype: 4.0.0

  chevrotain-allstar@0.3.1(chevrotain@11.0.3):
    dependencies:
      chevrotain: 11.0.3
      lodash-es: 4.17.21

  chevrotain@11.0.3:
    dependencies:
      '@chevrotain/cst-dts-gen': 11.0.3
      '@chevrotain/gast': 11.0.3
      '@chevrotain/regexp-to-ast': 11.0.3
      '@chevrotain/types': 11.0.3
      '@chevrotain/utils': 11.0.3
      lodash-es: 4.17.21

  chokidar@3.6.0:
    dependencies:
      anymatch: 3.1.3
      braces: 3.0.3
      glob-parent: 5.1.2
      is-binary-path: 2.1.0
      is-glob: 4.0.3
      normalize-path: 3.0.0
      readdirp: 3.6.0
    optionalDependencies:
      fsevents: 2.3.3

  chokidar@4.0.3:
    dependencies:
      readdirp: 4.1.2

  chownr@3.0.0: {}

  chrome-trace-event@1.0.4: {}

  ci-info@3.9.0: {}

  citty@0.1.6:
    dependencies:
      consola: 3.4.2

  class-variance-authority@0.7.1:
    dependencies:
      clsx: 2.1.1

  classnames@2.5.1: {}

  cli-boxes@3.0.0: {}

  client-only@0.0.1: {}

  clipboardy@4.0.0:
    dependencies:
      execa: 8.0.1
      is-wsl: 3.1.0
      is64bit: 2.0.0

  cliui@8.0.1:
    dependencies:
      string-width: 4.2.3
      strip-ansi: 6.0.1
      wrap-ansi: 7.0.0

  clone@2.1.2: {}

  clsx@2.1.1: {}

  cluster-key-slot@1.1.2: {}

  code-block-writer@13.0.3: {}

  codemirror@6.0.2:
    dependencies:
      '@codemirror/autocomplete': 6.18.6
      '@codemirror/commands': 6.8.1
      '@codemirror/language': 6.11.2
      '@codemirror/lint': 6.8.5
      '@codemirror/search': 6.5.11
      '@codemirror/state': 6.5.2
      '@codemirror/view': 6.38.0

  collapse-white-space@2.1.0: {}

  color-convert@1.9.3:
    dependencies:
      color-name: 1.1.3

  color-convert@2.0.1:
    dependencies:
      color-name: 1.1.4

  color-name@1.1.3: {}

  color-name@1.1.4: {}

  color-string@1.9.1:
    dependencies:
      color-name: 1.1.4
      simple-swizzle: 0.2.2

  color@3.2.1:
    dependencies:
      color-convert: 1.9.3
      color-string: 1.9.1

  color@4.2.3:
    dependencies:
      color-convert: 2.0.1
      color-string: 1.9.1
    optional: true

  colorspace@1.1.4:
    dependencies:
      color: 3.2.1
      text-hex: 1.0.0

  comma-separated-tokens@2.0.3: {}

  commander@10.0.1: {}

  commander@12.1.0: {}

  commander@14.0.0: {}

  commander@2.20.3: {}

  commander@4.1.1: {}

  commander@7.2.0: {}

  commander@8.3.0: {}

  commander@9.5.0: {}

  common-path-prefix@3.0.0: {}

  commondir@1.0.1: {}

  compatx@0.2.0: {}

  compress-commons@6.0.2:
    dependencies:
      crc-32: 1.2.2
      crc32-stream: 6.0.0
      is-stream: 2.0.1
      normalize-path: 3.0.0
      readable-stream: 4.7.0

  compressible@2.0.18:
    dependencies:
      mime-db: 1.54.0

  compression@1.8.0:
    dependencies:
      bytes: 3.1.2
      compressible: 2.0.18
      debug: 2.6.9
      negotiator: 0.6.4
      on-headers: 1.0.2
      safe-buffer: 5.2.1
      vary: 1.1.2
    transitivePeerDependencies:
      - supports-color

  compute-scroll-into-view@3.1.1: {}

  concat-map@0.0.1: {}

  concat-stream@1.6.2:
    dependencies:
      buffer-from: 1.1.2
      inherits: 2.0.4
      readable-stream: 2.3.8
      typedarray: 0.0.6

  concurrently@9.2.0:
    dependencies:
      chalk: 4.1.2
      lodash: 4.17.21
      rxjs: 7.8.2
      shell-quote: 1.8.3
      supports-color: 8.1.1
      tree-kill: 1.2.2
      yargs: 17.7.2

  confbox@0.1.8: {}

  confbox@0.2.2: {}

  config-chain@1.1.13:
    dependencies:
      ini: 1.3.8
      proto-list: 1.2.4

  consola@3.4.2: {}

  content-disposition@0.5.4:
    dependencies:
      safe-buffer: 5.2.1

  content-type@1.0.5: {}

  convert-source-map@1.9.0: {}

  convert-source-map@2.0.0: {}

  cookie-es@1.2.2: {}

  cookie-es@2.0.0: {}

  cookie-signature@1.0.6: {}

  cookie@0.7.1: {}

  cookie@1.0.2: {}

  copy-file@11.0.0:
    dependencies:
      graceful-fs: 4.2.11
      p-event: 6.0.1

  core-util-is@1.0.3: {}

  cose-base@1.0.3:
    dependencies:
      layout-base: 1.0.2

  cose-base@2.2.0:
    dependencies:
      layout-base: 2.0.1

  cosmiconfig@7.1.0:
    dependencies:
      '@types/parse-json': 4.0.2
      import-fresh: 3.3.1
      parse-json: 5.2.0
      path-type: 4.0.0
      yaml: 1.10.2

  crc-32@1.2.2: {}

  crc32-stream@6.0.0:
    dependencies:
      crc-32: 1.2.2
      readable-stream: 4.7.0

  crelt@1.0.6: {}

  cron-parser@4.9.0:
    dependencies:
      luxon: 3.6.1

  croner@9.1.0: {}

  cross-spawn@7.0.6:
    dependencies:
      path-key: 3.1.1
      shebang-command: 2.0.0
      which: 2.0.2

  crossws@0.3.5:
    dependencies:
      uncrypto: 0.1.3

  css-select@5.2.2:
    dependencies:
      boolbase: 1.0.0
      css-what: 6.2.2
      domhandler: 5.0.3
      domutils: 3.2.2
      nth-check: 2.1.1

  css-what@6.2.2: {}

  cssbeautify@0.3.1: {}

  cssesc@3.0.0: {}

  csstype@3.1.3: {}

  cva@1.0.0-beta.2(typescript@5.8.3):
    dependencies:
      clsx: 2.1.1
    optionalDependencies:
      typescript: 5.8.3

  cytoscape-cose-bilkent@4.1.0(cytoscape@3.32.1):
    dependencies:
      cose-base: 1.0.3
      cytoscape: 3.32.1

  cytoscape-fcose@2.2.0(cytoscape@3.32.1):
    dependencies:
      cose-base: 2.2.0
      cytoscape: 3.32.1

  cytoscape@3.32.1: {}

  d3-array@2.12.1:
    dependencies:
      internmap: 1.0.1

  d3-array@3.2.4:
    dependencies:
      internmap: 2.0.3

  d3-axis@3.0.0: {}

  d3-brush@3.0.0:
    dependencies:
      d3-dispatch: 3.0.1
      d3-drag: 3.0.0
      d3-interpolate: 3.0.1
      d3-selection: 3.0.0
      d3-transition: 3.0.1(d3-selection@3.0.0)

  d3-chord@3.0.1:
    dependencies:
      d3-path: 3.1.0

  d3-color@3.1.0: {}

  d3-contour@4.0.2:
    dependencies:
      d3-array: 3.2.4

  d3-delaunay@6.0.4:
    dependencies:
      delaunator: 5.0.1

  d3-dispatch@3.0.1: {}

  d3-drag@3.0.0:
    dependencies:
      d3-dispatch: 3.0.1
      d3-selection: 3.0.0

  d3-dsv@3.0.1:
    dependencies:
      commander: 7.2.0
      iconv-lite: 0.6.3
      rw: 1.3.3

  d3-ease@3.0.1: {}

  d3-fetch@3.0.1:
    dependencies:
      d3-dsv: 3.0.1

  d3-force@3.0.0:
    dependencies:
      d3-dispatch: 3.0.1
      d3-quadtree: 3.0.1
      d3-timer: 3.0.1

  d3-format@3.1.0: {}

  d3-geo@3.1.1:
    dependencies:
      d3-array: 3.2.4

  d3-hierarchy@1.1.9: {}

  d3-hierarchy@3.1.2: {}

  d3-interpolate@3.0.1:
    dependencies:
      d3-color: 3.1.0

  d3-path@1.0.9: {}

  d3-path@3.1.0: {}

  d3-polygon@3.0.1: {}

  d3-quadtree@3.0.1: {}

  d3-random@3.0.1: {}

  d3-sankey@0.12.3:
    dependencies:
      d3-array: 2.12.1
      d3-shape: 1.3.7

  d3-scale-chromatic@3.1.0:
    dependencies:
      d3-color: 3.1.0
      d3-interpolate: 3.0.1

  d3-scale@4.0.2:
    dependencies:
      d3-array: 3.2.4
      d3-format: 3.1.0
      d3-interpolate: 3.0.1
      d3-time: 3.1.0
      d3-time-format: 4.1.0

  d3-selection@3.0.0: {}

  d3-shape@1.3.7:
    dependencies:
      d3-path: 1.0.9

  d3-shape@3.2.0:
    dependencies:
      d3-path: 3.1.0

  d3-time-format@4.1.0:
    dependencies:
      d3-time: 3.1.0

  d3-time@3.1.0:
    dependencies:
      d3-array: 3.2.4

  d3-timer@3.0.1: {}

  d3-transition@3.0.1(d3-selection@3.0.0):
    dependencies:
      d3-color: 3.1.0
      d3-dispatch: 3.0.1
      d3-ease: 3.0.1
      d3-interpolate: 3.0.1
      d3-selection: 3.0.0
      d3-timer: 3.0.1

  d3-zoom@3.0.0:
    dependencies:
      d3-dispatch: 3.0.1
      d3-drag: 3.0.0
      d3-interpolate: 3.0.1
      d3-selection: 3.0.0
      d3-transition: 3.0.1(d3-selection@3.0.0)

  d3@7.9.0:
    dependencies:
      d3-array: 3.2.4
      d3-axis: 3.0.0
      d3-brush: 3.0.0
      d3-chord: 3.0.1
      d3-color: 3.1.0
      d3-contour: 4.0.2
      d3-delaunay: 6.0.4
      d3-dispatch: 3.0.1
      d3-drag: 3.0.0
      d3-dsv: 3.0.1
      d3-ease: 3.0.1
      d3-fetch: 3.0.1
      d3-force: 3.0.0
      d3-format: 3.1.0
      d3-geo: 3.1.1
      d3-hierarchy: 3.1.2
      d3-interpolate: 3.0.1
      d3-path: 3.1.0
      d3-polygon: 3.0.1
      d3-quadtree: 3.0.1
      d3-random: 3.0.1
      d3-scale: 4.0.2
      d3-scale-chromatic: 3.1.0
      d3-selection: 3.0.0
      d3-shape: 3.2.0
      d3-time: 3.1.0
      d3-time-format: 4.1.0
      d3-timer: 3.0.1
      d3-transition: 3.0.1(d3-selection@3.0.0)
      d3-zoom: 3.0.0

  dagre-d3-es@7.0.11:
    dependencies:
      d3: 7.9.0
      lodash-es: 4.17.21

  data-uri-to-buffer@4.0.1: {}

  data-view-buffer@1.0.2:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      is-data-view: 1.0.2

  data-view-byte-length@1.0.2:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      is-data-view: 1.0.2

  data-view-byte-offset@1.0.1:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      is-data-view: 1.0.2

  date-fns@4.1.0: {}

  dax-sh@0.43.2:
    dependencies:
      '@deno/shim-deno': 0.19.2
      undici-types: 5.28.4

  dayjs@1.11.13: {}

  db0@0.3.2: {}

  debounce@1.2.1: {}

  debug@2.6.9:
    dependencies:
      ms: 2.0.0

  debug@4.4.1:
    dependencies:
      ms: 2.1.3

  decache@4.6.2:
    dependencies:
      callsite: 1.0.0

  decode-named-character-reference@1.1.0:
    dependencies:
      character-entities: 2.0.2

  dedent@1.6.0(babel-plugin-macros@3.1.0):
    optionalDependencies:
      babel-plugin-macros: 3.1.0

  deep-eql@5.0.2: {}

  deep-is@0.1.4: {}

  deepmerge@4.3.1: {}

  define-data-property@1.1.4:
    dependencies:
      es-define-property: 1.0.1
      es-errors: 1.3.0
      gopd: 1.2.0

  define-lazy-prop@2.0.0: {}

  define-properties@1.2.1:
    dependencies:
      define-data-property: 1.1.4
      has-property-descriptors: 1.0.2
      object-keys: 1.1.1

  defu@6.1.4: {}

  delaunator@5.0.1:
    dependencies:
      robust-predicates: 3.0.2

  denque@2.1.0: {}

  depd@2.0.0: {}

  dequal@2.0.3: {}

  destr@2.0.5: {}

  destroy@1.2.0: {}

  detect-indent@6.1.0: {}

  detect-libc@1.0.3: {}

  detect-libc@2.0.4: {}

  detect-node-es@1.1.0: {}

  detective-amd@6.0.1:
    dependencies:
      ast-module-types: 6.0.1
      escodegen: 2.1.0
      get-amd-module-type: 6.0.1
      node-source-walk: 7.0.1

  detective-cjs@6.0.1:
    dependencies:
      ast-module-types: 6.0.1
      node-source-walk: 7.0.1

  detective-es6@5.0.1:
    dependencies:
      node-source-walk: 7.0.1

  detective-postcss@7.0.1(postcss@8.5.6):
    dependencies:
      is-url: 1.2.4
      postcss: 8.5.6
      postcss-values-parser: 6.0.2(postcss@8.5.6)

  detective-sass@6.0.1:
    dependencies:
      gonzales-pe: 4.3.0
      node-source-walk: 7.0.1

  detective-scss@5.0.1:
    dependencies:
      gonzales-pe: 4.3.0
      node-source-walk: 7.0.1

  detective-stylus@5.0.1: {}

  detective-typescript@14.0.0(typescript@5.8.3):
    dependencies:
      '@typescript-eslint/typescript-estree': 8.36.0(typescript@5.8.3)
      ast-module-types: 6.0.1
      node-source-walk: 7.0.1
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  detective-vue2@2.2.0(typescript@5.8.3):
    dependencies:
      '@dependents/detective-less': 5.0.1
      '@vue/compiler-sfc': 3.5.17
      detective-es6: 5.0.1
      detective-sass: 6.0.1
      detective-scss: 5.0.1
      detective-stylus: 5.0.1
      detective-typescript: 14.0.0(typescript@5.8.3)
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  devlop@1.1.0:
    dependencies:
      dequal: 2.0.3

  diff-match-patch@1.0.5: {}

  diff@5.2.0: {}

  diff@8.0.2: {}

  dir-glob@3.0.1:
    dependencies:
      path-type: 4.0.0

  doctrine@2.1.0:
    dependencies:
      esutils: 2.0.3

  dom-helpers@3.4.0:
    dependencies:
      '@babel/runtime': 7.27.6

  dom-serializer@2.0.0:
    dependencies:
      domelementtype: 2.3.0
      domhandler: 5.0.3
      entities: 4.5.0

  domelementtype@2.3.0: {}

  domhandler@5.0.3:
    dependencies:
      domelementtype: 2.3.0

  dompurify@3.2.6:
    optionalDependencies:
      '@types/trusted-types': 2.0.7

  domutils@3.2.2:
    dependencies:
      dom-serializer: 2.0.0
      domelementtype: 2.3.0
      domhandler: 5.0.3

  dot-prop@9.0.0:
    dependencies:
      type-fest: 4.41.0

  dotenv@16.6.1: {}

  dunder-proto@1.0.1:
    dependencies:
      call-bind-apply-helpers: 1.0.2
      es-errors: 1.3.0
      gopd: 1.2.0

  duplexer@0.1.2: {}

  eastasianwidth@0.2.0: {}

  editorconfig@1.0.4:
    dependencies:
      '@one-ini/wasm': 0.1.1
      commander: 10.0.1
      minimatch: 9.0.1
      semver: 7.7.2

  ee-first@1.1.1: {}

  electron-to-chromium@1.5.181: {}

  emoji-regex@10.4.0: {}

  emoji-regex@8.0.0: {}

  emoji-regex@9.2.2: {}

  enabled@2.0.0: {}

  encodeurl@1.0.2: {}

  encodeurl@2.0.0: {}

  encoding-sniffer@0.2.1:
    dependencies:
      iconv-lite: 0.6.3
      whatwg-encoding: 3.1.1

  end-of-stream@1.4.5:
    dependencies:
      once: 1.4.0

  enhanced-resolve@5.18.2:
    dependencies:
      graceful-fs: 4.2.11
      tapable: 2.2.2

  enquirer@2.4.1:
    dependencies:
      ansi-colors: 4.1.3
      strip-ansi: 6.0.1

  entities@4.5.0: {}

  entities@6.0.1: {}

  env-paths@3.0.0: {}

  err-code@2.0.3: {}

  error-ex@1.3.2:
    dependencies:
      is-arrayish: 0.2.1

  error-stack-parser-es@1.0.5: {}

  es-abstract@1.23.9:
    dependencies:
      array-buffer-byte-length: 1.0.2
      arraybuffer.prototype.slice: 1.0.4
      available-typed-arrays: 1.0.7
      call-bind: 1.0.8
      call-bound: 1.0.4
      data-view-buffer: 1.0.2
      data-view-byte-length: 1.0.2
      data-view-byte-offset: 1.0.1
      es-define-property: 1.0.1
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      es-set-tostringtag: 2.1.0
      es-to-primitive: 1.3.0
      function.prototype.name: 1.1.8
      get-intrinsic: 1.3.0
      get-proto: 1.0.1
      get-symbol-description: 1.1.0
      globalthis: 1.0.4
      gopd: 1.2.0
      has-property-descriptors: 1.0.2
      has-proto: 1.2.0
      has-symbols: 1.1.0
      hasown: 2.0.2
      internal-slot: 1.1.0
      is-array-buffer: 3.0.5
      is-callable: 1.2.7
      is-data-view: 1.0.2
      is-regex: 1.2.1
      is-shared-array-buffer: 1.0.4
      is-string: 1.1.1
      is-typed-array: 1.1.15
      is-weakref: 1.1.1
      math-intrinsics: 1.1.0
      object-inspect: 1.13.4
      object-keys: 1.1.1
      object.assign: 4.1.7
      own-keys: 1.0.1
      regexp.prototype.flags: 1.5.4
      safe-array-concat: 1.1.3
      safe-push-apply: 1.0.0
      safe-regex-test: 1.1.0
      set-proto: 1.0.0
      string.prototype.trim: 1.2.10
      string.prototype.trimend: 1.0.9
      string.prototype.trimstart: 1.0.8
      typed-array-buffer: 1.0.3
      typed-array-byte-length: 1.0.3
      typed-array-byte-offset: 1.0.4
      typed-array-length: 1.0.7
      unbox-primitive: 1.1.0
      which-typed-array: 1.1.19

  es-define-property@1.0.1: {}

  es-errors@1.3.0: {}

  es-iterator-helpers@1.2.1:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-errors: 1.3.0
      es-set-tostringtag: 2.1.0
      function-bind: 1.1.2
      get-intrinsic: 1.3.0
      globalthis: 1.0.4
      gopd: 1.2.0
      has-property-descriptors: 1.0.2
      has-proto: 1.2.0
      has-symbols: 1.1.0
      internal-slot: 1.1.0
      iterator.prototype: 1.1.5
      safe-array-concat: 1.1.3

  es-module-lexer@1.7.0: {}

  es-object-atoms@1.1.1:
    dependencies:
      es-errors: 1.3.0

  es-set-tostringtag@2.1.0:
    dependencies:
      es-errors: 1.3.0
      get-intrinsic: 1.3.0
      has-tostringtag: 1.0.2
      hasown: 2.0.2

  es-shim-unscopables@1.1.0:
    dependencies:
      hasown: 2.0.2

  es-to-primitive@1.3.0:
    dependencies:
      is-callable: 1.2.7
      is-date-object: 1.1.0
      is-symbol: 1.1.1

  esast-util-from-estree@2.0.0:
    dependencies:
      '@types/estree-jsx': 1.0.5
      devlop: 1.1.0
      estree-util-visit: 2.0.0
      unist-util-position-from-estree: 2.0.0

  esast-util-from-js@2.0.1:
    dependencies:
      '@types/estree-jsx': 1.0.5
      acorn: 8.15.0
      esast-util-from-estree: 2.0.0
      vfile-message: 4.0.2

  esbuild@0.25.5:
    optionalDependencies:
      '@esbuild/aix-ppc64': 0.25.5
      '@esbuild/android-arm': 0.25.5
      '@esbuild/android-arm64': 0.25.5
      '@esbuild/android-x64': 0.25.5
      '@esbuild/darwin-arm64': 0.25.5
      '@esbuild/darwin-x64': 0.25.5
      '@esbuild/freebsd-arm64': 0.25.5
      '@esbuild/freebsd-x64': 0.25.5
      '@esbuild/linux-arm': 0.25.5
      '@esbuild/linux-arm64': 0.25.5
      '@esbuild/linux-ia32': 0.25.5
      '@esbuild/linux-loong64': 0.25.5
      '@esbuild/linux-mips64el': 0.25.5
      '@esbuild/linux-ppc64': 0.25.5
      '@esbuild/linux-riscv64': 0.25.5
      '@esbuild/linux-s390x': 0.25.5
      '@esbuild/linux-x64': 0.25.5
      '@esbuild/netbsd-arm64': 0.25.5
      '@esbuild/netbsd-x64': 0.25.5
      '@esbuild/openbsd-arm64': 0.25.5
      '@esbuild/openbsd-x64': 0.25.5
      '@esbuild/sunos-x64': 0.25.5
      '@esbuild/win32-arm64': 0.25.5
      '@esbuild/win32-ia32': 0.25.5
      '@esbuild/win32-x64': 0.25.5

  esbuild@0.25.6:
    optionalDependencies:
      '@esbuild/aix-ppc64': 0.25.6
      '@esbuild/android-arm': 0.25.6
      '@esbuild/android-arm64': 0.25.6
      '@esbuild/android-x64': 0.25.6
      '@esbuild/darwin-arm64': 0.25.6
      '@esbuild/darwin-x64': 0.25.6
      '@esbuild/freebsd-arm64': 0.25.6
      '@esbuild/freebsd-x64': 0.25.6
      '@esbuild/linux-arm': 0.25.6
      '@esbuild/linux-arm64': 0.25.6
      '@esbuild/linux-ia32': 0.25.6
      '@esbuild/linux-loong64': 0.25.6
      '@esbuild/linux-mips64el': 0.25.6
      '@esbuild/linux-ppc64': 0.25.6
      '@esbuild/linux-riscv64': 0.25.6
      '@esbuild/linux-s390x': 0.25.6
      '@esbuild/linux-x64': 0.25.6
      '@esbuild/netbsd-arm64': 0.25.6
      '@esbuild/netbsd-x64': 0.25.6
      '@esbuild/openbsd-arm64': 0.25.6
      '@esbuild/openbsd-x64': 0.25.6
      '@esbuild/openharmony-arm64': 0.25.6
      '@esbuild/sunos-x64': 0.25.6
      '@esbuild/win32-arm64': 0.25.6
      '@esbuild/win32-ia32': 0.25.6
      '@esbuild/win32-x64': 0.25.6

  escalade@3.2.0: {}

  escape-html@1.0.3: {}

  escape-string-regexp@4.0.0: {}

  escape-string-regexp@5.0.0: {}

  escodegen@2.1.0:
    dependencies:
      esprima: 4.0.1
      estraverse: 5.3.0
      esutils: 2.0.3
    optionalDependencies:
      source-map: 0.6.1

  eslint-plugin-react-hooks@5.2.0(eslint@9.30.1(jiti@2.4.2)):
    dependencies:
      eslint: 9.30.1(jiti@2.4.2)

  eslint-plugin-react@7.37.5(eslint@9.30.1(jiti@2.4.2)):
    dependencies:
      array-includes: 3.1.8
      array.prototype.findlast: 1.2.5
      array.prototype.flatmap: 1.3.3
      array.prototype.tosorted: 1.1.4
      doctrine: 2.1.0
      es-iterator-helpers: 1.2.1
      eslint: 9.30.1(jiti@2.4.2)
      estraverse: 5.3.0
      hasown: 2.0.2
      jsx-ast-utils: 3.3.5
      minimatch: 3.1.2
      object.entries: 1.1.9
      object.fromentries: 2.0.8
      object.values: 1.2.1
      prop-types: 15.8.1
      resolve: 2.0.0-next.5
      semver: 6.3.1
      string.prototype.matchall: 4.0.12
      string.prototype.repeat: 1.0.0

  eslint-plugin-tailwindcss@3.18.0(tailwindcss@4.1.11):
    dependencies:
      fast-glob: 3.3.3
      postcss: 8.5.6
      tailwindcss: 4.1.11

  eslint-scope@5.1.1:
    dependencies:
      esrecurse: 4.3.0
      estraverse: 4.3.0

  eslint-scope@8.4.0:
    dependencies:
      esrecurse: 4.3.0
      estraverse: 5.3.0

  eslint-visitor-keys@3.4.3: {}

  eslint-visitor-keys@4.2.1: {}

  eslint@9.30.1(jiti@2.4.2):
    dependencies:
      '@eslint-community/eslint-utils': 4.7.0(eslint@9.30.1(jiti@2.4.2))
      '@eslint-community/regexpp': 4.12.1
      '@eslint/config-array': 0.21.0
      '@eslint/config-helpers': 0.3.0
      '@eslint/core': 0.14.0
      '@eslint/eslintrc': 3.3.1
      '@eslint/js': 9.30.1
      '@eslint/plugin-kit': 0.3.3
      '@humanfs/node': 0.16.6
      '@humanwhocodes/module-importer': 1.0.1
      '@humanwhocodes/retry': 0.4.3
      '@types/estree': 1.0.8
      '@types/json-schema': 7.0.15
      ajv: 6.12.6
      chalk: 4.1.2
      cross-spawn: 7.0.6
      debug: 4.4.1
      escape-string-regexp: 4.0.0
      eslint-scope: 8.4.0
      eslint-visitor-keys: 4.2.1
      espree: 10.4.0
      esquery: 1.6.0
      esutils: 2.0.3
      fast-deep-equal: 3.1.3
      file-entry-cache: 8.0.0
      find-up: 5.0.0
      glob-parent: 6.0.2
      ignore: 5.3.2
      imurmurhash: 0.1.4
      is-glob: 4.0.3
      json-stable-stringify-without-jsonify: 1.0.1
      lodash.merge: 4.6.2
      minimatch: 3.1.2
      natural-compare: 1.4.0
      optionator: 0.9.4
    optionalDependencies:
      jiti: 2.4.2
    transitivePeerDependencies:
      - supports-color

  espree@10.4.0:
    dependencies:
      acorn: 8.15.0
      acorn-jsx: 5.3.2(acorn@8.15.0)
      eslint-visitor-keys: 4.2.1

  esprima@4.0.1: {}

  esquery@1.6.0:
    dependencies:
      estraverse: 5.3.0

  esrecurse@4.3.0:
    dependencies:
      estraverse: 5.3.0

  estraverse@4.3.0: {}

  estraverse@5.3.0: {}

  estree-util-attach-comments@3.0.0:
    dependencies:
      '@types/estree': 1.0.8

  estree-util-build-jsx@3.0.1:
    dependencies:
      '@types/estree-jsx': 1.0.5
      devlop: 1.1.0
      estree-util-is-identifier-name: 3.0.0
      estree-walker: 3.0.3

  estree-util-is-identifier-name@3.0.0: {}

  estree-util-scope@1.0.0:
    dependencies:
      '@types/estree': 1.0.8
      devlop: 1.1.0

  estree-util-to-js@2.0.0:
    dependencies:
      '@types/estree-jsx': 1.0.5
      astring: 1.9.0
      source-map: 0.7.4

  estree-util-value-to-estree@3.4.0:
    dependencies:
      '@types/estree': 1.0.8

  estree-util-visit@2.0.0:
    dependencies:
      '@types/estree-jsx': 1.0.5
      '@types/unist': 3.0.3

  estree-walker@2.0.2: {}

  estree-walker@3.0.3:
    dependencies:
      '@types/estree': 1.0.8

  esutils@2.0.3: {}

  etag@1.8.1: {}

  event-target-shim@5.0.1: {}

  eventemitter3@4.0.7: {}

  events@3.3.0: {}

  execa@8.0.1:
    dependencies:
      cross-spawn: 7.0.6
      get-stream: 8.0.1
      human-signals: 5.0.0
      is-stream: 3.0.0
      merge-stream: 2.0.0
      npm-run-path: 5.3.0
      onetime: 6.0.0
      signal-exit: 4.1.0
      strip-final-newline: 3.0.0

  exit-hook@2.2.1: {}

  expect-type@1.2.1: {}

  express@4.21.2:
    dependencies:
      accepts: 1.3.8
      array-flatten: 1.1.1
      body-parser: 1.20.3
      content-disposition: 0.5.4
      content-type: 1.0.5
      cookie: 0.7.1
      cookie-signature: 1.0.6
      debug: 2.6.9
      depd: 2.0.0
      encodeurl: 2.0.0
      escape-html: 1.0.3
      etag: 1.8.1
      finalhandler: 1.3.1
      fresh: 0.5.2
      http-errors: 2.0.0
      merge-descriptors: 1.0.3
      methods: 1.1.2
      on-finished: 2.4.1
      parseurl: 1.3.3
      path-to-regexp: 0.1.12
      proxy-addr: 2.0.7
      qs: 6.13.0
      range-parser: 1.2.1
      safe-buffer: 5.2.1
      send: 0.19.0
      serve-static: 1.16.2
      setprototypeof: 1.2.0
      statuses: 2.0.1
      type-is: 1.6.18
      utils-merge: 1.0.1
      vary: 1.1.2
    transitivePeerDependencies:
      - supports-color

  exsolve@1.0.7: {}

  extend-shallow@2.0.1:
    dependencies:
      is-extendable: 0.1.1

  extend@3.0.2: {}

  extendable-error@0.1.7: {}

  external-editor@3.1.0:
    dependencies:
      chardet: 0.7.0
      iconv-lite: 0.4.24
      tmp: 0.0.33

  extract-zip@2.0.1:
    dependencies:
      debug: 4.4.1
      get-stream: 5.2.0
      yauzl: 2.10.0
    optionalDependencies:
      '@types/yauzl': 2.10.3
    transitivePeerDependencies:
      - supports-color

  fast-content-type-parse@3.0.0: {}

  fast-deep-equal@3.1.3: {}

  fast-fifo@1.3.2: {}

  fast-glob@3.3.1:
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      '@nodelib/fs.walk': 1.2.8
      glob-parent: 5.1.2
      merge2: 1.4.1
      micromatch: 4.0.8

  fast-glob@3.3.3:
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      '@nodelib/fs.walk': 1.2.8
      glob-parent: 5.1.2
      merge2: 1.4.1
      micromatch: 4.0.8

  fast-json-stable-stringify@2.1.0: {}

  fast-levenshtein@2.0.6: {}

  fast-uri@3.0.6: {}

  fast-xml-parser@4.5.3:
    dependencies:
      strnum: 1.1.2

  fastq@1.19.1:
    dependencies:
      reusify: 1.1.0

  fault@2.0.1:
    dependencies:
      format: 0.2.2

  fd-slicer@1.1.0:
    dependencies:
      pend: 1.2.0

  fdir@6.4.6(picomatch@4.0.2):
    optionalDependencies:
      picomatch: 4.0.2

  fecha@4.2.3: {}

  feed@5.1.0:
    dependencies:
      xml-js: 1.6.11

  fetch-blob@3.2.0:
    dependencies:
      node-domexception: 1.0.0
      web-streams-polyfill: 3.3.3

  file-entry-cache@8.0.0:
    dependencies:
      flat-cache: 4.0.1

  file-uri-to-path@1.0.0: {}

  fill-range@7.1.1:
    dependencies:
      to-regex-range: 5.0.1

  filter-obj@6.1.0: {}

  finalhandler@1.3.1:
    dependencies:
      debug: 2.6.9
      encodeurl: 2.0.0
      escape-html: 1.0.3
      on-finished: 2.4.1
      parseurl: 1.3.3
      statuses: 2.0.1
      unpipe: 1.0.0
    transitivePeerDependencies:
      - supports-color

  find-root@1.1.0: {}

  find-up-simple@1.0.1: {}

  find-up@4.1.0:
    dependencies:
      locate-path: 5.0.0
      path-exists: 4.0.0

  find-up@5.0.0:
    dependencies:
      locate-path: 6.0.0
      path-exists: 4.0.0

  find-up@7.0.0:
    dependencies:
      locate-path: 7.2.0
      path-exists: 5.0.0
      unicorn-magic: 0.1.0

  fix-dts-default-cjs-exports@1.0.1:
    dependencies:
      magic-string: 0.30.17
      mlly: 1.7.4
      rollup: 4.44.2

  flat-cache@4.0.1:
    dependencies:
      flatted: 3.3.3
      keyv: 4.5.4

  flatted@3.3.3: {}

  fn.name@1.1.0: {}

  focus-trap@7.6.5:
    dependencies:
      tabbable: 6.2.0

  follow-redirects@1.15.9: {}

  for-each@0.3.5:
    dependencies:
      is-callable: 1.2.7

  foreach@2.0.6: {}

  foreground-child@3.3.1:
    dependencies:
      cross-spawn: 7.0.6
      signal-exit: 4.1.0

  format@0.2.2: {}

  formdata-polyfill@4.0.10:
    dependencies:
      fetch-blob: 3.2.0

  forwarded@0.2.0: {}

  framer-motion@12.12.1(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      motion-dom: 12.12.1
      motion-utils: 12.12.1
      tslib: 2.8.1
    optionalDependencies:
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)

  fresh@0.5.2: {}

  fresh@2.0.0: {}

  fs-extra@7.0.1:
    dependencies:
      graceful-fs: 4.2.11
      jsonfile: 4.0.0
      universalify: 0.1.2

  fs-extra@8.1.0:
    dependencies:
      graceful-fs: 4.2.11
      jsonfile: 4.0.0
      universalify: 0.1.2

  fsevents@2.3.3:
    optional: true

  function-bind@1.1.2: {}

  function.prototype.name@1.1.8:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      functions-have-names: 1.2.3
      hasown: 2.0.2
      is-callable: 1.2.7

  functions-have-names@1.2.3: {}

  fuse.js@7.1.0: {}

  gensync@1.0.0-beta.2: {}

  get-amd-module-type@6.0.1:
    dependencies:
      ast-module-types: 6.0.1
      node-source-walk: 7.0.1

  get-caller-file@2.0.5: {}

  get-east-asian-width@1.3.0: {}

  get-intrinsic@1.3.0:
    dependencies:
      call-bind-apply-helpers: 1.0.2
      es-define-property: 1.0.1
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      function-bind: 1.1.2
      get-proto: 1.0.1
      gopd: 1.2.0
      has-symbols: 1.1.0
      hasown: 2.0.2
      math-intrinsics: 1.1.0

  get-nonce@1.0.1: {}

  get-own-enumerable-keys@1.0.0: {}

  get-port-please@3.1.2: {}

  get-port@5.1.1: {}

  get-proto@1.0.1:
    dependencies:
      dunder-proto: 1.0.1
      es-object-atoms: 1.1.1

  get-stream@5.2.0:
    dependencies:
      pump: 3.0.3

  get-stream@8.0.1: {}

  get-symbol-description@1.1.0:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      get-intrinsic: 1.3.0

  get-tsconfig@4.10.1:
    dependencies:
      resolve-pkg-maps: 1.0.0

  giget@2.0.0:
    dependencies:
      citty: 0.1.6
      consola: 3.4.2
      defu: 6.1.4
      node-fetch-native: 1.6.6
      nypm: 0.6.0
      pathe: 2.0.3

  github-slugger@2.0.0: {}

  glob-parent@5.1.2:
    dependencies:
      is-glob: 4.0.3

  glob-parent@6.0.2:
    dependencies:
      is-glob: 4.0.3

  glob-to-regexp@0.4.1: {}

  glob@10.4.5:
    dependencies:
      foreground-child: 3.3.1
      jackspeak: 3.4.3
      minimatch: 9.0.5
      minipass: 7.1.2
      package-json-from-dist: 1.0.1
      path-scurry: 1.11.1

  glob@11.0.2:
    dependencies:
      foreground-child: 3.3.1
      jackspeak: 4.1.0
      minimatch: 10.0.1
      minipass: 7.1.2
      package-json-from-dist: 1.0.1
      path-scurry: 2.0.0

  globals@14.0.0: {}

  globals@15.15.0: {}

  globalthis@1.0.4:
    dependencies:
      define-properties: 1.2.1
      gopd: 1.2.0

  globby@11.1.0:
    dependencies:
      array-union: 2.1.0
      dir-glob: 3.0.1
      fast-glob: 3.3.3
      ignore: 5.3.2
      merge2: 1.4.1
      slash: 3.0.0

  globby@14.1.0:
    dependencies:
      '@sindresorhus/merge-streams': 2.3.0
      fast-glob: 3.3.3
      ignore: 7.0.5
      path-type: 6.0.0
      slash: 5.1.0
      unicorn-magic: 0.3.0

  globrex@0.1.2: {}

  gonzales-pe@4.3.0:
    dependencies:
      minimist: 1.2.8

  goober@2.1.16(csstype@3.1.3):
    dependencies:
      csstype: 3.1.3

  gopd@1.2.0: {}

  graceful-fs@4.2.11: {}

  graphemer@1.4.0: {}

  gray-matter@4.0.3:
    dependencies:
      js-yaml: 3.14.1
      kind-of: 6.0.3
      section-matter: 1.0.0
      strip-bom-string: 1.0.0

  gzip-size@6.0.0:
    dependencies:
      duplexer: 0.1.2

  gzip-size@7.0.0:
    dependencies:
      duplexer: 0.1.2

  h3@1.13.0:
    dependencies:
      cookie-es: 1.2.2
      crossws: 0.3.5
      defu: 6.1.4
      destr: 2.0.5
      iron-webcrypto: 1.2.1
      ohash: 1.1.6
      radix3: 1.1.2
      ufo: 1.6.1
      uncrypto: 0.1.3
      unenv: 1.10.0

  h3@1.15.3:
    dependencies:
      cookie-es: 1.2.2
      crossws: 0.3.5
      defu: 6.1.4
      destr: 2.0.5
      iron-webcrypto: 1.2.1
      node-mock-http: 1.0.1
      radix3: 1.1.2
      ufo: 1.6.1
      uncrypto: 0.1.3

  hachure-fill@0.5.2: {}

  has-bigints@1.1.0: {}

  has-flag@4.0.0: {}

  has-property-descriptors@1.0.2:
    dependencies:
      es-define-property: 1.0.1

  has-proto@1.2.0:
    dependencies:
      dunder-proto: 1.0.1

  has-symbols@1.1.0: {}

  has-tostringtag@1.0.2:
    dependencies:
      has-symbols: 1.1.0

  hasown@2.0.2:
    dependencies:
      function-bind: 1.1.2

  hast-util-embedded@3.0.0:
    dependencies:
      '@types/hast': 3.0.4
      hast-util-is-element: 3.0.0

  hast-util-format@1.1.0:
    dependencies:
      '@types/hast': 3.0.4
      hast-util-embedded: 3.0.0
      hast-util-minify-whitespace: 1.0.1
      hast-util-phrasing: 3.0.1
      hast-util-whitespace: 3.0.0
      html-whitespace-sensitive-tag-names: 3.0.1
      unist-util-visit-parents: 6.0.1

  hast-util-from-dom@5.0.1:
    dependencies:
      '@types/hast': 3.0.4
      hastscript: 9.0.1
      web-namespaces: 2.0.1

  hast-util-from-html-isomorphic@2.0.0:
    dependencies:
      '@types/hast': 3.0.4
      hast-util-from-dom: 5.0.1
      hast-util-from-html: 2.0.3
      unist-util-remove-position: 5.0.0

  hast-util-from-html@2.0.3:
    dependencies:
      '@types/hast': 3.0.4
      devlop: 1.1.0
      hast-util-from-parse5: 8.0.3
      parse5: 7.3.0
      vfile: 6.0.3
      vfile-message: 4.0.2

  hast-util-from-parse5@8.0.3:
    dependencies:
      '@types/hast': 3.0.4
      '@types/unist': 3.0.3
      devlop: 1.1.0
      hastscript: 9.0.1
      property-information: 7.1.0
      vfile: 6.0.3
      vfile-location: 5.0.3
      web-namespaces: 2.0.1

  hast-util-has-property@3.0.0:
    dependencies:
      '@types/hast': 3.0.4

  hast-util-is-body-ok-link@3.0.1:
    dependencies:
      '@types/hast': 3.0.4

  hast-util-is-element@3.0.0:
    dependencies:
      '@types/hast': 3.0.4

  hast-util-minify-whitespace@1.0.1:
    dependencies:
      '@types/hast': 3.0.4
      hast-util-embedded: 3.0.0
      hast-util-is-element: 3.0.0
      hast-util-whitespace: 3.0.0
      unist-util-is: 6.0.0

  hast-util-parse-selector@4.0.0:
    dependencies:
      '@types/hast': 3.0.4

  hast-util-phrasing@3.0.1:
    dependencies:
      '@types/hast': 3.0.4
      hast-util-embedded: 3.0.0
      hast-util-has-property: 3.0.0
      hast-util-is-body-ok-link: 3.0.1
      hast-util-is-element: 3.0.0

  hast-util-raw@9.1.0:
    dependencies:
      '@types/hast': 3.0.4
      '@types/unist': 3.0.3
      '@ungap/structured-clone': 1.3.0
      hast-util-from-parse5: 8.0.3
      hast-util-to-parse5: 8.0.0
      html-void-elements: 3.0.0
      mdast-util-to-hast: 13.2.0
      parse5: 7.3.0
      unist-util-position: 5.0.0
      unist-util-visit: 5.0.0
      vfile: 6.0.3
      web-namespaces: 2.0.1
      zwitch: 2.0.4

  hast-util-sanitize@5.0.2:
    dependencies:
      '@types/hast': 3.0.4
      '@ungap/structured-clone': 1.3.0
      unist-util-position: 5.0.0

  hast-util-to-estree@3.1.3:
    dependencies:
      '@types/estree': 1.0.8
      '@types/estree-jsx': 1.0.5
      '@types/hast': 3.0.4
      comma-separated-tokens: 2.0.3
      devlop: 1.1.0
      estree-util-attach-comments: 3.0.0
      estree-util-is-identifier-name: 3.0.0
      hast-util-whitespace: 3.0.0
      mdast-util-mdx-expression: 2.0.1
      mdast-util-mdx-jsx: 3.2.0
      mdast-util-mdxjs-esm: 2.0.1
      property-information: 7.1.0
      space-separated-tokens: 2.0.2
      style-to-js: 1.1.16
      unist-util-position: 5.0.0
      zwitch: 2.0.4
    transitivePeerDependencies:
      - supports-color

  hast-util-to-html@9.0.5:
    dependencies:
      '@types/hast': 3.0.4
      '@types/unist': 3.0.3
      ccount: 2.0.1
      comma-separated-tokens: 2.0.3
      hast-util-whitespace: 3.0.0
      html-void-elements: 3.0.0
      mdast-util-to-hast: 13.2.0
      property-information: 7.1.0
      space-separated-tokens: 2.0.2
      stringify-entities: 4.0.4
      zwitch: 2.0.4

  hast-util-to-jsx-runtime@2.3.6:
    dependencies:
      '@types/estree': 1.0.8
      '@types/hast': 3.0.4
      '@types/unist': 3.0.3
      comma-separated-tokens: 2.0.3
      devlop: 1.1.0
      estree-util-is-identifier-name: 3.0.0
      hast-util-whitespace: 3.0.0
      mdast-util-mdx-expression: 2.0.1
      mdast-util-mdx-jsx: 3.2.0
      mdast-util-mdxjs-esm: 2.0.1
      property-information: 7.1.0
      space-separated-tokens: 2.0.2
      style-to-js: 1.1.16
      unist-util-position: 5.0.0
      vfile-message: 4.0.2
    transitivePeerDependencies:
      - supports-color

  hast-util-to-parse5@8.0.0:
    dependencies:
      '@types/hast': 3.0.4
      comma-separated-tokens: 2.0.3
      devlop: 1.1.0
      property-information: 6.5.0
      space-separated-tokens: 2.0.2
      web-namespaces: 2.0.1
      zwitch: 2.0.4

  hast-util-to-string@3.0.1:
    dependencies:
      '@types/hast': 3.0.4

  hast-util-to-text@4.0.2:
    dependencies:
      '@types/hast': 3.0.4
      '@types/unist': 3.0.3
      hast-util-is-element: 3.0.0
      unist-util-find-after: 5.0.0

  hast-util-whitespace@3.0.0:
    dependencies:
      '@types/hast': 3.0.4

  hastscript@9.0.1:
    dependencies:
      '@types/hast': 3.0.4
      comma-separated-tokens: 2.0.3
      hast-util-parse-selector: 4.0.0
      property-information: 7.1.0
      space-separated-tokens: 2.0.2

  highlight.js@11.11.1: {}

  highlightjs-curl@1.3.0: {}

  highlightjs-vue@1.0.0: {}

  hoist-non-react-statics@3.3.2:
    dependencies:
      react-is: 16.13.1

  hookable@5.5.3: {}

  hosted-git-info@6.1.3:
    dependencies:
      lru-cache: 7.18.3

  hosted-git-info@7.0.2:
    dependencies:
      lru-cache: 10.4.3

  html-escaper@2.0.2: {}

  html-void-elements@3.0.0: {}

  html-whitespace-sensitive-tag-names@3.0.1: {}

  html@1.0.0:
    dependencies:
      concat-stream: 1.6.2

  htmlparser2@10.0.0:
    dependencies:
      domelementtype: 2.3.0
      domhandler: 5.0.3
      domutils: 3.2.2
      entities: 6.0.1

  http-errors@2.0.0:
    dependencies:
      depd: 2.0.0
      inherits: 2.0.4
      setprototypeof: 1.2.0
      statuses: 2.0.1
      toidentifier: 1.0.1

  http-proxy@1.18.1:
    dependencies:
      eventemitter3: 4.0.7
      follow-redirects: 1.15.9
      requires-port: 1.0.0
    transitivePeerDependencies:
      - debug

  http-shutdown@1.2.2: {}

  https-proxy-agent@7.0.6:
    dependencies:
      agent-base: 7.1.3
      debug: 4.4.1
    transitivePeerDependencies:
      - supports-color

  httpxy@0.1.7: {}

  human-id@4.1.1: {}

  human-signals@5.0.0: {}

  iconv-lite@0.4.24:
    dependencies:
      safer-buffer: 2.1.2

  iconv-lite@0.6.3:
    dependencies:
      safer-buffer: 2.1.2

  ieee754@1.2.1: {}

  ignore@5.3.2: {}

  ignore@7.0.5: {}

  image-size@2.0.2: {}

  import-fresh@3.3.1:
    dependencies:
      parent-module: 1.0.1
      resolve-from: 4.0.0

  imurmurhash@0.1.4: {}

  index-to-position@1.1.0: {}

  inherits@2.0.4: {}

  ini@1.3.8: {}

  inline-style-parser@0.2.4: {}

  internal-slot@1.1.0:
    dependencies:
      es-errors: 1.3.0
      hasown: 2.0.2
      side-channel: 1.1.0

  internmap@1.0.1: {}

  internmap@2.0.3: {}

  ioredis@5.6.1:
    dependencies:
      '@ioredis/commands': 1.2.0
      cluster-key-slot: 1.1.2
      debug: 4.4.1
      denque: 2.1.0
      lodash.defaults: 4.2.0
      lodash.isarguments: 3.1.0
      redis-errors: 1.2.0
      redis-parser: 3.0.0
      standard-as-callback: 2.1.0
    transitivePeerDependencies:
      - supports-color

  ipaddr.js@1.9.1: {}

  iron-webcrypto@1.2.1: {}

  is-absolute-url@4.0.1: {}

  is-alphabetical@2.0.1: {}

  is-alphanumerical@2.0.1:
    dependencies:
      is-alphabetical: 2.0.1
      is-decimal: 2.0.1

  is-array-buffer@3.0.5:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      get-intrinsic: 1.3.0

  is-arrayish@0.2.1: {}

  is-arrayish@0.3.2: {}

  is-async-function@2.1.1:
    dependencies:
      async-function: 1.0.0
      call-bound: 1.0.4
      get-proto: 1.0.1
      has-tostringtag: 1.0.2
      safe-regex-test: 1.1.0

  is-bigint@1.1.0:
    dependencies:
      has-bigints: 1.1.0

  is-binary-path@2.1.0:
    dependencies:
      binary-extensions: 2.3.0

  is-boolean-object@1.2.2:
    dependencies:
      call-bound: 1.0.4
      has-tostringtag: 1.0.2

  is-builtin-module@3.2.1:
    dependencies:
      builtin-modules: 3.3.0

  is-callable@1.2.7: {}

  is-core-module@2.16.1:
    dependencies:
      hasown: 2.0.2

  is-data-view@1.0.2:
    dependencies:
      call-bound: 1.0.4
      get-intrinsic: 1.3.0
      is-typed-array: 1.1.15

  is-date-object@1.1.0:
    dependencies:
      call-bound: 1.0.4
      has-tostringtag: 1.0.2

  is-decimal@2.0.1: {}

  is-docker@2.2.1: {}

  is-docker@3.0.0: {}

  is-extendable@0.1.1: {}

  is-extglob@2.1.1: {}

  is-finalizationregistry@1.1.1:
    dependencies:
      call-bound: 1.0.4

  is-fullwidth-code-point@3.0.0: {}

  is-generator-function@1.1.0:
    dependencies:
      call-bound: 1.0.4
      get-proto: 1.0.1
      has-tostringtag: 1.0.2
      safe-regex-test: 1.1.0

  is-glob@4.0.3:
    dependencies:
      is-extglob: 2.1.1

  is-hexadecimal@2.0.1: {}

  is-inside-container@1.0.0:
    dependencies:
      is-docker: 3.0.0

  is-map@2.0.3: {}

  is-module@1.0.0: {}

  is-number-object@1.1.1:
    dependencies:
      call-bound: 1.0.4
      has-tostringtag: 1.0.2

  is-number@7.0.0: {}

  is-obj@3.0.0: {}

  is-path-inside@4.0.0: {}

  is-plain-obj@2.1.0: {}

  is-plain-obj@4.1.0: {}

  is-plain-object@5.0.0: {}

  is-reference@1.2.1:
    dependencies:
      '@types/estree': 1.0.8

  is-regex@1.2.1:
    dependencies:
      call-bound: 1.0.4
      gopd: 1.2.0
      has-tostringtag: 1.0.2
      hasown: 2.0.2

  is-regexp@3.1.0: {}

  is-set@2.0.3: {}

  is-shared-array-buffer@1.0.4:
    dependencies:
      call-bound: 1.0.4

  is-stream@2.0.1: {}

  is-stream@3.0.0: {}

  is-stream@4.0.1: {}

  is-string@1.1.1:
    dependencies:
      call-bound: 1.0.4
      has-tostringtag: 1.0.2

  is-subdir@1.2.0:
    dependencies:
      better-path-resolve: 1.0.0

  is-symbol@1.1.1:
    dependencies:
      call-bound: 1.0.4
      has-symbols: 1.1.0
      safe-regex-test: 1.1.0

  is-typed-array@1.1.15:
    dependencies:
      which-typed-array: 1.1.19

  is-url-superb@4.0.0: {}

  is-url@1.2.4: {}

  is-weakmap@2.0.2: {}

  is-weakref@1.1.1:
    dependencies:
      call-bound: 1.0.4

  is-weakset@2.0.4:
    dependencies:
      call-bound: 1.0.4
      get-intrinsic: 1.3.0

  is-windows@1.0.2: {}

  is-wsl@2.2.0:
    dependencies:
      is-docker: 2.2.1

  is-wsl@3.1.0:
    dependencies:
      is-inside-container: 1.0.0

  is64bit@2.0.0:
    dependencies:
      system-architecture: 0.1.0

  isarray@1.0.0: {}

  isarray@2.0.5: {}

  isbot@5.1.28: {}

  isexe@2.0.0: {}

  isexe@3.1.1: {}

  iterator.prototype@1.1.5:
    dependencies:
      define-data-property: 1.1.4
      es-object-atoms: 1.1.1
      get-intrinsic: 1.3.0
      get-proto: 1.0.1
      has-symbols: 1.1.0
      set-function-name: 2.0.2

  jackspeak@3.4.3:
    dependencies:
      '@isaacs/cliui': 8.0.2
    optionalDependencies:
      '@pkgjs/parseargs': 0.11.0

  jackspeak@4.1.0:
    dependencies:
      '@isaacs/cliui': 8.0.2

  jest-worker@27.5.1:
    dependencies:
      '@types/node': 24.0.12
      merge-stream: 2.0.0
      supports-color: 8.1.1

  jiti@1.21.7: {}

  jiti@2.4.2: {}

  joycon@3.1.1: {}

  js-beautify@1.15.4:
    dependencies:
      config-chain: 1.1.13
      editorconfig: 1.0.4
      glob: 10.4.5
      js-cookie: 3.0.5
      nopt: 7.2.1

  js-cookie@3.0.5: {}

  js-tokens@4.0.0: {}

  js-tokens@9.0.1: {}

  js-yaml@3.14.1:
    dependencies:
      argparse: 1.0.10
      esprima: 4.0.1

  js-yaml@4.1.0:
    dependencies:
      argparse: 2.0.1

  jsesc@3.0.2: {}

  jsesc@3.1.0: {}

  json-buffer@3.0.1: {}

  json-parse-even-better-errors@2.3.1: {}

  json-parse-even-better-errors@3.0.2: {}

  json-pointer@0.6.2:
    dependencies:
      foreach: 2.0.6

  json-schema-traverse@0.4.1: {}

  json-schema-traverse@1.0.0: {}

  json-schema-typed@8.0.1: {}

  json-schema@0.4.0: {}

  json-stable-stringify-without-jsonify@1.0.1: {}

  json-stringify-deterministic@1.0.12: {}

  json5@2.2.3: {}

  jsondiffpatch@0.6.0:
    dependencies:
      '@types/diff-match-patch': 1.0.36
      chalk: 5.4.1
      diff-match-patch: 1.0.5

  jsonfile@4.0.0:
    optionalDependencies:
      graceful-fs: 4.2.11

  jsonpointer@5.0.1: {}

  jsx-ast-utils@3.3.5:
    dependencies:
      array-includes: 3.1.8
      array.prototype.flat: 1.3.3
      object.assign: 4.1.7
      object.values: 1.2.1

  junk@4.0.1: {}

  just-clone@6.2.0: {}

  just-curry-it@5.3.0: {}

  jwt-decode@4.0.0: {}

  katex@0.16.22:
    dependencies:
      commander: 8.3.0

  keyv@4.5.4:
    dependencies:
      json-buffer: 3.0.1

  khroma@2.1.0: {}

  kind-of@6.0.3: {}

  kleur@4.1.5: {}

  klona@2.0.6: {}

  knitwork@1.2.0: {}

  kolorist@1.8.0: {}

  kuler@2.0.0: {}

  lambda-local@2.2.0:
    dependencies:
      commander: 10.0.1
      dotenv: 16.6.1
      winston: 3.17.0

  langium@3.3.1:
    dependencies:
      chevrotain: 11.0.3
      chevrotain-allstar: 0.3.1(chevrotain@11.0.3)
      vscode-languageserver: 9.0.1
      vscode-languageserver-textdocument: 1.0.12
      vscode-uri: 3.0.8

  layout-base@1.0.2: {}

  layout-base@2.0.1: {}

  lazystream@1.0.1:
    dependencies:
      readable-stream: 2.3.8

  leven@4.0.0: {}

  levn@0.4.1:
    dependencies:
      prelude-ls: 1.2.1
      type-check: 0.4.0

  lightningcss-darwin-arm64@1.30.1:
    optional: true

  lightningcss-darwin-x64@1.30.1:
    optional: true

  lightningcss-freebsd-x64@1.30.1:
    optional: true

  lightningcss-linux-arm-gnueabihf@1.30.1:
    optional: true

  lightningcss-linux-arm64-gnu@1.30.1:
    optional: true

  lightningcss-linux-arm64-musl@1.30.1:
    optional: true

  lightningcss-linux-x64-gnu@1.30.1:
    optional: true

  lightningcss-linux-x64-musl@1.30.1:
    optional: true

  lightningcss-win32-arm64-msvc@1.30.1:
    optional: true

  lightningcss-win32-x64-msvc@1.30.1:
    optional: true

  lightningcss@1.30.1:
    dependencies:
      detect-libc: 2.0.4
    optionalDependencies:
      lightningcss-darwin-arm64: 1.30.1
      lightningcss-darwin-x64: 1.30.1
      lightningcss-freebsd-x64: 1.30.1
      lightningcss-linux-arm-gnueabihf: 1.30.1
      lightningcss-linux-arm64-gnu: 1.30.1
      lightningcss-linux-arm64-musl: 1.30.1
      lightningcss-linux-x64-gnu: 1.30.1
      lightningcss-linux-x64-musl: 1.30.1
      lightningcss-win32-arm64-msvc: 1.30.1
      lightningcss-win32-x64-msvc: 1.30.1

  lilconfig@3.1.3: {}

  lines-and-columns@1.2.4: {}

  listhen@1.9.0:
    dependencies:
      '@parcel/watcher': 2.5.1
      '@parcel/watcher-wasm': 2.5.1
      citty: 0.1.6
      clipboardy: 4.0.0
      consola: 3.4.2
      crossws: 0.3.5
      defu: 6.1.4
      get-port-please: 3.1.2
      h3: 1.15.3
      http-shutdown: 1.2.2
      jiti: 2.4.2
      mlly: 1.7.4
      node-forge: 1.3.1
      pathe: 1.1.2
      std-env: 3.9.0
      ufo: 1.6.1
      untun: 0.1.3
      uqr: 0.1.2

  load-tsconfig@0.2.5: {}

  loader-runner@4.3.0: {}

  local-pkg@1.1.1:
    dependencies:
      mlly: 1.7.4
      pkg-types: 2.2.0
      quansync: 0.2.10

  locate-path@5.0.0:
    dependencies:
      p-locate: 4.1.0

  locate-path@6.0.0:
    dependencies:
      p-locate: 5.0.0

  locate-path@7.2.0:
    dependencies:
      p-locate: 6.0.0

  lodash-es@4.17.21: {}

  lodash.debounce@4.0.8: {}

  lodash.defaults@4.2.0: {}

  lodash.isarguments@3.1.0: {}

  lodash.merge@4.6.2: {}

  lodash.sortby@4.7.0: {}

  lodash.startcase@4.4.0: {}

  lodash@4.17.21: {}

  logform@2.7.0:
    dependencies:
      '@colors/colors': 1.6.0
      '@types/triple-beam': 1.3.5
      fecha: 4.2.3
      ms: 2.1.3
      safe-stable-stringify: 2.5.0
      triple-beam: 1.4.1

  longest-streak@3.1.0: {}

  loose-envify@1.4.0:
    dependencies:
      js-tokens: 4.0.0

  loupe@3.1.4: {}

  lowlight@3.3.0:
    dependencies:
      '@types/hast': 3.0.4
      devlop: 1.1.0
      highlight.js: 11.11.1

  lru-cache@10.4.3: {}

  lru-cache@11.1.0: {}

  lru-cache@5.1.1:
    dependencies:
      yallist: 3.1.1

  lru-cache@7.18.3: {}

  lucide-react@0.525.0(react@19.1.0):
    dependencies:
      react: 19.1.0

  lucide-static@0.525.0: {}

  luxon@3.6.1: {}

  magic-string@0.30.17:
    dependencies:
      '@jridgewell/sourcemap-codec': 1.5.4

  magicast@0.3.5:
    dependencies:
      '@babel/parser': 7.28.0
      '@babel/types': 7.28.0
      source-map-js: 1.2.1

  markdown-extensions@2.0.0: {}

  markdown-table@3.0.4: {}

  marked@15.0.12: {}

  math-intrinsics@1.1.0: {}

  mdast-util-find-and-replace@3.0.2:
    dependencies:
      '@types/mdast': 4.0.4
      escape-string-regexp: 5.0.0
      unist-util-is: 6.0.0
      unist-util-visit-parents: 6.0.1

  mdast-util-from-markdown@2.0.2:
    dependencies:
      '@types/mdast': 4.0.4
      '@types/unist': 3.0.3
      decode-named-character-reference: 1.1.0
      devlop: 1.1.0
      mdast-util-to-string: 4.0.0
      micromark: 4.0.2
      micromark-util-decode-numeric-character-reference: 2.0.2
      micromark-util-decode-string: 2.0.1
      micromark-util-normalize-identifier: 2.0.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.2
      unist-util-stringify-position: 4.0.0
    transitivePeerDependencies:
      - supports-color

  mdast-util-frontmatter@2.0.1:
    dependencies:
      '@types/mdast': 4.0.4
      devlop: 1.1.0
      escape-string-regexp: 5.0.0
      mdast-util-from-markdown: 2.0.2
      mdast-util-to-markdown: 2.1.2
      micromark-extension-frontmatter: 2.0.0
    transitivePeerDependencies:
      - supports-color

  mdast-util-gfm-autolink-literal@2.0.1:
    dependencies:
      '@types/mdast': 4.0.4
      ccount: 2.0.1
      devlop: 1.1.0
      mdast-util-find-and-replace: 3.0.2
      micromark-util-character: 2.1.1

  mdast-util-gfm-footnote@2.1.0:
    dependencies:
      '@types/mdast': 4.0.4
      devlop: 1.1.0
      mdast-util-from-markdown: 2.0.2
      mdast-util-to-markdown: 2.1.2
      micromark-util-normalize-identifier: 2.0.1
    transitivePeerDependencies:
      - supports-color

  mdast-util-gfm-strikethrough@2.0.0:
    dependencies:
      '@types/mdast': 4.0.4
      mdast-util-from-markdown: 2.0.2
      mdast-util-to-markdown: 2.1.2
    transitivePeerDependencies:
      - supports-color

  mdast-util-gfm-table@2.0.0:
    dependencies:
      '@types/mdast': 4.0.4
      devlop: 1.1.0
      markdown-table: 3.0.4
      mdast-util-from-markdown: 2.0.2
      mdast-util-to-markdown: 2.1.2
    transitivePeerDependencies:
      - supports-color

  mdast-util-gfm-task-list-item@2.0.0:
    dependencies:
      '@types/mdast': 4.0.4
      devlop: 1.1.0
      mdast-util-from-markdown: 2.0.2
      mdast-util-to-markdown: 2.1.2
    transitivePeerDependencies:
      - supports-color

  mdast-util-gfm@3.1.0:
    dependencies:
      mdast-util-from-markdown: 2.0.2
      mdast-util-gfm-autolink-literal: 2.0.1
      mdast-util-gfm-footnote: 2.1.0
      mdast-util-gfm-strikethrough: 2.0.0
      mdast-util-gfm-table: 2.0.0
      mdast-util-gfm-task-list-item: 2.0.0
      mdast-util-to-markdown: 2.1.2
    transitivePeerDependencies:
      - supports-color

  mdast-util-math@3.0.0:
    dependencies:
      '@types/hast': 3.0.4
      '@types/mdast': 4.0.4
      devlop: 1.1.0
      longest-streak: 3.1.0
      mdast-util-from-markdown: 2.0.2
      mdast-util-to-markdown: 2.1.2
      unist-util-remove-position: 5.0.0
    transitivePeerDependencies:
      - supports-color

  mdast-util-mdx-expression@2.0.1:
    dependencies:
      '@types/estree-jsx': 1.0.5
      '@types/hast': 3.0.4
      '@types/mdast': 4.0.4
      devlop: 1.1.0
      mdast-util-from-markdown: 2.0.2
      mdast-util-to-markdown: 2.1.2
    transitivePeerDependencies:
      - supports-color

  mdast-util-mdx-jsx@3.2.0:
    dependencies:
      '@types/estree-jsx': 1.0.5
      '@types/hast': 3.0.4
      '@types/mdast': 4.0.4
      '@types/unist': 3.0.3
      ccount: 2.0.1
      devlop: 1.1.0
      mdast-util-from-markdown: 2.0.2
      mdast-util-to-markdown: 2.1.2
      parse-entities: 4.0.2
      stringify-entities: 4.0.4
      unist-util-stringify-position: 4.0.0
      vfile-message: 4.0.2
    transitivePeerDependencies:
      - supports-color

  mdast-util-mdx@3.0.0:
    dependencies:
      mdast-util-from-markdown: 2.0.2
      mdast-util-mdx-expression: 2.0.1
      mdast-util-mdx-jsx: 3.2.0
      mdast-util-mdxjs-esm: 2.0.1
      mdast-util-to-markdown: 2.1.2
    transitivePeerDependencies:
      - supports-color

  mdast-util-mdxjs-esm@2.0.1:
    dependencies:
      '@types/estree-jsx': 1.0.5
      '@types/hast': 3.0.4
      '@types/mdast': 4.0.4
      devlop: 1.1.0
      mdast-util-from-markdown: 2.0.2
      mdast-util-to-markdown: 2.1.2
    transitivePeerDependencies:
      - supports-color

  mdast-util-phrasing@4.1.0:
    dependencies:
      '@types/mdast': 4.0.4
      unist-util-is: 6.0.0

  mdast-util-to-hast@13.2.0:
    dependencies:
      '@types/hast': 3.0.4
      '@types/mdast': 4.0.4
      '@ungap/structured-clone': 1.3.0
      devlop: 1.1.0
      micromark-util-sanitize-uri: 2.0.1
      trim-lines: 3.0.1
      unist-util-position: 5.0.0
      unist-util-visit: 5.0.0
      vfile: 6.0.3

  mdast-util-to-markdown@2.1.2:
    dependencies:
      '@types/mdast': 4.0.4
      '@types/unist': 3.0.3
      longest-streak: 3.1.0
      mdast-util-phrasing: 4.1.0
      mdast-util-to-string: 4.0.0
      micromark-util-classify-character: 2.0.1
      micromark-util-decode-string: 2.0.1
      unist-util-visit: 5.0.0
      zwitch: 2.0.4

  mdast-util-to-string@4.0.0:
    dependencies:
      '@types/mdast': 4.0.4

  mdx-bundler@10.1.1(acorn@8.15.0)(esbuild@0.25.6):
    dependencies:
      '@babel/runtime': 7.27.6
      '@esbuild-plugins/node-resolve': 0.2.2(esbuild@0.25.6)
      '@fal-works/esbuild-plugin-global-externals': 2.1.2
      '@mdx-js/esbuild': 3.1.0(acorn@8.15.0)(esbuild@0.25.6)
      esbuild: 0.25.6
      gray-matter: 4.0.3
      remark-frontmatter: 5.0.0
      remark-mdx-frontmatter: 4.0.0
      uuid: 9.0.1
      vfile: 6.0.3
    transitivePeerDependencies:
      - acorn
      - supports-color

  media-typer@0.3.0: {}

  memoize-one@6.0.0: {}

  merge-descriptors@1.0.3: {}

  merge-options@3.0.4:
    dependencies:
      is-plain-obj: 2.1.0

  merge-stream@2.0.0: {}

  merge2@1.4.1: {}

  mermaid@11.8.1:
    dependencies:
      '@braintree/sanitize-url': 7.1.1
      '@iconify/utils': 2.3.0
      '@mermaid-js/parser': 0.6.1
      '@types/d3': 7.4.3
      cytoscape: 3.32.1
      cytoscape-cose-bilkent: 4.1.0(cytoscape@3.32.1)
      cytoscape-fcose: 2.2.0(cytoscape@3.32.1)
      d3: 7.9.0
      d3-sankey: 0.12.3
      dagre-d3-es: 7.0.11
      dayjs: 1.11.13
      dompurify: 3.2.6
      katex: 0.16.22
      khroma: 2.1.0
      lodash-es: 4.17.21
      marked: 15.0.12
      roughjs: 4.6.6
      stylis: 4.3.6
      ts-dedent: 2.2.0
      uuid: 11.1.0
    transitivePeerDependencies:
      - supports-color

  methods@1.1.2: {}

  micro-api-client@3.3.0: {}

  microdiff@1.5.0: {}

  micromark-core-commonmark@2.0.3:
    dependencies:
      decode-named-character-reference: 1.1.0
      devlop: 1.1.0
      micromark-factory-destination: 2.0.1
      micromark-factory-label: 2.0.1
      micromark-factory-space: 2.0.1
      micromark-factory-title: 2.0.1
      micromark-factory-whitespace: 2.0.1
      micromark-util-character: 2.1.1
      micromark-util-chunked: 2.0.1
      micromark-util-classify-character: 2.0.1
      micromark-util-html-tag-name: 2.0.1
      micromark-util-normalize-identifier: 2.0.1
      micromark-util-resolve-all: 2.0.1
      micromark-util-subtokenize: 2.1.0
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.2

  micromark-extension-frontmatter@2.0.0:
    dependencies:
      fault: 2.0.1
      micromark-util-character: 2.1.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.2

  micromark-extension-gfm-autolink-literal@2.1.0:
    dependencies:
      micromark-util-character: 2.1.1
      micromark-util-sanitize-uri: 2.0.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.2

  micromark-extension-gfm-footnote@2.1.0:
    dependencies:
      devlop: 1.1.0
      micromark-core-commonmark: 2.0.3
      micromark-factory-space: 2.0.1
      micromark-util-character: 2.1.1
      micromark-util-normalize-identifier: 2.0.1
      micromark-util-sanitize-uri: 2.0.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.2

  micromark-extension-gfm-strikethrough@2.1.0:
    dependencies:
      devlop: 1.1.0
      micromark-util-chunked: 2.0.1
      micromark-util-classify-character: 2.0.1
      micromark-util-resolve-all: 2.0.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.2

  micromark-extension-gfm-table@2.1.1:
    dependencies:
      devlop: 1.1.0
      micromark-factory-space: 2.0.1
      micromark-util-character: 2.1.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.2

  micromark-extension-gfm-tagfilter@2.0.0:
    dependencies:
      micromark-util-types: 2.0.2

  micromark-extension-gfm-task-list-item@2.1.0:
    dependencies:
      devlop: 1.1.0
      micromark-factory-space: 2.0.1
      micromark-util-character: 2.1.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.2

  micromark-extension-gfm@3.0.0:
    dependencies:
      micromark-extension-gfm-autolink-literal: 2.1.0
      micromark-extension-gfm-footnote: 2.1.0
      micromark-extension-gfm-strikethrough: 2.1.0
      micromark-extension-gfm-table: 2.1.1
      micromark-extension-gfm-tagfilter: 2.0.0
      micromark-extension-gfm-task-list-item: 2.1.0
      micromark-util-combine-extensions: 2.0.1
      micromark-util-types: 2.0.2

  micromark-extension-math@3.1.0:
    dependencies:
      '@types/katex': 0.16.7
      devlop: 1.1.0
      katex: 0.16.22
      micromark-factory-space: 2.0.1
      micromark-util-character: 2.1.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.2

  micromark-extension-mdx-expression@3.0.1:
    dependencies:
      '@types/estree': 1.0.8
      devlop: 1.1.0
      micromark-factory-mdx-expression: 2.0.3
      micromark-factory-space: 2.0.1
      micromark-util-character: 2.1.1
      micromark-util-events-to-acorn: 2.0.3
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.2

  micromark-extension-mdx-jsx@3.0.2:
    dependencies:
      '@types/estree': 1.0.8
      devlop: 1.1.0
      estree-util-is-identifier-name: 3.0.0
      micromark-factory-mdx-expression: 2.0.3
      micromark-factory-space: 2.0.1
      micromark-util-character: 2.1.1
      micromark-util-events-to-acorn: 2.0.3
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.2
      vfile-message: 4.0.2

  micromark-extension-mdx-md@2.0.0:
    dependencies:
      micromark-util-types: 2.0.2

  micromark-extension-mdxjs-esm@3.0.0:
    dependencies:
      '@types/estree': 1.0.8
      devlop: 1.1.0
      micromark-core-commonmark: 2.0.3
      micromark-util-character: 2.1.1
      micromark-util-events-to-acorn: 2.0.3
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.2
      unist-util-position-from-estree: 2.0.0
      vfile-message: 4.0.2

  micromark-extension-mdxjs@3.0.0:
    dependencies:
      acorn: 8.15.0
      acorn-jsx: 5.3.2(acorn@8.15.0)
      micromark-extension-mdx-expression: 3.0.1
      micromark-extension-mdx-jsx: 3.0.2
      micromark-extension-mdx-md: 2.0.0
      micromark-extension-mdxjs-esm: 3.0.0
      micromark-util-combine-extensions: 2.0.1
      micromark-util-types: 2.0.2

  micromark-factory-destination@2.0.1:
    dependencies:
      micromark-util-character: 2.1.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.2

  micromark-factory-label@2.0.1:
    dependencies:
      devlop: 1.1.0
      micromark-util-character: 2.1.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.2

  micromark-factory-mdx-expression@2.0.3:
    dependencies:
      '@types/estree': 1.0.8
      devlop: 1.1.0
      micromark-factory-space: 2.0.1
      micromark-util-character: 2.1.1
      micromark-util-events-to-acorn: 2.0.3
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.2
      unist-util-position-from-estree: 2.0.0
      vfile-message: 4.0.2

  micromark-factory-space@2.0.1:
    dependencies:
      micromark-util-character: 2.1.1
      micromark-util-types: 2.0.2

  micromark-factory-title@2.0.1:
    dependencies:
      micromark-factory-space: 2.0.1
      micromark-util-character: 2.1.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.2

  micromark-factory-whitespace@2.0.1:
    dependencies:
      micromark-factory-space: 2.0.1
      micromark-util-character: 2.1.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.2

  micromark-util-character@2.1.1:
    dependencies:
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.2

  micromark-util-chunked@2.0.1:
    dependencies:
      micromark-util-symbol: 2.0.1

  micromark-util-classify-character@2.0.1:
    dependencies:
      micromark-util-character: 2.1.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.2

  micromark-util-combine-extensions@2.0.1:
    dependencies:
      micromark-util-chunked: 2.0.1
      micromark-util-types: 2.0.2

  micromark-util-decode-numeric-character-reference@2.0.2:
    dependencies:
      micromark-util-symbol: 2.0.1

  micromark-util-decode-string@2.0.1:
    dependencies:
      decode-named-character-reference: 1.1.0
      micromark-util-character: 2.1.1
      micromark-util-decode-numeric-character-reference: 2.0.2
      micromark-util-symbol: 2.0.1

  micromark-util-encode@2.0.1: {}

  micromark-util-events-to-acorn@2.0.3:
    dependencies:
      '@types/estree': 1.0.8
      '@types/unist': 3.0.3
      devlop: 1.1.0
      estree-util-visit: 2.0.0
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.2
      vfile-message: 4.0.2

  micromark-util-html-tag-name@2.0.1: {}

  micromark-util-normalize-identifier@2.0.1:
    dependencies:
      micromark-util-symbol: 2.0.1

  micromark-util-resolve-all@2.0.1:
    dependencies:
      micromark-util-types: 2.0.2

  micromark-util-sanitize-uri@2.0.1:
    dependencies:
      micromark-util-character: 2.1.1
      micromark-util-encode: 2.0.1
      micromark-util-symbol: 2.0.1

  micromark-util-subtokenize@2.1.0:
    dependencies:
      devlop: 1.1.0
      micromark-util-chunked: 2.0.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.2

  micromark-util-symbol@2.0.1: {}

  micromark-util-types@2.0.2: {}

  micromark@4.0.2:
    dependencies:
      '@types/debug': 4.1.12
      debug: 4.4.1
      decode-named-character-reference: 1.1.0
      devlop: 1.1.0
      micromark-core-commonmark: 2.0.3
      micromark-factory-space: 2.0.1
      micromark-util-character: 2.1.1
      micromark-util-chunked: 2.0.1
      micromark-util-combine-extensions: 2.0.1
      micromark-util-decode-numeric-character-reference: 2.0.2
      micromark-util-encode: 2.0.1
      micromark-util-normalize-identifier: 2.0.1
      micromark-util-resolve-all: 2.0.1
      micromark-util-sanitize-uri: 2.0.1
      micromark-util-subtokenize: 2.1.0
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.2
    transitivePeerDependencies:
      - supports-color

  micromatch@4.0.8:
    dependencies:
      braces: 3.0.3
      picomatch: 2.3.1

  mime-db@1.52.0: {}

  mime-db@1.54.0: {}

  mime-types@2.1.35:
    dependencies:
      mime-db: 1.52.0

  mime-types@3.0.1:
    dependencies:
      mime-db: 1.54.0

  mime@1.6.0: {}

  mime@3.0.0: {}

  mime@4.0.7: {}

  mimic-fn@4.0.0: {}

  minimatch@10.0.1:
    dependencies:
      brace-expansion: 2.0.2

  minimatch@3.1.2:
    dependencies:
      brace-expansion: 1.1.11

  minimatch@5.1.6:
    dependencies:
      brace-expansion: 2.0.2

  minimatch@9.0.1:
    dependencies:
      brace-expansion: 2.0.2

  minimatch@9.0.5:
    dependencies:
      brace-expansion: 2.0.2

  minimist@1.2.8: {}

  minipass@7.1.2: {}

  minizlib@3.0.2:
    dependencies:
      minipass: 7.1.2

  mkdirp@3.0.1: {}

  mlly@1.7.4:
    dependencies:
      acorn: 8.15.0
      pathe: 2.0.3
      pkg-types: 1.3.1
      ufo: 1.6.1

  module-definition@6.0.1:
    dependencies:
      ast-module-types: 6.0.1
      node-source-walk: 7.0.1

  morgan@1.10.0:
    dependencies:
      basic-auth: 2.0.1
      debug: 2.6.9
      depd: 2.0.0
      on-finished: 2.3.0
      on-headers: 1.0.2
    transitivePeerDependencies:
      - supports-color

  motion-dom@12.12.1:
    dependencies:
      motion-utils: 12.12.1

  motion-utils@12.12.1: {}

  mri@1.2.0: {}

  mrmime@2.0.1: {}

  ms@2.0.0: {}

  ms@2.1.3: {}

  mylas@2.1.13: {}

  mz@2.7.0:
    dependencies:
      any-promise: 1.3.0
      object-assign: 4.1.1
      thenify-all: 1.6.0

  nanoid@3.3.11: {}

  nanoid@5.1.5: {}

  natural-compare@1.4.0: {}

  negotiator@0.6.3: {}

  negotiator@0.6.4: {}

  negotiator@1.0.0: {}

  neo-async@2.6.2: {}

  netlify@13.3.5:
    dependencies:
      '@netlify/open-api': 2.37.0
      lodash-es: 4.17.21
      micro-api-client: 3.3.0
      node-fetch: 3.3.2
      p-wait-for: 5.0.2
      qs: 6.14.0

  next-themes@0.4.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)

  next-validate-link@1.5.2:
    dependencies:
      fast-glob: 3.3.3
      gray-matter: 4.0.3
      picocolors: 1.1.1
      remark: 15.0.1
      remark-gfm: 4.0.1
      unist-util-visit: 5.0.0
    transitivePeerDependencies:
      - supports-color

  next@15.3.5(@babel/core@7.28.0)(@opentelemetry/api@1.9.0)(babel-plugin-macros@3.1.0)(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      '@next/env': 15.3.5
      '@swc/counter': 0.1.3
      '@swc/helpers': 0.5.15
      busboy: 1.6.0
      caniuse-lite: 1.0.30001727
      postcss: 8.4.31
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
      styled-jsx: 5.1.6(@babel/core@7.28.0)(babel-plugin-macros@3.1.0)(react@19.1.0)
    optionalDependencies:
      '@next/swc-darwin-arm64': 15.3.5
      '@next/swc-darwin-x64': 15.3.5
      '@next/swc-linux-arm64-gnu': 15.3.5
      '@next/swc-linux-arm64-musl': 15.3.5
      '@next/swc-linux-x64-gnu': 15.3.5
      '@next/swc-linux-x64-musl': 15.3.5
      '@next/swc-win32-arm64-msvc': 15.3.5
      '@next/swc-win32-x64-msvc': 15.3.5
      '@opentelemetry/api': 1.9.0
      sharp: 0.34.3
    transitivePeerDependencies:
      - '@babel/core'
      - babel-plugin-macros

  nitropack@2.11.13:
    dependencies:
      '@cloudflare/kv-asset-handler': 0.4.0
      '@netlify/functions': 3.1.10(rollup@4.44.2)
      '@rollup/plugin-alias': 5.1.1(rollup@4.44.2)
      '@rollup/plugin-commonjs': 28.0.6(rollup@4.44.2)
      '@rollup/plugin-inject': 5.0.5(rollup@4.44.2)
      '@rollup/plugin-json': 6.1.0(rollup@4.44.2)
      '@rollup/plugin-node-resolve': 16.0.1(rollup@4.44.2)
      '@rollup/plugin-replace': 6.0.2(rollup@4.44.2)
      '@rollup/plugin-terser': 0.4.4(rollup@4.44.2)
      '@vercel/nft': 0.29.4(rollup@4.44.2)
      archiver: 7.0.1
      c12: 3.0.4(magicast@0.3.5)
      chokidar: 4.0.3
      citty: 0.1.6
      compatx: 0.2.0
      confbox: 0.2.2
      consola: 3.4.2
      cookie-es: 2.0.0
      croner: 9.1.0
      crossws: 0.3.5
      db0: 0.3.2
      defu: 6.1.4
      destr: 2.0.5
      dot-prop: 9.0.0
      esbuild: 0.25.6
      escape-string-regexp: 5.0.0
      etag: 1.8.1
      exsolve: 1.0.7
      globby: 14.1.0
      gzip-size: 7.0.0
      h3: 1.15.3
      hookable: 5.5.3
      httpxy: 0.1.7
      ioredis: 5.6.1
      jiti: 2.4.2
      klona: 2.0.6
      knitwork: 1.2.0
      listhen: 1.9.0
      magic-string: 0.30.17
      magicast: 0.3.5
      mime: 4.0.7
      mlly: 1.7.4
      node-fetch-native: 1.6.6
      node-mock-http: 1.0.1
      ofetch: 1.4.1
      ohash: 2.0.11
      pathe: 2.0.3
      perfect-debounce: 1.0.0
      pkg-types: 2.2.0
      pretty-bytes: 6.1.1
      radix3: 1.1.2
      rollup: 4.44.2
      rollup-plugin-visualizer: 6.0.3(rollup@4.44.2)
      scule: 1.3.0
      semver: 7.7.2
      serve-placeholder: 2.0.2
      serve-static: 2.2.0
      source-map: 0.7.4
      std-env: 3.9.0
      ufo: 1.6.1
      ultrahtml: 1.6.0
      uncrypto: 0.1.3
      unctx: 2.4.1
      unenv: 2.0.0-rc.18
      unimport: 5.1.0
      unplugin-utils: 0.2.4
      unstorage: 1.16.0(db0@0.3.2)(ioredis@5.6.1)
      untyped: 2.0.0
      unwasm: 0.3.9
      youch: 4.1.0-beta.8
      youch-core: 0.3.2
    transitivePeerDependencies:
      - '@azure/app-configuration'
      - '@azure/cosmos'
      - '@azure/data-tables'
      - '@azure/identity'
      - '@azure/keyvault-secrets'
      - '@azure/storage-blob'
      - '@capacitor/preferences'
      - '@deno/kv'
      - '@electric-sql/pglite'
      - '@libsql/client'
      - '@netlify/blobs'
      - '@planetscale/database'
      - '@upstash/redis'
      - '@vercel/blob'
      - '@vercel/kv'
      - aws4fetch
      - better-sqlite3
      - drizzle-orm
      - encoding
      - idb-keyval
      - mysql2
      - rolldown
      - sqlite3
      - supports-color
      - uploadthing

  node-addon-api@7.1.1: {}

  node-domexception@1.0.0: {}

  node-fetch-native@1.6.6: {}

  node-fetch@2.7.0:
    dependencies:
      whatwg-url: 5.0.0

  node-fetch@3.3.2:
    dependencies:
      data-uri-to-buffer: 4.0.1
      fetch-blob: 3.2.0
      formdata-polyfill: 4.0.10

  node-forge@1.3.1: {}

  node-gyp-build@4.8.4: {}

  node-mock-http@1.0.1: {}

  node-releases@2.0.19: {}

  node-source-walk@7.0.1:
    dependencies:
      '@babel/parser': 7.28.0

  nopt@7.2.1:
    dependencies:
      abbrev: 2.0.0

  nopt@8.1.0:
    dependencies:
      abbrev: 3.0.1

  normalize-package-data@5.0.0:
    dependencies:
      hosted-git-info: 6.1.3
      is-core-module: 2.16.1
      semver: 7.7.2
      validate-npm-package-license: 3.0.4

  normalize-package-data@6.0.2:
    dependencies:
      hosted-git-info: 7.0.2
      semver: 7.7.2
      validate-npm-package-license: 3.0.4

  normalize-path@2.1.1:
    dependencies:
      remove-trailing-separator: 1.1.0

  normalize-path@3.0.0: {}

  npm-install-checks@6.3.0:
    dependencies:
      semver: 7.7.2

  npm-normalize-package-bin@3.0.1: {}

  npm-package-arg@10.1.0:
    dependencies:
      hosted-git-info: 6.1.3
      proc-log: 3.0.0
      semver: 7.7.2
      validate-npm-package-name: 5.0.1

  npm-pick-manifest@8.0.2:
    dependencies:
      npm-install-checks: 6.3.0
      npm-normalize-package-bin: 3.0.1
      npm-package-arg: 10.1.0
      semver: 7.7.2

  npm-run-path@5.3.0:
    dependencies:
      path-key: 4.0.0

  npm-to-yarn@3.0.1: {}

  nth-check@2.1.1:
    dependencies:
      boolbase: 1.0.0

  nypm@0.6.0:
    dependencies:
      citty: 0.1.6
      consola: 3.4.2
      pathe: 2.0.3
      pkg-types: 2.2.0
      tinyexec: 0.3.2

  object-assign@4.1.1: {}

  object-inspect@1.13.4: {}

  object-keys@1.1.1: {}

  object.assign@4.1.7:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      es-object-atoms: 1.1.1
      has-symbols: 1.1.0
      object-keys: 1.1.1

  object.entries@1.1.9:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      es-object-atoms: 1.1.1

  object.fromentries@2.0.8:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-object-atoms: 1.1.1

  object.values@1.2.1:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      es-object-atoms: 1.1.1

  octokit@5.0.3:
    dependencies:
      '@octokit/app': 16.0.1
      '@octokit/core': 7.0.2
      '@octokit/oauth-app': 8.0.1
      '@octokit/plugin-paginate-graphql': 6.0.0(@octokit/core@7.0.2)
      '@octokit/plugin-paginate-rest': 13.0.1(@octokit/core@7.0.2)
      '@octokit/plugin-rest-endpoint-methods': 16.0.0(@octokit/core@7.0.2)
      '@octokit/plugin-retry': 8.0.1(@octokit/core@7.0.2)
      '@octokit/plugin-throttling': 11.0.1(@octokit/core@7.0.2)
      '@octokit/request-error': 7.0.0
      '@octokit/types': 14.1.0
      '@octokit/webhooks': 14.0.0

  ofetch@1.4.1:
    dependencies:
      destr: 2.0.5
      node-fetch-native: 1.6.6
      ufo: 1.6.1

  ohash@1.1.6: {}

  ohash@2.0.11: {}

  on-finished@2.3.0:
    dependencies:
      ee-first: 1.1.1

  on-finished@2.4.1:
    dependencies:
      ee-first: 1.1.1

  on-headers@1.0.2: {}

  once@1.4.0:
    dependencies:
      wrappy: 1.0.2

  one-time@1.0.0:
    dependencies:
      fn.name: 1.1.0

  onetime@6.0.0:
    dependencies:
      mimic-fn: 4.0.0

  oniguruma-parser@0.12.1: {}

  oniguruma-to-es@4.3.3:
    dependencies:
      oniguruma-parser: 0.12.1
      regex: 6.0.1
      regex-recursion: 6.0.2

  open@8.4.2:
    dependencies:
      define-lazy-prop: 2.0.0
      is-docker: 2.2.1
      is-wsl: 2.2.0

  openapi-sampler@1.6.1:
    dependencies:
      '@types/json-schema': 7.0.15
      fast-xml-parser: 4.5.3
      json-pointer: 0.6.2

  openapi-types@12.1.3: {}

  opener@1.5.2: {}

  optionator@0.9.4:
    dependencies:
      deep-is: 0.1.4
      fast-levenshtein: 2.0.6
      levn: 0.4.1
      prelude-ls: 1.2.1
      type-check: 0.4.0
      word-wrap: 1.2.5

  os-tmpdir@1.0.2: {}

  outdent@0.5.0: {}

  own-keys@1.0.1:
    dependencies:
      get-intrinsic: 1.3.0
      object-keys: 1.1.1
      safe-push-apply: 1.0.0

  oxc-transform@0.76.0:
    optionalDependencies:
      '@oxc-transform/binding-android-arm64': 0.76.0
      '@oxc-transform/binding-darwin-arm64': 0.76.0
      '@oxc-transform/binding-darwin-x64': 0.76.0
      '@oxc-transform/binding-freebsd-x64': 0.76.0
      '@oxc-transform/binding-linux-arm-gnueabihf': 0.76.0
      '@oxc-transform/binding-linux-arm-musleabihf': 0.76.0
      '@oxc-transform/binding-linux-arm64-gnu': 0.76.0
      '@oxc-transform/binding-linux-arm64-musl': 0.76.0
      '@oxc-transform/binding-linux-riscv64-gnu': 0.76.0
      '@oxc-transform/binding-linux-s390x-gnu': 0.76.0
      '@oxc-transform/binding-linux-x64-gnu': 0.76.0
      '@oxc-transform/binding-linux-x64-musl': 0.76.0
      '@oxc-transform/binding-wasm32-wasi': 0.76.0
      '@oxc-transform/binding-win32-arm64-msvc': 0.76.0
      '@oxc-transform/binding-win32-x64-msvc': 0.76.0

  p-event@6.0.1:
    dependencies:
      p-timeout: 6.1.4

  p-filter@2.1.0:
    dependencies:
      p-map: 2.1.0

  p-limit@2.3.0:
    dependencies:
      p-try: 2.2.0

  p-limit@3.1.0:
    dependencies:
      yocto-queue: 0.1.0

  p-limit@4.0.0:
    dependencies:
      yocto-queue: 1.2.1

  p-limit@6.2.0:
    dependencies:
      yocto-queue: 1.2.1

  p-locate@4.1.0:
    dependencies:
      p-limit: 2.3.0

  p-locate@5.0.0:
    dependencies:
      p-limit: 3.1.0

  p-locate@6.0.0:
    dependencies:
      p-limit: 4.0.0

  p-map@2.1.0: {}

  p-map@7.0.3: {}

  p-timeout@6.1.4: {}

  p-try@2.2.0: {}

  p-wait-for@5.0.2:
    dependencies:
      p-timeout: 6.1.4

  package-json-from-dist@1.0.1: {}

  package-manager-detector@0.2.11:
    dependencies:
      quansync: 0.2.10

  package-manager-detector@1.3.0: {}

  parent-module@1.0.1:
    dependencies:
      callsites: 3.1.0

  parse-entities@4.0.2:
    dependencies:
      '@types/unist': 2.0.11
      character-entities-legacy: 3.0.0
      character-reference-invalid: 2.0.1
      decode-named-character-reference: 1.1.0
      is-alphanumerical: 2.0.1
      is-decimal: 2.0.1
      is-hexadecimal: 2.0.1

  parse-gitignore@2.0.0: {}

  parse-json@5.2.0:
    dependencies:
      '@babel/code-frame': 7.27.1
      error-ex: 1.3.2
      json-parse-even-better-errors: 2.3.1
      lines-and-columns: 1.2.4

  parse-json@8.3.0:
    dependencies:
      '@babel/code-frame': 7.27.1
      index-to-position: 1.1.0
      type-fest: 4.41.0

  parse-ms@3.0.0: {}

  parse5-htmlparser2-tree-adapter@7.1.0:
    dependencies:
      domhandler: 5.0.3
      parse5: 7.3.0

  parse5-parser-stream@7.1.2:
    dependencies:
      parse5: 7.3.0

  parse5@7.3.0:
    dependencies:
      entities: 6.0.1

  parseurl@1.3.3: {}

  path-browserify@1.0.1: {}

  path-data-parser@0.1.0: {}

  path-exists@4.0.0: {}

  path-exists@5.0.0: {}

  path-key@3.1.1: {}

  path-key@4.0.0: {}

  path-parse@1.0.7: {}

  path-scurry@1.11.1:
    dependencies:
      lru-cache: 10.4.3
      minipass: 7.1.2

  path-scurry@2.0.0:
    dependencies:
      lru-cache: 11.1.0
      minipass: 7.1.2

  path-to-regexp@0.1.12: {}

  path-to-regexp@6.3.0: {}

  path-type@4.0.0: {}

  path-type@6.0.0: {}

  pathe@1.1.2: {}

  pathe@2.0.3: {}

  pathval@2.0.0: {}

  pend@1.2.0: {}

  perfect-debounce@1.0.0: {}

  picocolors@1.1.1: {}

  picomatch@2.3.1: {}

  picomatch@4.0.2: {}

  pify@4.0.1: {}

  pirates@4.0.7: {}

  pkg-types@1.3.1:
    dependencies:
      confbox: 0.1.8
      mlly: 1.7.4
      pathe: 2.0.3

  pkg-types@2.2.0:
    dependencies:
      confbox: 0.2.2
      exsolve: 1.0.7
      pathe: 2.0.3

  plimit-lit@1.6.1:
    dependencies:
      queue-lit: 1.5.2

  pluralize@8.0.0: {}

  points-on-curve@0.2.0: {}

  points-on-path@0.2.1:
    dependencies:
      path-data-parser: 0.1.0
      points-on-curve: 0.2.0

  possible-typed-array-names@1.1.0: {}

  postcss-load-config@6.0.1(jiti@2.4.2)(postcss@8.5.6)(tsx@4.20.3)(yaml@2.8.0):
    dependencies:
      lilconfig: 3.1.3
    optionalDependencies:
      jiti: 2.4.2
      postcss: 8.5.6
      tsx: 4.20.3
      yaml: 2.8.0

  postcss-selector-parser@7.1.0:
    dependencies:
      cssesc: 3.0.0
      util-deprecate: 1.0.2

  postcss-values-parser@6.0.2(postcss@8.5.6):
    dependencies:
      color-name: 1.1.4
      is-url-superb: 4.0.0
      postcss: 8.5.6
      quote-unquote: 1.0.0

  postcss@8.4.31:
    dependencies:
      nanoid: 3.3.11
      picocolors: 1.1.1
      source-map-js: 1.2.1

  postcss@8.5.6:
    dependencies:
      nanoid: 3.3.11
      picocolors: 1.1.1
      source-map-js: 1.2.1

  precinct@12.2.0:
    dependencies:
      '@dependents/detective-less': 5.0.1
      commander: 12.1.0
      detective-amd: 6.0.1
      detective-cjs: 6.0.1
      detective-es6: 5.0.1
      detective-postcss: 7.0.1(postcss@8.5.6)
      detective-sass: 6.0.1
      detective-scss: 5.0.1
      detective-stylus: 5.0.1
      detective-typescript: 14.0.0(typescript@5.8.3)
      detective-vue2: 2.2.0(typescript@5.8.3)
      module-definition: 6.0.1
      node-source-walk: 7.0.1
      postcss: 8.5.6
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  prelude-ls@1.2.1: {}

  prettier-plugin-astro@0.14.1:
    dependencies:
      '@astrojs/compiler': 2.12.0
      prettier: 3.6.2
      sass-formatter: 0.7.9

  prettier@2.8.8: {}

  prettier@3.6.2: {}

  pretty-bytes@6.1.1: {}

  pretty-ms@8.0.0:
    dependencies:
      parse-ms: 3.0.0

  proc-log@3.0.0: {}

  process-nextick-args@2.0.1: {}

  process@0.11.10: {}

  promise-inflight@1.0.1: {}

  promise-retry@2.0.1:
    dependencies:
      err-code: 2.0.3
      retry: 0.12.0

  prop-types@15.8.1:
    dependencies:
      loose-envify: 1.4.0
      object-assign: 4.1.1
      react-is: 16.13.1

  property-information@6.5.0: {}

  property-information@7.1.0: {}

  proto-list@1.2.4: {}

  proxy-addr@2.0.7:
    dependencies:
      forwarded: 0.2.0
      ipaddr.js: 1.9.1

  pump@3.0.3:
    dependencies:
      end-of-stream: 1.4.5
      once: 1.4.0

  punycode@2.3.1: {}

  qs@6.13.0:
    dependencies:
      side-channel: 1.1.0

  qs@6.14.0:
    dependencies:
      side-channel: 1.1.0

  quansync@0.2.10: {}

  queue-lit@1.5.2: {}

  queue-microtask@1.2.3: {}

  quote-unquote@1.0.0: {}

  radix-vue@1.9.17(vue@3.5.17(typescript@5.8.3)):
    dependencies:
      '@floating-ui/dom': 1.7.2
      '@floating-ui/vue': 1.1.7(vue@3.5.17(typescript@5.8.3))
      '@internationalized/date': 3.8.2
      '@internationalized/number': 3.6.3
      '@tanstack/vue-virtual': 3.13.12(vue@3.5.17(typescript@5.8.3))
      '@vueuse/core': 10.11.1(vue@3.5.17(typescript@5.8.3))
      '@vueuse/shared': 10.11.1(vue@3.5.17(typescript@5.8.3))
      aria-hidden: 1.2.6
      defu: 6.1.4
      fast-deep-equal: 3.1.3
      nanoid: 5.1.5
      vue: 3.5.17(typescript@5.8.3)
    transitivePeerDependencies:
      - '@vue/composition-api'

  radix3@1.1.2: {}

  randombytes@2.1.0:
    dependencies:
      safe-buffer: 5.2.1

  range-parser@1.2.1: {}

  raw-body@2.5.2:
    dependencies:
      bytes: 3.1.2
      http-errors: 2.0.0
      iconv-lite: 0.4.24
      unpipe: 1.0.0

  rc9@2.1.2:
    dependencies:
      defu: 6.1.4
      destr: 2.0.5

  react-d3-tree@3.6.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      '@bkrem/react-transition-group': 1.3.5(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@types/d3-hierarchy': 1.1.11
      clone: 2.1.2
      d3-hierarchy: 1.1.9
      d3-selection: 3.0.0
      d3-shape: 1.3.7
      d3-zoom: 3.0.0
      dequal: 2.0.3
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
      uuid: 8.3.2

  react-diff-viewer-continued@4.0.6(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      '@emotion/css': 11.13.5
      '@emotion/react': 11.14.0(@types/react@19.1.8)(react@19.1.0)
      classnames: 2.5.1
      diff: 5.2.0
      memoize-one: 6.0.0
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    transitivePeerDependencies:
      - '@types/react'
      - supports-color

  react-dom@19.1.0(react@19.1.0):
    dependencies:
      react: 19.1.0
      scheduler: 0.26.0

  react-hook-form@7.60.0(react@19.1.0):
    dependencies:
      react: 19.1.0

  react-hotkeys-hook@4.6.2(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)

  react-is@16.13.1: {}

  react-lifecycles-compat@3.0.4: {}

  react-medium-image-zoom@5.2.14(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)

  react-refresh@0.14.2: {}

  react-refresh@0.17.0: {}

  react-remove-scroll-bar@2.3.8(@types/react@19.1.8)(react@19.1.0):
    dependencies:
      react: 19.1.0
      react-style-singleton: 2.2.3(@types/react@19.1.8)(react@19.1.0)
      tslib: 2.8.1
    optionalDependencies:
      '@types/react': 19.1.8

  react-remove-scroll@2.7.1(@types/react@19.1.8)(react@19.1.0):
    dependencies:
      react: 19.1.0
      react-remove-scroll-bar: 2.3.8(@types/react@19.1.8)(react@19.1.0)
      react-style-singleton: 2.2.3(@types/react@19.1.8)(react@19.1.0)
      tslib: 2.8.1
      use-callback-ref: 1.3.3(@types/react@19.1.8)(react@19.1.0)
      use-sidecar: 1.1.3(@types/react@19.1.8)(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8

  react-router-devtools@5.0.6(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react-router@7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(react@19.1.0)(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)):
    dependencies:
      '@babel/core': 7.28.0
      '@babel/generator': 7.28.0
      '@babel/parser': 7.28.0
      '@babel/traverse': 7.28.0
      '@babel/types': 7.28.0
      '@radix-ui/react-accordion': 1.2.11(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-select': 2.2.5(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)
      beautify: 0.0.8
      bippy: 0.3.11(@types/react@19.1.8)(react@19.1.0)
      chalk: 5.4.1
      clsx: 2.1.1
      date-fns: 4.1.0
      framer-motion: 12.12.1(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react: 19.1.0
      react-d3-tree: 3.6.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react-diff-viewer-continued: 4.0.6(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react-dom: 19.1.0(react@19.1.0)
      react-hotkeys-hook: 4.6.2(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react-router: 7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react-tooltip: 5.28.1(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      tailwind-merge: 3.3.1
      vite: 7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)
    optionalDependencies:
      '@biomejs/cli-darwin-arm64': 1.9.4
      '@rollup/rollup-darwin-arm64': 4.44.2
      '@rollup/rollup-linux-x64-gnu': 4.44.2
    transitivePeerDependencies:
      - '@emotion/is-prop-valid'
      - supports-color

  react-router@7.6.3(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      cookie: 1.0.2
      react: 19.1.0
      set-cookie-parser: 2.7.1
    optionalDependencies:
      react-dom: 19.1.0(react@19.1.0)

  react-style-singleton@2.2.3(@types/react@19.1.8)(react@19.1.0):
    dependencies:
      get-nonce: 1.0.1
      react: 19.1.0
      tslib: 2.8.1
    optionalDependencies:
      '@types/react': 19.1.8

  react-tooltip@5.28.1(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      '@floating-ui/dom': 1.7.2
      classnames: 2.5.1
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)

  react@19.1.0: {}

  read-package-up@11.0.0:
    dependencies:
      find-up-simple: 1.0.1
      read-pkg: 9.0.1
      type-fest: 4.41.0

  read-pkg@9.0.1:
    dependencies:
      '@types/normalize-package-data': 2.4.4
      normalize-package-data: 6.0.2
      parse-json: 8.3.0
      type-fest: 4.41.0
      unicorn-magic: 0.1.0

  read-yaml-file@1.1.0:
    dependencies:
      graceful-fs: 4.2.11
      js-yaml: 3.14.1
      pify: 4.0.1
      strip-bom: 3.0.0

  readable-stream@2.3.8:
    dependencies:
      core-util-is: 1.0.3
      inherits: 2.0.4
      isarray: 1.0.0
      process-nextick-args: 2.0.1
      safe-buffer: 5.1.2
      string_decoder: 1.1.1
      util-deprecate: 1.0.2

  readable-stream@3.6.2:
    dependencies:
      inherits: 2.0.4
      string_decoder: 1.3.0
      util-deprecate: 1.0.2

  readable-stream@4.7.0:
    dependencies:
      abort-controller: 3.0.0
      buffer: 6.0.3
      events: 3.3.0
      process: 0.11.10
      string_decoder: 1.3.0

  readdir-glob@1.1.3:
    dependencies:
      minimatch: 5.1.6

  readdirp@3.6.0:
    dependencies:
      picomatch: 2.3.1

  readdirp@4.1.2: {}

  recast@0.23.11:
    dependencies:
      ast-types: 0.16.1
      esprima: 4.0.1
      source-map: 0.6.1
      tiny-invariant: 1.3.3
      tslib: 2.8.1

  recma-build-jsx@1.0.0:
    dependencies:
      '@types/estree': 1.0.8
      estree-util-build-jsx: 3.0.1
      vfile: 6.0.3

  recma-jsx@1.0.0(acorn@8.15.0):
    dependencies:
      acorn-jsx: 5.3.2(acorn@8.15.0)
      estree-util-to-js: 2.0.0
      recma-parse: 1.0.0
      recma-stringify: 1.0.0
      unified: 11.0.5
    transitivePeerDependencies:
      - acorn

  recma-parse@1.0.0:
    dependencies:
      '@types/estree': 1.0.8
      esast-util-from-js: 2.0.1
      unified: 11.0.5
      vfile: 6.0.3

  recma-stringify@1.0.0:
    dependencies:
      '@types/estree': 1.0.8
      estree-util-to-js: 2.0.0
      unified: 11.0.5
      vfile: 6.0.3

  redis-errors@1.2.0: {}

  redis-parser@3.0.0:
    dependencies:
      redis-errors: 1.2.0

  reflect.getprototypeof@1.0.10:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      get-intrinsic: 1.3.0
      get-proto: 1.0.1
      which-builtin-type: 1.2.1

  regex-recursion@6.0.2:
    dependencies:
      regex-utilities: 2.3.0

  regex-utilities@2.3.0: {}

  regex@6.0.1:
    dependencies:
      regex-utilities: 2.3.0

  regexp.prototype.flags@1.5.4:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-errors: 1.3.0
      get-proto: 1.0.1
      gopd: 1.2.0
      set-function-name: 2.0.2

  rehype-external-links@3.0.0:
    dependencies:
      '@types/hast': 3.0.4
      '@ungap/structured-clone': 1.3.0
      hast-util-is-element: 3.0.0
      is-absolute-url: 4.0.1
      space-separated-tokens: 2.0.2
      unist-util-visit: 5.0.0

  rehype-format@5.0.1:
    dependencies:
      '@types/hast': 3.0.4
      hast-util-format: 1.1.0

  rehype-katex@7.0.1:
    dependencies:
      '@types/hast': 3.0.4
      '@types/katex': 0.16.7
      hast-util-from-html-isomorphic: 2.0.0
      hast-util-to-text: 4.0.2
      katex: 0.16.22
      unist-util-visit-parents: 6.0.1
      vfile: 6.0.3

  rehype-parse@9.0.1:
    dependencies:
      '@types/hast': 3.0.4
      hast-util-from-html: 2.0.3
      unified: 11.0.5

  rehype-raw@7.0.0:
    dependencies:
      '@types/hast': 3.0.4
      hast-util-raw: 9.1.0
      vfile: 6.0.3

  rehype-recma@1.0.0:
    dependencies:
      '@types/estree': 1.0.8
      '@types/hast': 3.0.4
      hast-util-to-estree: 3.1.3
    transitivePeerDependencies:
      - supports-color

  rehype-sanitize@6.0.0:
    dependencies:
      '@types/hast': 3.0.4
      hast-util-sanitize: 5.0.2

  rehype-stringify@10.0.1:
    dependencies:
      '@types/hast': 3.0.4
      hast-util-to-html: 9.0.5
      unified: 11.0.5

  remark-frontmatter@5.0.0:
    dependencies:
      '@types/mdast': 4.0.4
      mdast-util-frontmatter: 2.0.1
      micromark-extension-frontmatter: 2.0.0
      unified: 11.0.5
    transitivePeerDependencies:
      - supports-color

  remark-gfm@4.0.1:
    dependencies:
      '@types/mdast': 4.0.4
      mdast-util-gfm: 3.1.0
      micromark-extension-gfm: 3.0.0
      remark-parse: 11.0.0
      remark-stringify: 11.0.0
      unified: 11.0.5
    transitivePeerDependencies:
      - supports-color

  remark-math@6.0.0:
    dependencies:
      '@types/mdast': 4.0.4
      mdast-util-math: 3.0.0
      micromark-extension-math: 3.1.0
      unified: 11.0.5
    transitivePeerDependencies:
      - supports-color

  remark-mdx-frontmatter@4.0.0:
    dependencies:
      '@types/mdast': 4.0.4
      estree-util-is-identifier-name: 3.0.0
      estree-util-value-to-estree: 3.4.0
      toml: 3.0.0
      unified: 11.0.5
      yaml: 2.8.0

  remark-mdx@3.1.0:
    dependencies:
      mdast-util-mdx: 3.0.0
      micromark-extension-mdxjs: 3.0.0
    transitivePeerDependencies:
      - supports-color

  remark-parse@11.0.0:
    dependencies:
      '@types/mdast': 4.0.4
      mdast-util-from-markdown: 2.0.2
      micromark-util-types: 2.0.2
      unified: 11.0.5
    transitivePeerDependencies:
      - supports-color

  remark-rehype@11.1.2:
    dependencies:
      '@types/hast': 3.0.4
      '@types/mdast': 4.0.4
      mdast-util-to-hast: 13.2.0
      unified: 11.0.5
      vfile: 6.0.3

  remark-stringify@11.0.0:
    dependencies:
      '@types/mdast': 4.0.4
      mdast-util-to-markdown: 2.1.2
      unified: 11.0.5

  remark@15.0.1:
    dependencies:
      '@types/mdast': 4.0.4
      remark-parse: 11.0.0
      remark-stringify: 11.0.0
      unified: 11.0.5
    transitivePeerDependencies:
      - supports-color

  remove-trailing-separator@1.1.0: {}

  require-directory@2.1.1: {}

  require-from-string@2.0.2: {}

  require-package-name@2.0.1: {}

  requires-port@1.0.0: {}

  resolve-from@4.0.0: {}

  resolve-from@5.0.0: {}

  resolve-pkg-maps@1.0.0: {}

  resolve@1.22.10:
    dependencies:
      is-core-module: 2.16.1
      path-parse: 1.0.7
      supports-preserve-symlinks-flag: 1.0.0

  resolve@2.0.0-next.5:
    dependencies:
      is-core-module: 2.16.1
      path-parse: 1.0.7
      supports-preserve-symlinks-flag: 1.0.0

  retry@0.12.0: {}

  reusify@1.1.0: {}

  rimraf@6.0.1:
    dependencies:
      glob: 11.0.2
      package-json-from-dist: 1.0.1

  robust-predicates@3.0.2: {}

  rollup-plugin-visualizer@6.0.3(rollup@4.44.2):
    dependencies:
      open: 8.4.2
      picomatch: 4.0.2
      source-map: 0.7.4
      yargs: 17.7.2
    optionalDependencies:
      rollup: 4.44.2

  rollup@4.44.2:
    dependencies:
      '@types/estree': 1.0.8
    optionalDependencies:
      '@rollup/rollup-android-arm-eabi': 4.44.2
      '@rollup/rollup-android-arm64': 4.44.2
      '@rollup/rollup-darwin-arm64': 4.44.2
      '@rollup/rollup-darwin-x64': 4.44.2
      '@rollup/rollup-freebsd-arm64': 4.44.2
      '@rollup/rollup-freebsd-x64': 4.44.2
      '@rollup/rollup-linux-arm-gnueabihf': 4.44.2
      '@rollup/rollup-linux-arm-musleabihf': 4.44.2
      '@rollup/rollup-linux-arm64-gnu': 4.44.2
      '@rollup/rollup-linux-arm64-musl': 4.44.2
      '@rollup/rollup-linux-loongarch64-gnu': 4.44.2
      '@rollup/rollup-linux-powerpc64le-gnu': 4.44.2
      '@rollup/rollup-linux-riscv64-gnu': 4.44.2
      '@rollup/rollup-linux-riscv64-musl': 4.44.2
      '@rollup/rollup-linux-s390x-gnu': 4.44.2
      '@rollup/rollup-linux-x64-gnu': 4.44.2
      '@rollup/rollup-linux-x64-musl': 4.44.2
      '@rollup/rollup-win32-arm64-msvc': 4.44.2
      '@rollup/rollup-win32-ia32-msvc': 4.44.2
      '@rollup/rollup-win32-x64-msvc': 4.44.2
      fsevents: 2.3.3

  roughjs@4.6.6:
    dependencies:
      hachure-fill: 0.5.2
      path-data-parser: 0.1.0
      points-on-curve: 0.2.0
      points-on-path: 0.2.1

  run-parallel@1.2.0:
    dependencies:
      queue-microtask: 1.2.3

  rw@1.3.3: {}

  rxjs@7.8.2:
    dependencies:
      tslib: 2.8.1

  s.color@0.0.15: {}

  safe-array-concat@1.1.3:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      get-intrinsic: 1.3.0
      has-symbols: 1.1.0
      isarray: 2.0.5

  safe-buffer@5.1.2: {}

  safe-buffer@5.2.1: {}

  safe-push-apply@1.0.0:
    dependencies:
      es-errors: 1.3.0
      isarray: 2.0.5

  safe-regex-test@1.1.0:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      is-regex: 1.2.1

  safe-stable-stringify@2.5.0: {}

  safer-buffer@2.1.2: {}

  sass-formatter@0.7.9:
    dependencies:
      suf-log: 2.5.3

  sax@1.4.1: {}

  scheduler@0.26.0: {}

  schema-utils@4.3.2:
    dependencies:
      '@types/json-schema': 7.0.15
      ajv: 8.17.1
      ajv-formats: 2.1.1(ajv@8.17.1)
      ajv-keywords: 5.1.0(ajv@8.17.1)

  scroll-into-view-if-needed@3.1.0:
    dependencies:
      compute-scroll-into-view: 3.1.1

  scule@1.3.0: {}

  section-matter@1.0.0:
    dependencies:
      extend-shallow: 2.0.1
      kind-of: 6.0.3

  secure-json-parse@2.7.0: {}

  semver@6.3.1: {}

  semver@7.7.2: {}

  send@0.19.0:
    dependencies:
      debug: 2.6.9
      depd: 2.0.0
      destroy: 1.2.0
      encodeurl: 1.0.2
      escape-html: 1.0.3
      etag: 1.8.1
      fresh: 0.5.2
      http-errors: 2.0.0
      mime: 1.6.0
      ms: 2.1.3
      on-finished: 2.4.1
      range-parser: 1.2.1
      statuses: 2.0.1
    transitivePeerDependencies:
      - supports-color

  send@1.2.0:
    dependencies:
      debug: 4.4.1
      encodeurl: 2.0.0
      escape-html: 1.0.3
      etag: 1.8.1
      fresh: 2.0.0
      http-errors: 2.0.0
      mime-types: 3.0.1
      ms: 2.1.3
      on-finished: 2.4.1
      range-parser: 1.2.1
      statuses: 2.0.2
    transitivePeerDependencies:
      - supports-color

  serialize-javascript@6.0.2:
    dependencies:
      randombytes: 2.1.0

  seroval-plugins@1.3.2(seroval@1.3.2):
    dependencies:
      seroval: 1.3.2

  seroval@1.3.2: {}

  serve-placeholder@2.0.2:
    dependencies:
      defu: 6.1.4

  serve-static@1.16.2:
    dependencies:
      encodeurl: 2.0.0
      escape-html: 1.0.3
      parseurl: 1.3.3
      send: 0.19.0
    transitivePeerDependencies:
      - supports-color

  serve-static@2.2.0:
    dependencies:
      encodeurl: 2.0.0
      escape-html: 1.0.3
      parseurl: 1.3.3
      send: 1.2.0
    transitivePeerDependencies:
      - supports-color

  set-cookie-parser@2.7.1: {}

  set-function-length@1.2.2:
    dependencies:
      define-data-property: 1.1.4
      es-errors: 1.3.0
      function-bind: 1.1.2
      get-intrinsic: 1.3.0
      gopd: 1.2.0
      has-property-descriptors: 1.0.2

  set-function-name@2.0.2:
    dependencies:
      define-data-property: 1.1.4
      es-errors: 1.3.0
      functions-have-names: 1.2.3
      has-property-descriptors: 1.0.2

  set-proto@1.0.0:
    dependencies:
      dunder-proto: 1.0.1
      es-errors: 1.3.0
      es-object-atoms: 1.1.1

  setprototypeof@1.2.0: {}

  sharp@0.34.3:
    dependencies:
      color: 4.2.3
      detect-libc: 2.0.4
      semver: 7.7.2
    optionalDependencies:
      '@img/sharp-darwin-arm64': 0.34.3
      '@img/sharp-darwin-x64': 0.34.3
      '@img/sharp-libvips-darwin-arm64': 1.2.0
      '@img/sharp-libvips-darwin-x64': 1.2.0
      '@img/sharp-libvips-linux-arm': 1.2.0
      '@img/sharp-libvips-linux-arm64': 1.2.0
      '@img/sharp-libvips-linux-ppc64': 1.2.0
      '@img/sharp-libvips-linux-s390x': 1.2.0
      '@img/sharp-libvips-linux-x64': 1.2.0
      '@img/sharp-libvips-linuxmusl-arm64': 1.2.0
      '@img/sharp-libvips-linuxmusl-x64': 1.2.0
      '@img/sharp-linux-arm': 0.34.3
      '@img/sharp-linux-arm64': 0.34.3
      '@img/sharp-linux-ppc64': 0.34.3
      '@img/sharp-linux-s390x': 0.34.3
      '@img/sharp-linux-x64': 0.34.3
      '@img/sharp-linuxmusl-arm64': 0.34.3
      '@img/sharp-linuxmusl-x64': 0.34.3
      '@img/sharp-wasm32': 0.34.3
      '@img/sharp-win32-arm64': 0.34.3
      '@img/sharp-win32-ia32': 0.34.3
      '@img/sharp-win32-x64': 0.34.3
    optional: true

  shebang-command@2.0.0:
    dependencies:
      shebang-regex: 3.0.0

  shebang-regex@3.0.0: {}

  shell-quote@1.8.3: {}

  shiki@3.7.0:
    dependencies:
      '@shikijs/core': 3.7.0
      '@shikijs/engine-javascript': 3.7.0
      '@shikijs/engine-oniguruma': 3.7.0
      '@shikijs/langs': 3.7.0
      '@shikijs/themes': 3.7.0
      '@shikijs/types': 3.7.0
      '@shikijs/vscode-textmate': 10.0.2
      '@types/hast': 3.0.4

  side-channel-list@1.0.0:
    dependencies:
      es-errors: 1.3.0
      object-inspect: 1.13.4

  side-channel-map@1.0.1:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      get-intrinsic: 1.3.0
      object-inspect: 1.13.4

  side-channel-weakmap@1.0.2:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      get-intrinsic: 1.3.0
      object-inspect: 1.13.4
      side-channel-map: 1.0.1

  side-channel@1.1.0:
    dependencies:
      es-errors: 1.3.0
      object-inspect: 1.13.4
      side-channel-list: 1.0.0
      side-channel-map: 1.0.1
      side-channel-weakmap: 1.0.2

  siginfo@2.0.0: {}

  signal-exit@4.1.0: {}

  simple-swizzle@0.2.2:
    dependencies:
      is-arrayish: 0.3.2

  sirv@2.0.4:
    dependencies:
      '@polka/url': 1.0.0-next.29
      mrmime: 2.0.1
      totalist: 3.0.1

  sisteransi@1.0.5: {}

  slash@3.0.0: {}

  slash@5.1.0: {}

  smob@1.5.0: {}

  solid-js@1.9.7:
    dependencies:
      csstype: 3.1.3
      seroval: 1.3.2
      seroval-plugins: 1.3.2(seroval@1.3.2)

  source-map-js@1.2.1: {}

  source-map-support@0.5.21:
    dependencies:
      buffer-from: 1.1.2
      source-map: 0.6.1

  source-map@0.5.7: {}

  source-map@0.6.1: {}

  source-map@0.7.4: {}

  source-map@0.8.0-beta.0:
    dependencies:
      whatwg-url: 7.1.0

  space-separated-tokens@2.0.2: {}

  spawndamnit@3.0.1:
    dependencies:
      cross-spawn: 7.0.6
      signal-exit: 4.1.0

  spdx-correct@3.2.0:
    dependencies:
      spdx-expression-parse: 3.0.1
      spdx-license-ids: 3.0.21

  spdx-exceptions@2.5.0: {}

  spdx-expression-parse@3.0.1:
    dependencies:
      spdx-exceptions: 2.5.0
      spdx-license-ids: 3.0.21

  spdx-license-ids@3.0.21: {}

  sprintf-js@1.0.3: {}

  stack-trace@0.0.10: {}

  stackback@0.0.2: {}

  standard-as-callback@2.1.0: {}

  statuses@2.0.1: {}

  statuses@2.0.2: {}

  std-env@3.9.0: {}

  streamsearch@1.1.0: {}

  streamx@2.22.1:
    dependencies:
      fast-fifo: 1.3.2
      text-decoder: 1.2.3
    optionalDependencies:
      bare-events: 2.5.4

  string-width@4.2.3:
    dependencies:
      emoji-regex: 8.0.0
      is-fullwidth-code-point: 3.0.0
      strip-ansi: 6.0.1

  string-width@5.1.2:
    dependencies:
      eastasianwidth: 0.2.0
      emoji-regex: 9.2.2
      strip-ansi: 7.1.0

  string-width@7.2.0:
    dependencies:
      emoji-regex: 10.4.0
      get-east-asian-width: 1.3.0
      strip-ansi: 7.1.0

  string.prototype.matchall@4.0.12:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      get-intrinsic: 1.3.0
      gopd: 1.2.0
      has-symbols: 1.1.0
      internal-slot: 1.1.0
      regexp.prototype.flags: 1.5.4
      set-function-name: 2.0.2
      side-channel: 1.1.0

  string.prototype.repeat@1.0.0:
    dependencies:
      define-properties: 1.2.1
      es-abstract: 1.23.9

  string.prototype.trim@1.2.10:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-data-property: 1.1.4
      define-properties: 1.2.1
      es-abstract: 1.23.9
      es-object-atoms: 1.1.1
      has-property-descriptors: 1.0.2

  string.prototype.trimend@1.0.9:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      es-object-atoms: 1.1.1

  string.prototype.trimstart@1.0.8:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-object-atoms: 1.1.1

  string_decoder@1.1.1:
    dependencies:
      safe-buffer: 5.1.2

  string_decoder@1.3.0:
    dependencies:
      safe-buffer: 5.2.1

  stringify-entities@4.0.4:
    dependencies:
      character-entities-html4: 2.1.0
      character-entities-legacy: 3.0.0

  stringify-object@5.0.0:
    dependencies:
      get-own-enumerable-keys: 1.0.0
      is-obj: 3.0.0
      is-regexp: 3.1.0

  strip-ansi@6.0.1:
    dependencies:
      ansi-regex: 5.0.1

  strip-ansi@7.1.0:
    dependencies:
      ansi-regex: 6.1.0

  strip-bom-string@1.0.0: {}

  strip-bom@3.0.0: {}

  strip-final-newline@3.0.0: {}

  strip-json-comments@3.1.1: {}

  strip-literal@3.0.0:
    dependencies:
      js-tokens: 9.0.1

  strnum@1.1.2: {}

  style-mod@4.1.2: {}

  style-to-js@1.1.16:
    dependencies:
      style-to-object: 1.0.8

  style-to-object@1.0.8:
    dependencies:
      inline-style-parser: 0.2.4

  styled-jsx@5.1.6(@babel/core@7.28.0)(babel-plugin-macros@3.1.0)(react@19.1.0):
    dependencies:
      client-only: 0.0.1
      react: 19.1.0
    optionalDependencies:
      '@babel/core': 7.28.0
      babel-plugin-macros: 3.1.0

  stylis@4.2.0: {}

  stylis@4.3.6: {}

  sucrase@3.35.0:
    dependencies:
      '@jridgewell/gen-mapping': 0.3.12
      commander: 4.1.1
      glob: 10.4.5
      lines-and-columns: 1.2.4
      mz: 2.7.0
      pirates: 4.0.7
      ts-interface-checker: 0.1.13

  suf-log@2.5.3:
    dependencies:
      s.color: 0.0.15

  supports-color@10.0.0: {}

  supports-color@7.2.0:
    dependencies:
      has-flag: 4.0.0

  supports-color@8.1.1:
    dependencies:
      has-flag: 4.0.0

  supports-preserve-symlinks-flag@1.0.0: {}

  swr@2.3.3(react@19.1.0):
    dependencies:
      dequal: 2.0.3
      react: 19.1.0
      use-sync-external-store: 1.5.0(react@19.1.0)

  system-architecture@0.1.0: {}

  tabbable@6.2.0: {}

  tailwind-merge@2.6.0: {}

  tailwind-merge@3.3.1: {}

  tailwindcss-animate@1.0.7(tailwindcss@4.1.11):
    dependencies:
      tailwindcss: 4.1.11

  tailwindcss@4.1.11: {}

  tapable@2.2.2: {}

  tar-stream@3.1.7:
    dependencies:
      b4a: 1.6.7
      fast-fifo: 1.3.2
      streamx: 2.22.1

  tar@7.4.3:
    dependencies:
      '@isaacs/fs-minipass': 4.0.1
      chownr: 3.0.0
      minipass: 7.1.2
      minizlib: 3.0.2
      mkdirp: 3.0.1
      yallist: 5.0.0

  term-size@2.2.1: {}

  terser-webpack-plugin@5.3.14(esbuild@0.25.6)(webpack@5.100.0(esbuild@0.25.6)):
    dependencies:
      '@jridgewell/trace-mapping': 0.3.29
      jest-worker: 27.5.1
      schema-utils: 4.3.2
      serialize-javascript: 6.0.2
      terser: 5.43.1
      webpack: 5.100.0(esbuild@0.25.6)
    optionalDependencies:
      esbuild: 0.25.6

  terser@5.43.1:
    dependencies:
      '@jridgewell/source-map': 0.3.6
      acorn: 8.15.0
      commander: 2.20.3
      source-map-support: 0.5.21

  text-decoder@1.2.3:
    dependencies:
      b4a: 1.6.7

  text-hex@1.0.0: {}

  thenify-all@1.6.0:
    dependencies:
      thenify: 3.3.1

  thenify@3.3.1:
    dependencies:
      any-promise: 1.3.0

  throttleit@2.1.0: {}

  tiny-invariant@1.3.3: {}

  tiny-warning@1.0.3: {}

  tinybench@2.9.0: {}

  tinyexec@0.3.2: {}

  tinyexec@1.0.1: {}

  tinyglobby@0.2.14:
    dependencies:
      fdir: 6.4.6(picomatch@4.0.2)
      picomatch: 4.0.2

  tinypool@1.1.1: {}

  tinyrainbow@2.0.0: {}

  tinyspy@4.0.3: {}

  tippy.js@6.3.7:
    dependencies:
      '@popperjs/core': 2.11.8

  tmp-promise@3.0.3:
    dependencies:
      tmp: 0.2.3

  tmp@0.0.33:
    dependencies:
      os-tmpdir: 1.0.2

  tmp@0.2.3: {}

  to-regex-range@5.0.1:
    dependencies:
      is-number: 7.0.0

  toad-cache@3.7.0: {}

  toidentifier@1.0.1: {}

  toml@3.0.0: {}

  totalist@3.0.1: {}

  tr46@0.0.3: {}

  tr46@1.0.1:
    dependencies:
      punycode: 2.3.1

  tree-kill@1.2.2: {}

  trim-lines@3.0.1: {}

  triple-beam@1.4.1: {}

  trough@2.2.0: {}

  ts-api-utils@2.1.0(typescript@5.8.3):
    dependencies:
      typescript: 5.8.3

  ts-dedent@2.2.0: {}

  ts-deepmerge@7.0.3: {}

  ts-interface-checker@0.1.13: {}

  ts-morph@26.0.0:
    dependencies:
      '@ts-morph/common': 0.27.0
      code-block-writer: 13.0.3

  tsc-alias@1.8.16:
    dependencies:
      chokidar: 3.6.0
      commander: 9.5.0
      get-tsconfig: 4.10.1
      globby: 11.1.0
      mylas: 2.1.13
      normalize-path: 3.0.0
      plimit-lit: 1.6.1

  tsconfck@3.1.5(typescript@5.8.3):
    optionalDependencies:
      typescript: 5.8.3

  tslib@2.8.1: {}

  tsup@8.5.0(jiti@2.4.2)(postcss@8.5.6)(tsx@4.20.3)(typescript@5.8.3)(yaml@2.8.0):
    dependencies:
      bundle-require: 5.1.0(esbuild@0.25.6)
      cac: 6.7.14
      chokidar: 4.0.3
      consola: 3.4.2
      debug: 4.4.1
      esbuild: 0.25.6
      fix-dts-default-cjs-exports: 1.0.1
      joycon: 3.1.1
      picocolors: 1.1.1
      postcss-load-config: 6.0.1(jiti@2.4.2)(postcss@8.5.6)(tsx@4.20.3)(yaml@2.8.0)
      resolve-from: 5.0.0
      rollup: 4.44.2
      source-map: 0.8.0-beta.0
      sucrase: 3.35.0
      tinyexec: 0.3.2
      tinyglobby: 0.2.14
      tree-kill: 1.2.2
    optionalDependencies:
      postcss: 8.5.6
      typescript: 5.8.3
    transitivePeerDependencies:
      - jiti
      - supports-color
      - tsx
      - yaml

  tsx@4.20.3:
    dependencies:
      esbuild: 0.25.6
      get-tsconfig: 4.10.1
    optionalDependencies:
      fsevents: 2.3.3

  turbo-darwin-64@2.5.4:
    optional: true

  turbo-darwin-arm64@2.5.4:
    optional: true

  turbo-linux-64@2.5.4:
    optional: true

  turbo-linux-arm64@2.5.4:
    optional: true

  turbo-windows-64@2.5.4:
    optional: true

  turbo-windows-arm64@2.5.4:
    optional: true

  turbo@2.5.4:
    optionalDependencies:
      turbo-darwin-64: 2.5.4
      turbo-darwin-arm64: 2.5.4
      turbo-linux-64: 2.5.4
      turbo-linux-arm64: 2.5.4
      turbo-windows-64: 2.5.4
      turbo-windows-arm64: 2.5.4

  twoslash-protocol@0.3.2: {}

  twoslash@0.3.2(typescript@5.8.3):
    dependencies:
      '@typescript/vfs': 1.6.1(typescript@5.8.3)
      twoslash-protocol: 0.3.2
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  type-check@0.4.0:
    dependencies:
      prelude-ls: 1.2.1

  type-fest@4.41.0: {}

  type-is@1.6.18:
    dependencies:
      media-typer: 0.3.0
      mime-types: 2.1.35

  typed-array-buffer@1.0.3:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      is-typed-array: 1.1.15

  typed-array-byte-length@1.0.3:
    dependencies:
      call-bind: 1.0.8
      for-each: 0.3.5
      gopd: 1.2.0
      has-proto: 1.2.0
      is-typed-array: 1.1.15

  typed-array-byte-offset@1.0.4:
    dependencies:
      available-typed-arrays: 1.0.7
      call-bind: 1.0.8
      for-each: 0.3.5
      gopd: 1.2.0
      has-proto: 1.2.0
      is-typed-array: 1.1.15
      reflect.getprototypeof: 1.0.10

  typed-array-length@1.0.7:
    dependencies:
      call-bind: 1.0.8
      for-each: 0.3.5
      gopd: 1.2.0
      is-typed-array: 1.1.15
      possible-typed-array-names: 1.1.0
      reflect.getprototypeof: 1.0.10

  typedarray@0.0.6: {}

  typescript-eslint@8.36.0(eslint@9.30.1(jiti@2.4.2))(typescript@5.8.3):
    dependencies:
      '@typescript-eslint/eslint-plugin': 8.36.0(@typescript-eslint/parser@8.36.0(eslint@9.30.1(jiti@2.4.2))(typescript@5.8.3))(eslint@9.30.1(jiti@2.4.2))(typescript@5.8.3)
      '@typescript-eslint/parser': 8.36.0(eslint@9.30.1(jiti@2.4.2))(typescript@5.8.3)
      '@typescript-eslint/utils': 8.36.0(eslint@9.30.1(jiti@2.4.2))(typescript@5.8.3)
      eslint: 9.30.1(jiti@2.4.2)
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  typescript@5.8.3: {}

  ufo@1.6.1: {}

  ultrahtml@1.6.0: {}

  unbox-primitive@1.1.0:
    dependencies:
      call-bound: 1.0.4
      has-bigints: 1.1.0
      has-symbols: 1.1.0
      which-boxed-primitive: 1.1.1

  uncrypto@0.1.3: {}

  unctx@2.4.1:
    dependencies:
      acorn: 8.15.0
      estree-walker: 3.0.3
      magic-string: 0.30.17
      unplugin: 2.3.5

  undici-types@5.28.4: {}

  undici-types@6.21.0: {}

  undici-types@7.8.0: {}

  undici@7.11.0: {}

  unenv@1.10.0:
    dependencies:
      consola: 3.4.2
      defu: 6.1.4
      mime: 3.0.0
      node-fetch-native: 1.6.6
      pathe: 1.1.2

  unenv@2.0.0-rc.18:
    dependencies:
      defu: 6.1.4
      exsolve: 1.0.7
      ohash: 2.0.11
      pathe: 2.0.3
      ufo: 1.6.1

  unicorn-magic@0.1.0: {}

  unicorn-magic@0.3.0: {}

  unified@11.0.5:
    dependencies:
      '@types/unist': 3.0.3
      bail: 2.0.2
      devlop: 1.1.0
      extend: 3.0.2
      is-plain-obj: 4.1.0
      trough: 2.2.0
      vfile: 6.0.3

  unimport@5.1.0:
    dependencies:
      acorn: 8.15.0
      escape-string-regexp: 5.0.0
      estree-walker: 3.0.3
      local-pkg: 1.1.1
      magic-string: 0.30.17
      mlly: 1.7.4
      pathe: 2.0.3
      picomatch: 4.0.2
      pkg-types: 2.2.0
      scule: 1.3.0
      strip-literal: 3.0.0
      tinyglobby: 0.2.14
      unplugin: 2.3.5
      unplugin-utils: 0.2.4

  unist-util-find-after@5.0.0:
    dependencies:
      '@types/unist': 3.0.3
      unist-util-is: 6.0.0

  unist-util-is@6.0.0:
    dependencies:
      '@types/unist': 3.0.3

  unist-util-position-from-estree@2.0.0:
    dependencies:
      '@types/unist': 3.0.3

  unist-util-position@5.0.0:
    dependencies:
      '@types/unist': 3.0.3

  unist-util-remove-position@5.0.0:
    dependencies:
      '@types/unist': 3.0.3
      unist-util-visit: 5.0.0

  unist-util-stringify-position@4.0.0:
    dependencies:
      '@types/unist': 3.0.3

  unist-util-visit-parents@6.0.1:
    dependencies:
      '@types/unist': 3.0.3
      unist-util-is: 6.0.0

  unist-util-visit@5.0.0:
    dependencies:
      '@types/unist': 3.0.3
      unist-util-is: 6.0.0
      unist-util-visit-parents: 6.0.1

  universal-github-app-jwt@2.2.2: {}

  universal-user-agent@7.0.3: {}

  universalify@0.1.2: {}

  unixify@1.0.0:
    dependencies:
      normalize-path: 2.1.1

  unpipe@1.0.0: {}

  unplugin-utils@0.2.4:
    dependencies:
      pathe: 2.0.3
      picomatch: 4.0.2

  unplugin@1.16.1:
    dependencies:
      acorn: 8.15.0
      webpack-virtual-modules: 0.6.2

  unplugin@2.3.5:
    dependencies:
      acorn: 8.15.0
      picomatch: 4.0.2
      webpack-virtual-modules: 0.6.2

  unstorage@1.16.0(db0@0.3.2)(ioredis@5.6.1):
    dependencies:
      anymatch: 3.1.3
      chokidar: 4.0.3
      destr: 2.0.5
      h3: 1.15.3
      lru-cache: 10.4.3
      node-fetch-native: 1.6.6
      ofetch: 1.4.1
      ufo: 1.6.1
    optionalDependencies:
      db0: 0.3.2
      ioredis: 5.6.1

  untun@0.1.3:
    dependencies:
      citty: 0.1.6
      consola: 3.4.2
      pathe: 1.1.2

  untyped@2.0.0:
    dependencies:
      citty: 0.1.6
      defu: 6.1.4
      jiti: 2.4.2
      knitwork: 1.2.0
      scule: 1.3.0

  unwasm@0.3.9:
    dependencies:
      knitwork: 1.2.0
      magic-string: 0.30.17
      mlly: 1.7.4
      pathe: 1.1.2
      pkg-types: 1.3.1
      unplugin: 1.16.1

  update-browserslist-db@1.1.3(browserslist@4.25.1):
    dependencies:
      browserslist: 4.25.1
      escalade: 3.2.0
      picocolors: 1.1.1

  uqr@0.1.2: {}

  uri-js@4.4.1:
    dependencies:
      punycode: 2.3.1

  urlpattern-polyfill@10.1.0: {}

  urlpattern-polyfill@8.0.2: {}

  use-callback-ref@1.3.3(@types/react@19.1.8)(react@19.1.0):
    dependencies:
      react: 19.1.0
      tslib: 2.8.1
    optionalDependencies:
      '@types/react': 19.1.8

  use-sidecar@1.1.3(@types/react@19.1.8)(react@19.1.0):
    dependencies:
      detect-node-es: 1.1.0
      react: 19.1.0
      tslib: 2.8.1
    optionalDependencies:
      '@types/react': 19.1.8

  use-sync-external-store@1.5.0(react@19.1.0):
    dependencies:
      react: 19.1.0

  util-deprecate@1.0.2: {}

  utils-merge@1.0.1: {}

  uuid@11.1.0: {}

  uuid@8.3.2: {}

  uuid@9.0.1: {}

  valibot@0.41.0(typescript@5.8.3):
    optionalDependencies:
      typescript: 5.8.3

  validate-npm-package-license@3.0.4:
    dependencies:
      spdx-correct: 3.2.0
      spdx-expression-parse: 3.0.1

  validate-npm-package-name@5.0.1: {}

  vary@1.1.2: {}

  vfile-location@5.0.3:
    dependencies:
      '@types/unist': 3.0.3
      vfile: 6.0.3

  vfile-message@4.0.2:
    dependencies:
      '@types/unist': 3.0.3
      unist-util-stringify-position: 4.0.0

  vfile@6.0.3:
    dependencies:
      '@types/unist': 3.0.3
      vfile-message: 4.0.2

  vinxi@0.5.8(@types/node@24.0.12)(db0@0.3.2)(ioredis@5.6.1)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0):
    dependencies:
      '@babel/core': 7.28.0
      '@babel/plugin-syntax-jsx': 7.27.1(@babel/core@7.28.0)
      '@babel/plugin-syntax-typescript': 7.27.1(@babel/core@7.28.0)
      '@types/micromatch': 4.0.9
      '@vinxi/listhen': 1.5.6
      boxen: 8.0.1
      chokidar: 4.0.3
      citty: 0.1.6
      consola: 3.4.2
      crossws: 0.3.5
      dax-sh: 0.43.2
      defu: 6.1.4
      es-module-lexer: 1.7.0
      esbuild: 0.25.6
      get-port-please: 3.1.2
      h3: 1.15.3
      hookable: 5.5.3
      http-proxy: 1.18.1
      micromatch: 4.0.8
      nitropack: 2.11.13
      node-fetch-native: 1.6.6
      path-to-regexp: 6.3.0
      pathe: 1.1.2
      radix3: 1.1.2
      resolve: 1.22.10
      serve-placeholder: 2.0.2
      serve-static: 1.16.2
      tinyglobby: 0.2.14
      ufo: 1.6.1
      unctx: 2.4.1
      unenv: 1.10.0
      unstorage: 1.16.0(db0@0.3.2)(ioredis@5.6.1)
      vite: 6.3.5(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)
      zod: 3.25.76
    transitivePeerDependencies:
      - '@azure/app-configuration'
      - '@azure/cosmos'
      - '@azure/data-tables'
      - '@azure/identity'
      - '@azure/keyvault-secrets'
      - '@azure/storage-blob'
      - '@capacitor/preferences'
      - '@deno/kv'
      - '@electric-sql/pglite'
      - '@libsql/client'
      - '@netlify/blobs'
      - '@planetscale/database'
      - '@types/node'
      - '@upstash/redis'
      - '@vercel/blob'
      - '@vercel/kv'
      - aws4fetch
      - better-sqlite3
      - db0
      - debug
      - drizzle-orm
      - encoding
      - idb-keyval
      - ioredis
      - jiti
      - less
      - lightningcss
      - mysql2
      - rolldown
      - sass
      - sass-embedded
      - sqlite3
      - stylus
      - sugarss
      - supports-color
      - terser
      - tsx
      - uploadthing
      - xml2js
      - yaml

  vite-node@3.2.4(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0):
    dependencies:
      cac: 6.7.14
      debug: 4.4.1
      es-module-lexer: 1.7.0
      pathe: 2.0.3
      vite: 7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)
    transitivePeerDependencies:
      - '@types/node'
      - jiti
      - less
      - lightningcss
      - sass
      - sass-embedded
      - stylus
      - sugarss
      - supports-color
      - terser
      - tsx
      - yaml

  vite-tsconfig-paths@5.1.4(typescript@5.8.3)(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)):
    dependencies:
      debug: 4.4.1
      globrex: 0.1.2
      tsconfck: 3.1.5(typescript@5.8.3)
    optionalDependencies:
      vite: 7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)
    transitivePeerDependencies:
      - supports-color
      - typescript

  vite@6.3.5(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0):
    dependencies:
      esbuild: 0.25.6
      fdir: 6.4.6(picomatch@4.0.2)
      picomatch: 4.0.2
      postcss: 8.5.6
      rollup: 4.44.2
      tinyglobby: 0.2.14
    optionalDependencies:
      '@types/node': 24.0.12
      fsevents: 2.3.3
      jiti: 2.4.2
      lightningcss: 1.30.1
      terser: 5.43.1
      tsx: 4.20.3
      yaml: 2.8.0

  vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0):
    dependencies:
      esbuild: 0.25.6
      fdir: 6.4.6(picomatch@4.0.2)
      picomatch: 4.0.2
      postcss: 8.5.6
      rollup: 4.44.2
      tinyglobby: 0.2.14
    optionalDependencies:
      '@types/node': 24.0.12
      fsevents: 2.3.3
      jiti: 2.4.2
      lightningcss: 1.30.1
      terser: 5.43.1
      tsx: 4.20.3
      yaml: 2.8.0

  vitest@3.2.4(@types/debug@4.1.12)(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0):
    dependencies:
      '@types/chai': 5.2.2
      '@vitest/expect': 3.2.4
      '@vitest/mocker': 3.2.4(vite@7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0))
      '@vitest/pretty-format': 3.2.4
      '@vitest/runner': 3.2.4
      '@vitest/snapshot': 3.2.4
      '@vitest/spy': 3.2.4
      '@vitest/utils': 3.2.4
      chai: 5.2.0
      debug: 4.4.1
      expect-type: 1.2.1
      magic-string: 0.30.17
      pathe: 2.0.3
      picomatch: 4.0.2
      std-env: 3.9.0
      tinybench: 2.9.0
      tinyexec: 0.3.2
      tinyglobby: 0.2.14
      tinypool: 1.1.1
      tinyrainbow: 2.0.0
      vite: 7.0.3(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)
      vite-node: 3.2.4(@types/node@24.0.12)(jiti@2.4.2)(lightningcss@1.30.1)(terser@5.43.1)(tsx@4.20.3)(yaml@2.8.0)
      why-is-node-running: 2.3.0
    optionalDependencies:
      '@types/debug': 4.1.12
      '@types/node': 24.0.12
    transitivePeerDependencies:
      - jiti
      - less
      - lightningcss
      - msw
      - sass
      - sass-embedded
      - stylus
      - sugarss
      - supports-color
      - terser
      - tsx
      - yaml

  vscode-jsonrpc@8.2.0: {}

  vscode-languageserver-protocol@3.17.5:
    dependencies:
      vscode-jsonrpc: 8.2.0
      vscode-languageserver-types: 3.17.5

  vscode-languageserver-textdocument@1.0.12: {}

  vscode-languageserver-types@3.17.5: {}

  vscode-languageserver@9.0.1:
    dependencies:
      vscode-languageserver-protocol: 3.17.5

  vscode-uri@3.0.8: {}

  vue-demi@0.14.10(vue@3.5.17(typescript@5.8.3)):
    dependencies:
      vue: 3.5.17(typescript@5.8.3)

  vue-router@4.5.1(vue@3.5.17(typescript@5.8.3)):
    dependencies:
      '@vue/devtools-api': 6.6.4
      vue: 3.5.17(typescript@5.8.3)

  vue-sonner@1.3.2: {}

  vue@3.5.17(typescript@5.8.3):
    dependencies:
      '@vue/compiler-dom': 3.5.17
      '@vue/compiler-sfc': 3.5.17
      '@vue/runtime-dom': 3.5.17
      '@vue/server-renderer': 3.5.17(vue@3.5.17(typescript@5.8.3))
      '@vue/shared': 3.5.17
    optionalDependencies:
      typescript: 5.8.3

  w3c-keyname@2.2.8: {}

  warning@3.0.0:
    dependencies:
      loose-envify: 1.4.0

  watchpack@2.4.4:
    dependencies:
      glob-to-regexp: 0.4.1
      graceful-fs: 4.2.11

  web-namespaces@2.0.1: {}

  web-streams-polyfill@3.3.3: {}

  webidl-conversions@3.0.1: {}

  webidl-conversions@4.0.2: {}

  webpack-bundle-analyzer@4.10.1:
    dependencies:
      '@discoveryjs/json-ext': 0.5.7
      acorn: 8.15.0
      acorn-walk: 8.3.4
      commander: 7.2.0
      debounce: 1.2.1
      escape-string-regexp: 4.0.0
      gzip-size: 6.0.0
      html-escaper: 2.0.2
      is-plain-object: 5.0.0
      opener: 1.5.2
      picocolors: 1.1.1
      sirv: 2.0.4
      ws: 7.5.10
    transitivePeerDependencies:
      - bufferutil
      - utf-8-validate

  webpack-sources@3.3.3: {}

  webpack-virtual-modules@0.6.2: {}

  webpack@5.100.0(esbuild@0.25.6):
    dependencies:
      '@types/eslint-scope': 3.7.7
      '@types/estree': 1.0.8
      '@types/json-schema': 7.0.15
      '@webassemblyjs/ast': 1.14.1
      '@webassemblyjs/wasm-edit': 1.14.1
      '@webassemblyjs/wasm-parser': 1.14.1
      acorn: 8.15.0
      acorn-import-phases: 1.0.3(acorn@8.15.0)
      browserslist: 4.25.1
      chrome-trace-event: 1.0.4
      enhanced-resolve: 5.18.2
      es-module-lexer: 1.7.0
      eslint-scope: 5.1.1
      events: 3.3.0
      glob-to-regexp: 0.4.1
      graceful-fs: 4.2.11
      json-parse-even-better-errors: 2.3.1
      loader-runner: 4.3.0
      mime-types: 2.1.35
      neo-async: 2.6.2
      schema-utils: 4.3.2
      tapable: 2.2.2
      terser-webpack-plugin: 5.3.14(esbuild@0.25.6)(webpack@5.100.0(esbuild@0.25.6))
      watchpack: 2.4.4
      webpack-sources: 3.3.3
    transitivePeerDependencies:
      - '@swc/core'
      - esbuild
      - uglify-js

  whatwg-encoding@3.1.1:
    dependencies:
      iconv-lite: 0.6.3

  whatwg-mimetype@4.0.0: {}

  whatwg-url@5.0.0:
    dependencies:
      tr46: 0.0.3
      webidl-conversions: 3.0.1

  whatwg-url@7.1.0:
    dependencies:
      lodash.sortby: 4.7.0
      tr46: 1.0.1
      webidl-conversions: 4.0.2

  which-boxed-primitive@1.1.1:
    dependencies:
      is-bigint: 1.1.0
      is-boolean-object: 1.2.2
      is-number-object: 1.1.1
      is-string: 1.1.1
      is-symbol: 1.1.1

  which-builtin-type@1.2.1:
    dependencies:
      call-bound: 1.0.4
      function.prototype.name: 1.1.8
      has-tostringtag: 1.0.2
      is-async-function: 2.1.1
      is-date-object: 1.1.0
      is-finalizationregistry: 1.1.1
      is-generator-function: 1.1.0
      is-regex: 1.2.1
      is-weakref: 1.1.1
      isarray: 2.0.5
      which-boxed-primitive: 1.1.1
      which-collection: 1.0.2
      which-typed-array: 1.1.19

  which-collection@1.0.2:
    dependencies:
      is-map: 2.0.3
      is-set: 2.0.3
      is-weakmap: 2.0.2
      is-weakset: 2.0.4

  which-typed-array@1.1.19:
    dependencies:
      available-typed-arrays: 1.0.7
      call-bind: 1.0.8
      call-bound: 1.0.4
      for-each: 0.3.5
      get-proto: 1.0.1
      gopd: 1.2.0
      has-tostringtag: 1.0.2

  which@2.0.2:
    dependencies:
      isexe: 2.0.0

  which@3.0.1:
    dependencies:
      isexe: 2.0.0

  which@4.0.0:
    dependencies:
      isexe: 3.1.1

  why-is-node-running@2.3.0:
    dependencies:
      siginfo: 2.0.0
      stackback: 0.0.2

  widest-line@5.0.0:
    dependencies:
      string-width: 7.2.0

  winston-transport@4.9.0:
    dependencies:
      logform: 2.7.0
      readable-stream: 3.6.2
      triple-beam: 1.4.1

  winston@3.17.0:
    dependencies:
      '@colors/colors': 1.6.0
      '@dabh/diagnostics': 2.0.3
      async: 3.2.6
      is-stream: 2.0.1
      logform: 2.7.0
      one-time: 1.0.0
      readable-stream: 3.6.2
      safe-stable-stringify: 2.5.0
      stack-trace: 0.0.10
      triple-beam: 1.4.1
      winston-transport: 4.9.0

  word-wrap@1.2.5: {}

  wrap-ansi@7.0.0:
    dependencies:
      ansi-styles: 4.3.0
      string-width: 4.2.3
      strip-ansi: 6.0.1

  wrap-ansi@8.1.0:
    dependencies:
      ansi-styles: 6.2.1
      string-width: 5.1.2
      strip-ansi: 7.1.0

  wrap-ansi@9.0.0:
    dependencies:
      ansi-styles: 6.2.1
      string-width: 7.2.0
      strip-ansi: 7.1.0

  wrappy@1.0.2: {}

  write-file-atomic@6.0.0:
    dependencies:
      imurmurhash: 0.1.4
      signal-exit: 4.1.0

  ws@7.5.10: {}

  xml-js@1.6.11:
    dependencies:
      sax: 1.4.1

  xmlbuilder2@3.1.1:
    dependencies:
      '@oozcitak/dom': 1.15.10
      '@oozcitak/infra': 1.0.8
      '@oozcitak/util': 8.3.8
      js-yaml: 3.14.1

  y18n@5.0.8: {}

  yallist@3.1.1: {}

  yallist@5.0.0: {}

  yaml@1.10.2: {}

  yaml@2.8.0: {}

  yargs-parser@21.1.1: {}

  yargs@17.7.2:
    dependencies:
      cliui: 8.0.1
      escalade: 3.2.0
      get-caller-file: 2.0.5
      require-directory: 2.1.1
      string-width: 4.2.3
      y18n: 5.0.8
      yargs-parser: 21.1.1

  yauzl@2.10.0:
    dependencies:
      buffer-crc32: 0.2.13
      fd-slicer: 1.1.0

  yocto-queue@0.1.0: {}

  yocto-queue@1.2.1: {}

  youch-core@0.3.2:
    dependencies:
      '@poppinss/exception': 1.2.1
      error-stack-parser-es: 1.0.5

  youch@4.1.0-beta.8:
    dependencies:
      '@poppinss/colors': 4.1.4
      '@poppinss/dumper': 0.6.3
      '@speed-highlight/core': 1.2.7
      cookie: 1.0.2
      youch-core: 0.3.2

  zip-stream@6.0.1:
    dependencies:
      archiver-utils: 5.0.2
      compress-commons: 6.0.2
      readable-stream: 4.7.0

  zod-to-json-schema@3.24.5(zod@4.0.2):
    dependencies:
      zod: 4.0.2

  zod@3.24.1: {}

  zod@3.25.76: {}

  zod@4.0.2: {}

  zwitch@2.0.4: {}



================================================
FILE: pnpm-workspace.yaml
================================================
packages:
  - packages/*
  - apps/*
  - examples/*



================================================
FILE: prettier.config.mjs
================================================
/** @type {import("prettier").Config} */
export default {
  singleQuote: true,
  endOfLine: 'lf',
  plugins: ['prettier-plugin-astro'],
};



================================================
FILE: renovate.json
================================================
{
  "$schema": "https://docs.renovatebot.com/renovate-schema.json",
  "extends": [
    "config:recommended",
    ":preserveSemverRanges",
    "group:allNonMajor"
  ],
  "baseBranches": ["dev"],
  "ignoreDeps": [
    "@types/react",
    "@types/react-dom",
    "flexsearch",
    "@types/node",
    "typescript",
    "lucide-react"
  ]
}



================================================
FILE: tsconfig.json
================================================
{
  "compilerOptions": {
    "noEmit": true
  },
  "exclude": []
}



================================================
FILE: turbo.json
================================================
{
  "$schema": "https://turbo.build/schema.json",
  "globalEnv": [
    "NEXT_PUBLIC_ORAMA_ENDPOINT",
    "NEXT_PUBLIC_ORAMA_API_KEY",
    "GITHUB_APP_PRIVATE_KEY",
    "GITHUB_APP_ID",
    "GITHUB_TOKEN",
    "INKEEP_API_KEY"
  ],
  "ui": "stream",
  "tasks": {
    "build": {
      "env": ["ALGOLIA_API_KEY", "ORAMA_INDEX_ID", "ORAMA_PRIVATE_API_KEY"],
      "dependsOn": ["^build"],
      "outputs": [
        ".output",
        "public/registry",
        ".contentlayer/**",
        ".source/**",
        "!.contentlayer/.cache/**",
        ".next/**",
        "content/docs/openapi/\\(generated\\)/**",
        "!.next/cache/**",
        "dist/**",
        "out",
        "build",
        ".vercel"
      ]
    },
    "lint": {},
    "types:check": {
      "dependsOn": [],
      "outputs": []
    },
    "clean": {
      "cache": false
    },
    "dev": {
      "cache": false,
      "persistent": true
    }
  }
}



================================================
FILE: vitest.config.ts
================================================
import { defineConfig } from 'vitest/config';

export default defineConfig({
  test: {
    projects: ['packages/*'],
  },
});



================================================
FILE: .prettierignore
================================================
CHANGELOG.md
pnpm-lock.yaml
.changeset/*.md
.github/**/*.md

packages/create-app/versions.json

apps/docs/shaders/*

**/test/out/**/*
**/test/fixtures/*.output.*

out
.content-collections

apps/docs/content/docs/ui/museum/*.mdx
!apps/docs/content/docs/ui/museum/index.mdx

examples/openapi/content/docs/(api)/**/*.mdx
!examples/openapi/content/docs/(api)/index.mdx

apps/docs/content/docs/ui/typescript.mdx

.content-collections/**/*

packages/mdx-remote/test/fixtures/**/*.js
packages/mdx-remote/test/fixtures/**/*.json
packages/core/test/fixtures/page-trees/**/*.json
build/


================================================
FILE: apps/docs/eslint.config.mjs
================================================
import next from 'eslint-config-custom/next.js';

export default [
  {
    ignores: [
      'dist',
      'node_modules',
      '.next/',
      '.source/',
      'out/',
      'next.config.mjs',
      'postcss.config.js',
    ],
  },
  ...next,
  {
    rules: {
      'no-console': 'off',
      // for Fumadocs CLI
      'import/no-relative-packages': 'off',
    },
  },
];



================================================
FILE: apps/docs/mdx-components.tsx
================================================
import defaultMdxComponents from 'fumadocs-ui/mdx';
import * as FilesComponents from 'fumadocs-ui/components/files';
import * as TabsComponents from 'fumadocs-ui/components/tabs';
import type { MDXComponents } from 'mdx/types';
import { Accordion, Accordions } from 'fumadocs-ui/components/accordion';
import * as icons from 'lucide-react';

export function getMDXComponents(components?: MDXComponents): MDXComponents {
  return {
    ...(icons as unknown as MDXComponents),
    ...defaultMdxComponents,
    ...TabsComponents,
    ...FilesComponents,
    Accordion,
    Accordions,
    ...components,
  };
}



================================================
FILE: apps/docs/next.config.ts
================================================
import createBundleAnalyzer from '@next/bundle-analyzer';
import { createMDX } from 'fumadocs-mdx/next';
import type { NextConfig } from 'next';

const withAnalyzer = createBundleAnalyzer({
  enabled: process.env.ANALYZE === 'true',
});

const config: NextConfig = {
  reactStrictMode: true,
  logging: {
    fetches: {
      fullUrl: true,
    },
  },
  eslint: {
    // Replaced by root workspace command
    ignoreDuringBuilds: true,
  },
  serverExternalPackages: [
    'ts-morph',
    'typescript',
    'oxc-transform',
    'twoslash',
    'shiki',
  ],
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'avatars.githubusercontent.com',
        port: '',
      },
    ],
  },
  async rewrites() {
    return [
      {
        source: '/docs/:path*.mdx',
        destination: '/llms.mdx/:path*',
      },
    ];
  },
  async redirects() {
    return [
      {
        source: '/docs/ui/blocks/layout',
        destination: '/docs/ui/layouts/docs',
        permanent: true,
      },
      {
        source: '/docs/ui/blocks/:path*',
        destination: '/docs/ui/layouts/:path*',
        permanent: true,
      },
    ];
  },
};

const withMDX = createMDX();

export default withAnalyzer(withMDX(config));



================================================
FILE: apps/docs/package.json
================================================
{
  "name": "docs",
  "version": "0.1.3",
  "private": true,
  "scripts": {
    "build": "pnpm build:pre && next build && pnpm build:post",
    "build:pre": "tsx ./scripts/pre-build.mts",
    "build:post": "tsx ./scripts/post-build.mts",
    "clean": "rimraf .next",
    "dev": "next dev --turbo",
    "lint": "fumadocs-mdx && tsx ./scripts/lint.mts && eslint .",
    "start": "next start"
  },
  "dependencies": {
    "@ai-sdk/openai": "^1.3.23",
    "@ai-sdk/react": "^1.2.12",
    "@fumadocs/mdx-remote": "workspace:*",
    "@orama/orama": "^3.1.10",
    "@oramacloud/client": "^2.1.4",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-hover-card": "^1.1.14",
    "@radix-ui/react-tooltip": "^1.2.7",
    "@shikijs/rehype": "^3.7.0",
    "@shikijs/transformers": "^3.7.0",
    "ai": "^4.3.17",
    "class-variance-authority": "^0.7.1",
    "feed": "^5.1.0",
    "fumadocs-core": "workspace:*",
    "fumadocs-docgen": "workspace:^",
    "fumadocs-mdx": "workspace:*",
    "fumadocs-openapi": "workspace:^",
    "fumadocs-twoslash": "workspace:^",
    "fumadocs-typescript": "workspace:^",
    "fumadocs-ui": "workspace:*",
    "hast-util-to-jsx-runtime": "^2.3.6",
    "katex": "^0.16.22",
    "lucide-react": "^0.525.0",
    "mermaid": "^11.8.1",
    "next": "15.3.5",
    "next-themes": "^0.4.6",
    "octokit": "^5.0.3",
    "oxc-transform": "^0.76.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "rehype-katex": "^7.0.1",
    "remark": "^15.0.1",
    "remark-gfm": "^4.0.1",
    "remark-math": "^6.0.0",
    "remark-mdx": "^3.1.0",
    "remark-rehype": "^11.1.2",
    "scroll-into-view-if-needed": "^3.1.0",
    "shiki": "^3.7.0",
    "tailwind-merge": "^3.3.1",
    "twoslash": "^0.3.2",
    "unist-util-visit": "^5.0.0",
    "zod": "^4.0.2"
  },
  "devDependencies": {
    "@fumadocs/cli": "workspace:*",
    "@next/bundle-analyzer": "15.3.5",
    "@next/env": "15.3.5",
    "@next/eslint-plugin-next": "15.3.5",
    "@tailwindcss/postcss": "^4.1.11",
    "@types/hast": "^3.0.4",
    "@types/mdx": "^2.0.13",
    "@types/node": "24.0.12",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "algoliasearch": "5.32.0",
    "eslint-config-custom": "workspace:*",
    "gray-matter": "^4.0.3",
    "next-validate-link": "^1.5.2",
    "postcss": "^8.5.6",
    "tailwindcss": "^4.1.11",
    "tailwindcss-animate": "^1.0.7",
    "tinyglobby": "^0.2.14",
    "ts-morph": "^26.0.0",
    "tsconfig": "workspace:*",
    "tsx": "^4.20.3",
    "typescript": "^5.8.3"
  }
}



================================================
FILE: apps/docs/postcss.config.js
================================================
module.exports = {
  plugins: {
    '@tailwindcss/postcss': {},
  },
};



================================================
FILE: apps/docs/scalar.yaml
================================================
openapi: 3.1.1
info:
  title: Scalar Galaxy
  description: |
    The Scalar Galaxy is an example OpenAPI specification to test OpenAPI tools and libraries. It’s a fictional universe with fictional planets and fictional data. Get all the data for [all planets](#tag/planets/GET/planets).

    ## Resources

    * https://github.com/scalar/scalar
    * https://github.com/OAI/OpenAPI-Specification
    * https://scalar.com

    ## Markdown Support

    All descriptions *can* contain ~~tons of text~~ **Markdown**. [If GitHub supports the syntax](https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax), chances are we’re supporting it, too. You can even create [internal links to reference endpoints](#tag/authentication/POST/user/signup).

    <details>
      <summary>Examples</summary>

      **Blockquotes**

      > I love OpenAPI. <3

      **Tables**

      | Feature          | Availability |
      | ---------------- | ------------ |
      | Markdown Support | ✓            |

      **Accordion**

      ```html
      <details>
        <summary>Using Details Tags</summary>
        <p>HTML Example</p>
      </details>
      ```

      **Images**

      Yes, there’s support for images, too!

      ![Empty placeholder image showing the width/height](https://images.placeholders.dev/?width=1280&height=720)

      **Alerts**

      > [!tip]
      > You can now use markdown alerts in your descriptions.

    </details>
  version: 1.0.0
  contact:
    name: Marc from Scalar
    url: https://scalar.com
    email: marc@scalar.com
  license:
    name: MIT
    url: https://opensource.org/license/MIT
externalDocs:
  description: Documentation
  url: https://github.com/scalar/scalar
servers:
  - url: https://galaxy.scalar.com
  - url: '{protocol}://void.scalar.com/{path}'
    description: Responds with your request data
    variables:
      protocol:
        enum:
          - https
        default: https
      path:
        default: ''
security:
  - bearerAuth: []
  - basicAuth: []
  - apiKeyQuery: []
  - apiKeyHeader: []
  - apiKeyCookie: []
  - oAuth2: []
  - openIdConnect: []
tags:
  - name: Authentication
    description:
      Some endpoints are public, but some require authentication. We provide
      all the required endpoints to create an account and authorize yourself.
  - name: Planets
    description: Everything about planets
paths:
  '/planets':
    get:
      tags:
        - Planets
      summary: Get all planets
      description: It’s easy to say you know them all, but do you really? Retrieve all the planets and check whether you missed one.
      operationId: getAllData
      security:
        - {}
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Planet'
                  - $ref: '#/components/schemas/PaginatedResource'
            application/xml:
              schema:
                allOf:
                  - type: object
                    xml:
                      name: planets
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Planet'
                  - $ref: '#/components/schemas/PaginatedResource'
    post:
      tags:
        - Planets
      summary: Create a planet
      description: Time to play god and create a new planet. What do you think? Ah, don’t think too much. What could go wrong anyway?
      operationId: createPlanet
      callbacks:
        planetCreated:
          '{$request.body#/successCallbackUrl}':
            post:
              requestBody:
                description: Information about the newly created planet
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Planet'
              responses:
                '200':
                  description: Your server returns this code if it accepts the callback
                '204':
                  description: Your server should return this HTTP status code if no longer interested in further updates
          '{$request.body#/failureCallbackUrl}':
            post:
              requestBody:
                description: Information about which fields failed to validate
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Planet'
              responses:
                '200':
                  description: Your server returns this code if it accepts the callback
        planetExploded:
          '{$request.body#/successCallbackUrl}':
            post:
              requestBody:
                description: Information about the newly exploded planet
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Planet'
              responses:
                '200':
                  description: Your server returns this code if it accepts the callback
      requestBody:
        description: Planet
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Planet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Planet'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Planet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Planet'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
  '/planets/{planetId}':
    get:
      tags:
        - Planets
      summary: Get a planet
      description: You’ll better learn a little bit more about the planets. It might come in handy once space travel is available for everyone.
      operationId: getPlanet
      security:
        - {}
      parameters:
        - $ref: '#/components/parameters/planetId'
      responses:
        '200':
          description: Planet Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Planet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Planet'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Planets
      summary: Update a planet
      description: Sometimes you make mistakes, that's fine. No worries, you can update all planets.
      operationId: updatePlanet
      requestBody:
        description: New information about the planet
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Planet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Planet'
      parameters:
        - $ref: '#/components/parameters/planetId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Planet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Planet'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Planets
      summary: Delete a planet
      operationId: deletePlanet
      description:
        This endpoint was used to delete planets. Unfortunately, that caused
        a lot of trouble for planets with life. So, this endpoint is now deprecated
        and should not be used anymore.
      x-scalar-stability: experimental
      parameters:
        - $ref: '#/components/parameters/planetId'
      responses:
        '204':
          description: No Content
        '404':
          $ref: '#/components/responses/NotFound'
  '/planets/{planetId}/image':
    post:
      tags:
        - Planets
      summary: Upload an image to a planet
      description: Got a crazy good photo of a planet? Share it with the world!
      operationId: uploadImage
      parameters:
        - $ref: '#/components/parameters/planetId'
      requestBody:
        description: Image to upload
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: The image file to upload
                  examples:
                    - '@mars.jpg'
                    - '@jupiter.png'
      responses:
        '200':
          $ref: '#/components/responses/ImageUploaded'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/user/signup':
    post:
      tags:
        - Authentication
      summary: Create a user
      description: Time to create a user account, eh?
      operationId: createUser
      security:
        - {}
      requestBody:
        description: User to create
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/User'
                - $ref: '#/components/schemas/Credentials'
            examples:
              Marc:
                value:
                  name: Marc
                  email: marc@scalar.com
                  password: i-love-scalar
              Cam:
                value:
                  name: Cam
                  email: cam@scalar.com
                  password: scalar-is-cool
          application/xml:
            schema:
              allOf:
                - $ref: '#/components/schemas/User'
                - $ref: '#/components/schemas/Credentials'
            examples:
              Marc:
                value:
                  name: Marc
                  email: marc@scalar.com
                  password: i-love-scalar
              Cam:
                value:
                  name: Cam
                  email: cam@scalar.com
                  password: scalar-is-cool
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  '/auth/token':
    post:
      tags:
        - Authentication
      summary: Get a token
      description: Yeah, this is the boring security stuff. Just get your super secret token and move on.
      operationId: getToken
      security:
        - {}
      requestBody:
        description: Credentials to authenticate a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
          application/xml:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '201':
          description: Token Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
            application/xml:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/BadRequest'
  '/me':
    get:
      tags:
        - Authentication
      summary: Get authenticated user
      description: Find yourself they say. That’s what you can do here.
      operationId: getMe
      security:
        - basicAuth: []
        - oAuth2:
            - read:account
        - bearerAuth: []
        - apiKeyHeader: []
        - apiKeyQuery: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
webhooks:
  newPlanet:
    post:
      tags:
        - Planets
      requestBody:
        description: Information about a new planet
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Planet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Planet'
      responses:
        '200':
          description:
            Return a 200 status to indicate that the data was received
            successfully
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: JWT Bearer token authentication
    basicAuth:
      type: http
      scheme: basic
      description: Basic HTTP authentication
    apiKeyHeader:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key request header
    apiKeyQuery:
      type: apiKey
      in: query
      name: api_key
      description: API key query parameter
    apiKeyCookie:
      type: apiKey
      in: cookie
      name: api_key
      description: API key browser cookie
    oAuth2:
      type: oauth2
      description: OAuth 2.0 authentication
      flows:
        authorizationCode:
          authorizationUrl: https://galaxy.scalar.com/oauth/authorize
          tokenUrl: https://galaxy.scalar.com/oauth/token
          scopes:
            read:account: read your account information
            write:planets: modify planets in your account
            read:planets: read your planets
        clientCredentials:
          tokenUrl: https://galaxy.scalar.com/oauth/token
          scopes:
            read:account: read your account information
            write:planets: modify planets in your account
            read:planets: read your planets
        # Legacy
        implicit:
          authorizationUrl: https://galaxy.scalar.com/oauth/authorize
          scopes:
            read:account: read your account information
            write:planets: modify planets in your account
            read:planets: read your planets
        # Legacy
        password:
          tokenUrl: https://galaxy.scalar.com/oauth/token
          scopes:
            read:account: read your account information
            write:planets: modify planets in your account
            read:planets: read your planets
    openIdConnect:
      type: openIdConnect
      openIdConnectUrl: https://galaxy.scalar.com/.well-known/openid-configuration
      description: OpenID Connect Authentication
  parameters:
    planetId:
      name: planetId
      description: The ID of the planet to get
      in: path
      required: true
      schema:
        type: integer
        format: int64
        examples:
          - 1
    limit:
      name: limit
      description: The number of items to return
      in: query
      required: false
      schema:
        type: integer
        format: int64
        default: 10
    offset:
      name: offset
      description:
        The number of items to skip before starting to collect the result
        set
      in: query
      required: false
      schema:
        type: integer
        format: int64
        default: 0
  responses:
    ImageUploaded:
      description: Image uploaded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ImageUploadedMessage'
        application/xml:
          schema:
            $ref: '#/components/schemas/ImageUploadedMessage'
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestError'
        application/xml:
          schema:
            $ref: '#/components/schemas/BadRequestError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ForbiddenError'
        application/xml:
          schema:
            $ref: '#/components/schemas/ForbiddenError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
        application/xml:
          schema:
            $ref: '#/components/schemas/NotFoundError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
        application/xml:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Conflict'
        application/xml:
          schema:
            $ref: '#/components/schemas/Conflict'
    UnprocessableEntity:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnprocessableEntity'
        application/xml:
          schema:
            $ref: '#/components/schemas/UnprocessableEntity'
  schemas:
    User:
      description: A user
      type: object
      xml:
        name: user
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          examples:
            - 1
        name:
          type: string
          examples:
            - Marc
    Credentials:
      description: Credentials to authenticate a user
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          examples:
            - marc@scalar.com
        password:
          type: string
          writeOnly: true
          examples:
            - i-love-scalar
            - i-love-OSS
            - i-love-code
    Token:
      description: A token to authenticate a user
      type: object
      properties:
        token:
          type: string
          examples:
            - eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    Planet:
      description: A planet in the Scalar Galaxy
      type: object
      required:
        - id
        - name
      xml:
        name: planet
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          examples:
            - 1
          x-variable: planetId
        name:
          type: string
          examples:
            - Mars
            - Jupiter
            - HD 40307g
        description:
          type:
            - string
            - 'null'
          examples:
            - The red planet
            - A gas giant with a great red spot
        type:
          type: string
          enum:
            - terrestrial
            - gas_giant
            - ice_giant
            - dwarf
            - super_earth
          examples:
            - terrestrial
        habitabilityIndex:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: A score from 0 to 1 indicating potential habitability
          examples:
            - 0.68
        physicalProperties:
          type: object
          properties:
            mass:
              type: number
              format: float
              description: Mass in Earth masses
              examples:
                - 0.107
            radius:
              type: number
              format: float
              description: Radius in Earth radii
              examples:
                - 0.532
            gravity:
              type: number
              format: float
              description: Surface gravity in Earth g
              examples:
                - 0.378
            temperature:
              type: object
              properties:
                min:
                  type: number
                  format: float
                  description: Minimum temperature in Kelvin
                  examples:
                    - 130
                max:
                  type: number
                  format: float
                  description: Maximum temperature in Kelvin
                  examples:
                    - 308
                average:
                  type: number
                  format: float
                  description: Average temperature in Kelvin
                  examples:
                    - 210
        atmosphere:
          type: array
          description: Atmospheric composition
          items:
            type: object
            properties:
              compound:
                type: string
                examples:
                  - CO2
                  - N2
              percentage:
                type: number
                format: float
                examples:
                  - 95.3
        discoveredAt:
          type: string
          format: date-time
          examples:
            - '1610-01-07T00:00:00Z'
        image:
          type: string
          nullable: true
          examples:
            - https://cdn.scalar.com/photos/mars.jpg
        satellites:
          type: array
          items:
            $ref: '#/components/schemas/Satellite'
        creator:
          $ref: '#/components/schemas/User'
        tags:
          type: array
          items:
            type: string
          examples:
            - ['solar-system', 'rocky', 'explored']
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
          examples:
            - '2024-01-15T14:30:00Z'
        successCallbackUrl:
          type: string
          format: uri
          description: URL which gets invoked upon a successful operation
          examples:
            - https://example.com/webhook
        failureCallbackUrl:
          type: string
          format: uri
          description: URL which gets invoked upon a failed operation
          examples:
            - https://example.com/webhook
    PaginatedResource:
      description: A paginated resource
      type: object
      properties:
        meta:
          type: object
          properties:
            limit:
              type: integer
              format: int64
              examples:
                - 10
            offset:
              type: integer
              format: int64
              examples:
                - 0
            total:
              type: integer
              format: int64
              examples:
                - 100
            next:
              type:
                - string
                - 'null'
              examples:
                - '/planets?limit=10&offset=10'
    ImageUploadedMessage:
      x-scalar-ignore: true
      description: Message about an image upload
      type: object
      properties:
        message:
          type: string
          examples:
            - Image uploaded successfully
        imageUrl:
          type: string
          description: The URL where the uploaded image can be accessed
          examples:
            - https://cdn.scalar.com/images/8f47c132-9d1f-4f83-b5a4-91db5ee757ab.jpg
        uploadedAt:
          type: string
          format: date-time
          description: Timestamp when the image was uploaded
          examples:
            - '2024-01-15T14:30:00Z'
        fileSize:
          type: integer
          description: Size of the uploaded image in bytes
          examples:
            - 1048576
        mimeType:
          type: string
          description: The content type of the uploaded image
          examples:
            - image/jpeg
            - image/png
    BadRequestError:
      x-scalar-ignore: true
      description: RFC 7807 (https://datatracker.ietf.org/doc/html/rfc7807)
      type: object
      properties:
        type:
          type: string
          examples:
            - https://example.com/errors/bad-request
        title:
          type: string
          examples:
            - Bad Request
        status:
          type: integer
          format: int64
          examples:
            - 400
        detail:
          type: string
          examples:
            - The request was invalid.
    ForbiddenError:
      x-scalar-ignore: true
      description: RFC 7807 (https://datatracker.ietf.org/doc/html/rfc7807)
      type: object
      properties:
        type:
          type: string
          examples:
            - https://example.com/errors/forbidden
        title:
          type: string
          examples:
            - Forbidden
        status:
          type: integer
          format: int64
          examples:
            - 403
        detail:
          type: string
          examples:
            - You are not authorized to access this resource.
    NotFoundError:
      x-scalar-ignore: true
      description: RFC 7807 (https://datatracker.ietf.org/doc/html/rfc7807)
      type: object
      properties:
        type:
          type: string
          examples:
            - https://example.com/errors/not-found
        title:
          type: string
          examples:
            - Not Found
        status:
          type: integer
          format: int64
          examples:
            - 404
        detail:
          type: string
          examples:
            - The resource you are trying to access does not exist.
    UnauthorizedError:
      x-scalar-ignore: true
      description: RFC 7807 (https://datatracker.ietf.org/doc/html/rfc7807)
      type: object
      properties:
        type:
          type: string
          examples:
            - https://example.com/errors/not-found
        title:
          type: string
          examples:
            - Unauthorized
        status:
          type: integer
          format: int64
          examples:
            - 401
        detail:
          type: string
          examples:
            - You are not authorized to access this resource.
    Conflict:
      x-scalar-ignore: true
      description: RFC 7807 (https://datatracker.ietf.org/doc/html/rfc7807)
      type: object
      properties:
        type:
          type: string
          examples:
            - https://example.com/errors/conflict
        title:
          type: string
          examples:
            - Conflict
        status:
          type: integer
          format: int64
          examples:
            - 409
        detail:
          type: string
          examples:
            - The resource you are trying to access is in conflict.
    UnprocessableEntity:
      x-scalar-ignore: true
      description: RFC 7807 (https://datatracker.ietf.org/doc/html/rfc7807)
      type: object
      properties:
        type:
          type: string
          examples:
            - https://example.com/errors/unprocessable-entity
        title:
          type: string
          examples:
            - Unprocessable Entity
        status:
          type: integer
          format: int64
          examples:
            - 422
        detail:
          type: string
          examples:
            - The request was invalid.
    Satellite:
      description: A natural satellite (moon) orbiting a planet
      type: object
      required:
        - name
      properties:
        name:
          type: string
          examples:
            - Phobos
        diameter:
          type: number
          format: float
          description: Diameter in kilometers
          examples:
            - 22.2



================================================
FILE: apps/docs/source.config.ts
================================================
import {
  defineCollections,
  defineConfig,
  defineDocs,
  frontmatterSchema,
  metaSchema,
} from 'fumadocs-mdx/config';
import { transformerTwoslash } from 'fumadocs-twoslash';
import { createFileSystemTypesCache } from 'fumadocs-twoslash/cache-fs';
import remarkMath from 'remark-math';
import { remarkTypeScriptToJavaScript } from 'fumadocs-docgen/remark-ts2js';
import rehypeKatex from 'rehype-katex';
import { z } from 'zod';
import {
  rehypeCodeDefaultOptions,
  remarkSteps,
} from 'fumadocs-core/mdx-plugins';
import { remarkAutoTypeTable } from 'fumadocs-typescript';
import { ElementContent } from 'hast';

export const docs = defineDocs({
  docs: {
    async: true,
    schema: frontmatterSchema.extend({
      preview: z.string().optional(),
      index: z.boolean().default(false),
      /**
       * API routes only
       */
      method: z.string().optional(),
    }),
  },
  meta: {
    schema: metaSchema.extend({
      description: z.string().optional(),
    }),
  },
});

export const blog = defineCollections({
  type: 'doc',
  dir: 'content/blog',
  async: true,
  schema: frontmatterSchema.extend({
    author: z.string(),
    date: z.string().date().or(z.date()),
  }),
});

export default defineConfig({
  lastModifiedTime: 'git',
  mdxOptions: {
    rehypeCodeOptions: {
      lazy: true,
      experimentalJSEngine: true,
      langs: ['ts', 'js', 'html', 'tsx', 'mdx'],
      inline: 'tailing-curly-colon',
      themes: {
        light: 'catppuccin-latte',
        dark: 'catppuccin-mocha',
      },
      transformers: [
        ...(rehypeCodeDefaultOptions.transformers ?? []),
        transformerTwoslash({
          typesCache: createFileSystemTypesCache(),
        }),
        {
          name: '@shikijs/transformers:remove-notation-escape',
          code(hast) {
            function replace(node: ElementContent): void {
              if (node.type === 'text') {
                node.value = node.value.replace('[\\!code', '[!code');
              } else if ('children' in node) {
                for (const child of node.children) {
                  replace(child);
                }
              }
            }

            replace(hast);
            return hast;
          },
        },
      ],
    },
    remarkCodeTabOptions: {
      parseMdx: true,
    },
    remarkNpmOptions: {
      persist: {
        id: 'package-manager',
      },
    },
    remarkPlugins: [
      remarkSteps,
      remarkMath,
      remarkAutoTypeTable,
      remarkTypeScriptToJavaScript,
    ],
    rehypePlugins: (v) => [rehypeKatex, ...v],
  },
});



================================================
FILE: apps/docs/tsconfig.json
================================================
{
  "extends": "tsconfig/nextjs.json",
  "compilerOptions": {
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.mts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "next.config.js",
    "tailwind.config.js"
  ],
  "exclude": ["node_modules", "eslint.config.mjs"]
}



================================================
FILE: apps/docs/app/global.css
================================================
@import 'tailwindcss' source(none);
@import 'fumadocs-ui/css/neutral.css';
@import 'fumadocs-ui/css/preset.css';
@import 'fumadocs-twoslash/twoslash.css';
@import 'fumadocs-openapi/css/preset.css';

@source ".";
@source "../components";
@source "../content";
@plugin 'tailwindcss-animate';

@theme inline {
  --default-mono-font-family: var(--font-mono);
  --animate-marquee: marquee var(--duration) infinite linear;
  --animate-marquee-vertical: marquee-vertical var(--duration) linear infinite;

  @keyframes marquee {
    from {
      transform: translateX(0);
    }
    to {
      transform: translateX(calc(-100% - var(--gap)));
    }
  }

  @keyframes marquee-vertical {
    from {
      transform: translateY(0);
    }
    to {
      transform: translateY(calc(-100% - var(--gap)));
    }
  }

  @keyframes stroke {
    from {
      stroke-dasharray: 1000;
    }
    to {
      stroke-dasharray: 1000;
      stroke-dashoffset: 2000;
    }
  }

  --animate-stroke: stroke 5s linear infinite;

  --color-gradient-radial: radial-gradient(circle, var(--tw-gradient-stops));
  --color-repeat-gradient-to-r: repeating-linear-gradient(
    to right,
    var(--tw-gradient-stops)
  );
  --color-repeat-gradient-to-br: repeating-linear-gradient(
    to bottom right,
    var(--tw-gradient-stops)
  );
}

.ui {
  --color-fd-primary: var(--ui-color);
}

.headless {
  --color-fd-primary: var(--headless-color);
}

:root {
  --headless-color: hsl(250, 80%, 54%);
  --ui-color: hsl(220, 91%, 54%);
}

body {
  overscroll-behavior-y: none;
  background-color: var(--color-fd-background);
}

.dark {
  --headless-color: hsl(250 100% 80%);
  --ui-color: hsl(217 92% 76%);
}

@keyframes circuit_1 {
  0% {
    transform: translateY(-20px);
  }

  100% {
    transform: translateY(100px);
  }
}

@keyframes circuit_1_x_energy {
  0%,
  46% {
    opacity: 0;
    transform: translateX(-20px);
  }
  47%,
  70% {
    opacity: 100%;
  }
  100% {
    opacity: 0;
    transform: translateX(212px);
  }
}



================================================
FILE: apps/docs/app/layout.client.tsx
================================================
'use client';

import { useParams } from 'next/navigation';
import { type ReactNode, useId } from 'react';
import { cn } from '@/lib/cn';

export function Body({
  children,
}: {
  children: ReactNode;
}): React.ReactElement {
  const mode = useMode();

  return (
    <body className={cn(mode, 'relative flex min-h-screen flex-col')}>
      {children}
    </body>
  );
}

export function useMode(): string | undefined {
  const { slug } = useParams();
  return Array.isArray(slug) && slug.length > 0 ? slug[0] : undefined;
}

export function FumadocsIcon(props: React.SVGProps<SVGSVGElement>) {
  const id = useId();
  return (
    <svg width="80" height="80" viewBox="0 0 180 180" {...props}>
      <circle
        cx="90"
        cy="90"
        r="89"
        fill={`url(#${id}-iconGradient)`}
        stroke="var(--color-fd-primary)"
        strokeWidth="1"
      />
      <defs>
        <linearGradient
          id={`${id}-iconGradient`}
          gradientTransform="rotate(45)"
        >
          <stop offset="45%" stopColor="var(--color-fd-background)" />
          <stop offset="100%" stopColor="var(--color-fd-primary)" />
        </linearGradient>
      </defs>
    </svg>
  );
}



================================================
FILE: apps/docs/app/layout.config.tsx
================================================
import { type LinkItemType } from 'fumadocs-ui/layouts/docs';
import { AlbumIcon, Heart, LayoutTemplate } from 'lucide-react';
import Image from 'next/image';
import type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';
import { FumadocsIcon } from '@/app/layout.client';
import Logo from '@/public/logo.png';

export const linkItems: LinkItemType[] = [
  {
    icon: <AlbumIcon />,
    text: 'Blog',
    url: '/blog',
    active: 'nested-url',
  },
  {
    text: 'Showcase',
    url: '/showcase',
    icon: <LayoutTemplate />,
    active: 'url',
  },
  {
    text: 'Sponsors',
    url: '/sponsors',
    icon: <Heart />,
  },
  {
    type: 'icon',
    url: 'https://github.com/fuma-nama/fumadocs',
    text: 'Github',
    icon: (
      <svg role="img" viewBox="0 0 24 24" fill="currentColor">
        <path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12" />
      </svg>
    ),
    external: true,
  },
];

export const logo = (
  <>
    <Image
      alt="Fumadocs"
      src={Logo}
      sizes="100px"
      className="hidden w-20 md:w-24 [.uwu_&]:block"
      aria-label="Fumadocs"
    />

    <FumadocsIcon className="size-5 [.uwu_&]:hidden" fill="currentColor" />
  </>
);

export const baseOptions: BaseLayoutProps = {
  nav: {
    title: (
      <>
        {logo}
        <span className="font-medium [.uwu_&]:hidden [header_&]:text-[15px]">
          Fumadocs
        </span>
      </>
    ),
    transparentMode: 'top',
  },
};



================================================
FILE: apps/docs/app/layout.tsx
================================================
import './global.css';
import type { Viewport } from 'next';
import { baseUrl, createMetadata } from '@/lib/metadata';
import { Body } from '@/app/layout.client';
import { Provider } from './provider';
import type { ReactNode } from 'react';
import { Geist, Geist_Mono } from 'next/font/google';

export const metadata = createMetadata({
  title: {
    template: '%s | Fumadocs',
    default: 'Fumadocs',
  },
  description: 'The Next.js framework for building documentation sites',
  metadataBase: baseUrl,
});

const geist = Geist({
  variable: '--font-sans',
  subsets: ['latin'],
});

const mono = Geist_Mono({
  variable: '--font-mono',
  subsets: ['latin'],
});

export const viewport: Viewport = {
  themeColor: [
    { media: '(prefers-color-scheme: dark)', color: '#0A0A0A' },
    { media: '(prefers-color-scheme: light)', color: '#fff' },
  ],
};

export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html
      lang="en"
      className={`${geist.variable} ${mono.variable}`}
      suppressHydrationWarning
    >
      <Body>
        <Provider>{children}</Provider>
      </Body>
    </html>
  );
}



================================================
FILE: apps/docs/app/provider.tsx
================================================
'use client';

import { RootProvider } from 'fumadocs-ui/provider';
import dynamic from 'next/dynamic';
import type { ReactNode } from 'react';
import { TooltipProvider } from '@radix-ui/react-tooltip';

const SearchDialog = dynamic(() => import('@/components/search'), {
  ssr: false,
});

const inject = `
const urlParams = new URLSearchParams(window.location.search);
const uwuParam = urlParams.get("uwu");

if (typeof uwuParam === 'string') {
    localStorage.setItem('uwu', uwuParam);
}

const item = localStorage.getItem('uwu')
    
if (item === 'true') {
    document.documentElement.classList.add("uwu")
}    
`;

export function Provider({ children }: { children: ReactNode }) {
  return (
    <RootProvider
      search={{
        SearchDialog,
      }}
    >
      <TooltipProvider>
        <script
          suppressHydrationWarning
          dangerouslySetInnerHTML={{ __html: inject }}
        />
        {children}
      </TooltipProvider>
    </RootProvider>
  );
}



================================================
FILE: apps/docs/app/sitemap.ts
================================================
import type { MetadataRoute } from 'next';
import { baseUrl } from '@/lib/metadata';
import { source } from '@/lib/source';

export const revalidate = false;

export default async function sitemap(): Promise<MetadataRoute.Sitemap> {
  const url = (path: string): string => new URL(path, baseUrl).toString();

  return [
    {
      url: url('/'),
      changeFrequency: 'monthly',
      priority: 1,
    },
    {
      url: url('/showcase'),
      changeFrequency: 'monthly',
      priority: 0.8,
    },
    {
      url: url('/docs'),
      changeFrequency: 'monthly',
      priority: 0.8,
    },
    ...(await Promise.all(
      source.getPages().map(async (page) => {
        const { lastModified } = await page.data.load();
        return {
          url: url(page.url),
          lastModified: lastModified ? new Date(lastModified) : undefined,
          changeFrequency: 'weekly',
          priority: 0.5,
        } as MetadataRoute.Sitemap[number];
      }),
    )),
  ];
}



================================================
FILE: apps/docs/app/(home)/icons.tsx
================================================
import type { SVGProps } from 'react';

export function NextSVG(props: SVGProps<SVGSVGElement>): React.ReactElement {
  return (
    <svg
      aria-label="Next.js logomark"
      data-theme="dark"
      height="80"
      role="img"
      viewBox="0 0 180 180"
      width="80"
      {...props}
    >
      <mask
        height="180"
        id=":R0:mask0_408_134"
        maskUnits="userSpaceOnUse"
        style={{ maskType: 'alpha' }}
        width="180"
        x="0"
        y="0"
      >
        <circle cx="90" cy="90" fill="black" r="90" />
      </mask>
      <g mask="url(#:R0:mask0_408_134)">
        <circle
          cx="90"
          cy="90"
          data-circle="true"
          fill="black"
          r="90"
          stroke="white"
          strokeWidth="6px"
        />
        <path
          d="M149.508 157.52L69.142 54H54V125.97H66.1136V69.3836L139.999 164.845C143.333 162.614 146.509 160.165 149.508 157.52Z"
          fill="url(#:R0:paint0_linear_408_134)"
        />
        <rect
          fill="url(#:R0:paint1_linear_408_134)"
          height="72"
          width="12"
          x="115"
          y="54"
        />
      </g>
      <defs>
        <linearGradient
          gradientUnits="userSpaceOnUse"
          id=":R0:paint0_linear_408_134"
          x1="109"
          x2="144.5"
          y1="116.5"
          y2="160.5"
        >
          <stop stopColor="white" />
          <stop offset="1" stopColor="white" stopOpacity="0" />
        </linearGradient>
        <linearGradient
          gradientUnits="userSpaceOnUse"
          id=":R0:paint1_linear_408_134"
          x1="121"
          x2="120.799"
          y1="54"
          y2="106.875"
        >
          <stop stopColor="white" />
          <stop offset="1" stopColor="white" stopOpacity="0" />
        </linearGradient>
      </defs>
    </svg>
  );
}

export function VercelLogo(props: SVGProps<SVGSVGElement>): React.ReactElement {
  return (
    <svg
      aria-label="Vercel logotype"
      height="64"
      role="img"
      viewBox="0 0 283 64"
      width="283"
      {...props}
    >
      <path
        d="M141.68 16.25c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zm117.14-14.5c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zm-39.03 3.5c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.07 0-10 4-10 10zm82.48-29v46h-9v-46h9zM37.59.25l36.95 64H.64l36.95-64zm92.38 5l-27.71 48-27.71-48h10.39l17.32 30 17.32-30h10.39zm58.91 12v9.69c-1-.29-2.06-.49-3.2-.49-5.81 0-10 4-10 10v14.8h-9v-34h9v9.2c0-5.08 5.91-9.2 13.2-9.2z"
        fill="currentColor"
      />
    </svg>
  );
}

export function NetlifyLogo(
  props: SVGProps<SVGSVGElement>,
): React.ReactElement {
  return (
    <svg
      aria-label="Netlify"
      width="512"
      height="209"
      viewBox="0 0 512 209"
      {...props}
    >
      <g>
        <path
          d="M117.436 207.036V154.604L118.529 153.51H129.452L130.545 154.604V207.036L129.452 208.13H118.529L117.436 207.036Z"
          fill="currentColor"
        />
        <path
          d="M117.436 53.5225V1.09339L118.529 0H129.452L130.545 1.09339V53.5225L129.452 54.6159H118.529L117.436 53.5225Z"
          fill="currentColor"
        />
        <path
          d="M69.9539 169.238H68.4094L60.6869 161.512V159.967L78.7201 141.938L86.8976 141.942L87.9948 143.031V151.209L69.9539 169.238Z"
          fill="currentColor"
        />
        <path
          d="M69.9462 38.8917H68.4017L60.6792 46.6181V48.1626L78.7124 66.192L86.8899 66.1882L87.9871 65.0986V56.9212L69.9462 38.8917Z"
          fill="currentColor"
        />
        <path
          d="M1.09339 97.5104H75.3711L76.4645 98.6038V109.526L75.3711 110.62H1.09339L0 109.526V98.6038L1.09339 97.5104Z"
          fill="currentColor"
        />
        <path
          d="M440.999 97.5104H510.91L512.004 98.6038V109.526L510.91 110.62H436.633L435.539 109.526L439.905 98.6038L440.999 97.5104Z"
          fill="currentColor"
        />
        <path
          d="M212.056 108.727L210.963 109.821H177.079L175.986 110.914C175.986 113.101 178.173 119.657 186.916 119.657C190.196 119.657 193.472 118.564 194.566 116.377L195.659 115.284H208.776L209.869 116.377C208.776 122.934 203.313 132.774 186.916 132.774C168.336 132.774 159.589 119.657 159.589 104.357C159.589 89.0576 168.332 75.9408 185.822 75.9408C203.313 75.9408 212.056 89.0576 212.056 104.357V108.731V108.727ZM195.659 97.7971C195.659 96.7037 194.566 89.0538 185.822 89.0538C177.079 89.0538 175.986 96.7037 175.986 97.7971L177.079 98.8905H194.566L195.659 97.7971Z"
          fill="currentColor"
        />
        <path
          d="M242.66 115.284C242.66 117.47 243.753 118.564 245.94 118.564H255.776L256.87 119.657V130.587L255.776 131.681H245.94C236.103 131.681 227.36 127.307 227.36 115.284V91.2368L226.266 90.1434H218.617L217.523 89.05V78.1199L218.617 77.0265H226.266L227.36 75.9332V66.0965L228.453 65.0031H241.57L242.663 66.0965V75.9332L243.757 77.0265H255.78L256.874 78.1199V89.05L255.78 90.1434H243.757L242.663 91.2368V115.284H242.66Z"
          fill="currentColor"
        />
        <path
          d="M283.1 131.681H269.983L268.889 130.587V56.2636L269.983 55.1702H283.1L284.193 56.2636V130.587L283.1 131.681Z"
          fill="currentColor"
        />
        <path
          d="M312.61 68.2871H299.493L298.399 67.1937V56.2636L299.493 55.1702H312.61L313.703 56.2636V67.1937L312.61 68.2871ZM312.61 131.681H299.493L298.399 130.587V78.1237L299.493 77.0304H312.61L313.703 78.1237V130.587L312.61 131.681Z"
          fill="currentColor"
        />
        <path
          d="M363.98 56.2636V67.1937L362.886 68.2871H353.05C350.863 68.2871 349.769 69.3805 349.769 71.5672V75.9408L350.863 77.0342H361.793L362.886 78.1276V89.0576L361.793 90.151H350.863L349.769 91.2444V130.591L348.676 131.684H335.559L334.466 130.591V91.2444L333.372 90.151H325.723L324.629 89.0576V78.1276L325.723 77.0342H333.372L334.466 75.9408V71.5672C334.466 59.5438 343.209 55.1702 353.046 55.1702H362.882L363.976 56.2636H363.98Z"
          fill="currentColor"
        />
        <path
          d="M404.42 132.774C400.046 143.704 395.677 150.261 380.373 150.261H374.906L373.813 149.167V138.237L374.906 137.144H380.373C385.836 137.144 386.929 136.05 388.023 132.77V131.677L370.536 89.05V78.1199L371.63 77.0265H381.466L382.56 78.1199L395.677 115.284H396.77L409.887 78.1199L410.98 77.0265H420.817L421.91 78.1199V89.05L404.424 132.77L404.42 132.774Z"
          fill="currentColor"
        />
        <path
          d="M135.454 131.681L134.361 130.587L134.368 98.9172C134.368 93.4541 132.22 89.2182 125.625 89.0806C122.234 88.9926 118.354 89.0729 114.209 89.2488L113.59 89.8834L113.598 130.587L112.504 131.681H99.3913L98.2979 130.587V77.5388L99.3913 76.4454L128.901 76.1778C143.685 76.1778 149.668 86.3356 149.668 97.8009V130.587L148.575 131.681H135.454Z"
          fill="currentColor"
        />
      </g>
    </svg>
  );
}

export function OpenAPIIcon(
  props: SVGProps<SVGSVGElement>,
): React.ReactElement {
  return (
    <svg fill="currentColor" viewBox="0 0 512 512" {...props}>
      <path d="m.2041784 294.3757629 135.0729218-.0019836c1.0510101 10.3673706 3.8841248 20.5690308 8.4522095 30.170166l-115.790062 69.7536621c-15.1902405-26.1945495-24.7731477-59.514801-27.7350693-99.9218445zm131.8023066 196.8029786 51.4067841-124.8407288c-5.2182617-2.7826233-10.2264862-6.0957642-14.9382172-9.9553528l-95.4706802 95.4720459c19.4898223 17.5570679 39.5628662 30.7094116 59.0021133 39.3240357zm-65.6047211-45.6471253 95.2843628-95.2860413c-4.9330902-4.9628906-9.4824219-10.8501282-13.6674042-17.6151123l-115.5066642 69.5827027c10.4910965 17.068634 22.1482162 31.8469848 33.8897056 43.3184509zm313.9973145 6.3275757-95.5295105-95.5253601c-1.0485229.8474121-2.1081848 1.671936-3.184845 2.4666138l69.7098999 115.7191772c9.7306824-6.0542297 19.3898926-13.8226013 29.0044556-22.6604309zm-36.7403565 27.5314331-69.5648804-115.4782104c-25.9638519 14.4993591-53.3182526 17.5528564-82.4063263 6.3365173l-51.3009338 124.5834045c70.200531 28.4663086 142.9616852 20.3123169 203.2721405-15.4417114zm-171.9461059-267.7199554-69.7079392-115.7203217c-10.1640396 6.5237503-19.8186493 14.1064529-29.0061646 22.6601715l95.5275803 95.5278625c1.0482636-.8363342 2.1095887-1.6597595 3.1865235-2.4677123zm-171.712616 73.5650482 134.7621918-.0019531c.291153-23.8374939 8.7095032-45.6818237 26.9275513-65.005722l-95.2863083-95.2865982c-43.9871293 46.6117019-65.8919295 100.1147994-66.4034348 160.2942733zm226.6937714-91.9374695.0058594-134.7585754c-44.7272644.2738724-84.0045013 12.32621-116.959053 32.5391159l69.5626297 115.4798889c13.0764617-7.6767197 28.6641692-12.980278 47.3905639-13.2604294zm186.4042816-37.1177979-99.4490967 99.4510498c2.2626953 6.6661987 3.7337646 13.5315552 4.4528503 20.4605103h135.0907898c-.8839111-40.9807434-14.4047241-80.9386597-40.0945434-119.9115601zm40.2803039 129.0516358h-134.747406c-.4680481 25.240448-9.8990479 48.2441101-26.923645 65.0134888l95.2901917 95.2860413c43.8191833-43.1222535 65.1218261-96.9472352 66.3808593-160.2995301zm-217.5386657-226.4921341-.0058594 135.0865784c7.082489.8026276 13.8835602 2.3424988 20.4658203 4.4556732l99.4153442-99.4150772c-35.131958-24.5753861-76.5397338-38.3618508-119.8753051-40.1271744zm195.1100769-56.1426528c-39.1646423 11.456749-55.5329285 55.1829491-38.7815857 88.6712189l-137.3599701 137.3618682c-32.4068756-16.1573944-74.9024811-1.5699463-87.7949829 36.0340729-15.7162628 45.8401489 24.2427673 91.8019104 71.7535858 82.5325317 42.0110779-8.1963196 62.3093567-54.1882019 44.4657593-90.0109253l137.4894714-137.4859314c34.6590576 17.2256775 79.5329285-1.0651627 89.3959961-41.653656 11.4301758-47.0377617-32.6579895-89.0548125-79.1682739-75.449179z" />
    </svg>
  );
}



================================================
FILE: apps/docs/app/(home)/layout.tsx
================================================
import type { ReactNode } from 'react';
import { HomeLayout } from 'fumadocs-ui/layouts/home';
import { baseOptions, linkItems } from '@/app/layout.config';
import {
  NavbarMenu,
  NavbarMenuContent,
  NavbarMenuLink,
  NavbarMenuTrigger,
} from 'fumadocs-ui/layouts/home/navbar';
import Link from 'fumadocs-core/link';
import Image from 'next/image';
import Preview from '@/public/banner.png';
import { Book, ComponentIcon, Pencil, PlusIcon, Server } from 'lucide-react';

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <HomeLayout
      {...baseOptions}
      style={
        {
          '--spacing-fd-container': '1120px',
        } as object
      }
      links={[
        {
          type: 'menu',
          on: 'menu',
          text: 'Documentation',
          items: [
            {
              text: 'Getting Started',
              url: '/docs/ui',
              icon: <Book />,
            },
            {
              text: 'Components',
              url: '/docs/ui/components',
              icon: <ComponentIcon />,
            },
          ],
        },
        {
          type: 'custom',
          on: 'nav',
          children: (
            <NavbarMenu>
              <NavbarMenuTrigger>
                <Link href="/docs/ui">Documentation</Link>
              </NavbarMenuTrigger>
              <NavbarMenuContent className="text-[15px]">
                <NavbarMenuLink href="/docs/ui" className="md:row-span-2">
                  <div className="-mx-3 -mt-3">
                    <Image
                      src={Preview}
                      alt="Perview"
                      className="rounded-t-lg object-cover"
                      style={{
                        maskImage:
                          'linear-gradient(to bottom,white 60%,transparent)',
                      }}
                    />
                  </div>
                  <p className="font-medium">Getting Started</p>
                  <p className="text-fd-muted-foreground text-sm">
                    Learn to use Fumadocs on your docs site.
                  </p>
                </NavbarMenuLink>

                <NavbarMenuLink
                  href="/docs/ui/components"
                  className="lg:col-start-2"
                >
                  <ComponentIcon className="bg-fd-primary text-fd-primary-foreground p-1 mb-2 rounded-md" />
                  <p className="font-medium">Components</p>
                  <p className="text-fd-muted-foreground text-sm">
                    Add interactive experience to your docs.
                  </p>
                </NavbarMenuLink>

                <NavbarMenuLink
                  href="/docs/ui/openapi"
                  className="lg:col-start-2"
                >
                  <Server className="bg-fd-primary text-fd-primary-foreground p-1 mb-2 rounded-md" />
                  <p className="font-medium">OpenAPI</p>
                  <p className="text-fd-muted-foreground text-sm">
                    Generate interactive playgrounds and docs for your OpenAPI
                    schema.
                  </p>
                </NavbarMenuLink>

                <NavbarMenuLink
                  href="/docs/ui/markdown"
                  className="lg:col-start-3 lg:row-start-1"
                >
                  <Pencil className="bg-fd-primary text-fd-primary-foreground p-1 mb-2 rounded-md" />
                  <p className="font-medium">Markdown</p>
                  <p className="text-fd-muted-foreground text-sm">
                    Learn the writing format/syntax of Fumadocs.
                  </p>
                </NavbarMenuLink>

                <NavbarMenuLink
                  href="/docs/ui/manual-installation"
                  className="lg:col-start-3 lg:row-start-2"
                >
                  <PlusIcon className="bg-fd-primary text-fd-primary-foreground p-1 mb-2 rounded-md" />
                  <p className="font-medium">Manual Installation</p>
                  <p className="text-fd-muted-foreground text-sm">
                    Setup Fumadocs for your existing Next.js app.
                  </p>
                </NavbarMenuLink>
              </NavbarMenuContent>
            </NavbarMenu>
          ),
        },
        ...linkItems,
      ]}
      className="dark:bg-neutral-950 dark:[--color-fd-background:var(--color-neutral-950)]"
    >
      {children}
      <Footer />
    </HomeLayout>
  );
}

function Footer() {
  return (
    <footer className="mt-auto border-t bg-fd-card py-12 text-fd-secondary-foreground">
      <div className="container flex flex-col gap-4 sm:flex-row sm:items-end sm:justify-between">
        <div>
          <p className="mb-1 text-sm font-semibold">Fumadocs</p>
          <p className="text-xs">
            Built with ❤️ by{' '}
            <a
              href="https://fuma-dev.vercel.app"
              rel="noreferrer noopener"
              target="_blank"
              className="font-medium"
            >
              Fuma
            </a>
          </p>
        </div>
      </div>
    </footer>
  );
}



================================================
FILE: apps/docs/app/(home)/marquee.tsx
================================================
import { cn } from '@/lib/cn';
import type { ComponentProps } from 'react';

interface MarqueeProps extends ComponentProps<'div'> {
  /**
   * Optional CSS class name to apply custom styles
   */
  className?: string;
  /**
   * Whether to reverse the animation direction
   * @default false
   */
  reverse?: boolean;
  /**
   * Whether to pause the animation on hover
   * @default false
   */
  pauseOnHover?: boolean;
  /**
   * Content to be displayed in the marquee
   */
  children: React.ReactNode;
  /**
   * Whether to animate vertically instead of horizontally
   * @default false
   */
  vertical?: boolean;
  /**
   * Number of times to repeat the content
   * @default 4
   */
  repeat?: number;
}

export function Marquee({
  className,
  reverse = false,
  pauseOnHover = false,
  children,
  vertical = false,
  repeat = 4,
  ...props
}: MarqueeProps) {
  return (
    <div
      {...props}
      className={cn(
        'group flex overflow-hidden p-2 [--duration:40s] [--gap:1rem] [gap:var(--gap)]',
        vertical ? 'flex-col' : 'flex-row',
        className,
      )}
    >
      {Array(repeat)
        .fill(0)
        .map((_, i) => (
          <div
            key={i}
            className={cn(
              'flex shrink-0 justify-around [gap:var(--gap)]',
              vertical
                ? 'animate-marquee-vertical flex-col'
                : 'animate-marquee flex-row',
              pauseOnHover && 'group-hover:[animation-play-state:paused]',
              reverse && '[animation-direction:reverse]',
            )}
          >
            {children}
          </div>
        ))}
    </div>
  );
}



================================================
FILE: apps/docs/app/(home)/page.client.tsx
================================================
'use client';

import {
  Fragment,
  type HTMLAttributes,
  type HTMLProps,
  type ReactElement,
  type ReactNode,
  useEffect,
  useState,
} from 'react';
import { TerminalIcon } from 'lucide-react';
import Link from 'next/link';
import scrollIntoView from 'scroll-into-view-if-needed';
import { cn } from '@/lib/cn';
import { buttonVariants } from '@/components/ui/button';
import Image from 'next/image';
import MainImg from './main.png';
import OpenAPIImg from './openapi.png';
import { cva } from 'class-variance-authority';

export function CreateAppAnimation() {
  const installCmd = 'npm create fumadocs-app';
  const tickTime = 100;
  const timeCommandEnter = installCmd.length;
  const timeCommandRun = timeCommandEnter + 3;
  const timeCommandEnd = timeCommandRun + 3;
  const timeWindowOpen = timeCommandEnd + 1;
  const timeEnd = timeWindowOpen + 1;

  const [tick, setTick] = useState(timeEnd);

  useEffect(() => {
    const timer = setInterval(() => {
      setTick((prev) => (prev >= timeEnd ? prev : prev + 1));
    }, tickTime);

    return () => {
      clearInterval(timer);
    };
  }, [timeEnd]);

  const lines: ReactElement[] = [];

  lines.push(
    <span key="command_type">
      {installCmd.substring(0, tick)}
      {tick < timeCommandEnter && (
        <div className="inline-block h-3 w-1 animate-pulse bg-white" />
      )}
    </span>,
  );

  if (tick >= timeCommandEnter) {
    lines.push(<span key="space"> </span>);
  }

  if (tick > timeCommandRun)
    lines.push(
      <Fragment key="command_response">
        {tick > timeCommandRun + 1 && (
          <>
            <span className="font-bold">◇ Project name</span>
            <span>│ my-app</span>
          </>
        )}
        {tick > timeCommandRun + 2 && (
          <>
            <span>│</span>
            <span className="font-bold">◆ Choose a content source</span>
          </>
        )}
        {tick > timeCommandRun + 3 && (
          <>
            <span>│ ● Fumadocs MDX</span>
            <span>│ ○ Content Collections</span>
          </>
        )}
      </Fragment>,
    );

  return (
    <div
      className="relative"
      onMouseEnter={() => {
        if (tick >= timeEnd) {
          setTick(0);
        }
      }}
    >
      {tick > timeWindowOpen && (
        <LaunchAppWindow className="absolute bottom-5 right-4 z-10 animate-in fade-in slide-in-from-top-10" />
      )}
      <pre className="overflow-hidden rounded-xl border text-[13px] shadow-lg">
        <div className="flex flex-row items-center gap-2 border-b px-4 py-2">
          <TerminalIcon className="size-4" />{' '}
          <span className="font-bold">Terminal</span>
          <div className="grow" />
          <div className="size-2 rounded-full bg-red-400" />
        </div>
        <div className="min-h-[200px] bg-gradient-to-b from-fd-card">
          <code className="grid p-4">{lines}</code>
        </div>
      </pre>
    </div>
  );
}

function LaunchAppWindow(
  props: HTMLAttributes<HTMLDivElement>,
): React.ReactElement {
  return (
    <div
      {...props}
      className={cn(
        'overflow-hidden rounded-md border bg-fd-background shadow-xl',
        props.className,
      )}
    >
      <div className="relative flex h-6 flex-row items-center border-b bg-fd-muted px-4 text-xs text-fd-muted-foreground">
        <p className="absolute inset-x-0 text-center">localhost:3000</p>
      </div>
      <div className="p-4 text-sm">New App launched!</div>
    </div>
  );
}

export function WhyInteractive(props: {
  codeblockTheme: ReactNode;
  codeblockSearchRouter: ReactNode;
  codeblockInteractive: ReactNode;
  typeTable: ReactNode;
  codeblockMdx: ReactNode;
}) {
  const [active, setActive] = useState(0);
  const items = [
    'Full-text Search',
    'Design System & Tailwind CSS',
    'Generate from TypeScript & OpenAPI',
    'Interactive Examples',
    'Automation & Server',
  ];

  return (
    <div
      id="why-interactive"
      className="flex flex-col-reverse gap-3 md:flex-row md:min-h-[380px]"
    >
      <div className="flex flex-col">
        {items.map((item, i) => (
          <button
            key={item}
            ref={(element) => {
              if (!element || i !== active) return;

              scrollIntoView(element, {
                behavior: 'smooth',
                boundary: document.getElementById('why-interactive'),
              });
            }}
            type="button"
            className={cn(
              'transition-colors text-nowrap border border-transparent rounded-lg px-3 py-2.5 text-start text-sm text-fd-muted-foreground font-medium',
              i === active
                ? 'text-fd-primary bg-fd-primary/10 border-fd-primary/10'
                : 'hover:text-fd-accent-foreground/80',
            )}
            onClick={() => {
              setActive(i);
            }}
          >
            {item}
          </button>
        ))}
      </div>
      <style>
        {`
        @keyframes why-interactive-x {
          from {
            width: 0px;
          }
          
          to {
            width: 100%;
          }
        }`}
      </style>

      <div className="flex-1 p-4 border border-fd-primary/10 bg-fd-card/40 rounded-lg shadow-lg">
        {active === 0 ? (
          <WhyPanel>
            <h3>We made it simple.</h3>
            <p>
              Fumadocs offers native support for Orama and Algolia Search, it is
              as easy as plugging a route handler. You can also use your own
              search modal to allow full control over the search UI.
            </p>
            {props.codeblockSearchRouter}
          </WhyPanel>
        ) : null}

        {active === 1 ? (
          <WhyPanel>
            <h3>Tailwind CSS Plugin</h3>
            <p>
              Share the same design system cross the docs and your app with
              Tailwind CSS. Works great with <b>Shadcn UI</b>.
            </p>
            {props.codeblockTheme}
            <Link
              href="/docs/ui/theme"
              className={cn(buttonVariants(), 'not-prose')}
            >
              See Themes
            </Link>
          </WhyPanel>
        ) : null}

        {active === 2 ? (
          <WhyPanel>
            <h3>Never repeat yourself again.</h3>
            <p>
              Fumadocs has a smart Type Table component that renders the
              properties of interface/type automatically, from the source of
              truth, powered by the TypeScript Compiler API.
            </p>
            {props.typeTable}
            <p>
              We also have a built-in OpenAPI playground and docs generator.
            </p>

            <div className="mt-4 flex flex-row items-center gap-1.5 not-prose">
              <Link
                href="/docs/ui/components/auto-type-table"
                className={cn(buttonVariants())}
              >
                Type Table
              </Link>
              <Link
                href="/docs/ui/openapi"
                className={cn(buttonVariants({ variant: 'ghost' }))}
              >
                OpenAPI Integration
              </Link>
            </div>
          </WhyPanel>
        ) : null}
        {active === 3 ? (
          <WhyPanel>
            <h3>Interactive docs with React.</h3>
            <p>
              Fumadocs offers many useful components, from File Tree, Tabs, to
              Zoomable Image.
            </p>
            {props.codeblockInteractive}
            <Link
              href="/docs/ui/components"
              className={cn(buttonVariants(), 'not-prose')}
            >
              View Components
            </Link>
          </WhyPanel>
        ) : null}
        {active === 4 ? (
          <WhyPanel>
            <h3>Connect your content and server.</h3>

            <p>
              React Server Component made it very easy to automate docs. Use
              server data, server components, and even client components in MDX
              documents.
            </p>

            {props.codeblockMdx}
          </WhyPanel>
        ) : null}
      </div>
    </div>
  );
}

function WhyPanel(props: HTMLProps<HTMLDivElement>) {
  return (
    <div
      {...props}
      className={cn(
        'duration-700 animate-in fade-in text-sm prose',
        props.className,
      )}
    >
      {props.children}
    </div>
  );
}

const previewButtonVariants = cva(
  'w-20 h-9 text-sm font-medium transition-colors rounded-full',
  {
    variants: {
      active: {
        true: 'text-fd-primary-foreground',
        false: 'text-fd-muted-foreground',
      },
    },
  },
);
export function PreviewImages() {
  const [active, setActive] = useState(0);

  return (
    <div className="mt-12 min-w-[800px] overflow-hidden xl:-mx-12 dark:[mask-image:linear-gradient(to_top,transparent,white_40px)]">
      <div className="absolute flex flex-row left-1/2 -translate-1/2 bottom-4 z-2 p-1 rounded-full bg-fd-card border shadow-xl dark:shadow-fd-background">
        <div
          role="none"
          className="absolute bg-fd-primary rounded-full w-20 h-9 transition-transform z-[-1]"
          style={{
            transform: `translateX(calc(var(--spacing) * 20 * ${active}))`,
          }}
        />
        <button
          className={cn(previewButtonVariants({ active: active === 0 }))}
          onClick={() => setActive(0)}
        >
          Docs
        </button>
        <button
          className={cn(previewButtonVariants({ active: active === 1 }))}
          onClick={() => setActive(1)}
        >
          OpenAPI
        </button>
      </div>
      <Image
        src={MainImg}
        alt="preview"
        priority
        className={cn(
          'w-full select-none duration-1000 animate-in fade-in -mb-60 slide-in-from-bottom-12 lg:-mb-40',
          active !== 0 && 'hidden',
        )}
      />
      {active === 1 && (
        <Image
          src={OpenAPIImg}
          alt="preview"
          priority
          className={cn(
            'w-full select-none duration-1000 animate-in fade-in -mb-60 slide-in-from-bottom-12 lg:-mb-40',
            active !== 1 && 'hidden',
          )}
        />
      )}
    </div>
  );
}



================================================
FILE: apps/docs/app/(home)/page.tsx
================================================
import { cva } from 'class-variance-authority';
import {
  BatteryChargingIcon,
  CpuIcon,
  FileEditIcon,
  FileTextIcon,
  Heart,
  KeyboardIcon,
  LayoutIcon,
  LibraryIcon,
  type LucideIcon,
  MousePointer,
  PaperclipIcon,
  PersonStandingIcon,
  RocketIcon,
  SearchIcon,
  Terminal,
  TimerIcon,
} from 'lucide-react';
import { File, Files, Folder } from 'fumadocs-ui/components/files';
import Link from 'next/link';
import type { HTMLAttributes, ReactNode } from 'react';
import Image from 'next/image';
import { cn } from '@/lib/cn';
import { buttonVariants } from '@/components/ui/button';
import { CodeBlock } from '@/components/code-block';
import { UwuHero } from '@/app/(home)/uwu';
import SourceImage from '@/public/source.png';
import ContributorCounter from '@/components/contributor-count';
import {
  CreateAppAnimation,
  PreviewImages,
  WhyInteractive,
} from './page.client';
import { NetlifyLogo, VercelLogo } from './icons';
import { TypeTable } from 'fumadocs-ui/components/type-table';
import { owner, repo } from '@/lib/github';
import { Marquee } from '@/app/(home)/marquee';
import ArchImg from './arch.png';

const badgeVariants = cva(
  'inline-flex size-7 items-center justify-center rounded-full bg-fd-primary font-medium text-fd-primary-foreground',
);

export default function Page() {
  const gridColor =
    'color-mix(in oklab, var(--color-fd-primary) 10%, transparent)';

  return (
    <>
      <div
        className="absolute inset-x-0 top-[360px] h-[250px] max-md:hidden"
        style={{
          background: `repeating-linear-gradient(to right, ${gridColor}, ${gridColor} 1px,transparent 1px,transparent 50px), repeating-linear-gradient(to bottom, ${gridColor}, ${gridColor} 1px,transparent 1px,transparent 50px)`,
        }}
      />
      <main className="container relative max-w-[1100px] px-2 py-4 z-2 lg:py-8">
        <div
          style={{
            background:
              'repeating-linear-gradient(to bottom, transparent, color-mix(in oklab, var(--color-fd-primary) 1%, transparent) 500px, transparent 1000px)',
          }}
        >
          <div className="relative">
            <Hero />
            <UwuHero />
          </div>
          <Feedback />
          <Introduction />
          <div
            className="relative overflow-hidden border-x border-t px-8 py-16 sm:py-24"
            style={{
              backgroundImage:
                'radial-gradient(circle at center, var(--color-fd-secondary), var(--color-fd-background) 40%)',
            }}
          >
            <h2 className="text-center text-2xl font-semibold sm:text-3xl">
              Loved by users.
              <br />
              Built for developers.
            </h2>
          </div>
          <Architecture />
          <Features />
          <Highlights />
          <Why />
          <Contributing />
          <End />
        </div>
      </main>
    </>
  );
}

function Architecture() {
  return (
    <div className="flex flex-col gap-4 border-x border-t p-8 md:px-12 lg:flex-row">
      <div className="text-start">
        <p className="px-2 py-1 text-sm font-mono bg-fd-primary text-fd-primary-foreground font-bold w-fit mb-4">
          Designed with Love
        </p>
        <h2 className="text-2xl font-semibold mb-4">A breakable framework.</h2>
        <p className="text-fd-muted-foreground mb-6">
          Fumadocs makes it easy to build beautiful docs, write content, and
          transform content into data for your React.js framework.
        </p>
      </div>
      <Image
        src={ArchImg}
        alt="Architecture"
        className="mx-auto -my-16 w-full max-w-[400px] invert dark:invert-0 lg:mx-0"
      />
    </div>
  );
}

async function Why() {
  return (
    <div className="relative overflow-hidden border-x border-t p-2">
      <WhyInteractive
        typeTable={
          <TypeTable
            type={{
              name: {
                type: 'string',
                description: 'The name of player',
                default: 'hello',
              },
              code: {
                type: 'string',
                description: (
                  <CodeBlock lang="ts" code='console.log("Hello World")' />
                ),
              },
            }}
          />
        }
        codeblockSearchRouter={
          <CodeBlock
            lang="ts"
            code={`import { source } from '@/lib/source';
import { createFromSource } from 'fumadocs-core/search/server';
 
export const { GET } = createFromSource(source);`}
          />
        }
        codeblockTheme={
          <CodeBlock
            lang="css"
            code={`@import 'tailwindcss';
@import 'fumadocs-ui/css/neutral.css';
@import 'fumadocs-ui/css/preset.css';`}
          />
        }
        codeblockInteractive={
          <CodeBlock
            lang="tsx"
            code={`import { File, Folder, Files } from 'fumadocs-ui/components/files';
 
<Files>
  <Folder name="app" defaultOpen>
    <File name="layout.tsx" />
    <File name="page.tsx" />
    <File name="global.css" />
  </Folder>
  <File name="package.json" />
</Files>`}
          />
        }
        codeblockMdx={
          <CodeBlock
            lang="tsx"
            code={`import { db } from '@/server/db';

export function ProductTable() {
  const products = db.getProducts()
    
  return (
    <ul>
      {products.map(product => <li key={product.key}>{product.name}</li>)}
    </ul>
  );
}

## Products

<ProductTable />`}
          />
        }
      />
    </div>
  );
}

function End() {
  return (
    <div className="flex flex-col border-b border-r md:flex-row *:border-l *:border-t">
      <div className="group flex flex-col min-w-0 flex-1 pt-8 **:transition-colors">
        <h2 className="text-3xl text-center font-extrabold font-mono uppercase text-fd-muted-foreground mb-4 lg:text-4xl group-hover:text-blue-500">
          Build Your Docs
        </h2>
        <p className="text-center font-mono text-xs text-fd-foreground/60 mb-8 group-hover:text-blue-500/80">
          light and gorgeous, just like the moon.
        </p>
        <div className="h-[200px] overflow-hidden p-8 bg-gradient-to-b from-fd-primary/10 group-hover:from-blue-500/10">
          <div className="mx-auto bg-radial-[circle_at_0%_100%] from-60% from-transparent to-fd-primary size-[500px] rounded-full group-hover:from-blue-500 group-hover:to-blue-600/10" />
        </div>
      </div>
      <ul className="flex flex-col gap-4 p-6 pt-8">
        <li>
          <span className="flex flex-row items-center gap-2 font-medium">
            <BatteryChargingIcon className="size-5" />
            Battery guaranteed.
          </span>
          <span className="mt-2 text-sm text-fd-muted-foreground">
            Actively maintained, open for contributions.
          </span>
        </li>
        <li>
          <span className="flex flex-row items-center gap-2 font-medium">
            <svg viewBox="0 0 24 24" className="size-5" fill="currentColor">
              <path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12" />
            </svg>
            Fully open-source.
          </span>
          <span className="mt-2 text-sm text-fd-muted-foreground">
            Open source, available on Github.
          </span>
        </li>
        <li>
          <span className="flex flex-row items-center gap-2 font-medium">
            <TimerIcon className="size-5" />
            Within seconds.
          </span>
          <span className="mt-2 text-sm text-fd-muted-foreground">
            Initialize a new project instantly with CLI.
          </span>
        </li>
        <li className="flex flex-row flex-wrap gap-2 mt-auto">
          <Link href="/docs" className={cn(buttonVariants())}>
            Read docs
          </Link>
          <a
            href="https://stackblitz.com/~/github.com/fuma-nama/fumadocs-ui-template"
            rel="noreferrer noopener"
            className={cn(
              buttonVariants({
                variant: 'outline',
              }),
            )}
          >
            Open Demo
          </a>
        </li>
      </ul>
    </div>
  );
}

const searchItemVariants = cva(
  'flex flex-row items-center gap-2 rounded-md p-2 text-sm text-fd-popover-foreground',
);

function Search(): React.ReactElement {
  return (
    <div className="mt-6 rounded-lg bg-gradient-to-b from-fd-border p-px">
      <div className="flex select-none flex-col rounded-[inherit] bg-gradient-to-b from-fd-popover">
        <div className="inline-flex items-center gap-2 px-4 py-2 text-sm text-fd-muted-foreground">
          <SearchIcon className="size-4" />
          Search...
        </div>
        <div className="border-t p-2">
          {[
            'Getting Started',
            'Components',
            'MDX Content',
            'User Guide',
            'Javascript SDK',
          ].map((v, i) => (
            <div
              key={v}
              className={cn(
                searchItemVariants({
                  className: i === 0 ? 'bg-fd-accent' : '',
                }),
              )}
            >
              <FileTextIcon className="size-4 text-fd-muted-foreground" />
              {v}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

function Highlights(): React.ReactElement {
  return (
    <div className="grid grid-cols-1 border-r md:grid-cols-2 lg:grid-cols-3">
      <div className="col-span-full flex flex-row items-start justify-center border-l border-t p-8 pb-2 text-center">
        <h2 className="bg-fd-primary text-fd-primary-foreground px-1 text-2xl font-semibold">
          Highlights
        </h2>
        <MousePointer className="-ml-1 mt-8" />
      </div>
      <Highlight icon={TimerIcon} heading="Light & Fast.">
        Less Javascript with React Server Components, and optimized images.
      </Highlight>
      <Highlight icon={LayoutIcon} heading="Accessibility & UX first.">
        Focus on user experience and accessibility.
      </Highlight>
      <Highlight icon={RocketIcon} heading="Next.js First.">
        Powerful documentation site with Next.js, React Router, or Tanstack
        Start.
      </Highlight>
      <Highlight icon={SearchIcon} heading="Syntax Highlighting.">
        Beautiful syntax highlighter, powered by{' '}
        <a href="https://shiki.style" rel="noreferrer noopener">
          Shiki
        </a>
        .
      </Highlight>
      <Highlight icon={KeyboardIcon} heading="Automation.">
        Useful remark/rehype plugins. Typescript Twoslash, OpenAPI docs
        generation, and more.
      </Highlight>
      <Highlight icon={PersonStandingIcon} heading="Personalized.">
        Advanced options for customising your theme in a comfortable way.
      </Highlight>
    </div>
  );
}

function Highlight({
  icon: Icon,
  heading,
  children,
}: {
  icon: LucideIcon;
  heading: ReactNode;
  children: ReactNode;
}): React.ReactElement {
  return (
    <div className="border-l border-t px-6 py-12">
      <div className="mb-4 flex flex-row items-center gap-2 text-fd-muted-foreground">
        <Icon className="size-4" />
        <h2 className="text-sm font-medium">{heading}</h2>
      </div>
      <span className="font-medium">{children}</span>
    </div>
  );
}

function Hero() {
  return (
    <div className="relative z-2 flex flex-col border-x border-t bg-fd-background/80 px-4 pt-12 max-md:text-center md:px-12 md:pt-16 [.uwu_&]:hidden overflow-hidden">
      <div
        className="absolute inset-0 z-[-1] blur-2xl hidden dark:block"
        style={{
          maskImage:
            'linear-gradient(to bottom, transparent, white, transparent)',
          background:
            'repeating-linear-gradient(65deg, var(--color-blue-500), var(--color-blue-500) 12px, color-mix(in oklab, var(--color-blue-600) 30%, transparent) 20px, transparent 200px)',
        }}
      />
      <div
        className="absolute inset-0 z-[-1] blur-2xl dark:hidden"
        style={{
          maskImage:
            'linear-gradient(to bottom, transparent, white, transparent)',
          background:
            'repeating-linear-gradient(65deg, var(--color-purple-300), var(--color-purple-300) 12px, color-mix(in oklab, var(--color-blue-600) 30%, transparent) 20px, transparent 200px)',
        }}
      />
      <h1 className="mb-8 text-4xl font-medium md:hidden">Build Your Docs</h1>
      <h1 className="mb-8 max-w-[600px] text-4xl font-medium max-md:hidden">
        Build excellent documentation site with less effort
      </h1>
      <p className="mb-8 text-fd-muted-foreground md:max-w-[80%] md:text-xl">
        Fumadocs is a beautiful documentation framework for Developers, flexible
        and performant, with everything from Next.js.
      </p>
      <div className="inline-flex items-center gap-3 max-md:mx-auto">
        <Link
          href="/docs/ui"
          className={cn(
            buttonVariants({ size: 'lg', className: 'rounded-full' }),
          )}
        >
          Getting Started
        </Link>
        <a
          href="https://stackblitz.com/~/github.com/fuma-nama/fumadocs-ui-template"
          target="_blank"
          rel="noreferrer noopener"
          className={cn(
            buttonVariants({
              size: 'lg',
              variant: 'outline',
              className: 'rounded-full bg-fd-background',
            }),
          )}
        >
          Open Demo
        </a>
      </div>
      <PreviewImages />
    </div>
  );
}

const feedback = [
  {
    avatar: 'https://avatars.githubusercontent.com/u/124599',
    user: 'shadcn',
    role: 'Creator of Shadcn UI',
    message: `You know how you end up rebuilding a full docs site every time you start a new project? 

Fumadocs fixes this by giving you all the right blocks that you compose together.

Like headless docs to build exactly what you need.`,
  },
  {
    avatar: 'https://avatars.githubusercontent.com/u/35677084',
    user: 'Anthony Shew',
    role: 'Turbo DX at Vercel',
    message: `Major shoutout to @fuma_nama for making fumadocs, a gorgeous documentation framework that composes beautifully into the App Router.`,
  },
  {
    user: 'Aiden Bai',
    avatar: 'https://avatars.githubusercontent.com/u/38025074',
    role: 'Creator of Million.js',
    message: 'fumadocs is the best Next.js docs framework',
  },
  {
    avatar: 'https://avatars.githubusercontent.com/u/10645823',
    user: 'David Blass',
    role: 'Creator of Arktype',
    message: `I'd have no shot building @arktypeio docs that looked half this good without it 😍`,
  },
];

function Feedback() {
  return (
    <div className="relative border-x border-t pt-8 bg-fd-background">
      <div className="flex flex-row gap-6 justify-between px-6 mb-6 items-center">
        <p className="text-sm font-medium md:text-lg">
          Trusted by awesome teams and developers
        </p>
        <Link
          href="/showcase"
          className={cn(buttonVariants({ variant: 'outline' }))}
        >
          Showcase
        </Link>
      </div>
      <Marquee className="pb-8 [mask-image:linear-gradient(to_right,transparent,white_20px,white_calc(100%-20px),transparent)]">
        {feedback.map((item) => (
          <div
            key={item.user}
            className="flex flex-col rounded-xl border bg-gradient-to-b from-fd-card p-4 shadow-lg w-[320px]"
          >
            <p className="text-sm whitespace-pre-wrap">{item.message}</p>

            <div className="mt-auto flex flex-row items-center gap-2 pt-4">
              <Image
                src={item.avatar}
                alt="avatar"
                width="32"
                height="32"
                unoptimized
                className="size-8 rounded-full"
              />
              <div>
                <p className="text-sm font-medium">{item.user}</p>
                <p className="text-xs text-fd-muted-foreground">{item.role}</p>
              </div>
            </div>
          </div>
        ))}
      </Marquee>
    </div>
  );
}

function Introduction(): React.ReactElement {
  return (
    <div className="grid grid-cols-1 border-r md:grid-cols-2">
      <div className="flex flex-col gap-2 border-l border-t px-6 py-12 md:py-16">
        <div className={cn(badgeVariants())}>1</div>
        <h3 className="text-xl font-semibold">Create it.</h3>
        <p className="mb-8 text-fd-muted-foreground">
          Initialize a new docs with a command.
        </p>
        <CreateAppAnimation />
      </div>
      <div className="flex flex-col gap-2 border-l border-t px-6 py-12 md:py-16">
        <div className={cn(badgeVariants())}>2</div>
        <h3 className="text-xl font-semibold">Write.</h3>
        <p className="text-fd-muted-foreground">
          Write content, with automation tools & type-safe data validation.
        </p>
        <div className="relative flex flex-col">
          <CodeBlock
            lang="mdx"
            wrapper={{
              className: 'absolute inset-x-2 top-0 shadow-lg',
            }}
            code={`---
title: My Documentation
---

## Introduction

Hello World
`}
          />
          <Files className="z-2 mt-40 shadow-xl">
            <Folder name="content" defaultOpen>
              <File name="index.mdx" />
              <File name="components.mdx" />
            </Folder>
          </Files>
        </div>
      </div>
      <div className="col-span-full flex flex-col items-center gap-2 border-l border-t px-6 py-16 text-center">
        <div className={cn(badgeVariants())}>3</div>
        <h3 className="text-2xl font-semibold">Ship.</h3>
        <p className="text-fd-muted-foreground">
          Deploy your docs easily with Next.js compatible hosting platforms.
        </p>

        <div className="mt-4 flex flex-row flex-wrap items-center gap-8">
          <a href="https://vercel.com" rel="noreferrer noopener">
            <VercelLogo className="h-auto w-32" />
          </a>
          <a href="https://netlify.com" rel="noreferrer noopener">
            <NetlifyLogo className="h-auto w-32" />
          </a>
        </div>
      </div>
    </div>
  );
}

function Contributing() {
  return (
    <div className="flex flex-col items-center border-x border-t px-4 py-16 text-center">
      <Heart fill="currentColor" className="text-pink-500 mb-4" />
      <h2 className="mb-4 text-xl font-semibold sm:text-2xl">
        Made Possible by You.
      </h2>
      <p className="mb-4 text-fd-muted-foreground">
        Fumadocs is 100% powered by passion and open source community.
      </p>
      <div className="mb-8 flex flex-row items-center gap-2">
        <Link
          href="/sponsors"
          className={cn(buttonVariants({ variant: 'outline' }))}
        >
          Sponsors
        </Link>
        <a
          href="https://github.com/fuma-nama/fumadocs/graphs/contributors"
          rel="noreferrer noopener"
          className={cn(buttonVariants({ variant: 'ghost' }))}
        >
          Contributors
        </a>
      </div>
      <ContributorCounter repoOwner={owner} repoName={repo} />
    </div>
  );
}

function Features() {
  return (
    <div className="grid grid-cols-1 border-r md:grid-cols-2">
      <Feature
        icon={PaperclipIcon}
        subheading="Source Agnostic"
        heading="Your source. Your choice"
        description={
          <>
            <span className="font-medium text-fd-foreground">
              Designed to integrate with any content source:{' '}
            </span>
            <span>
              Fumadocs works on MDX, Content Collections, and even your own CMS.
            </span>
          </>
        }
        className="overflow-hidden"
        style={{
          backgroundImage:
            'radial-gradient(circle at 60% 50%,var(--color-fd-secondary),var(--color-fd-background) 80%)',
        }}
      >
        <div className="mt-8 flex flex-col">
          <div className="flex flex-row w-fit bg-fd-secondary border rounded-full *:rounded-full">
            <a
              href="https://github.com/fuma-nama/fumadocs-basehub"
              rel="noreferrer noopener"
              target="_blank"
              className={cn(buttonVariants({ variant: 'outline' }))}
            >
              BaseHub CMS example
            </a>
            <a
              href="https://github.com/fuma-nama/fumadocs-sanity"
              rel="noreferrer noopener"
              target="_blank"
              className={cn(buttonVariants({ variant: 'ghost' }))}
            >
              Sanity example
            </a>
          </div>
          <Image
            alt="Source"
            src={SourceImage}
            sizes="600px"
            className="-mt-16 w-[400px] min-w-[400px] invert pointer-events-none dark:invert-0"
          />
          <div className="z-2 mt-[-170px] w-[300px] overflow-hidden rounded-lg border border-fd-foreground/10 shadow-xl backdrop-blur-lg">
            <div className="flex flex-row items-center gap-2 bg-fd-muted/50 px-4 py-2 text-xs font-medium text-fd-muted-foreground">
              <FileEditIcon className="size-4" />
              MDX Editor
            </div>
            <pre className="p-4 text-[13px]">
              <code className="grid">
                <span className="font-medium"># Hello World!</span>
                <span>This is my first document.</span>
                <span>{` `}</span>
                <span className="font-medium">{`<ServerComponent />`}</span>
              </code>
            </pre>
          </div>
        </div>
      </Feature>
      <Feature
        icon={SearchIcon}
        subheading="Search Integration"
        heading="Enhance your search experience."
        description="Integrate with Orama Search and Algolia Search in your docs easily."
      >
        <Link
          href="/docs/headless/search/algolia"
          className={cn(
            buttonVariants({ variant: 'outline', className: 'mt-4' }),
          )}
        >
          Learn More
        </Link>
        <Search />
      </Feature>
      <Feature
        icon={Terminal}
        subheading="Fumadocs CLI"
        heading="The Shadcn UI for docs"
        description="Fumadocs CLI creates interactive components for your docs, offering a rich experience to your users."
      >
        <div className="relative">
          <div className="grid grid-cols-[1fr_2fr_1fr] h-[220px] *:border-fd-foreground/50 *:border-dashed mask-radial-circle mask-radial-from-white">
            <div className="border-r border-b" />
            <div className="border-b" />
            <div className="border-l border-b" />

            <div className="border-r" />
            <div className="w-[200px]" />
            <div className="border-l" />

            <div className="border-r border-t" />
            <div className="border-t" />
            <div className="border-l border-t" />
          </div>
          <code className="absolute inset-0 flex items-center justify-center">
            <code className="text-sm text-transparent bg-clip-text bg-gradient-to-r from-blue-300 to-fd-foreground font-medium">
              npx @fumadocs/cli add
            </code>
          </code>
        </div>
      </Feature>
      <Feature
        icon={CpuIcon}
        subheading="Robust"
        heading="Flexibility that cover your needs."
        description="Well documented, separated in packages."
      >
        <div className="mt-8 flex flex-col gap-4">
          <Link
            href="/docs/ui"
            className="rounded-xl bg-gradient-to-br from-transparent via-fd-primary p-px shadow-lg shadow-fd-primary/20"
          >
            <div className="rounded-[inherit] bg-fd-background bg-gradient-to-br from-transparent via-fd-primary/10 p-4 transition-colors hover:bg-fd-muted">
              <LayoutIcon />
              <h3 className="font-semibold">Fumadocs UI</h3>
              <p className="text-sm text-fd-muted-foreground">
                Default theme of Fumadocs with many useful components.
              </p>
            </div>
          </Link>
          <Link
            href="/docs/headless"
            className="rounded-xl border bg-fd-background p-4 shadow-lg transition-colors hover:bg-fd-muted"
          >
            <LibraryIcon />
            <h3 className="font-semibold">Core</h3>
            <p className="text-sm text-fd-muted-foreground">
              Headless library with a useful set of utilities.
            </p>
          </Link>
        </div>
      </Feature>
    </div>
  );
}

function Feature({
  className,
  icon: Icon,
  heading,
  subheading,
  description,
  ...props
}: HTMLAttributes<HTMLDivElement> & {
  icon: LucideIcon;
  subheading: ReactNode;
  heading: ReactNode;
  description: ReactNode;
}): React.ReactElement {
  return (
    <div
      className={cn('border-l border-t px-6 py-12 md:py-16', className)}
      {...props}
    >
      <div className="mb-4 inline-flex items-center gap-2 text-sm font-medium text-fd-muted-foreground">
        <Icon className="size-4" />
        <p>{subheading}</p>
      </div>
      <h2 className="mb-2 text-lg font-semibold">{heading}</h2>
      <p className="text-fd-muted-foreground">{description}</p>

      {props.children}
    </div>
  );
}



================================================
FILE: apps/docs/app/(home)/uwu.tsx
================================================
import Link from 'next/link';
import Image from 'next/image';
import { cn } from '@/lib/cn';
import { buttonVariants } from '@/components/ui/button';
import Logo from '@/public/logo.png';

export function UwuHero() {
  return (
    <div className="z-2 hidden flex-col items-center pb-8 text-center bg-fd-background border-x border-t [.uwu_&]:flex">
      <Image
        alt="logo"
        src={Logo}
        className="mb-6 w-full max-w-[400px] px-4"
        priority
      />

      <p className="mb-6 h-fit p-2 text-lg text-fd-muted-foreground md:max-w-[80%] md:text-xl">
        Fumadocs is the framework for building documentation with{' '}
        <b className="font-medium text-fd-foreground">
          anime and fuwa fuwa power
        </b>
        . Using the power of weebs and waifus.
      </p>
      <div className="inline-flex items-center gap-3">
        <Link
          href="/docs"
          className={cn(
            buttonVariants({ size: 'lg', className: 'rounded-full' }),
          )}
        >
          Getting Started
        </Link>
        <a
          href="https://stackblitz.com/~/github.com/fuma-nama/fumadocs-ui-template"
          className={cn(
            buttonVariants({
              size: 'lg',
              variant: 'outline',
              className: 'rounded-full bg-fd-background',
            }),
          )}
        >
          Open Demo
        </a>
      </div>
    </div>
  );
}



================================================
FILE: apps/docs/app/(home)/blog/page.tsx
================================================
import Link from 'next/link';
import { blog } from '@/lib/source';

export default function Page(): React.ReactElement {
  const posts = [...blog.getPages()].sort(
    (a, b) =>
      new Date(b.data.date ?? b.file.name).getTime() -
      new Date(a.data.date ?? a.file.name).getTime(),
  );

  const svg = `<svg viewBox='0 0 500 500' xmlns='http://www.w3.org/2000/svg'>
  <filter id='noiseFilter'>
    <feTurbulence 
      type='fractalNoise' 
      baseFrequency='0.65' 
      numOctaves='3' 
      stitchTiles='stitch'/>
  </filter>
  
  <rect width='100%' height='100%' filter='url(#noiseFilter)'/>
</svg>`;

  return (
    <main className="container max-sm:px-0 md:py-12">
      <div
        className="h-[300px] p-8 md:h-[400px] md:p-12"
        style={{
          backgroundImage: [
            'radial-gradient(circle at 70% 10%, rgba(255,50,100,0.5), transparent)',
            'radial-gradient(circle at 0% 80%, rgba(190,0,255,0.5), transparent)',
            'radial-gradient(circle at 50% 50%, rgba(50,50,255,0.3), transparent)',
            `url("data:image/svg+xml,${encodeURIComponent(svg)}")`,
          ].join(', '),
        }}
      >
        <h1 className="mb-4 border-b-4 border-fd-foreground pb-2 text-4xl font-bold md:text-5xl">
          Fumadocs Blog
        </h1>
        <p className="text-sm md:text-base">
          Light and gorgeous. like the moon
        </p>
      </div>
      <div className="grid grid-cols-1 border md:grid-cols-3 lg:grid-cols-4">
        {posts.map((post) => (
          <Link
            key={post.url}
            href={post.url}
            className="flex flex-col bg-fd-card p-4 transition-colors hover:bg-fd-accent hover:text-fd-accent-foreground"
          >
            <p className="font-medium">{post.data.title}</p>
            <p className="text-sm text-fd-muted-foreground">
              {post.data.description}
            </p>

            <p className="mt-auto pt-4 text-xs text-fd-muted-foreground">
              {new Date(post.data.date ?? post.file.name).toDateString()}
            </p>
          </Link>
        ))}
      </div>
    </main>
  );
}



================================================
FILE: apps/docs/app/(home)/blog/[slug]/page.client.tsx
================================================
'use client';
import { Check, Share } from 'lucide-react';
import { cn } from '@/lib/cn';
import { buttonVariants } from '@/components/ui/button';
import { useCopyButton } from 'fumadocs-ui/utils/use-copy-button';

export function Control({ url }: { url: string }): React.ReactElement {
  const [isChecked, onCopy] = useCopyButton(() => {
    void navigator.clipboard.writeText(`${window.location.origin}${url}`);
  });

  return (
    <button
      type="button"
      className={cn(
        buttonVariants({ className: 'gap-2', variant: 'secondary' }),
      )}
      onClick={onCopy}
    >
      {isChecked ? <Check className="size-4" /> : <Share className="size-4" />}
      {isChecked ? 'Copied URL' : 'Share Post'}
    </button>
  );
}



================================================
FILE: apps/docs/app/(home)/blog/[slug]/page.tsx
================================================
import type { Metadata } from 'next';
import { notFound } from 'next/navigation';
import Link from 'next/link';
import { InlineTOC } from 'fumadocs-ui/components/inline-toc';
import { blog } from '@/lib/source';
import { createMetadata } from '@/lib/metadata';
import { buttonVariants } from '@/components/ui/button';
import { Control } from '@/app/(home)/blog/[slug]/page.client';
import { getMDXComponents } from '@/mdx-components';
import path from 'node:path';

export default async function Page(props: {
  params: Promise<{ slug: string }>;
}) {
  const params = await props.params;
  const page = blog.getPage([params.slug]);

  if (!page) notFound();
  const { body: Mdx, toc } = await page.data.load();

  return (
    <>
      <div
        className="container rounded-xl mt-12 py-12 md:px-8"
        style={{
          backgroundColor: 'black',
          backgroundImage: [
            'linear-gradient(140deg, hsla(274,94%,54%,0.3), transparent 50%)',
            'linear-gradient(to left top, hsla(260,90%,50%,0.8), transparent 50%)',
            'radial-gradient(circle at 100% 100%, hsla(240,100%,82%,1), hsla(240,40%,40%,1) 17%, hsla(240,40%,40%,0.5) 20%, transparent)',
          ].join(', '),
          backgroundBlendMode: 'difference, difference, normal',
        }}
      >
        <h1 className="mb-2 text-3xl font-bold text-white">
          {page.data.title}
        </h1>
        <p className="mb-4 text-white/80">{page.data.description}</p>
        <Link
          href="/blog"
          className={buttonVariants({ size: 'sm', variant: 'secondary' })}
        >
          Back
        </Link>
      </div>
      <article className="container flex flex-col px-0 py-8 lg:flex-row lg:px-4">
        <div className="prose min-w-0 flex-1 p-4">
          <InlineTOC items={toc} />
          <Mdx components={getMDXComponents()} />
        </div>
        <div className="flex flex-col gap-4 border-l p-4 text-sm lg:w-[250px]">
          <div>
            <p className="mb-1 text-fd-muted-foreground">Written by</p>
            <p className="font-medium">{page.data.author}</p>
          </div>
          <div>
            <p className="mb-1 text-sm text-fd-muted-foreground">At</p>
            <p className="font-medium">
              {new Date(
                page.data.date ??
                  path.basename(page.path, path.extname(page.path)),
              ).toDateString()}
            </p>
          </div>
          <Control url={page.url} />
        </div>
      </article>
    </>
  );
}

export async function generateMetadata(props: {
  params: Promise<{ slug: string }>;
}): Promise<Metadata> {
  const params = await props.params;
  const page = blog.getPage([params.slug]);

  if (!page) notFound();

  return createMetadata({
    title: page.data.title,
    description:
      page.data.description ?? 'The library for building documentation sites',
  });
}

export function generateStaticParams(): { slug: string }[] {
  return blog.getPages().map((page) => ({
    slug: page.slugs[0],
  }));
}



================================================
FILE: apps/docs/app/(home)/blog/rss.xml/route.ts
================================================
import { Feed } from 'feed';
import { blog } from '@/lib/source';
import { NextResponse } from 'next/server';

export const revalidate = false;

const baseUrl = 'https://fumadocs.dev';

export function GET() {
  const feed = new Feed({
    title: 'Fumadocs Blog',
    id: `${baseUrl}/blog`,
    link: `${baseUrl}/blog`,
    language: 'en',

    image: `${baseUrl}/banner.png`,
    favicon: `${baseUrl}/icon.png`,
    copyright: 'All rights reserved 2025, Fuma Nama',
  });

  for (const page of blog.getPages().sort((a, b) => {
    return new Date(b.data.date).getTime() - new Date(a.data.date).getTime();
  })) {
    feed.addItem({
      id: page.url,
      title: page.data.title,
      description: page.data.description,
      link: `${baseUrl}${page.url}`,
      date: new Date(page.data.date),

      author: [
        {
          name: page.data.author,
        },
      ],
    });
  }

  return new NextResponse(feed.rss2());
}



================================================
FILE: apps/docs/app/(home)/blog/test/page.mdx
================================================
export { withArticle as default } from 'fumadocs-ui/page';

## Hello World

Create a `page.mdx` file, put the page under a non-docs layout.

Apply typography styles with:

```jsx
export { withArticle as default } from 'fumadocs-ui/page';
```

Done!



================================================
FILE: apps/docs/app/(home)/docs/page.tsx
================================================
import { Building2, LibraryIcon } from 'lucide-react';
import Link, { type LinkProps } from 'next/link';
import Image from 'next/image';
import { buttonVariants } from '@/components/ui/button';
import { cn } from '@/lib/cn';
import Spot from '@/public/spot.png';

export default function DocsPage(): React.ReactElement {
  return (
    <main className="container flex flex-col items-center py-16 text-center z-2">
      <div className="absolute inset-0 z-[-1] overflow-hidden duration-1000 animate-in fade-in [perspective:2000px]">
        <div
          className="absolute bottom-[20%] left-1/2 size-[1200px] origin-bottom bg-fd-primary/30 opacity-30"
          style={{
            transform: 'rotateX(75deg) translate(-50%, 400px)',
            backgroundImage:
              'radial-gradient(50% 50% at center,transparent,var(--color-fd-background)), repeating-linear-gradient(to right,var(--color-fd-primary),var(--color-fd-primary) 1px,transparent 2px,transparent 100px), repeating-linear-gradient(to bottom,var(--color-fd-primary),var(--color-fd-primary) 2px,transparent 3px,transparent 100px)',
          }}
        />
      </div>
      <div className="absolute inset-0 z-[-1] select-none overflow-hidden opacity-30">
        <Image
          alt="spot"
          src={Spot}
          sizes="100vw"
          className="size-full min-w-[800px] max-w-fd-container"
          priority
        />
      </div>
      <h1 className="mb-4 text-4xl font-semibold md:text-5xl">
        Getting Started
      </h1>
      <p className="text-fd-muted-foreground">
        You can start with Fumadocs, or just use the core library.
      </p>
      <div className="mt-4 grid grid-cols-2 gap-4">
        <a
          href="https://github.com/fuma-nama/fumadocs"
          rel="noreferrer noopener"
          className={cn(buttonVariants({ size: 'lg' }))}
        >
          Github
        </a>
        <Link
          href="/showcase"
          className={cn(buttonVariants({ variant: 'outline', size: 'lg' }))}
        >
          Showcase
        </Link>
      </div>
      <div className="mt-16 grid grid-cols-1 gap-4 text-left md:grid-cols-2">
        <Item href="/docs/ui">
          <Icon>
            <Building2 className="size-full" />
          </Icon>
          <h2 className="mb-2 text-lg font-semibold">Fumadocs</h2>
          <p className="text-sm text-fd-muted-foreground">
            The full-powered documentation framework with an excellent UI.
          </p>
        </Item>
        <Item href="/docs/headless">
          <Icon>
            <LibraryIcon className="size-full" />
          </Icon>
          <h2 className="mb-2 text-lg font-semibold">Fumadocs Core</h2>
          <p className="text-sm text-fd-muted-foreground">
            The core library of Fumadocs.
          </p>
        </Item>
      </div>
    </main>
  );
}

function Icon({ children }: { children: React.ReactNode }): React.ReactElement {
  return (
    <div
      className="mb-2 size-9 rounded-lg border p-1.5 shadow-fd-primary/30"
      style={{
        boxShadow: 'inset 0px 8px 8px 0px var(--tw-shadow-color)',
      }}
    >
      {children}
    </div>
  );
}

function Item(
  props: LinkProps & { children: React.ReactNode },
): React.ReactElement {
  return (
    <Link
      {...props}
      className="rounded-2xl border border-transparent p-6 shadow-lg"
      style={{
        backgroundImage:
          'linear-gradient(to right bottom, var(--color-fd-background) 10%, var(--color-fd-accent), var(--color-fd-background) 60%),' +
          'linear-gradient(to right bottom, rgb(40,40,40) 10%, rgb(180,180,180), rgb(30,30,30) 60%)',
        backgroundOrigin: 'border-box',
        backgroundClip: 'padding-box, border-box',
      }}
    >
      {props.children}
    </Link>
  );
}



================================================
FILE: apps/docs/app/(home)/showcase/page.tsx
================================================
import { PlusIcon } from 'lucide-react';
import Image, { type StaticImageData } from 'next/image';
import { cn } from '@/lib/cn';
import { buttonVariants } from '@/components/ui/button';
import { createMetadata } from '@/lib/metadata';
import Expostarter from '@/public/showcases/expostarter.png';
import Sunar from '@/public/showcases/sunar.png';
import OpenPanel from '@/public/showcases/openpanel.png';
import Supastarter from '@/public/showcases/supastarter.png';
import BetterAuth from '@/public/showcases/better-auth.png';
import ArkType from '@/public/showcases/arktype.png';
import AssistantUI from '@/public/showcases/assistant-ui.png';
import VisionUI from '@/public/showcases/vision-ui.png';
import Design from './design.png';
import Link from 'fumadocs-core/link';
import MixSpace from '@/public/showcases/mix-space.png';
import TurboStarter from '@/public/showcases/turbostarter.png';

export const metadata = createMetadata({
  title: 'Showcase',
  description: 'Some cool websites using Fumadocs',
  openGraph: {
    url: 'https://fumadocs.dev/showcase',
  },
});

interface ShowcaseObject {
  image?: StaticImageData | string;
  name: string;
  url: string;
}

const showcases: ShowcaseObject[] = [
  {
    image: '/showcases/million.png',
    name: 'Million',
    url: 'https://million.dev',
  },
  {
    image: BetterAuth,
    name: 'Better Auth',
    url: 'https://better-auth.com',
  },
  {
    name: 'Zod',
    url: 'https://v4.zod.dev',
  },
  { image: '/showcases/nuqs.jpg', name: 'nuqs', url: 'https://nuqs.47ng.com' },
  {
    image: '/showcases/dokploy.png',
    name: 'Dokploy',
    url: 'https://dokploy.com',
  },
  {
    image: '/showcases/next-faq.png',
    name: 'Next.js Discord Common Questions',
    url: 'https://nextjs-faq.com',
  },
  {
    image: ArkType,
    name: 'Arktype',
    url: 'https://arktype.io',
  },
  {
    image: '/showcases/zen-browser.png',
    name: 'Zen Browser',
    url: 'https://docs.zen-browser.app',
  },
  {
    image: '/showcases/hiro.png',
    name: 'Hiro',
    url: 'https://docs.hiro.so/stacks',
  },
  {
    image: OpenPanel,
    name: 'OpenPanel',
    url: 'https://openpanel.dev',
  },
  {
    image: '/showcases/hexta-ui.png',
    name: 'HextaUI',
    url: 'https://hextaui.com',
  },
  {
    image: Sunar,
    name: 'Sunar',
    url: 'https://sunar.js.org',
  },
  {
    image: VisionUI,
    name: 'Vision UI',
    url: 'https://vision.uing.dev',
  },
  {
    image: MixSpace,
    name: 'MixSpace',
    url: 'https://mx-space.js.org',
  },
  {
    image: '/showcases/codehike.png',
    name: 'CodeHike',
    url: 'https://codehike.org',
  },
  {
    image: AssistantUI,
    name: 'assistant-ui',
    url: 'https://assistant-ui.com',
  },
  {
    image: Supastarter,
    name: 'SupaStarter',
    url: 'https://supastarter.dev',
  },
  {
    image: Expostarter,
    name: 'ExpoStarter',
    url: 'https://expostarter.com/docs',
  },
  {
    image: TurboStarter,
    name: 'TurboStarter',
    url: 'https://turbostarter.dev',
  },
  {
    image: '/showcases/fashnai.png',
    name: 'FasnAI',
    url: 'https://fashn.ai',
  },
  {
    name: 'Dirstarter',
    url: 'https://dirstarter.com',
  },
  {
    name: 'Rehooks',
    url: 'https://rehooks.pyr33x.ir',
  },
  {
    name: 'Swellchain',
    url: 'https://build.swellnetwork.io',
  },
  {
    name: 'ESLint React',
    url: 'https://eslint-react.xyz',
  },
  {
    name: 'nextjs i18n docs',
    url: 'https://nextjs.im',
  },
];

const blogs: ShowcaseObject[] = [
  {
    name: "RUNFUNRUN's Blog",
    url: 'https://runfunrun.dev',
  },
  {
    name: 'xlog.systems',
    url: 'https://www.xlog.systems',
  },
  {
    name: 'stutuer',
    url: 'https://www.stutuer.tech',
  },
];

const vercel = [
  {
    name: 'Turbo',
    url: 'https://turbo.build',
  },
  {
    name: 'Flags SDK',
    url: 'https://flags-sdk.dev',
  },
  {
    name: 'Chat SDK',
    url: 'https://chat-sdk.dev',
  },
];

export default function Showcase() {
  return (
    <main className="px-4 py-12 z-2 w-full max-w-[1400px] mx-auto [--color-fd-border:color-mix(in_oklab,var(--color-fd-primary)_30%,transparent)]">
      <div className="relative overflow-hidden border border-dashed p-6">
        <h1 className="mb-4 text-xl font-medium">
          The docs framework designed with care.
        </h1>
        <p className="text-fd-muted-foreground">
          A list of beautiful open-source projects with their docs powered by
          Fumadocs.
        </p>
        <div className="mt-6">
          <a
            href="https://github.com/fuma-nama/fumadocs/discussions/30"
            target="_blank"
            rel="noreferrer noopener"
            className={cn(
              buttonVariants({
                variant: 'outline',
              }),
            )}
          >
            <PlusIcon className="me-2 size-4" />
            Suggest Yours
          </a>
        </div>
        <span className="absolute text-xs left-6 bottom-6 text-fd-muted-foreground font-mono">
          Showcases
        </span>
        <Image
          src={Design}
          alt="preview"
          priority
          className="ml-auto w-[600px] min-w-[600px] -mt-12 -mb-18 pointer-events-none select-none"
        />
      </div>

      <div className="flex gap-4 border border-dashed p-6 mt-6">
        <svg
          aria-label="Vercel logomark"
          height="64"
          role="img"
          viewBox="0 0 74 64"
          className="size-6 mt-1"
        >
          <path
            d="M37.5896 0.25L74.5396 64.25H0.639648L37.5896 0.25Z"
            fill="currentColor"
          />
        </svg>
        <div>
          <h2 className="text-sm font-medium mb-2">
            Fumadocs powers the docs of Vercel open source SDKs.
          </h2>
          <div className="flex items-center gap-2 -mx-1.5">
            {vercel.map((item) => (
              <Link
                key={item.url}
                href={item.url}
                className={cn(
                  buttonVariants({
                    variant: 'link',
                    size: 'xs',
                  }),
                  'text-fd-muted-foreground',
                )}
              >
                {item.name}
              </Link>
            ))}
          </div>
        </div>
      </div>
      <div className="relative mt-6 grid gap-2.5 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
        {showcases.map((showcase) => (
          <ShowcaseItem key={showcase.url} {...showcase} />
        ))}
        <div className="absolute text-center bottom-0 inset-x-0 pt-4 bg-gradient-to-t from-fd-background">
          <Link
            href="https://github.com/fuma-nama/fumadocs/discussions/30"
            className={cn(
              buttonVariants({
                size: 'sm',
                variant: 'link',
              }),
            )}
          >
            See all of our showcases.
          </Link>
        </div>
      </div>
      <h2 className="text-xl font-medium mt-12 px-4">
        Fumadocs can power your blog, too.
      </h2>
      <div className="mt-6 grid gap-2.5 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
        {blogs.map((showcase) => (
          <ShowcaseItem key={showcase.url} {...showcase} />
        ))}
      </div>
    </main>
  );
}

function ShowcaseItem({ name, url, image }: ShowcaseObject) {
  if (image) {
    return (
      <a
        href={url}
        target="_blank"
        rel="noreferrer noopener"
        className="group relative aspect-[1.91/1] border border-dashed"
      >
        <Image
          alt="Preview"
          src={image}
          fill
          sizes="100vw, (min-width: 750px) 500px"
          className="object-cover transition-all group-hover:brightness-150"
        />
        <p className="absolute bottom-0 inset-x-0 z-2 bg-fd-background px-4 py-2 text-sm font-medium">
          {name}
        </p>
      </a>
    );
  }

  return (
    <a
      href={url}
      target="_blank"
      rel="noreferrer noopener"
      className="flex aspect-[1.91/1] flex-col border border-dashed p-4 transition-all hover:bg-fd-accent"
    >
      <p className="font-mono text-xs mb-2 text-fd-muted-foreground">
        {new URL(url).hostname}
      </p>
      <p className="text-xl font-medium">{name}</p>
    </a>
  );
}



================================================
FILE: apps/docs/app/(home)/sponsors/data.tsx
================================================
/**
 * Users who sponsored with their personal account as an organization
 */
export const organizationAsUserSponsors = [
  {
    url: 'https://mintlify.com',
    asUser: 'handotdev',
    label: 'Mintlify',
    github: 'mintlify',
    logo: (
      <svg
        viewBox="0 0 103 24"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        className="w-auto h-8"
      >
        <path
          d="M33.8891 18H30.7691V4H34.5891L38.4091 14.26L42.2091 4H46.0291V18H42.9091V9.36L39.6891 18H37.1091L33.8891 9.36V18ZM49.5854 6.34C49.0787 6.34 48.6454 6.16667 48.2854 5.82C47.9387 5.46 47.7654 5.02 47.7654 4.5C47.7654 3.99333 47.9387 3.56667 48.2854 3.22C48.6454 2.87333 49.0787 2.7 49.5854 2.7C50.1054 2.7 50.5387 2.87333 50.8854 3.22C51.2321 3.56667 51.4054 3.99333 51.4054 4.5C51.4054 5.02 51.2321 5.46 50.8854 5.82C50.5387 6.16667 50.1054 6.34 49.5854 6.34ZM51.1254 18H48.0454V7.4H51.1254V18ZM52.9626 18V7.4H55.4426L55.7026 8.9C55.9959 8.34 56.4492 7.88667 57.0626 7.54C57.6892 7.19333 58.3892 7.02 59.1626 7.02C60.2826 7.02 61.1759 7.38 61.8426 8.1C62.5226 8.82 62.8626 9.78667 62.8626 11V18H59.7826V11.16C59.7826 10.7067 59.6359 10.3467 59.3426 10.08C59.0492 9.81333 58.6492 9.68 58.1426 9.68C57.5426 9.68 57.0426 9.86 56.6426 10.22C56.2426 10.58 56.0426 11.0467 56.0426 11.62V18H52.9626ZM69.2688 18C68.0022 18 67.0288 17.7067 66.3488 17.12C65.6822 16.5333 65.3488 15.68 65.3488 14.56V10H63.6088V7.4H65.3488V3.78H68.4288V7.4H71.0288V10H68.4288V14.22C68.4288 14.6067 68.5288 14.9 68.7288 15.1C68.9288 15.3 69.2155 15.4 69.5888 15.4H70.8088V18H69.2688ZM75.3891 18H72.3091V3H75.3891V18ZM78.7854 6.34C78.2787 6.34 77.8454 6.16667 77.4854 5.82C77.1387 5.46 76.9654 5.02 76.9654 4.5C76.9654 3.99333 77.1387 3.56667 77.4854 3.22C77.8454 2.87333 78.2787 2.7 78.7854 2.7C79.3054 2.7 79.7387 2.87333 80.0854 3.22C80.4321 3.56667 80.6054 3.99333 80.6054 4.5C80.6054 5.02 80.4321 5.46 80.0854 5.82C79.7387 6.16667 79.3054 6.34 78.7854 6.34ZM80.3254 18H77.2454V7.4H80.3254V18ZM83.3426 18V10H81.6026V7.4H83.3426V6.24C83.3426 5.18667 83.6626 4.38667 84.3026 3.84C84.9426 3.28 85.8692 3 87.0826 3H89.3426V5.6H87.4026C86.7492 5.6 86.4226 5.92667 86.4226 6.58V7.4H89.1426V10H86.4226V18H83.3426ZM90.4591 22V19.4H92.5991C93.3191 19.4 93.7725 19.1467 93.9591 18.64L94.1991 18H93.7391L89.5391 7.4H92.8391L95.4791 14.54L98.1191 7.4H101.319L96.8391 19.42C96.5191 20.2867 96.0191 20.9333 95.3391 21.36C94.6591 21.7867 93.7458 22 92.5991 22H90.4591Z"
          fill="currentColor"
        />
        <g clipPath="url(#clip0_115_7772)">
          <path
            d="M5.53338 7.66241C5.54806 5.66259 6.34114 3.74714 7.74443 2.32227H7.74185L2.32412 7.73999H2.32671C2.30654 7.75586 2.28753 7.77314 2.26981 7.79171C0.95223 9.10757 0.153396 10.8545 0.0199146 12.7118C-0.113567 14.5691 0.42726 16.4123 1.54314 17.9031L7.01517 12.431L7.07206 12.3767C6.05218 11.0186 5.51109 9.36073 5.53338 7.66241Z"
            fill="#0C8C5E"
          />
          <path
            d="M18.6882 13.2688C17.6513 14.285 16.3497 14.9894 14.9318 15.3017C13.514 15.614 12.0369 15.5216 10.669 15.0351C9.93963 14.7761 9.25417 14.4073 8.63634 13.9412L8.57945 13.9981L3.10742 19.4675C4.59878 20.5806 6.44095 21.1197 8.29711 20.9863C10.1533 20.8529 11.8994 20.0558 13.2162 18.7408L13.2705 18.6865L18.6882 13.2688Z"
            fill="#0C8C5E"
          />
          <path
            d="M21.0104 7.73998V3.87298e-06H13.2704C12.2539 -0.00101453 11.2472 0.198818 10.3081 0.588023C9.36903 0.977229 8.51612 1.54814 7.79835 2.26795L7.74404 2.32226C6.79795 3.28273 6.12105 4.47511 5.78125 5.77977C6.39637 5.62048 7.02851 5.53626 7.66388 5.52893C9.36226 5.50894 11.0196 6.05079 12.3782 7.0702C13.5992 7.98076 14.5233 9.23241 15.0341 10.6674C15.5546 12.134 15.623 13.7231 15.2306 15.2291C16.5355 14.8899 17.728 14.2129 18.6881 13.2663L18.7424 13.2146C19.4625 12.4965 20.0336 11.6432 20.4228 10.7037C20.812 9.76414 21.0117 8.75694 21.0104 7.73998Z"
            fill="#18E299"
          />
        </g>
        <defs>
          <clipPath id="clip0_115_7772">
            <rect width="21" height="21" fill="white" />
          </clipPath>
        </defs>
      </svg>
    ),
  },
  {
    url: 'https://github.com/scalar/scalar',
    label: 'Scalar',
    github: 'scalar',
    asUser: 'marclave',
    logo: (
      <>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 593 593"
          className="size-9.5"
        >
          <path
            fill="currentColor"
            fillRule="evenodd"
            d="M347 0c6 0 12 5 12 12v134l94-95c5-5 13-5 17 0l72 72c4 4 5 12 0 16v1l-95 94h134c7 0 12 5 12 12v101c0 7-5 12-12 12H447l95 94c4 5 5 13 0 17l-72 72c-4 4-12 5-16 0h-1l-94-95v134c0 7-5 12-12 12H246c-7 0-12-5-12-12v-70c0-22 9-43 24-59l130-130c14-14 14-37 0-51L259 142a84 84 0 0 1-25-59V12c0-7 5-12 12-12zM138 52h1l219 219c14 14 14 37 0 51L139 542c-4 5-12 5-17 0l-71-70c-4-5-5-12 0-17l95-96H12c-7 0-12-5-12-12V246c0-7 5-12 12-12h134l-95-94c-4-5-4-12 0-17l71-71c4-5 12-5 16 0"
          />
        </svg>
        Scalar
      </>
    ),
  },
  {
    url: 'https://launchfa.st',
    label: 'launchfast',
    github: 'launchfast',
    asUser: 'rishi-raj-jain',
    logo: (
      <>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          className="size-9.5 rounded-full border border-fd-foreground"
          viewBox="0 0 784 784"
        >
          <path
            fill="currentColor"
            mask="url(#launchfast_window)"
            d="M598 186c8.54 10.037 7.44 22.11 6.465 34.497-.24 2.837-.49 5.674-.742 8.51l-.397 4.607c-.346 4.021-.697 8.042-1.05 12.063-.56 6.41-1.116 12.822-1.668 19.233a5334.62 5334.62 0 0 0-.944 10.817l-.176 2.046a362.84 362.84 0 0 0-.75 10.902l-.124 2.334a569.933 569.933 0 0 0-.21 4.423c-.214 4.29-.806 7.778-2.603 11.662-.994 2.365-1.454 4.71-1.989 7.219-1.386 5.796-3.5 11.149-5.812 16.625l-1.044 2.475c-1.747 4.055-3.619 7.83-5.956 11.587-.696 2.191-.696 2.191-1 4h-2l-.715 2.582c-1.437 3.822-3.44 6.853-5.847 10.106l-1.337 1.835c-7.368 10.027-15.5 18.94-24.376 27.64a5694.76 5694.76 0 0 0-18.439 18.188c-3.706 3.67-7.42 7.333-11.147 10.982a1878.074 1878.074 0 0 0-10.793 10.657 633.457 633.457 0 0 1-4.122 4.046 567.68 567.68 0 0 0-5.725 5.67l-1.744 1.668c-1.777 1.731-1.777 1.731-3.755 4.626-.05 3.175-.05 3.175 1 6l.938 3.254c.35 1.092.7 2.184 1.062 3.308 4.092 12.772 3.947 25.655 1.688 38.813l-.357 2.142c-.745 3.913-1.764 6.456-4.331 9.483-.714 2.65-.714 2.65-1 5h-2l-.563 2.438c-1.979 4.905-5.088 8.512-8.437 12.562l-1.5 1.91c-1.116 1.405-2.302 2.755-3.5 4.09h-2v2c-1.8 1.594-1.8 1.594-4.313 3.5A172.533 172.533 0 0 0 455.5 551c-4.207 3.876-8.543 7.476-13.04 11.008-2.548 2.063-4.974 4.22-7.397 6.43A290.988 290.988 0 0 1 419 582l-2.344 1.898c-4.786 3.59-8.404 4.914-14.43 4.485-3.123-.537-4.868-1.233-7.226-3.383-3.406-5.002-5.503-10.483-7.773-16.074-1.287-3.07-2.74-6-4.275-8.95C382 558 382 558 380.742 554.41c-1.931-5.226-4.692-9.921-7.492-14.722l-1.621-2.803c-6.761-12.23-6.761-12.23-15.629-22.885l-1.206 1.253c-1.819 1.882-3.65 3.752-5.481 5.622l-1.897 1.973c-4.408 4.477-7.49 6.89-13.916 7.465-5.833-.521-9.095-3.66-13.082-7.735l-2.576-2.61-2.654-2.718c-5.343-5.45-10.652-10.828-16.503-15.737-1.738-1.56-3.205-3.21-4.685-5.013-2.712-3.293-5.74-5.981-8.984-8.742-3.167-2.761-6.077-5.76-9.016-8.758a1037.58 1037.58 0 0 0-8.883-8.813L262.875 466l-2.168-2.117c-9.094-9.01-9.094-9.01-9.332-15.695.169-5.182 1.954-7.632 5.535-11.235L259 435a1202.76 1202.76 0 0 0 4.438-4.375l2.058-1.96c1.728-1.538 1.728-1.538 1.504-3.665-1.805-1.454-1.805-1.454-4.18-2.906l-2.728-1.74-2.967-1.854-3.026-1.9c-12.059-7.516-23.892-14.714-37.316-19.487-18.847-6.718-18.847-6.718-22.658-12.488-1.59-5.125-2.662-9.655-.09-14.625 1.541-2.13 3.195-4.056 4.965-6l2.086-2.336a866.255 866.255 0 0 1 4.574-5.047c2.276-2.546 4.443-5.15 6.59-7.805 7.3-9.01 14.93-17.75 22.75-26.312 2.398-2.633 4.583-5.228 6.563-8.188 5.777-8.345 15.06-13.848 23.437-19.312l2.016-1.32c17.078-9.77 39.649-8.248 57.984-3.68l3.137 1.164c3.37.984 4.55.977 7.863-.164 2.424-1.87 4.506-4.043 6.632-6.241l1.959-1.977a972.937 972.937 0 0 0 4.197-4.269c2.221-2.273 4.456-4.533 6.694-6.79a6180.08 6180.08 0 0 0 16.656-16.903 4766.2 4766.2 0 0 1 14.043-14.225c2.176-2.201 4.339-4.414 6.501-6.628 42.327-42.95 88.855-50.246 146.518-54.88 2.264-.181 4.527-.364 6.791-.55C585.59 175.325 585.59 175.325 598 186Z"
          />
          <path
            fill="currentColor"
            d="M264.313 503.563c5.121.607 8.929 2.92 12.687 6.437 1.961 5.23 1.59 10.435-.338 15.553-3.284 6.238-8.6 10.938-13.56 15.842-1.08 1.079-2.158 2.159-3.236 3.24-2.251 2.252-4.51 4.498-6.773 6.739a1708.123 1708.123 0 0 0-8.641 8.628c-2.222 2.228-4.45 4.45-6.682 6.668-1.063 1.059-2.124 2.12-3.183 3.183a758.37 758.37 0 0 1-4.471 4.435l-2.561 2.545c-4.848 4.112-9.126 5.743-15.375 5.522-4.382-.714-7.145-3.177-9.993-6.418-1.867-3.046-2.384-5.742-2.5-9.25l-.113-2.238c.981-5.644 5.575-9.857 9.467-13.796l1.48-1.505c1.6-1.624 3.206-3.24 4.815-4.855l3.37-3.397c2.348-2.365 4.7-4.725 7.056-7.083 3.013-3.02 6.01-6.054 9.004-9.093 2.311-2.341 4.634-4.67 6.96-6.997a628.716 628.716 0 0 0 3.317-3.356 520.1 520.1 0 0 1 4.658-4.667l2.668-2.684c3.83-2.935 7.295-2.84 11.944-3.454Z"
          />
          <path
            fill="currentColor"
            d="M233.375 467.125c3.494 2.478 5.295 4.72 6.625 8.875.734 5.765-.781 9.346-4 14-2.25 2.662-4.675 5.12-7.145 7.578l-2.084 2.1c-1.45 1.457-2.903 2.909-4.36 4.357a1034.46 1034.46 0 0 0-6.616 6.668 3703.998 3703.998 0 0 1-4.252 4.25l-1.974 2.008c-5.108 5.031-10.158 8.373-17.569 8.726-3.24-.074-4.603-.37-7.16-2.41-3.744-4.236-5.988-7.316-6.153-13.027l-.113-2.547c1.057-6.71 7.04-11.623 11.64-16.219l2.1-2.112c1.46-1.465 2.92-2.927 4.385-4.387 2.237-2.233 4.46-4.48 6.682-6.727l4.271-4.274 2.005-2.032c6.829-6.761 14.751-9.963 23.718-4.827ZM303.758 541.445c5.337 1.32 9.073 3.911 12.242 8.367 1.871 5.965 1.74 10.17-1 15.688a128.013 128.013 0 0 1-2 3.5h-2v2c-2.375 2.625-2.375 2.625-5 5h-2v2h-2v2c-1.715 1.656-1.715 1.656-3.938 3.5-2.982 2.39-2.982 2.39-5.062 5.5h-2l-.813 1.938C289 593 289 593 286 594v2c-1.645 1.473-1.645 1.473-3.813 3.063l-2.144 1.597c-3.967 2.602-7.401 2.655-12.043 2.34-4.535-1.542-7.49-3.801-10.07-7.781-1.964-4.687-1.955-9.293-.93-14.219 1.84-3.271 4.18-5.55 7-8l1.93-1.691c1.316-1.14 2.64-2.27 3.968-3.395 2.383-2.17 4.475-4.495 6.602-6.914 3.308-3.75 6.692-7.135 10.54-10.328 2.012-1.668 2.012-1.668 3.92-3.656 4.065-4.017 6.948-6.077 12.798-5.57Z"
          />

          <defs>
            <mask id="launchfast_window">
              <rect x="0" y="0" width="784" height="784" fill="white" />
              <circle fill="black" cx="459" cy="323" r="43.84" />
            </mask>
          </defs>
        </svg>
        LaunchFast
      </>
    ),
  },
];



================================================
FILE: apps/docs/app/(home)/sponsors/page.tsx
================================================
import { Fragment } from 'react';
import Image from 'next/image';
import { buttonVariants } from '@/components/ui/button';
import { cn } from '@/lib/cn';
import { getSponsors } from '@/lib/get-sponsors';
import { owner } from '@/lib/github';
import { organizationAsUserSponsors } from '@/app/(home)/sponsors/data';

const tiers = [
  {
    name: 'Platinum Sponsor',
    min: 1000,
    color: 'text-purple-600 dark:text-purple-400',
  },
  {
    name: 'Golden Sponsor',
    min: 225,
    color: 'text-yellow-600 dark:text-yellow-400',
  },
  {
    name: 'Sliver Sponsor',
    min: 128,
    color: 'text-fd-muted-foreground',
  },
];

export default async function Page() {
  const result = await getSponsors(owner);

  const sponsors = result.map((v) => {
    const entity = organizationAsUserSponsors.find(
      (entity) => entity.asUser === v.login,
    );
    if (entity) {
      return {
        login: entity.github,
        name: entity.label,
        websiteUrl: entity.url,
        logo: entity.logo,
        __typename: 'Organization',
        tier: v.tier,
        avatarUrl: undefined,
      };
    }

    return {
      logo: undefined,
      ...v,
    };
  });

  return (
    <main className="container flex flex-col items-center py-16 text-center z-2">
      <Image
        src="/circuit_2.svg"
        alt="circuit"
        width="1231"
        height="536"
        className="absolute top-16 z-[-1] w-full max-w-[1200px] opacity-0 dark:opacity-20"
      />
      <h1 className="text-4xl font-semibold">Support Fumadocs</h1>
      <p className="mt-4 text-sm">
        Your sponsorship means a lot to open-source projects, including
        Fumadocs.
      </p>
      <a
        href="https://github.com/sponsors/fuma-nama"
        rel="noreferrer noopener"
        target="_blank"
        className={cn(
          buttonVariants({
            className: 'rounded-full mt-6',
          }),
        )}
      >
        Sponsor
      </a>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 600 200"
        className="max-w-[600px]"
      >
        <defs>
          <linearGradient
            id="circuit-1-fill"
            x1="0"
            y1="0"
            x2="0.939104"
            y2="0.786487"
          >
            <stop offset="0%" stopColor="rgb(50,50,60)" />
            <stop offset="100%" stopColor="rgb(30,30,38)" />
          </linearGradient>
          <linearGradient id="circuit-1-energy" x2="0" y2="1">
            <stop offset="0%" stopColor="transparent" />
            <stop offset="60%" stopColor="rgb(200,100,255)" />
          </linearGradient>
          <linearGradient id="circuit-1-x-line" x1="0" y1="0" y2="0" x2="1">
            <stop offset="40%" stopColor="rgb(50,50,60)" />
            <stop offset="100%" stopColor="transparent" />
          </linearGradient>
          <linearGradient id="circuit-1-x-energy" x1="0" y1="0" y2="0" x2="1">
            <stop offset="0%" stopColor="transparent" />
            <stop offset="60%" stopColor="rgba(140,180,255)" />
          </linearGradient>
        </defs>
        <line
          x1="300"
          y1="0"
          x2="300"
          y2="99"
          fill="none"
          stroke="rgb(50,50,60)"
          strokeWidth="2"
          strokeLinecap="square"
        />
        <rect
          x="299"
          y="0"
          width="2"
          height="20"
          fill="url(#circuit-1-energy)"
          style={{
            animation: 'circuit_1 infinite linear 3s',
          }}
        />
        <rect
          width="120"
          height="85"
          rx="6"
          ry="6"
          x="240"
          y="99"
          fill="url(#circuit-1-fill)"
          stroke="#3f4c59"
          strokeWidth="0.5"
        />
        {new Array(3).fill(null).map((_, i) => (
          <Fragment key={i}>
            <rect
              x="368"
              y={120 + i * 20 + 5 / 4}
              width="232"
              height="2"
              fill="url(#circuit-1-x-line)"
            />
            <rect
              x="368"
              y={120 + i * 20 + 5 / 4}
              width="20"
              height="2"
              fill="url(#circuit-1-x-energy)"
              style={{
                opacity: 0,
                animation: 'circuit_1_x_energy infinite linear 6s',
                animationDelay: `${(Math.pow(2, i) * 360).toString()}ms`,
              }}
            />
            <rect
              x="360"
              y={120 + i * 20}
              width="8"
              height="5"
              fill="rgb(100,100,120)"
            />
          </Fragment>
        ))}

        <circle
          r="4"
          cx="348"
          cy="114"
          fill="rgb(255,140,255)"
          style={{
            filter: 'drop-shadow(2px 0px 8px rgb(255, 100, 255))',
          }}
        />
        <text
          dx="256"
          dy="147.793041"
          fontSize="18"
          fontWeight="400"
          fill="rgba(70,70,86,0.9)"
        >
          Fumadocs
        </text>
      </svg>
      <h2 className="mt-12 font-mono text-xs mb-7">Organization Sponsors</h2>
      <div className="grid grid-cols-2 gap-4 md:grid-cols-3 lg:grid-cols-4">
        {sponsors
          .filter((sponsor) => sponsor.__typename === 'Organization')
          .map((sponsor) => {
            const tier = tiers.find(
              (tier) => sponsor.tier.monthlyPriceInDollars >= tier.min,
            );

            return (
              <a
                key={sponsor.name}
                href={getSponsorHref(sponsor.login, sponsor.websiteUrl)}
                rel="noreferrer noopener"
                target="_blank"
                className="flex flex-col items-center"
              >
                <div className="inline-flex h-14 items-center gap-2.5 font-medium text-xl">
                  {sponsor.logo ?? (
                    <>
                      <Image
                        alt="avatar"
                        src={sponsor.avatarUrl}
                        unoptimized
                        width="38"
                        height="38"
                        className="rounded-lg"
                      />
                      <p>{sponsor.name}</p>
                    </>
                  )}
                </div>
                {tier && (
                  <p className={cn('text-xs', tier.color)}>{tier.name}</p>
                )}
              </a>
            );
          })}
      </div>
      <h2 className="mt-12 font-mono text-xs mb-7">Hosting Sponsor</h2>
      <a href="https://vercel.com" rel="noreferrer noopener">
        <svg
          aria-label="Vercel logotype"
          role="img"
          viewBox="0 0 283 64"
          className="w-32"
        >
          <path
            d="M141.68 16.25c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zm117.14-14.5c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zm-39.03 3.5c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.07 0-10 4-10 10zm82.48-29v46h-9v-46h9zM37.59.25l36.95 64H.64l36.95-64zm92.38 5l-27.71 48-27.71-48h10.39l17.32 30 17.32-30h10.39zm58.91 12v9.69c-1-.29-2.06-.49-3.2-.49-5.81 0-10 4-10 10v14.8h-9v-34h9v9.2c0-5.08 5.91-9.2 13.2-9.2z"
            fill="currentColor"
          ></path>
        </svg>
      </a>
      <h2 className="mt-12 font-mono text-xs">Individual Sponsors</h2>
      <div className="mt-4 grid grid-cols-2 gap-4 md:grid-cols-3 lg:grid-cols-4">
        {sponsors
          .filter((sponsor) => sponsor.__typename === 'User')
          .map((sponsor) => (
            <a
              key={sponsor.name}
              href={getSponsorHref(sponsor.login, sponsor.websiteUrl)}
              rel="noreferrer noopener"
              target="_blank"
              className="inline-flex items-center gap-2 rounded-xl p-3 text-xs transition-colors hover:bg-fd-primary/10"
            >
              <Image
                alt="avatar"
                src={sponsor.avatarUrl!}
                unoptimized
                width="30"
                height="30"
                className="rounded-lg"
              />
              {sponsor.name}
            </a>
          ))}
      </div>
    </main>
  );
}

function getSponsorHref(login: string, url?: string): string {
  if (url) return url.startsWith('http') ? url : `https://${url}`;

  return `https://github.com/${login}`;
}



================================================
FILE: apps/docs/app/api/chat/route.ts
================================================
import { ProvideLinksToolSchema } from '@/lib/chat/inkeep-qa-schema';
import { createOpenAI } from '@ai-sdk/openai';
import { streamText } from 'ai';

export const runtime = 'edge';

const openai = createOpenAI({
  apiKey: process.env.INKEEP_API_KEY,
  baseURL: 'https://api.inkeep.com/v1',
});

export async function POST(req: Request) {
  const reqJson = await req.json();

  const result = streamText({
    model: openai('inkeep-qa-sonnet-3-5'),
    tools: {
      provideLinks: {
        parameters: ProvideLinksToolSchema,
      },
    },
    messages: reqJson.messages.map((message: Record<string, unknown>) => ({
      role: message.role,
      content: message.content,
      name: 'inkeep-qa-user-message',
      id: message.id,
    })),
    toolChoice: 'auto',
  });

  return result.toDataStreamResponse();
}



================================================
FILE: apps/docs/app/api/proxy/route.ts
================================================
import { openapi } from '@/lib/source';

export const { GET, HEAD, PUT, POST, PATCH, DELETE } = openapi.createProxy();



================================================
FILE: apps/docs/app/docs/layout.tsx
================================================
import { DocsLayout } from 'fumadocs-ui/layouts/docs';
import type { ReactNode } from 'react';
import { baseOptions, linkItems, logo } from '@/app/layout.config';
import { source } from '@/lib/source';
import { LargeSearchToggle } from 'fumadocs-ui/components/layout/search-toggle';
import { Sparkles } from 'lucide-react';
import { AISearchTrigger } from '@/components/ai';
import { cn } from '@/lib/cn';
import { buttonVariants } from '@/components/ui/button';
import 'katex/dist/katex.min.css';

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <DocsLayout
      {...baseOptions}
      tree={source.pageTree}
      // just icon items
      links={linkItems.filter((item) => item.type === 'icon')}
      searchToggle={{
        components: {
          lg: (
            <div className="flex gap-1.5 max-md:hidden">
              <LargeSearchToggle className="flex-1" />
              <AISearchTrigger
                aria-label="Ask AI"
                className={cn(
                  buttonVariants({
                    variant: 'outline',
                    size: 'icon',
                    className: 'text-fd-muted-foreground',
                  }),
                )}
              >
                <Sparkles className="size-4" />
              </AISearchTrigger>
            </div>
          ),
        },
      }}
      nav={{
        ...baseOptions.nav,
        title: (
          <>
            {logo}
            <span className="font-medium [.uwu_&]:hidden max-md:hidden">
              Fumadocs
            </span>
          </>
        ),
        children: (
          <AISearchTrigger
            className={cn(
              buttonVariants({
                variant: 'secondary',
                size: 'sm',
                className:
                  'absolute left-1/2 top-1/2 -translate-1/2 text-fd-muted-foreground rounded-full gap-2 md:hidden',
              }),
            )}
          >
            <Sparkles className="size-4.5 fill-current" />
            Ask AI
          </AISearchTrigger>
        ),
      }}
      sidebar={{
        tabs: {
          transform(option, node) {
            const meta = source.getNodeMeta(node);
            if (!meta || !node.icon) return option;

            const color = `var(--${meta.path.split('/')[0]}-color, var(--color-fd-foreground))`;

            return {
              ...option,
              icon: (
                <div
                  className="[&_svg]:size-full rounded-lg size-full text-(--tab-color) max-md:bg-(--tab-color)/10 max-md:border max-md:p-1.5"
                  style={
                    {
                      '--tab-color': color,
                    } as object
                  }
                >
                  {node.icon}
                </div>
              ),
            };
          },
        },
      }}
    >
      {children}
    </DocsLayout>
  );
}



================================================
FILE: apps/docs/app/docs/[...slug]/page.client.tsx
================================================
'use client';
import { useState } from 'react';
import {
  Check,
  ChevronDown,
  Copy,
  ExternalLinkIcon,
  MessageCircleIcon,
} from 'lucide-react';
import { cn } from '@/lib/cn';
import { useCopyButton } from 'fumadocs-ui/utils/use-copy-button';
import { buttonVariants } from '@/components/ui/button';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from 'fumadocs-ui/components/ui/popover';
import { cva } from 'class-variance-authority';

const cache = new Map<string, string>();

export function LLMCopyButton({ slug }: { slug: string[] }) {
  const [isLoading, setLoading] = useState(false);
  const [checked, onClick] = useCopyButton(async () => {
    setLoading(true);

    const url = `/llms.mdx/${slug.join('/')}`;
    try {
      const cached = cache.get(url);

      if (cached) {
        await navigator.clipboard.writeText(cached);
      } else {
        await navigator.clipboard.write([
          new ClipboardItem({
            'text/plain': fetch(url).then(async (res) => {
              const content = await res.text();
              cache.set(url, content);

              return content;
            }),
          }),
        ]);
      }
    } finally {
      setLoading(false);
    }
  });

  return (
    <button
      disabled={isLoading}
      className={cn(
        buttonVariants({
          variant: 'secondary',
          size: 'xs',
          className: 'gap-2 [&_svg]:size-3.5 [&_svg]:text-fd-muted-foreground',
        }),
      )}
      onClick={onClick}
    >
      {checked ? <Check /> : <Copy />}
      Copy Markdown
    </button>
  );
}

const optionVariants = cva(
  'text-sm p-2 rounded-lg inline-flex items-center gap-2 hover:text-fd-accent-foreground hover:bg-fd-accent [&_svg]:size-4',
);

export function ViewOptions(props: { markdownUrl: string; githubUrl: string }) {
  const markdownUrl = new URL(props.markdownUrl, 'https://fumadocs.dev');
  const q = `Read ${markdownUrl}, I want to ask questions about it.`;

  const claude = `https://claude.ai/new?${new URLSearchParams({
    q,
  })}`;
  const gpt = `https://chatgpt.com/?${new URLSearchParams({
    hints: 'search',
    q,
  })}`;
  const t3 = `https://t3.chat/new?${new URLSearchParams({
    q,
  })}`;

  return (
    <Popover>
      <PopoverTrigger
        className={cn(
          buttonVariants({
            variant: 'secondary',
            size: 'xs',
            className: 'gap-2',
          }),
        )}
      >
        Open
        <ChevronDown className="size-3.5 text-fd-muted-foreground" />
      </PopoverTrigger>
      <PopoverContent className="flex flex-col overflow-auto">
        {[
          {
            title: 'Open in GitHub',
            href: props.githubUrl,
            icon: (
              <svg fill="currentColor" role="img" viewBox="0 0 24 24">
                <title>GitHub</title>
                <path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12" />
              </svg>
            ),
          },
          {
            title: 'Open in ChatGPT',
            href: gpt,
            icon: (
              <svg
                role="img"
                viewBox="0 0 24 24"
                fill="currentColor"
                xmlns="http://www.w3.org/2000/svg"
              >
                <title>OpenAI</title>
                <path d="M22.2819 9.8211a5.9847 5.9847 0 0 0-.5157-4.9108 6.0462 6.0462 0 0 0-6.5098-2.9A6.0651 6.0651 0 0 0 4.9807 4.1818a5.9847 5.9847 0 0 0-3.9977 2.9 6.0462 6.0462 0 0 0 .7427 7.0966 5.98 5.98 0 0 0 .511 4.9107 6.051 6.051 0 0 0 6.5146 2.9001A5.9847 5.9847 0 0 0 13.2599 24a6.0557 6.0557 0 0 0 5.7718-4.2058 5.9894 5.9894 0 0 0 3.9977-2.9001 6.0557 6.0557 0 0 0-.7475-7.0729zm-9.022 12.6081a4.4755 4.4755 0 0 1-2.8764-1.0408l.1419-.0804 4.7783-2.7582a.7948.7948 0 0 0 .3927-.6813v-6.7369l2.02 1.1686a.071.071 0 0 1 .038.052v5.5826a4.504 4.504 0 0 1-4.4945 4.4944zm-9.6607-4.1254a4.4708 4.4708 0 0 1-.5346-3.0137l.142.0852 4.783 2.7582a.7712.7712 0 0 0 .7806 0l5.8428-3.3685v2.3324a.0804.0804 0 0 1-.0332.0615L9.74 19.9502a4.4992 4.4992 0 0 1-6.1408-1.6464zM2.3408 7.8956a4.485 4.485 0 0 1 2.3655-1.9728V11.6a.7664.7664 0 0 0 .3879.6765l5.8144 3.3543-2.0201 1.1685a.0757.0757 0 0 1-.071 0l-4.8303-2.7865A4.504 4.504 0 0 1 2.3408 7.872zm16.5963 3.8558L13.1038 8.364 15.1192 7.2a.0757.0757 0 0 1 .071 0l4.8303 2.7913a4.4944 4.4944 0 0 1-.6765 8.1042v-5.6772a.79.79 0 0 0-.407-.667zm2.0107-3.0231l-.142-.0852-4.7735-2.7818a.7759.7759 0 0 0-.7854 0L9.409 9.2297V6.8974a.0662.0662 0 0 1 .0284-.0615l4.8303-2.7866a4.4992 4.4992 0 0 1 6.6802 4.66zM8.3065 12.863l-2.02-1.1638a.0804.0804 0 0 1-.038-.0567V6.0742a4.4992 4.4992 0 0 1 7.3757-3.4537l-.142.0805L8.704 5.459a.7948.7948 0 0 0-.3927.6813zm1.0976-2.3654l2.602-1.4998 2.6069 1.4998v2.9994l-2.5974 1.4997-2.6067-1.4997Z" />
              </svg>
            ),
          },
          {
            title: 'Open in Claude',
            href: claude,
            icon: (
              <svg
                fill="currentColor"
                role="img"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <title>Anthropic</title>
                <path d="M17.3041 3.541h-3.6718l6.696 16.918H24Zm-10.6082 0L0 20.459h3.7442l1.3693-3.5527h7.0052l1.3693 3.5528h3.7442L10.5363 3.5409Zm-.3712 10.2232 2.2914-5.9456 2.2914 5.9456Z" />
              </svg>
            ),
          },
          {
            title: 'Open in T3 Chat',
            href: t3,
            icon: <MessageCircleIcon />,
          },
        ].map((item) => (
          <a
            key={item.href}
            href={item.href}
            rel="noreferrer noopener"
            target="_blank"
            className={cn(optionVariants())}
          >
            {item.icon}
            {item.title}
            <ExternalLinkIcon className="text-fd-muted-foreground size-3.5 ms-auto" />
          </a>
        ))}
      </PopoverContent>
    </Popover>
  );
}



================================================
FILE: apps/docs/app/docs/[...slug]/page.tsx
================================================
import type { Metadata } from 'next';
import {
  PageArticle,
  PageBreadcrumb,
  PageFooter,
  PageLastUpdate,
  PageRoot,
  PageTOC,
  PageTOCItems,
  PageTOCPopover,
  PageTOCPopoverContent,
  PageTOCPopoverItems,
  PageTOCPopoverTrigger,
  PageTOCTitle,
} from 'fumadocs-ui/layouts/docs/page';
import { notFound } from 'next/navigation';
import {
  type ComponentProps,
  type FC,
  type ReactElement,
  type ReactNode,
} from 'react';
import * as Twoslash from 'fumadocs-twoslash/ui';
import { Callout } from 'fumadocs-ui/components/callout';
import { TypeTable } from 'fumadocs-ui/components/type-table';
import * as Preview from '@/components/preview';
import { createMetadata } from '@/lib/metadata';
import { openapi, source } from '@/lib/source';
import { Wrapper } from '@/components/preview/wrapper';
import { Mermaid } from '@/components/mdx/mermaid';
import { Rate } from '@/components/rate';
import { onRateAction, owner, repo } from '@/lib/github';
import {
  HoverCard,
  HoverCardContent,
  HoverCardTrigger,
} from '@/components/ui/hover-card';
import Link from 'fumadocs-core/link';
import { UiOverview } from '@/components/ui-overview';
import { AutoTypeTable } from 'fumadocs-typescript/ui';
import { createGenerator } from 'fumadocs-typescript';
import { getPageTreePeers } from 'fumadocs-core/server';
import { Card, Cards } from 'fumadocs-ui/components/card';
import { getMDXComponents } from '@/mdx-components';
import { APIPage } from 'fumadocs-openapi/ui';
import { LLMCopyButton, ViewOptions } from './page.client';
import * as path from 'node:path';
import { Banner } from 'fumadocs-ui/components/banner';

function PreviewRenderer({ preview }: { preview: string }): ReactNode {
  if (preview && preview in Preview) {
    const Comp = Preview[preview as keyof typeof Preview];
    return <Comp />;
  }

  return null;
}

const generator = createGenerator();

export const revalidate = false;

export default async function Page(props: {
  params: Promise<{ slug: string[] }>;
}): Promise<ReactElement> {
  const params = await props.params;
  const page = source.getPage(params.slug);

  if (!page) notFound();

  const preview = page.data.preview;
  const { body: Mdx, toc, lastModified } = await page.data.load();

  return (
    <PageRoot
      toc={{
        toc,
        single: false,
      }}
    >
      {toc.length > 0 && (
        <PageTOCPopover>
          <PageTOCPopoverTrigger />
          <PageTOCPopoverContent>
            <PageTOCPopoverItems />
          </PageTOCPopoverContent>
        </PageTOCPopover>
      )}
      <PageArticle>
        <PageBreadcrumb />
        <h1 className="text-3xl font-semibold">{page.data.title}</h1>
        <p className="text-lg text-fd-muted-foreground">
          {page.data.description}
        </p>
        <div className="flex flex-row gap-2 items-center border-b pt-2 pb-6">
          <LLMCopyButton slug={params.slug} />
          <ViewOptions
            markdownUrl={`${page.url}.mdx`}
            githubUrl={`https://github.com/${owner}/${repo}/blob/dev/apps/docs/content/docs/${page.path}`}
          />
        </div>
        <div className="prose flex-1 text-fd-foreground/80">
          {preview ? <PreviewRenderer preview={preview} /> : null}
          <Mdx
            components={getMDXComponents({
              ...Twoslash,
              a: ({ href, ...props }) => {
                const found = source.getPageByHref(href ?? '', {
                  dir: path.dirname(page.path),
                });

                if (!found) return <Link href={href} {...props} />;

                return (
                  <HoverCard>
                    <HoverCardTrigger asChild>
                      <Link
                        href={
                          found.hash
                            ? `${found.page.url}#${found.hash}`
                            : found.page.url
                        }
                        {...props}
                      />
                    </HoverCardTrigger>
                    <HoverCardContent className="text-sm">
                      <p className="font-medium">{found.page.data.title}</p>
                      <p className="text-fd-muted-foreground">
                        {found.page.data.description}
                      </p>
                    </HoverCardContent>
                  </HoverCard>
                );
              },
              Banner,
              Mermaid,
              TypeTable,
              AutoTypeTable: (props) => (
                <AutoTypeTable generator={generator} {...props} />
              ),
              Wrapper,
              blockquote: Callout as unknown as FC<
                ComponentProps<'blockquote'>
              >,
              APIPage: (props) => (
                <APIPage {...openapi.getAPIPageProps(props)} />
              ),
              DocsCategory: ({ url }) => {
                return <DocsCategory url={url ?? page.url} />;
              },
              UiOverview,

              ...(await import('@/content/docs/ui/components/tabs.client')),
              ...(await import('@/content/docs/ui/theme.client')),
            })}
          />
          {page.data.index ? <DocsCategory url={page.url} /> : null}
        </div>
        <Rate onRateAction={onRateAction} />
        {lastModified && <PageLastUpdate date={lastModified} />}
        <PageFooter />
      </PageArticle>
      {toc.length > 0 && (
        <PageTOC>
          <PageTOCTitle />
          <PageTOCItems variant="clerk" />
        </PageTOC>
      )}
    </PageRoot>
  );
}

function DocsCategory({ url }: { url: string }) {
  return (
    <Cards>
      {getPageTreePeers(source.pageTree, url).map((peer) => (
        <Card key={peer.url} title={peer.name} href={peer.url}>
          {peer.description}
        </Card>
      ))}
    </Cards>
  );
}

export async function generateMetadata(props: {
  params: Promise<{ slug: string[] }>;
}): Promise<Metadata> {
  const { slug = [] } = await props.params;
  const page = source.getPage(slug);
  if (!page) notFound();

  const description =
    page.data.description ?? 'The library for building documentation sites';

  const image = {
    url: ['/og', ...slug, 'image.png'].join('/'),
    width: 1200,
    height: 630,
  };

  return createMetadata({
    title: page.data.title,
    description,
    openGraph: {
      url: `/docs/${page.slugs.join('/')}`,
      images: [image],
    },
    twitter: {
      images: [image],
    },
  });
}

export function generateStaticParams() {
  return source.generateParams();
}



================================================
FILE: apps/docs/app/llms-full.txt/route.ts
================================================
import { source } from '@/lib/source';
import { getLLMText } from '@/lib/get-llm-text';

export const revalidate = false;

export async function GET() {
  const scan = source
    .getPages()
    .filter((file) => file.slugs[0] !== 'openapi')
    .map(getLLMText);
  const scanned = await Promise.all(scan);

  return new Response(scanned.join('\n\n'));
}



================================================
FILE: apps/docs/app/llms.mdx/[...slug]/route.ts
================================================
import { type NextRequest, NextResponse } from 'next/server';
import { getLLMText } from '@/lib/get-llm-text';
import { source } from '@/lib/source';
import { notFound } from 'next/navigation';

export const revalidate = false;

export async function GET(
  _req: NextRequest,
  { params }: { params: Promise<{ slug: string[] }> },
) {
  const slug = (await params).slug;
  const page = source.getPage(slug);
  if (!page) notFound();

  return new NextResponse(await getLLMText(page));
}

export function generateStaticParams() {
  return source.generateParams();
}



================================================
FILE: apps/docs/app/llms.txt/route.ts
================================================
import { source } from '@/lib/source';

export const revalidate = false;

export async function GET() {
  const scanned: string[] = [];
  scanned.push('# Docs');
  const map = new Map<string, string[]>();

  for (const page of source.getPages()) {
    const dir = page.slugs[0];
    const list = map.get(dir) ?? [];
    list.push(`- [${page.data.title}](${page.url}): ${page.data.description}`);
    map.set(dir, list);
  }

  for (const [key, value] of map) {
    scanned.push(`## ${key}`);
    scanned.push(value.join('\n'));
  }

  return new Response(scanned.join('\n\n'));
}



================================================
FILE: apps/docs/app/og/[...slug]/JetBrainsMono-Bold.ttf
================================================
[Binary file]


================================================
FILE: apps/docs/app/og/[...slug]/JetBrainsMono-Regular.ttf
================================================
[Binary file]


================================================
FILE: apps/docs/app/og/[...slug]/og.tsx
================================================
import { ImageResponse } from 'next/og';
import type { ReactElement, ReactNode } from 'react';
import type { ImageResponseOptions } from 'next/dist/compiled/@vercel/og/types';

interface GenerateProps {
  title: ReactNode;
  description?: ReactNode;
  primaryTextColor?: string;
}

export function generateOGImage(
  options: GenerateProps & ImageResponseOptions,
): ImageResponse {
  const { title, description, primaryTextColor, ...rest } = options;

  return new ImageResponse(
    generate({
      title,
      description,
      primaryTextColor,
    }),
    {
      width: 1200,
      height: 630,
      ...rest,
    },
  );
}

export function generate({
  primaryTextColor = 'rgb(255,150,255)',
  ...props
}: GenerateProps): ReactElement {
  return (
    <div
      style={{
        display: 'flex',
        flexDirection: 'column',
        width: '100%',
        height: '100%',
        color: 'white',
        backgroundColor: 'rgb(10,10,10)',
      }}
    >
      <div
        style={{
          display: 'flex',
          flexDirection: 'column',
          width: '100%',
          height: '100%',
          padding: '4rem',
        }}
      >
        <p
          style={{
            fontWeight: 600,
            fontSize: '76px',
          }}
        >
          {props.title}
        </p>
        <p
          style={{
            fontSize: '48px',
            color: 'rgba(240,240,240,0.7)',
          }}
        >
          {props.description}
        </p>
        <div
          style={{
            display: 'flex',
            flexDirection: 'row',
            alignItems: 'center',
            gap: '24px',
            marginTop: 'auto',
            color: primaryTextColor,
          }}
        >
          <svg
            width="60"
            height="60"
            viewBox="0 0 180 180"
            filter="url(#logo-shadow)"
          >
            <circle cx="90" cy="90" r="86" fill="url(#logo-iconGradient)" />
            <defs>
              <filter id="logo-shadow" colorInterpolationFilters="sRGB">
                <feDropShadow
                  dx="0"
                  dy="0"
                  stdDeviation="4"
                  floodColor="white"
                  floodOpacity="1"
                />
              </filter>
              <linearGradient
                id="logo-iconGradient"
                gradientTransform="rotate(45)"
              >
                <stop offset="45%" stopColor="black" />
                <stop offset="100%" stopColor="white" />
              </linearGradient>
            </defs>
          </svg>
          <p
            style={{
              fontSize: '46px',
              fontWeight: 600,
            }}
          >
            Fumadocs
          </p>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: apps/docs/app/og/[...slug]/route.tsx
================================================
import { readFileSync } from 'node:fs';
import { generateOGImage } from '@/app/og/[...slug]/og';
import { source } from '@/lib/source';
import { notFound } from 'next/navigation';

const font = readFileSync('./app/og/[...slug]/JetBrainsMono-Regular.ttf');
const fontBold = readFileSync('./app/og/[...slug]/JetBrainsMono-Bold.ttf');

export async function GET(
  _req: Request,
  { params }: { params: Promise<{ slug: string[] }> },
) {
  const { slug } = await params;
  const page = source.getPage(slug.slice(0, -1));
  if (!page) notFound();

  return generateOGImage({
    primaryTextColor: 'rgb(240,240,240)',
    title: page.data.title,
    description: page.data.description,
    fonts: [
      {
        name: 'Mono',
        data: font,
        weight: 400,
      },
      {
        name: 'Mono',
        data: fontBold,
        weight: 600,
      },
    ],
  });
}

export function generateStaticParams(): {
  slug: string[];
}[] {
  return source.generateParams().map((page) => ({
    ...page,
    slug: [...page.slug, 'image.png'],
  }));
}



================================================
FILE: apps/docs/app/static.json/route.ts
================================================
import { NextResponse } from 'next/server';
import { source } from '@/lib/source';
import type { OramaDocument } from 'fumadocs-core/search/orama-cloud';

export const revalidate = false;

export async function GET(): Promise<Response> {
  const pages = source.getPages();
  const results = await Promise.all(
    pages
      .filter((page) => page.slugs[0] !== 'openapi')
      .map(async (page) => {
        const { structuredData } = await page.data.load();

        return {
          id: page.url,
          structured: structuredData,
          tag: page.slugs[0],
          url: page.url,
          title: page.data.title,
          description: page.data.description,
        } satisfies OramaDocument;
      }),
  );

  return NextResponse.json(results);
}



================================================
FILE: apps/docs/components/code-block.tsx
================================================
import * as Base from 'fumadocs-ui/components/codeblock';
import { highlight } from 'fumadocs-core/highlight';

export interface CodeBlockProps {
  code: string;
  wrapper?: Base.CodeBlockProps;
  lang: string;
}

export async function CodeBlock({ code, lang, wrapper }: CodeBlockProps) {
  const rendered = await highlight(code, {
    lang,
    themes: {
      light: 'github-light',
      dark: 'vesper',
    },
    components: {
      pre: Base.Pre,
    },
  });

  return <Base.CodeBlock {...wrapper}>{rendered}</Base.CodeBlock>;
}



================================================
FILE: apps/docs/components/contributor-count.tsx
================================================
import type { HTMLAttributes } from 'react';
import Image from 'next/image';
import { cn } from '@/lib/cn';
import { fetchContributors } from '@/lib/get-contributors';

export interface ContributorCounterProps
  extends HTMLAttributes<HTMLDivElement> {
  repoOwner: string;
  repoName: string;
  displayCount?: number;
}

export default async function ContributorCounter({
  repoOwner,
  repoName,
  displayCount = 20,
  ...props
}: ContributorCounterProps): Promise<React.ReactElement> {
  const contributors = await fetchContributors(repoOwner, repoName);
  const topContributors = contributors
    .filter((contributor) => contributor.login !== repoOwner)
    .slice(0, displayCount);

  return (
    <div
      {...props}
      className={cn('flex flex-col items-center gap-4', props.className)}
    >
      <div className="flex flex-row flex-wrap items-center justify-center md:pe-4">
        {topContributors.map((contributor, i) => (
          <a
            key={contributor.login}
            href={`https://github.com/${contributor.login}`}
            rel="noreferrer noopener"
            target="_blank"
            className="size-10 overflow-hidden rounded-full border-4 border-fd-background bg-fd-background md:-mr-4 md:size-12"
            style={{
              zIndex: topContributors.length - i,
            }}
          >
            <Image
              src={contributor.avatar_url}
              alt={`${contributor.login}'s avatar`}
              unoptimized
              width={48}
              height={48}
            />
          </a>
        ))}
        {displayCount < contributors.length ? (
          <div className="size-12 content-center rounded-full bg-fd-secondary text-center">
            +{contributors.length - displayCount}
          </div>
        ) : null}
      </div>
      <div className="text-center text-sm text-fd-muted-foreground">
        Some of our best contributors.
      </div>
    </div>
  );
}



================================================
FILE: apps/docs/components/rate.tsx
================================================
'use client';
import { cn } from '@/lib/cn';
import { buttonVariants } from 'fumadocs-ui/components/ui/button';
import { ThumbsDown, ThumbsUp } from 'lucide-react';
import { type SyntheticEvent, useEffect, useState, useTransition } from 'react';
import {
  Collapsible,
  CollapsibleContent,
} from 'fumadocs-ui/components/ui/collapsible';
import { cva } from 'class-variance-authority';
import { usePathname } from 'next/navigation';

const rateButtonVariants = cva(
  'inline-flex items-center gap-2 px-3 py-2 rounded-full font-medium border text-sm [&_svg]:size-4 disabled:cursor-not-allowed',
  {
    variants: {
      active: {
        true: 'bg-fd-accent text-fd-accent-foreground [&_svg]:fill-current',
        false: 'text-fd-muted-foreground',
      },
    },
  },
);

export interface Feedback {
  opinion: 'good' | 'bad';
  url?: string;
  message: string;
}

export interface ActionResponse {
  githubUrl: string;
}

interface Result extends Feedback {
  response?: ActionResponse;
}

export function Rate({
  onRateAction,
}: {
  onRateAction: (url: string, feedback: Feedback) => Promise<ActionResponse>;
}) {
  const url = usePathname();
  const [previous, setPrevious] = useState<Result | null>(null);
  const [opinion, setOpinion] = useState<'good' | 'bad' | null>(null);
  const [message, setMessage] = useState('');
  const [isPending, startTransition] = useTransition();

  useEffect(() => {
    const item = localStorage.getItem(`docs-feedback-${url}`);

    if (item === null) return;
    setPrevious(JSON.parse(item) as Result);
  }, [url]);

  useEffect(() => {
    const key = `docs-feedback-${url}`;

    if (previous) localStorage.setItem(key, JSON.stringify(previous));
    else localStorage.removeItem(key);
  }, [previous, url]);

  function submit(e?: SyntheticEvent) {
    if (opinion == null) return;

    startTransition(async () => {
      const feedback: Feedback = {
        opinion,
        message,
      };

      void onRateAction(url, feedback).then((response) => {
        setPrevious({
          response,
          ...feedback,
        });
        setMessage('');
        setOpinion(null);
      });
    });

    e?.preventDefault();
  }

  const activeOpinion = previous?.opinion ?? opinion;

  return (
    <Collapsible
      open={opinion !== null || previous !== null}
      onOpenChange={(v) => {
        if (!v) setOpinion(null);
      }}
      className="border-y py-3"
    >
      <div className="flex flex-row items-center gap-2">
        <p className="text-sm font-medium pe-2">How is this guide?</p>
        <button
          disabled={previous !== null}
          className={cn(
            rateButtonVariants({
              active: activeOpinion === 'good',
            }),
          )}
          onClick={() => {
            setOpinion('good');
          }}
        >
          <ThumbsUp />
          Good
        </button>
        <button
          disabled={previous !== null}
          className={cn(
            rateButtonVariants({
              active: activeOpinion === 'bad',
            }),
          )}
          onClick={() => {
            setOpinion('bad');
          }}
        >
          <ThumbsDown />
          Bad
        </button>
      </div>
      <CollapsibleContent className="mt-3">
        {previous ? (
          <div className="px-3 py-6 flex flex-col items-center gap-3 bg-fd-card text-fd-muted-foreground text-sm text-center rounded-xl">
            <p>Thank you for your feedback!</p>
            <div className="flex flex-row items-center gap-2">
              <a
                href={previous.response?.githubUrl}
                rel="noreferrer noopener"
                target="_blank"
                className={cn(
                  buttonVariants({
                    color: 'primary',
                  }),
                  'text-xs',
                )}
              >
                View on GitHub
              </a>

              <button
                className={cn(
                  buttonVariants({
                    color: 'secondary',
                  }),
                  'text-xs',
                )}
                onClick={() => {
                  setOpinion(previous.opinion);
                  setPrevious(null);
                }}
              >
                Submit Again
              </button>
            </div>
          </div>
        ) : (
          <form className="flex flex-col gap-3" onSubmit={submit}>
            <textarea
              autoFocus
              required
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              className="border rounded-lg bg-fd-secondary text-fd-secondary-foreground p-3 resize-none focus-visible:outline-none placeholder:text-fd-muted-foreground"
              placeholder="Leave your feedback..."
              onKeyDown={(e) => {
                if (!e.shiftKey && e.key === 'Enter') {
                  submit(e);
                }
              }}
            />
            <button
              type="submit"
              className={cn(buttonVariants({ color: 'outline' }), 'w-fit px-3')}
              disabled={isPending}
            >
              Submit
            </button>
          </form>
        )}
      </CollapsibleContent>
    </Collapsible>
  );
}



================================================
FILE: apps/docs/components/registry.mts
================================================
import { type Registry } from '@fumadocs/cli/build';
import * as ui from '../../../packages/ui/src/_registry';
import { fileURLToPath } from 'node:url';
import * as path from 'node:path';

export const registry: Registry = {
  dir: path.dirname(fileURLToPath(import.meta.url)),
  on: {
    ui: {
      type: 'local',
      registry: ui.registry,
    },
  },
  rootDir: '../',
  namespaces: {
    '': 'components',
    '../utils': 'lib',
  },
  components: [
    {
      name: 'search-ai',
      description:
        'Ask AI dialog for your docs, you need to configure Inkeep first',
      files: ['ai/index.tsx', 'ai/search.tsx', '../app/api/chat/route.ts'],
      mapImportPath: {
        '../../../packages/ui/src/components/ui/button.tsx': {
          type: 'component',
          registry: 'ui',
          name: 'button',
          file: 'components/ui/button.tsx',
        },
      },
    },
  ],
  dependencies: {
    'fumadocs-core': {
      type: 'runtime',
    },
    'fumadocs-ui': {
      type: 'runtime',
    },
    next: {
      type: 'runtime',
    },
    react: {
      type: 'runtime',
    },
  },
};



================================================
FILE: apps/docs/components/search.tsx
================================================
'use client';

import { OramaClient } from '@oramacloud/client';
import {
  SearchDialog,
  SearchDialogClose,
  SearchDialogContent,
  SearchDialogFooter,
  SearchDialogHeader,
  SearchDialogIcon,
  SearchDialogInput,
  SearchDialogList,
  SearchDialogOverlay,
  type SharedProps,
} from 'fumadocs-ui/components/dialog/search';
import { useDocsSearch } from 'fumadocs-core/search/client';
import { useState } from 'react';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from 'fumadocs-ui/components/ui/popover';
import { ChevronDown } from 'lucide-react';
import { buttonVariants } from 'fumadocs-ui/components/ui/button';
import { cn } from '@/lib/cn';

const client = new OramaClient({
  endpoint: 'https://cloud.orama.run/v1/indexes/docs-fk97oe',
  api_key: 'oPZjdlFbq5BpR54bV5Vj57RYt83Xosk7',
});

const items = [
  {
    name: 'All',
    value: undefined,
  },
  {
    name: 'Framework',
    description: 'Only results about Fumadocs UI & guides',
    value: 'ui',
  },
  {
    name: 'Core',
    description: 'Only results about headless features',
    value: 'headless',
  },
  {
    name: 'MDX',
    description: 'Only results about Fumadocs MDX',
    value: 'mdx',
  },
  {
    name: 'CLI',
    description: 'Only results about Fumadocs CLI',
    value: 'cli',
  },
];

export default function CustomSearchDialog(props: SharedProps) {
  const [open, setOpen] = useState(false);
  const [tag, setTag] = useState<string | undefined>();
  const { search, setSearch, query } = useDocsSearch({
    type: 'orama-cloud',
    client,
    tag,
  });

  return (
    <SearchDialog
      search={search}
      onSearchChange={setSearch}
      isLoading={query.isLoading}
      {...props}
    >
      <SearchDialogOverlay />
      <SearchDialogContent>
        <SearchDialogHeader>
          <SearchDialogIcon />
          <SearchDialogInput />
          <SearchDialogClose />
        </SearchDialogHeader>
        <SearchDialogList items={query.data !== 'empty' ? query.data : null} />
        <SearchDialogFooter className="flex flex-row flex-wrap gap-2 items-center">
          <Popover open={open} onOpenChange={setOpen}>
            <PopoverTrigger
              className={buttonVariants({
                size: 'sm',
                color: 'ghost',
                className: '-m-1.5 me-auto',
              })}
            >
              <span className="text-fd-muted-foreground/80 me-2">Filter</span>
              {items.find((item) => item.value === tag)?.name}
              <ChevronDown className="size-3.5 text-fd-muted-foreground" />
            </PopoverTrigger>
            <PopoverContent className="flex flex-col p-1 gap-1" align="start">
              {items.map((item, i) => {
                const isSelected = item.value === tag;

                return (
                  <button
                    key={i}
                    onClick={() => {
                      setTag(item.value);
                      setOpen(false);
                    }}
                    className={cn(
                      'rounded-lg text-start px-2 py-1.5',
                      isSelected
                        ? 'text-fd-primary bg-fd-primary/10'
                        : 'hover:text-fd-accent-foreground hover:bg-fd-accent',
                    )}
                  >
                    <p className="font-medium mb-0.5">{item.name}</p>
                    <p className="text-xs opacity-70">{item.description}</p>
                  </button>
                );
              })}
            </PopoverContent>
          </Popover>
          <a
            href="https://orama.com"
            rel="noreferrer noopener"
            className="text-xs text-nowrap text-fd-muted-foreground"
          >
            Powered by Orama
          </a>
        </SearchDialogFooter>
      </SearchDialogContent>
    </SearchDialog>
  );
}



================================================
FILE: apps/docs/components/ui-overview.tsx
================================================
import { Tab, Tabs } from 'fumadocs-ui/components/tabs';

export function UiOverview() {
  return (
    <Tabs items={['Docs Layout', 'Docs Layout (Mobile)']}>
      <Tab
        value="Docs Layout"
        className="not-prose text-sm text-center text-fd-muted-foreground overflow-auto"
      >
        <div className="flex flex-row gap-4 min-w-[600px] min-h-[400px]">
          <div className="flex flex-col gap-2 w-1/4">
            <p className="text-xs">Sidebar</p>
            <div className="border p-2 bg-fd-muted">Title</div>
            <div className="border p-2 bg-fd-muted">Sidebar Tabs</div>
            <div className="border p-2 bg-fd-muted">Search</div>
            <div className="flex items-center justify-center border p-2 flex-1 bg-fd-muted">
              Page Tree
            </div>
            <div className="border p-2 mt-auto bg-fd-muted">Footer</div>
          </div>
          <div className="flex flex-col gap-2 flex-1">
            <p className="text-xs">Docs Page</p>
            <div className="bg-fd-muted border p-2">Article Title</div>
            <div className="bg-fd-muted border p-2">Description</div>
            <div className="bg-fd-muted border flex items-center justify-center flex-1 py-2">
              Body
            </div>
            <div className="grid grid-cols-2 gap-2">
              <div className="border p-2 bg-fd-muted">Edit on GitHub</div>
              <div className="border p-2 bg-fd-muted">Last Updated</div>
            </div>
            <div className="border p-2">
              <p className="text-xs mb-2">Footer</p>
              <div className="grid grid-cols-2 gap-2">
                <div className="border p-2 bg-fd-muted">Previous</div>
                <div className="border p-2 bg-fd-muted">Next</div>
              </div>
            </div>
          </div>
          <div className="flex flex-col gap-2 w-1/4">
            <p className="text-xs">TOC</p>
            <div className="border p-2 bg-fd-muted">Banner</div>
            <div className="flex items-center justify-center border p-2 flex-1 bg-fd-muted">
              Items
            </div>
            <div className="border p-2 bg-fd-muted">Footer</div>
          </div>
        </div>
      </Tab>
      <Tab
        value="Docs Layout (Mobile)"
        className="not-prose text-sm text-center text-fd-muted-foreground overflow-auto"
      >
        <div className="flex flex-row gap-4 min-w-[600px]">
          <div className="flex flex-col gap-2 p-2 border">
            <div className="border p-2">
              <p className="text-xs">Nav</p>
              <div className="grid grid-cols-3 gap-2">
                <div className="bg-fd-muted border p-2">Title</div>
                <div className="bg-fd-muted border p-2">Search</div>
                <div className="bg-fd-muted border p-2">Menu</div>
              </div>
            </div>
            <div className="bg-fd-muted border p-2">TOC Trigger</div>

            <p className="text-xs">Docs Page</p>
            <div className="bg-fd-muted border p-2">Article Title</div>
            <div className="bg-fd-muted border p-2">Description</div>
            <div className="bg-fd-muted border flex items-center justify-center flex-1 py-2">
              Body
            </div>
            <div className="grid grid-cols-2 gap-2">
              <div className="border p-2 bg-fd-muted">Edit on GitHub</div>
              <div className="border p-2 bg-fd-muted">Last Updated</div>
            </div>
            <div className="border p-2">
              <p className="text-xs mb-2">Footer</p>
              <div className="grid grid-cols-2 gap-2">
                <div className="border p-2 bg-fd-muted">Previous</div>
                <div className="border p-2 bg-fd-muted">Next</div>
              </div>
            </div>
          </div>

          <div className="flex flex-col gap-2 p-2 border">
            <div className="border p-2">
              <p className="text-xs">Nav</p>
              <div className="grid grid-cols-3 gap-2">
                <div className="bg-fd-muted border p-2">Title</div>
                <div className="bg-fd-muted border p-2">Search</div>
                <div className="bg-fd-muted border p-2">Menu</div>
              </div>
            </div>
            <div className="flex flex-col gap-2 p-2 border h-full">
              <p className="text-xs">Sidebar</p>
              <div className="border p-2 bg-fd-muted">Sidebar Tabs</div>
              <div className="border p-2 bg-fd-muted">Search</div>
              <div className="flex items-center justify-center border p-2 flex-1 bg-fd-muted">
                Page Tree
              </div>
              <div className="border p-2 mt-auto bg-fd-muted">Footer</div>
            </div>
          </div>
        </div>
      </Tab>
    </Tabs>
  );
}



================================================
FILE: apps/docs/components/ai/index.tsx
================================================
'use client';
import { type ButtonHTMLAttributes, useState } from 'react';
import dynamic from 'next/dynamic';

// lazy load the dialog
const SearchAI = dynamic(() => import('./search'), { ssr: false });

/**
 * The trigger component for AI search dialog.
 *
 * Use it like a normal button component.
 */
export function AISearchTrigger(
  props: ButtonHTMLAttributes<HTMLButtonElement>,
) {
  const [open, setOpen] = useState<boolean>();

  return (
    <>
      {open !== undefined ? (
        <SearchAI open={open} onOpenChange={setOpen} />
      ) : null}
      <button {...props} onClick={() => setOpen(true)} />
    </>
  );
}



================================================
FILE: apps/docs/components/ai/markdown-processor.ts
================================================
import { remark } from 'remark';
import remarkGfm from 'remark-gfm';
import remarkRehype from 'remark-rehype';
import { type Components, toJsxRuntime } from 'hast-util-to-jsx-runtime';
import { type ReactNode } from 'react';
import { Fragment, jsx, jsxs } from 'react/jsx-runtime';

export interface Processor {
  process: (
    content: string,
    components: Partial<Components>,
  ) => Promise<ReactNode>;
}

export function createProcessor(): Processor {
  const processor = remark().use(remarkGfm).use(remarkRehype);

  return {
    async process(content, components) {
      const nodes = processor.parse({ value: content });
      const hast = await processor.run(nodes);
      return toJsxRuntime(hast, {
        development: false,
        jsx,
        jsxs,
        Fragment,
        components,
      });
    },
  };
}



================================================
FILE: apps/docs/components/ai/search.tsx
================================================
'use client';
import {
  Children,
  type ComponentProps,
  createContext,
  type FormHTMLAttributes,
  type HTMLAttributes,
  type ReactElement,
  type ReactNode,
  type TextareaHTMLAttributes,
  use,
  useEffect,
  useRef,
  useState,
} from 'react';
import { Loader2, RefreshCw, Send, X } from 'lucide-react';
import defaultMdxComponents from 'fumadocs-ui/mdx';
import { cn } from '@/lib/cn';
import { buttonVariants } from '../../../../packages/ui/src/components/ui/button';
import { createProcessor, type Processor } from './markdown-processor';
import Link from 'fumadocs-core/link';
import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogOverlay,
  DialogPortal,
  type DialogProps,
  DialogTitle,
} from '@radix-ui/react-dialog';
import { type Message, useChat, type UseChatHelpers } from '@ai-sdk/react';
import type { ProvideLinksToolSchema } from '@/lib/chat/inkeep-qa-schema';
import type { z } from 'zod';
import { DynamicCodeBlock } from 'fumadocs-ui/components/dynamic-codeblock';

const ChatContext = createContext<UseChatHelpers | null>(null);
function useChatContext() {
  return use(ChatContext)!;
}

function SearchAIActions() {
  const { messages, status, setMessages, reload } = useChatContext();
  const isLoading = status === 'streaming';

  if (messages.length === 0) return null;
  return (
    <div className="sticky bottom-0 bg-gradient-to-t from-fd-popover px-3 py-1.5 flex flex-row items-center justify-end gap-2 empty:hidden">
      {!isLoading && messages.at(-1)?.role === 'assistant' && (
        <button
          type="button"
          className={cn(
            buttonVariants({
              color: 'secondary',
            }),
            'text-fd-muted-foreground rounded-full gap-1.5',
          )}
          onClick={() => reload()}
        >
          <RefreshCw className="size-4" />
          Retry
        </button>
      )}
      <button
        type="button"
        className={cn(
          buttonVariants({
            color: 'secondary',
          }),
          'text-fd-muted-foreground rounded-full',
        )}
        onClick={() => setMessages([])}
      >
        Clear Chat
      </button>
    </div>
  );
}

function SearchAIInput(props: FormHTMLAttributes<HTMLFormElement>) {
  const { status, input, setInput, handleSubmit, stop } = useChatContext();
  const isLoading = status === 'streaming' || status === 'submitted';
  const onStart = (e?: React.FormEvent) => {
    e?.preventDefault();
    handleSubmit(e);
  };

  useEffect(() => {
    if (isLoading) document.getElementById('nd-ai-input')?.focus();
  }, [isLoading]);

  return (
    <form
      {...props}
      className={cn(
        'flex items-start pe-2 transition-colors',
        isLoading && 'bg-fd-muted',
        props.className,
      )}
      onSubmit={onStart}
    >
      <Input
        value={input}
        placeholder={isLoading ? 'AI is answering...' : 'Ask AI something'}
        disabled={status === 'streaming' || status === 'submitted'}
        onChange={(e) => {
          setInput(e.target.value);
        }}
        onKeyDown={(event) => {
          if (!event.shiftKey && event.key === 'Enter') {
            onStart();
            event.preventDefault();
          }
        }}
      />
      {isLoading ? (
        <button
          type="button"
          className={cn(
            buttonVariants({
              color: 'secondary',
              className: 'rounded-full mt-2 gap-2',
            }),
          )}
          onClick={stop}
        >
          <Loader2 className="size-4 animate-spin text-fd-muted-foreground" />
          Abort Answer
        </button>
      ) : (
        <button
          type="submit"
          className={cn(
            buttonVariants({
              color: 'ghost',
              className: 'rounded-full mt-2 p-1.5',
            }),
          )}
          disabled={input.length === 0}
        >
          <Send className="size-4" />
        </button>
      )}
    </form>
  );
}

function List(props: Omit<HTMLAttributes<HTMLDivElement>, 'dir'>) {
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!containerRef.current) return;
    function callback() {
      const container = containerRef.current;
      if (!container) return;

      container.scrollTo({
        top: container.scrollHeight,
        behavior: 'instant',
      });
    }

    const observer = new ResizeObserver(callback);
    callback();

    const element = containerRef.current?.firstElementChild;

    if (element) {
      observer.observe(element);
    }

    return () => {
      observer.disconnect();
    };
  }, []);

  return (
    <div
      ref={containerRef}
      {...props}
      className={cn(
        'fd-scroll-container overflow-y-auto max-h-[calc(100dvh-240px)] min-w-0 flex flex-col',
        props.className,
      )}
    >
      {props.children}
    </div>
  );
}

function Input(props: TextareaHTMLAttributes<HTMLTextAreaElement>) {
  const ref = useRef<HTMLDivElement>(null);
  const shared = cn('col-start-1 row-start-1 max-h-60 min-h-12 p-3');

  return (
    <div className="grid flex-1">
      <textarea
        id="nd-ai-input"
        className={cn(
          shared,
          'resize-none bg-transparent placeholder:text-fd-muted-foreground focus-visible:outline-none',
        )}
        {...props}
      />
      <div ref={ref} className={cn(shared, 'break-all invisible')}>
        {`${props.value?.toString() ?? ''}\n`}
      </div>
    </div>
  );
}

let processor: Processor | undefined;
const map = new Map<string, ReactNode>();

const roleName: Record<string, string> = {
  user: 'you',
  assistant: 'fumadocs',
};

function Message({ message }: { message: Message }) {
  const { parts } = message;
  let links: z.infer<typeof ProvideLinksToolSchema>['links'] = [];

  for (const part of parts ?? []) {
    if (part.type !== 'tool-invocation') continue;

    if (part.toolInvocation.toolName === 'provideLinks') {
      links = part.toolInvocation.args.links;
    }
  }

  return (
    <div>
      <p
        className={cn(
          'mb-1 text-xs font-medium text-fd-muted-foreground',
          message.role === 'assistant' && 'text-fd-primary',
        )}
      >
        {roleName[message.role] ?? 'unknown'}
      </p>
      <div className="prose text-sm">
        <Markdown text={message.content} />
      </div>
      {links && links.length > 0 ? (
        <div className="mt-2 flex flex-row flex-wrap items-center gap-1">
          {links.map((item, i) => (
            <Link
              key={i}
              href={item.url}
              className="block text-xs rounded-lg border p-3 hover:bg-fd-accent hover:text-fd-accent-foreground"
            >
              <p className="font-medium">{item.title}</p>
              <p className="text-fd-muted-foreground">Reference {item.label}</p>
            </Link>
          ))}
        </div>
      ) : null}
    </div>
  );
}

function Pre(props: ComponentProps<'pre'>) {
  const code = Children.only(props.children) as ReactElement;
  const codeProps = code.props as ComponentProps<'code'>;

  let lang =
    codeProps.className
      ?.split(' ')
      .find((v) => v.startsWith('language-'))
      ?.slice('language-'.length) ?? 'text';

  if (lang === 'mdx') lang = 'md';

  return (
    <DynamicCodeBlock lang={lang} code={(codeProps.children ?? '') as string} />
  );
}

function Markdown({ text }: { text: string }) {
  const [rendered, setRendered] = useState<ReactNode>(map.get(text));

  useEffect(() => {
    let aborted = false;
    async function run() {
      let result = map.get(text);
      if (!result) {
        processor ??= createProcessor();

        result = await processor
          .process(text, {
            ...defaultMdxComponents,
            pre: Pre,
            img: undefined, // use JSX
          })
          .catch(() => text);
      }

      map.set(text, result);
      if (!aborted) setRendered(result);
    }

    void run();
    return () => {
      aborted = true;
    };
  }, [text]);

  return rendered ?? text;
}

export default function AISearch(props: DialogProps) {
  return (
    <Dialog {...props}>
      {props.children}
      <DialogPortal>
        <DialogOverlay className="fixed inset-0 z-50 bg-black/30 backdrop-blur-sm data-[state=closed]:animate-fd-fade-out data-[state=open]:animate-fd-fade-in" />
        <DialogContent
          onOpenAutoFocus={(e) => {
            document.getElementById('nd-ai-input')?.focus();
            e.preventDefault();
          }}
          aria-describedby={undefined}
          className="fixed flex flex-col-reverse gap-3 md:flex-col max-md:top-12 md:bottom-12 left-1/2 z-50 w-[98vw] max-w-[860px] -translate-x-1/2 focus-visible:outline-none data-[state=closed]:animate-fd-fade-out"
        >
          <Content />
        </DialogContent>
      </DialogPortal>
    </Dialog>
  );
}

function Content() {
  const chat = useChat({
    id: 'search',
    streamProtocol: 'data',
    sendExtraMessageFields: true,
    onResponse(response) {
      if (response.status === 401) {
        console.error(response.statusText);
      }
    },
  });

  const messages = chat.messages.filter((msg) => msg.role !== 'system');

  return (
    <ChatContext value={chat}>
      {messages.length > 0 && (
        <List className="bg-fd-popover rounded-xl border shadow-lg animate-fd-dialog-in duration-600">
          <div className="flex flex-col gap-4 p-3 pb-0">
            {messages.map((item) => (
              <Message key={item.id} message={item} />
            ))}
          </div>
          <SearchAIActions />
        </List>
      )}
      <div className="p-2 bg-fd-secondary/50 rounded-xl animate-fd-dialog-in">
        <div className="rounded-xl overflow-hidden border shadow-lg bg-fd-popover text-fd-popover-foreground">
          <SearchAIInput />
          <div className="flex gap-2 items-center text-fd-muted-foreground px-3 py-1.5">
            <DialogTitle className="text-xs flex-1">
              Powered by{' '}
              <a
                href="https://inkeep.com"
                target="_blank"
                className="font-medium text-fd-popover-foreground"
                rel="noreferrer noopener"
              >
                Inkeep AI
              </a>
              . AI can be inaccurate, please verify the information.
            </DialogTitle>
            <DialogClose
              aria-label="Close"
              tabIndex={-1}
              className={cn(buttonVariants({ size: 'sm', color: 'ghost' }))}
            >
              <X className="size-4" />
              Close Dialog
            </DialogClose>
          </div>
        </div>
      </div>
    </ChatContext>
  );
}



================================================
FILE: apps/docs/components/mdx/mermaid.tsx
================================================
'use client';

import { useEffect, useId, useRef, useState } from 'react';
import { useTheme } from 'next-themes';

export function Mermaid({ chart }: { chart: string }) {
  const id = useId();
  const [svg, setSvg] = useState('');
  const containerRef = useRef<HTMLDivElement>(null);
  const currentChartRef = useRef<string>(null);
  const { resolvedTheme } = useTheme();

  useEffect(() => {
    if (currentChartRef.current === chart || !containerRef.current) return;
    const container = containerRef.current;
    currentChartRef.current = chart;

    async function renderChart() {
      const { default: mermaid } = await import('mermaid');

      try {
        // configure mermaid
        mermaid.initialize({
          startOnLoad: false,
          securityLevel: 'loose',
          fontFamily: 'inherit',
          themeCSS: 'margin: 1.5rem auto 0;',
          theme: resolvedTheme === 'dark' ? 'dark' : 'default',
        });

        const { svg, bindFunctions } = await mermaid.render(
          id,
          chart.replaceAll('\\n', '\n'),
        );

        bindFunctions?.(container);
        setSvg(svg);
      } catch (error) {
        console.error('Error while rendering mermaid', error);
      }
    }

    void renderChart();
  }, [chart, id, resolvedTheme]);

  return <div ref={containerRef} dangerouslySetInnerHTML={{ __html: svg }} />;
}



================================================
FILE: apps/docs/components/preview/dynamic-codeblock.tsx
================================================
'use client';
import { DynamicCodeBlock } from 'fumadocs-ui/components/dynamic-codeblock';
import { useState } from 'react';
import { bundledLanguages } from 'shiki';

export default function Example() {
  const [lang, setLang] = useState('js');
  const [code, setCode] = useState('console.log("This is pre-rendered")');

  return (
    <div className="prose flex flex-col gap-4 rounded-lg bg-fd-background p-4">
      <div className="not-prose flex flex-col rounded-lg bg-fd-secondary text-fd-secondary-foreground">
        <select
          value={lang}
          onChange={(e) => setLang(e.target.value)}
          className="w-fit bg-transparent px-4 py-2 text-sm focus-visible:outline-none"
        >
          {Object.keys(bundledLanguages).map((lang) => (
            <option value={lang} key={lang}>
              {lang}
            </option>
          ))}
        </select>
        <textarea
          value={code}
          onChange={(e) => setCode(e.target.value)}
          className="bg-transparent px-4 py-2 text-sm focus-visible:outline-none"
        />
      </div>
      <DynamicCodeBlock
        lang={lang}
        code={code}
        options={{
          themes: {
            light: 'catppuccin-latte',
            dark: 'catppuccin-mocha',
          },
        }}
      />
    </div>
  );
}



================================================
FILE: apps/docs/components/preview/index.tsx
================================================
import { Home } from 'lucide-react';
import { Heading } from 'fumadocs-ui/components/heading';
import { Card } from 'fumadocs-ui/components/card';
import { Callout } from 'fumadocs-ui/components/callout';
import { Accordion, Accordions } from 'fumadocs-ui/components/accordion';
import { RootToggle } from 'fumadocs-ui/components/layout/root-toggle';
import { Tab, Tabs } from 'fumadocs-ui/components/tabs';
import { Step, Steps } from 'fumadocs-ui/components/steps';
import { TypeTable } from 'fumadocs-ui/components/type-table';
import { type ReactNode } from 'react';
import { Wrapper } from './wrapper';
import { GithubInfo } from 'fumadocs-ui/components/github-info';
import { owner, repo } from '@/lib/github';
import {
  Banner,
  DynamicCodeBlock,
  File,
  Files,
  Folder,
  ImageZoom,
  InlineTOC,
} from '@/components/preview/lazy';
import BannerImage from '@/public/banner.png';

export function heading(): ReactNode {
  return (
    <Wrapper>
      <div className="rounded-lg bg-fd-background p-4 prose-no-margin">
        <Heading id="preview" as="h3">
          Hello World
        </Heading>
        <Heading id="preview" as="h3">
          Hello <code>World</code> Everyone!
        </Heading>
      </div>
    </Wrapper>
  );
}

export function card(): ReactNode {
  return (
    <Wrapper>
      <div className="rounded-lg bg-fd-background">
        <Card
          href="#"
          icon={<Home />}
          title="Hello World"
          description="Learn More about Caching and Revalidation"
        />
      </div>
    </Wrapper>
  );
}

export function tabs(): ReactNode {
  return (
    <Wrapper>
      <div className="prose-no-margin">
        <Tabs
          groupId="language"
          persist
          items={['Javascript', 'Rust', 'Typescript']}
        >
          <Tab value="Javascript">Hello World in Javascript</Tab>
          <Tab value="Rust">Hello World in Rust</Tab>
          <Tab value="Typescript">Also works if items are not the same</Tab>
        </Tabs>

        <Tabs groupId="language" persist items={['Javascript', 'Rust']}>
          <Tab value="Javascript">
            Value is shared! Try refresh and see if the value is persisted
          </Tab>
          <Tab value="Rust">
            Value is shared! Try refresh and see if the value is persisted
          </Tab>
        </Tabs>
      </div>
    </Wrapper>
  );
}

export function typeTable(): ReactNode {
  return (
    <Wrapper>
      <div className="rounded-xl bg-fd-background">
        <TypeTable
          type={{
            percentage: {
              description:
                'The percentage of scroll position to display the roll button',
              type: 'number',
              default: '0.2',
            },
          }}
        />
      </div>
    </Wrapper>
  );
}

export function zoomImage(): ReactNode {
  return (
    <Wrapper>
      <ImageZoom
        alt="banner"
        src={BannerImage}
        className="!my-0 rounded-xl bg-fd-background"
        priority
      />
    </Wrapper>
  );
}

export function accordion(): ReactNode {
  return (
    <Wrapper>
      <Accordions type="single" collapsible>
        <Accordion id="what-is-fumadocs" title="What is Fumadocs?">
          A framework for building documentations
        </Accordion>
        <Accordion id="ux" title="What do we love?">
          We love websites with a good user experience
        </Accordion>
      </Accordions>
    </Wrapper>
  );
}

export function callout(): ReactNode {
  return (
    <Wrapper>
      <Callout title="Title">Hello World</Callout>
    </Wrapper>
  );
}

export function files(): ReactNode {
  return (
    <Wrapper>
      <Files>
        <Folder name="app" defaultOpen>
          <Folder name="[id]" defaultOpen>
            <File name="page.tsx" />
          </Folder>
          <File name="layout.tsx" />
          <File name="page.tsx" />
          <File name="global.css" />
        </Folder>
        <Folder name="components">
          <File name="button.tsx" />
          <File name="tabs.tsx" />
          <File name="dialog.tsx" />
          <Folder name="empty" />
        </Folder>
        <File name="package.json" />
      </Files>
    </Wrapper>
  );
}

export function inlineTOC(): ReactNode {
  return (
    <Wrapper>
      <InlineTOC
        items={[
          { title: 'Welcome', url: '#welcome', depth: 2 },
          { title: 'Getting Started', url: '#getting-started', depth: 3 },
          { title: 'Usage', url: '#usage', depth: 3 },
          { title: 'Styling', url: '#styling', depth: 3 },
          { title: 'Reference', url: '#reference', depth: 2 },
          { title: 'Components', url: '#components', depth: 3 },
          { title: 'APIs', url: '#api', depth: 3 },
          { title: 'Credits', url: '#credits', depth: 2 },
        ]}
      />
    </Wrapper>
  );
}

export function steps(): ReactNode {
  return (
    <Wrapper>
      <div className="rounded-xl bg-fd-background p-3">
        <Steps>
          <Step>
            <h4>Buy Coffee</h4>
            <p>Some text here</p>
          </Step>
          <Step>
            <h4>Go to Office Some text here</h4>
            <p>Some text here</p>
          </Step>
          <Step>
            <h4>Have a meeting Some text here</h4>
            <p>Some text here</p>
          </Step>
        </Steps>
      </div>
    </Wrapper>
  );
}

export function rootToggle(): ReactNode {
  return (
    <Wrapper>
      <div className="not-prose mx-auto grid max-w-[240px] rounded-lg bg-fd-background">
        <RootToggle
          className="p-3"
          options={[
            {
              title: 'Hello World',
              description: 'The example item of root toggle',
              url: '/docs/ui',
            },
            {
              title: 'Other page',
              description: 'The example item of root toggle',
              url: '/docs/headless',
            },
          ]}
        />
      </div>
    </Wrapper>
  );
}

export function dynamicCodeBlock() {
  return (
    <Wrapper>
      <DynamicCodeBlock />
    </Wrapper>
  );
}

export function banner(): ReactNode {
  return (
    <Wrapper>
      <div className="flex flex-col gap-4">
        <Banner className="z-0" changeLayout={false}>
          Be careful, Fumadocs v99 has released
        </Banner>

        <Banner
          id="test-rainbow"
          className="z-0"
          variant="rainbow"
          changeLayout={false}
        >
          Using the <code>rainbow</code> variant
        </Banner>

        <Banner
          id="test"
          className="z-0"
          variant="rainbow"
          rainbowColors={[
            'rgba(255,100,0, 0.5)',
            'rgba(255,100,0, 0.5)',
            'transparent',
            'rgba(255,100,0, 0.5)',
            'transparent',
            'rgba(255,100,0, 0.5)',
            'transparent',
          ]}
          changeLayout={false}
        >
          customise the <code>rainbow</code> variant
        </Banner>
      </div>
    </Wrapper>
  );
}

export function githubInfo() {
  return (
    <Wrapper>
      <GithubInfo
        owner={owner}
        repo={repo}
        token={process.env.GITHUB_TOKEN}
        className="not-prose bg-fd-card"
      />
    </Wrapper>
  );
}



================================================
FILE: apps/docs/components/preview/lazy.ts
================================================
'use client';
import dynamic from 'next/dynamic';

export const DynamicCodeBlock = dynamic(() => import('./dynamic-codeblock'));
export const Banner = dynamic(() =>
  import('fumadocs-ui/components/banner').then((res) => res.Banner),
);
export const InlineTOC = dynamic(() =>
  import('fumadocs-ui/components/inline-toc').then((res) => res.InlineTOC),
);

export const File = dynamic(() =>
  import('fumadocs-ui/components/files').then((res) => res.File),
);
export const Files = dynamic(() =>
  import('fumadocs-ui/components/files').then((res) => res.Files),
);
export const Folder = dynamic(() =>
  import('fumadocs-ui/components/files').then((res) => res.Folder),
);

export const ImageZoom = dynamic(() =>
  import('fumadocs-ui/components/image-zoom').then((res) => res.ImageZoom),
);



================================================
FILE: apps/docs/components/preview/wrapper.tsx
================================================
import type { HTMLAttributes } from 'react';
import { cn } from '@/lib/cn';

export function Wrapper(props: HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      {...props}
      className={cn(
        'rounded-lg bg-radial-[at_bottom] from-blue-500/20 p-4 border border-fd-primary/10 prose-no-margin dark:bg-black/20',
        props.className,
      )}
    >
      {props.children}
    </div>
  );
}



================================================
FILE: apps/docs/components/ui/button.tsx
================================================
import { cva } from 'class-variance-authority';

const buttonVariants = cva(
  'inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-fd-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-fd-ring disabled:pointer-events-none disabled:opacity-50',
  {
    variants: {
      variant: {
        default:
          'bg-fd-background bg-gradient-to-b from-fd-primary to-fd-primary/60 text-fd-primary-foreground shadow-inner shadow-fd-background/20 hover:bg-fd-primary/90',
        outline: 'border hover:bg-fd-accent hover:text-fd-accent-foreground',
        grow: 'border bg-gradient-to-t from-fd-primary/10 shadow-inner shadow-fd-primary/10 hover:bg-fd-accent/50 hover:text-fd-accent-foreground',
        secondary:
          'border bg-fd-secondary text-fd-secondary-foreground hover:bg-fd-accent hover:text-fd-accent-foreground',
        ghost: 'hover:bg-fd-accent hover:text-fd-accent-foreground',
        link: 'text-fd-primary underline-offset-4 hover:underline',
      },
      size: {
        default: 'h-10 px-4 py-2',
        icon: 'p-1.5',
        sm: 'h-9 rounded-md px-3',
        lg: 'h-11 px-6',
        xs: 'px-2 py-1.5 text-xs',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  },
);

export { buttonVariants };



================================================
FILE: apps/docs/components/ui/hover-card.tsx
================================================
'use client';

import * as React from 'react';
import * as HoverCardPrimitive from '@radix-ui/react-hover-card';

import { cn } from '@/lib/cn';

const HoverCard = HoverCardPrimitive.Root;

const HoverCardTrigger = HoverCardPrimitive.Trigger;

const HoverCardContent = React.forwardRef<
  React.ComponentRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = 'center', sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.HoverCardPortal>
    <HoverCardPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        'z-50 w-72 rounded-lg border bg-fd-popover p-4 text-popover-fd-foreground shadow-md outline-none data-[state=open]:animate-fd-popover-in data-[state=closed]:animate-fd-popover-out origin-[--radix-hover-card-content-transform-origin]',
        className,
      )}
      {...props}
    />
  </HoverCardPrimitive.HoverCardPortal>
));
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName;

export { HoverCard, HoverCardTrigger, HoverCardContent };



================================================
FILE: apps/docs/content/blog/2024-5-15.mdx
================================================
---
title: How Fumadocs works
description: The framework for building documentation
author: Fuma Nama
date: 2024-05-15
---

1 year ago, I was having fun with Next.js App Router.
While experimenting with it on my toy [No Deploy](https://nodeploy-neon.vercel.app), I planned to build documentation.
However, Nextra does not support App Router.

To handle this, I implemented a small documentation site with solely Contentlayer and the new features from App Router.
It was working great, looked blazing-fast and minimal.
I cloned the logic from No Deploy and built this documentation framework.
With a few months of development, it soon became powerful and stable.

It was originally named `next-docs`, I renamed it to Fumadocs as it conflicts with Next.js Docs.

Thanks to the support from **Next.js** community, I've received a lot of suggestions along the way.
[Fumadocs](https://fumadocs.vercel.app) is now a framework used by my libraries and some other amazing projects.

## My Opinion

In Web development, most _"robust"_ frameworks/libraries are incredibly heavy and fabulous, but it has indeed made our developer experience fancy.

On top of Javascript, people built bundlers, transpilers, and even Typescript.
It feels very surprising that Javascript, a high-level scripting language, is more similar to assembly code in modern Web development.
We rarely use them without things like Webpack. This also applies to CSS, at least in my experience, I seldom use CSS without PostCSS.

While they might be necessary for compatibility and DX, the landing of React Server Component and Next.js App Router made the experience even more mindblowing.
It feels like magic. These cunning magical frameworks, and web development miracles.
This kind of design is insane, but it also makes us mindlessly forget the boundaries.

Beginners use Metadata API, while they have no idea how meta tag works.
They put server-side logic in a server component, while they have no idea how expensive the calculation is.
Even when we looked at the code, we can't predict the result without running it in production mode.
I saw too many of these misconceptions.

This happens on many frameworks, they are overly magical.
**I wanted to make it less-magic, and straightforward at least for most Next.js developers.**

## Fumadocs MDX

As the recommended content source, It is actually a webpack hack.
Since Next.js could only optimize static imports, it first transforms your `.map.ts` to a file that roughly yields:

```ts
export default [import("./my/file.mdx"), ...];
```

And then transforms MDX files with a custom loader. It makes all magic possible, but it doesn't have the ability of lazy-loading MDX files.
Comparing to Nextra, it might be a suboptimal approach.

Nextra does it even easier, it directly transforms MDX files into pages. Because the Pages Router adapts Javascript files as a single page, it is possible.
In App Router, this is not possible anymore. Therefore, I didn't take this approach.

## Fumadocs Core

The core of Fumadocs is a bunch of utilities and MDX plugins.

- **Source API** construct page trees from content source, integrated with other content providers.
- **Headless components** accelerate Fumadocs UI and other custom UI implementations.
- **MDX plugins** bring a perfect developer experience to all integrations.
- **Search utilities** make it way easier to implement document search.

In addition, it has also established the definitions of Page Tree and Page Conventions.
Overall, it is not yet a framework without Fumadocs UI.

In my opinion, the most valuable part of the codebase is MDX plugins.
I learned a lot more about ASTs and the eco-system of remark/rehype while working on them.
Absolutely an amazing experience.

## Fumadocs UI

The UI implementation of Fumadocs using Tailwind CSS and Radix UI.
Its design system was inspired by Shadcn UI, using CSS variables for color utilities.

Although the structure of Fumadocs UI is even simpler than core, I've used some subtle hacks to solve the problem of `"use client"` directive.
The bundler I am using, [TSX](https://github.com/privatenumber/tsx), can't handle nested structures like client components imported from a server component.
Therefore, I made a little hack to build server components and client components as an individual entry, then inject import statements after the process.

Also it took me some time to come up with the [preset approach](https://fumadocs.vercel.app/docs/ui/theme#docsui-plugin) for integrating Fumadocs UI with Tailwind CSS projects.

## Docs Generators

We have a few built-in integrations, like `fumadocs-openapi` which takes an OpenAPI schema and output MDX files.

For the OpenAPI one, it simply parses the schema and convert it to MDX file through string templates.

The Typescript integration does a bit more, it obtains type information with [Typescript Compiler API](https://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API). Based on the information, it yields MDX files.
You can use it inside a server component, which is how `<AutoTypeTable />` works.

## CI/CD

As a project with very few contributors, I built the CI/CD process as convenient as possible for a better efficiency.
The entire release process is handled by [Changesets](https://github.com/changesets/changesets), and I wrote the scripts to update [the template repository](https://github.com/fuma-nama/fumadocs-ui-template) automatically.
It worked great so far.

## Thanks

[The Github repository of Fumadocs](https://github.com/fuma-nama/fumadocs) has reached 300 stars in 2024 March, it is a new achievement for me.
Welcome to give it a star to support my work!

> Original
> https://fuma-nama.vercel.app/blog/fumadocs



================================================
FILE: apps/docs/content/blog/2024-5-16.mdx
================================================
---
title: 500 Stars
description: The first 500 stars of Fumadocs
author: Fuma Nama
date: 2024-05-16
---

It was surprising when I first saw [the video from Web Dev Cody](https://youtu.be/7HUmDAgXI2E?si=CR9fC-f3nysPJJCE), it felt like I had finally built something worth mentioning, instead of another neglected side project that nobody cares about.

So far I've worked on this project for about 1 year, and it is a precious experience to me. The best lecture that you can't find in a university.

## Open Source

I received much feedback, issues and questions. Some are brutal but straightforward, like _"please fix it, help me please"_ _"Support XXX please"_. Some are kind and helpful, willing to provide a PR.
I felt both the good and bad sides of open source.

Sometimes, people are being eager and impulsive because of stress and may spread their frustration on the library maintainers.
Even myself, can be affected by stress or a bad mood.

People may hope for instant answers, and maintainers will face questions like _"Why are you running away from my questions?"_.
I understand a library performing bad can cause your precious time to be wasted, but even if we put all our efforts in maintaining the library, it can't be flawless.

Since then, I feel I'm way more respectful to open-source project maintainers.
At least, I'll check my before before firing an issue on somebody else's Github repository, and try to be as respectful as I can ~~with my poor language skills~~.

### Issues

My favourite dev was [Anthony Shew](https://shew.dev), I mentioned him because [the issue he opened](https://github.com/fuma-nama/fumadocs/issues/264) is the best I've ever seen in my open-source career.
He actually cared about my vision and opinion about the API design, and gave a really concise and constructive feature request.

Obviously, I was not a perfect, neither an experienced library dev.
Fumadocs wasn't capable of many things, such a well-explained feature request and idea is powerful. His passion is inspiring.

Before setting up the YAML issue template, there were very few issues that actually followed the issue template, most of them don't even provide a reproducible repository, or an explanation.

**Open a proper issue, follow the instructions, and give maintainers some positive feedback.** This is the biggest motivation you can give to maintainers without specnding money.

## Docs

It's fun to work on the docs of fumadocs. When first building it, I had very little experience on authoring documentation and tutorial content.
Reading through the feedback from developers, the most common problem is that they can't find the docs of something.

I realized the entire docs is unfriendly for beginners to start with, my friends are senior Next.js devs, and of course they are fine with that.
However, not every dev can understand the docs.

So recently, I started to re-write some of the sections, making it easier and appealing for beginners. Welcome to share your feedback on Github Discussions!

## What is Next?

Web Development is an ever-evolving industry, but I believe the spirit of open source won't disappear.
I don't know what I will be building in the future, and that doesn't matter.
Let's build a better web!



================================================
FILE: apps/docs/content/blog/customise-ui.mdx
================================================
---
title: Rethink how we customise UI
description: Deep dive on how Fumadocs UI is designed
author: Fuma Nama
date: 2025-04-15
---

## The Problem

Making a docs framework isn't challenging, the hardest problem is how I can make it perfect for everyone, from the perspective of users and developers.
Undoubtedly, this is **a dilemma** for all frameworks, or even library authors — You cannot write generic code that works out-of-the-box, there's no piece of software that is straight usable while being generic.

For example, headless UI libraries like **Radix UI** gave us the concept of generic UI components: bare UI primitives that we can customise according to our aesthetics.
However, you'll need time to tune them, these primitives are unusable without further customisations.

Yep it's 2025, **Shadcn UI** had led a "revolution" on Web Development. It's a great combination of headless UI and styled defaults that takes an extra step away!
But our problem remains unsolved, it might be preposterous that it becomes "unstyled" again when a vast majority of new sites adopted Shadcn UI.

Personally, I felt overwhelmed by nearly identical, ubiquitous flat designs that are obviously one of the default Shadcn UI styles. It has nothing to do with Shadcn UI, but the rest of developers who don't actually care about aesthetics and uniqueness.
Eventually, **Shadcn-like design became the default styles**, so once again, we will need to do a bit more to make it look stylish.

### What should we do?

As a docs framework started from **"being flexible"**, Fumadocs must be customisable, tuned to meet developers' preferences.
We will need to take customisation seriously if DX is what we aim. And most importantly, **it should encourage developers with a sense of beauty to customise.**

## The Solution

Typically, there are two types of developers:

### those who want docs that just work

Fumadocs need to be opinionated by default such that it is immediately usable, and we only have to offer simplest options to change details. (e.g. colors, overriding components).

Most developers have no desire to install dozens of components just to change a tiny detail, which makes the Shadcn approach suboptimal.

### those who need the perfect docs tailored to their preferences

The kernel of Fumadocs, or the spirit we're pursuing is the latter one. I crafted Fumadocs CLI, a version of Shadcn UI dedicated for Fumadocs, the whole solution is now simplified into a single command:

```package-install
npx @fumadocs/cli customise
```

It accounts for two types:

- Customise the default styles when the exposed options are inadequate.
- Roll their own layout from scratch.

The first one is self-evident, people will always have absurd needs that we have not even considered.
We can install the original components, so it's simply identical to the default UI which they've been using.

The latter one is simpler, we can offer the minimal template they can start customising from.

This methodology, inspired by ejection, brings some nice advantages:

#### Don't break anything when you upgrade Fumadocs

Fumadocs need to be opinionated. Hence, we need to iterate the UI frequently which apparently will break people's hacky customisations.
The charm of Fumadocs CLI is that once you've installed the layout, it stays the same forever regardless of future iterations on Fumadocs UI.

It gives the courage for Fumadocs UI to iterate, and developers to customise unburnt by the fear of upgrading dependencies.

#### Looks Clean

Just like Shadcn UI and Radix UI, Fumadocs UI has a core package (`fumadocs-core`), most generic logic will be abstracted by core.

## What is Next?

The innovation of Shadcn UI is amazing, yet, I believe there's more problems Fumadocs can solve.

See [Flags SDK](https://flags-sdk.dev/frameworks/next) and [BetterAuth](https://www.better-auth.com/docs/introduction), you can't tell at the first glance if they're powered by Fumadocs.
I hope it can continue to be a "breakable" framework known for how customisable it is.



================================================
FILE: apps/docs/content/blog/make-a-blog.mdx
================================================
---
title: Making a Blog with Fumadocs
description: Fumadocs + Blog
author: Fuma Nama
date: 2024-12-15
---

Fumadocs is a docs framework, but it's also a powerful tool to manage content in Next.js. You can use Fumadocs to build a blog site along with docs, on a single Next.js app.

## Overview

This guide helps you build a blog site with Fumadocs and Fumadocs MDX.

We will use Fumadocs MDX to manage the content, and implement our own UI with Tailwind CSS & Fumadocs UI.

### Configure Content

Define a `blogPosts` collection.

```ts title="source.config.ts"
import { defineCollections, frontmatterSchema } from 'fumadocs-mdx/config';
import { z } from 'zod';

export const blogPosts = defineCollections({
  type: 'doc',
  dir: 'content/blog',
  // add required frontmatter properties
  schema: frontmatterSchema.extend({
    author: z.string(),
    date: z.string().date().or(z.date()),
  }),
});
```

Parse the output collection in `source.ts`:

```ts title="lib/source.ts"
import { createMDXSource } from 'fumadocs-mdx';
import { loader } from 'fumadocs-core/source';
import { blogPosts } from '@/.source';

export const blog = loader({
  baseUrl: '/blog',
  source: createMDXSource(blogPosts),
});
```

You can now access the content from `blog`.

### Implement UI

Create an index page for blog posts.

By default, there should be a `(home)` route group with `<HomeLayout />` inside.
Let's put the blog pages under it, this way we can get the nice navbar on our blog site.

```tsx title="app/(home)/blog/page.tsx"
import Link from 'next/link';
import { blog } from '@/lib/source';

export default function Home() {
  const posts = blog.getPages();

  return (
    <main className="grow container mx-auto px-4 py-8">
      <h1 className="text-4xl font-bold mb-8">Latest Blog Posts</h1>
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        {posts.map((post) => (
          <Link
            key={post.url}
            href={post.url}
            className="block bg-fd-secondary rounded-lg shadow-md overflow-hidden p-6"
          >
            <h2 className="text-xl font-semibold mb-2">{post.data.title}</h2>
            <p className="mb-4">{post.data.description}</p>
          </Link>
        ))}
      </div>
    </main>
  );
}
```

<Callout title='Good to Know'>

Colors like `text-fd-muted-foreground` are from the design system of Fumadocs UI, you may also use your own colors, or use Shadcn UI.

</Callout>

And create a page for blog posts.

Note that blog posts won't have nested slugs like `/slug1/slug2`. We don't need a catch-all route for blog posts.

```tsx title="app/(home)/blog/[slug]/page.tsx"
import { notFound } from 'next/navigation';
import Link from 'next/link';
import { InlineTOC } from 'fumadocs-ui/components/inline-toc';
import defaultMdxComponents from 'fumadocs-ui/mdx';
import { blog } from '@/lib/source';

export default async function Page(props: {
  params: Promise<{ slug: string }>;
}) {
  const params = await props.params;
  const page = blog.getPage([params.slug]);

  if (!page) notFound();
  const Mdx = page.data.body;

  return (
    <>
      <div className="container rounded-xl border py-12 md:px-8">
        <h1 className="mb-2 text-3xl font-bold">{page.data.title}</h1>
        <p className="mb-4 text-fd-muted-foreground">{page.data.description}</p>
        <Link href="/blog">Back</Link>
      </div>
      <article className="container flex flex-col px-4 py-8">
        <div className="prose min-w-0">
          <InlineTOC items={page.data.toc} />
          <Mdx components={defaultMdxComponents} />
        </div>
        <div className="flex flex-col gap-4 text-sm">
          <div>
            <p className="mb-1 text-fd-muted-foreground">Written by</p>
            <p className="font-medium">{page.data.author}</p>
          </div>
          <div>
            <p className="mb-1 text-sm text-fd-muted-foreground">At</p>
            <p className="font-medium">
              {new Date(page.data.date).toDateString()}
            </p>
          </div>
        </div>
      </article>
    </>
  );
}

export function generateStaticParams(): { slug: string }[] {
  return blog.getPages().map((page) => ({
    slug: page.slugs[0],
  }));
}
```

And configure metadata:

```tsx title="app/(home)/blog/[slug]/page.tsx"
import { notFound } from 'next/navigation';
import { blog } from '@/lib/source';

export async function generateMetadata(props: {
  params: Promise<{ slug: string }>;
}) {
  const params = await props.params;
  const page = blog.getPage([params.slug]);

  if (!page) notFound();

  return {
    title: page.data.title,
    description: page.data.description,
  };
}
```

### Write Posts

The UI is now complete, you can write some blog posts under the `content/blog` directory, like:

```mdx title="content/blog/hello.mdx"
---
title: Hello World
author: Fuma Nama
date: 2024-12-15
---

## Hello World

This is an example!
```

After spinning up the development server with `next dev`, you should see the blog posts under `/blog` route.



================================================
FILE: apps/docs/content/blog/mdx-v10-summary.mdx
================================================
---
title: Fumadocs MDX v10 Summary
description: Migration Guide and Summary
date: 2024-11-24
author: Fuma Nama
---

## Features

- More customisations via `source.config.ts`, a new config file for your content.
- Introduced **collections**.
- Turbopack support.
- Build-time data validation support.

## Migrate from v9

### Refactor Imports

Refactor the import in `next.config`.

**From:**

```ts
import createMDX from 'fumadocs-mdx/config';

const withMDX = createMDX();

/** @type {import('next').NextConfig} */
const config = {
  reactStrictMode: true,
};

export default withMDX(config);
```

**To:**

```ts
import { createMDX } from 'fumadocs-mdx/next';

const withMDX = createMDX();

/** @type {import('next').NextConfig} */
const config = {
  reactStrictMode: true,
};

export default withMDX(config);
```

### Remove `mdx-components.tsx`

`mdx-components.tsx` is no longer used. It now allows only MDX components passed from `MDX` body's `components` prop.

```tsx
import defaultMdxComponents from 'fumadocs-ui/mdx';

const MDX = page.data.body;

// set your MDX components with `components` prop
<MDX components={{ ...defaultMdxComponents }} />;
```

This encourages explicit import of MDX components.

Previously, `mdx-components.tsx` worked by injecting an import to every compiled Markdown/MDX file.
It's somewhat unnecessary because you can always import the components explicitly, or replace default HTML tags like `img` from MDX body's `components` prop.

### Define Collections

Collection is now introduced on source config file (`source.config.ts`).
It refers to a collection of files/content, such as Markdown files or JSON/YAML files.

Every collection has its own config, you can have customised Zod schema to validate its data, or collection-level MDX options for content collections.

You can create a source config file, and add the following:

```ts
import { defineDocs } from 'fumadocs-mdx/config';

export const { docs, meta } = defineDocs({
  dir: 'content/docs',
});
```

`defineDocs` declares two collections, one with `doc` type that scans content files (e.g. `md/mdx`), one with `meta` type that scans meta files (e.g. `json`).

Now you can generate types using `fumadocs-mdx` command, it's recommended to set it as a `postinstall` script.

```json title="package.json"
{
  "scripts": {
    "postinstall": "fumadocs-mdx"
  }
}
```

When starting the development server, a `.source` folder will be generated, it contains all parsed collections/files.
You can add it to `.gitignore`, it will replace the old `.map` file.

To access the collections, import them from the folder with their original name in `source.config.ts`.

```ts
import { docs, meta } from '@/.source';
```

Now to integrate it with Fumadocs framework, change your `source.ts` from:

```ts
import { map } from '@/.map';
import { createMDXSource } from 'fumadocs-mdx';
import { loader } from 'fumadocs-core/source';

export const { getPage, getPages, pageTree } = loader({
  baseUrl: '/docs',
  rootDir: 'docs',
  source: createMDXSource(map),
});
```

to:

```ts
import { docs, meta } from '@/.source';
import { createMDXSource } from 'fumadocs-mdx';
import { loader } from 'fumadocs-core/source';

export const source = loader({
  baseUrl: '/docs',
  source: createMDXSource(docs, meta),
});
```

- we now recommend exporting the output of `loader` directly as a single variable.
- schema option is no longer defined in `source.ts`, it's handled by `source.config.ts`.
- it takes two collections: `docs` (content) and `meta` (`meta.json`).
  You can leave `meta` as an empty array if it is unused, so you can define only a collection for `docs`.

### `page.data`

When using with `loader`, you no longer need `data.frontmatter` to access frontmatter data.
It is merged into the `page.data` object.

```ts
page.data.frontmatter.title; // [!code --]
page.data.title; // [!code ++]
```

### MDX Options

Instead of passing them to `next.config` file, define a global config in `source.config.ts`:

```ts
import { defineConfig } from 'fumadocs-mdx/config';

export default defineConfig({
  mdxOptions: {
    // here!
  },
});
```

### Collection Schema

The `schema` option of collection allow you to customise the validation schema, it accepts a Zod type.

For `defineDocs`, see [`schema`](/docs/mdx/collections#schema-1).

### Multiple Types

Same as before, you can call `loader` multiple times for different types (e.g. for docs and blog).

```ts
import { createMDXSource } from 'fumadocs-mdx';
import type { InferMetaType, InferPageType } from 'fumadocs-core/source';
import { loader } from 'fumadocs-core/source';
import { meta, docs, blog as blogPosts } from '@/.source';

export const source = loader({
  baseUrl: '/docs',
  source: createMDXSource(docs, meta),
});

export const blog = loader({
  baseUrl: '/blog',
  // as mentioned before, you can leave `meta` an empty array
  source: createMDXSource(blogPosts, []),
});

export type DocsPage = InferPageType<typeof source>;
export type DocsMeta = InferMetaType<typeof source>;
```

and the corresponding `source.config.ts`:

```ts
import {
  defineDocs,
  defineCollections,
  frontmatterSchema,
} from 'fumadocs-mdx/config';
import { z } from 'zod';

export const { docs, meta } = defineDocs({
  dir: 'content/docs',
});

export const blog = defineCollections({
  type: 'doc',
  dir: 'content/blog',
  schema: frontmatterSchema.extend({
    author: z.string(),
    date: z.string().date().or(z.date()).optional(),
  }),
});
```

### Further Readings

You can read the latest docs of Fumadocs MDX for details.

<Cards>
  <Card href="/docs/mdx" title="Fumadocs MDX">
    The built-in content source, build a better content experience on Next.js.
  </Card>
</Cards>



================================================
FILE: apps/docs/content/blog/mdx-v10.mdx
================================================
---
title: Fumadocs MDX v10
description: Improvement over Fumadocs MDX, our built-in content source.
date: 2024-09-06
author: Fuma Nama
---

## The Problem

Fumadocs MDX worked great for docs. But we also want to prioritize flexibility and code organization.

Previously, it was a simple Webpack loader that turns **MDX** into **JavaScript**.
You pass the MDX processor options to the loader, it turns them into JavaScript files.
Then, a `.map.ts` will be exported:

```ts
export const map = {
  'docs/index.mdx': import('./docs/index.mdx'),
  'docs/guide.mdx': import('./docs/guide.mdx'),
};
```

Your Next.js app will import the map file, and access the available MDX files.

This model works, but we started to see some problems:

- **No built-in way to define multiple collections:**

  For example, we have a directory for blog posts and a directory for docs pages.

  On Fumadocs MDX, all these resources are transformed into a single object exported by `.map.ts`:

  ```ts
  export const map = {
    'blog/post.mdx': import('./blog/post.mdx'),
    'docs/index.mdx': import('./docs/index.mdx'),
  };
  ```

  We implemented a solution using Source API `rootDir` option, but this is not the ideal way.
  This also gave us another problem:

- **Different MDX Options for each collection:**

  Same as the above example, we have a `/blog` directory for blog posts.
  If we want to add a remark plugin that **only work on blog posts**, this is impossible with Fumadocs MDX.

  Once you apply a remark plugin, it's effective on all MDX files, including the MDX files in the docs directory.

- **Turbopack Compatibility:**

  Turbopack doesn't allow passing unserializable options to loaders.
  However, the entire MDX, remark and rehype ecosystem use functions for plugins.
  Functions are not serializable, we cannot migrate Fumadocs to Turbopack unless we find a seamless solution that supports Turbopack.

- **Compile-time validation:**

  All schema validation cannot be done during build time because the MDX loader actually, _doesn't know the collections you defined in `source.ts`._

  Furthermore, the Zod schema is passed to the source adapter in `source.ts` rather than the loader:

  ```ts
  import { loader } from 'fumadocs-core/source';
  import { createMDXSource } from 'fumadocs-mdx';

  export const source = loader({
    source: createMDXSource(map, {
      // schema
    }),
  });
  ```

  This loses some performance optimizations that can be possibly done on bundler level.

- **Untyped:**

  The exported `map` object from `.map.ts` file has a type of `unknown`, it is only typed when using it with Source API `loader`.

  This avoided the complexity to auto-generate types, but I wanted to make it typed and usable without Source API.

### The Solution

Taking some references from Content Collections and [Velite](https://velite.js.org), I found it would be great to have a config file for Fumadocs MDX.

#### `source.config.ts`

We can make the syntax similar to Content Collections and other tools, to make the adoption process easier.
To define a collection:

```ts
import { z } from 'zod';

export const blog = defineCollections({
  dir: './blog',
  schema: z.object({
    // the schema
  }),
  mdxOptions: {
    // remark plugins?
  },
});
```

The MDX loader reads the config file, find the corresponding collection of the file, validate, and compile it using the options from collection.

This allows us to pass MDX options normally without breaking Turbopack's rules.

### The Implementation

As the config file is written in TypeScript, we will need a bundler to read it.
I used esbuild, it is a performant bundler written in Go.

After bundling the config file, a dynamic import will work as expected.

```js
await import('./source.compiled.mjs');
```

#### `.map` file

We need a place to import the compiled collections.
Previously, we simply generate a `.map.ts` file with Webpack plugins.
It declares the types, with no actual data.

```ts
export declare const map: unknown;
```

A loader will be used to transform `.map.ts` file into the output aforementioned:

```ts
export const map = {
  'docs/index.mdx': import('./docs/index.mdx'),
  'docs/guide.mdx': import('./docs/guide.mdx'),
};
```

The generated `.map.ts` never changes because it doesn't depend on the config file.
No matter how you configure it, there'll be only a `map` object exported, with a type of `unknown`.

Now, we need to generate types for every collection, and the types may change as we change the collections.
The previous approach is no longer applicable.

I renamed the `.map.ts` file to `.source/index`, both `index.d.ts` and `index.js` are generated by Fumadocs MDX, instead of using a loader.

A map file generator is implemented, it reads the config file and generate output based on exported collections.

#### Auto-reload

We want to watch for changes:

- When a input file added/removed, add or remove relevant entries from the `.source/index.js` file.
- When the config file changed, re-compile affected files, and update generate types at `.source/index.d.ts`.

I chose chokidar to watch file changes, it worked well.
The file watcher lives on `next.config.mjs`, it's independent to the MDX loader.

To notify bundlers when config files changed, we added a **hash**.

```ts
export const collection1 = [import('./docs/index.mdx?hash=hashOfConfigFile')];
```

The file will be re-compiled as the config hash changes.

To optimize performance, we also added the collection name.

```ts
export const collection1 = [
  import('./docs/index.mdx?hash=hashOfConfigFile&collection=collection1'),
];
```

The loader obtains the collection of input file from resource query, without taking extra steps to detect its associated collection.

### Result

A `.source/index` file will be generated, it is fully typed.
The files will be re-compiled as you modify the config file.

- Turbopack supported, we have a small example in the repo using Turbopack.
- Multiple Collections, with its own MDX options.
- Runtime + Build-time validation & transformation.

### Questions

I think there is still room for improvement:

- Use a Turbopack-native thing to bundle the config file?
- Lazy bundle/import the main body of MDX file?

Please give me feedback about the redesign of Fumadocs MDX ;)



================================================
FILE: apps/docs/content/blog/new-conventions.mdx
================================================
---
title: Adding new Conventions
description: Some changes on the docs.
date: 2025-04-08
author: Fuma Nama
---

## `mdx-component.tsx`

Sometimes there are questions raised by beginners confused about where to add MDX components.
Although it's simply located in `page.tsx`, which shouldn't be difficult to find, I think some kind of conventions may help, so I decided to add back `mdx-components.tsx`.

I love to have fewer files, but considering `create-fumadocs-app` should also act as a starting point for beginners who may not be familiar with MDX, it's much more helpful to provide it by default.

### Existing Projects

The convention is optional (only to make the learning curve smoother).
For existing users, you probably knew how to pass MDX components, and no further change is needed.

But you can still make one:

```tsx title="mdx-components.tsx"
import defaultMdxComponents from 'fumadocs-ui/mdx';
import type { MDXComponents } from 'mdx/types';

export function getMDXComponents(components?: MDXComponents): MDXComponents {
  return {
    ...defaultMdxComponents,
    ...components,
  };
}
```

And use it in your MDX component.

```tsx title="page.tsx"
import { getMDXComponents } from '@/mdx-components';

<MDXContent
  components={getMDXComponents({
    // extend it
  })}
/>;
```

## Deprecating `<I18nProvider />`

We now prefer a single `<RootProvider />` for everything, replacing the need for `<I18nProvider />` with a `i18n` prop.

```tsx
<RootProvider
  i18n={
    // i18n provider props
  }
>
  {children}
</RootProvider>
```

This allows Root Provider to handle the hierarchy correctly without revealing too much complexity, for example, the correct order should be:

```tsx
<FrameworkProvider>
  <ThemesProvider>
    <I18nProvider>
      <SidebarProvider>
        <SearchProvider>{children}</SearchProvider>
      </SidebarProvider>
    </I18nProvider>
  </ThemesProvider>
</FrameworkProvider>
```

Changing the hierarchy of different providers may result in problems since they actually rely on each other, now it is all integrated into `<RootProvider />`, including I18n configuration.

The new [Internationalization](/docs/ui/internationalization) guide requires Fumadocs 15.2.3 or above.



================================================
FILE: apps/docs/content/blog/openapi-v9.mdx
================================================
---
title: Fumadocs OpenAPI v9
description: Better UI & DX
date: 2025-05-25
author: Fuma Nama
---

## Overview

This breaking change is mainly made to address problems of `generateFiles()` function.

Previously, it was a simple function to generate multiple MDX files/pages from your OpenAPI schema, same as every docs generator.
We tested it on public OpenAPI schemas such as Unkey, Vercel and examples from Scalar and Swagger's Museum schema.

Since these schemas were written for different docs solutions, or even their custom ones.
We made `generateFiles()` too complicated to be capable of producing best results for various schema styles, and it's even harder to customise the generated file paths of API docs.

This update also include:

- Better UI for schema & playground body input
- Improved type-safety for `generateFiles()`

## Breaking Changes

The algorithm for generating file paths is changed:

- `meta.json` will no longer be generated, add as your wanted.
- `per: operation`: The generated path will be identical to your operation id. If not defined, it takes your endpoint path instead.

### Group By

The behaviour of `groupBy` API is also changed.

| value | output                                                 |
| ----- | ------------------------------------------------------ |
| tag   | `{tag}/{operationId ?? endpoint_path}.mdx`             |
| route | `{endpoint_path}/{method}.mdx` (ignores `name` option) |
| none  | `{operationId ?? endpoint_path}.mdx` (default)         |

### Customise Output

The usage of `name` option is renewed, it can be used to customise the output path of files.

```ts
import { generateFiles } from 'fumadocs-openapi';

void generateFiles({
  name: (output, document) => {
    // page info
    console.log(output);
    // parsed OpenAPI schema
    console.log(document);
    return 'my-dir/filename';
  },
});
```

## Migration

You can start using the latest algorithm, or keep the current behaviour with:

```ts
import { generateFiles } from 'fumadocs-openapi';

void generateFiles({
  name: {
    algorithm: 'v1',
  },
});
```

Note that it won't create `meta.json` anymore even with `algorithm` set to `v1`, you can keep your current generated `meta.json` files.



================================================
FILE: apps/docs/content/blog/v12-after.mdx
================================================
---
title: Fumadocs 12.0.5
description: After the release of Fumadocs 12
date: 2024-06-13
author: Fuma Nama
---

## Some Improvements

After releasing Fumadocs 12, some improvements were made to the new UI.

### TOC Popover

Previously, this was only available on larger devices. Now, it's collapsed to a popover on smaller devices.

<div className='mx-auto max-w-[400px]'>

![Preview](/blog/toc-popover.png)

</div>

### Links Menu

To make the sidebar look even better, we moved navigation links to the links menu (the three-dots button at the top corner).

The recommended design is:

- Docs related links: Use `<RootToggle />` or include it in page trees.
- Other links: Use the Links API of docs layout.

<div className='mx-auto max-w-[400px]'>

![Preview](/blog/links-menu.png)

</div>

### Breadcrumbs

Removed the duplicated page name from breadcrumbs, now it only shows the folder names.
Also, you can enable `includeSeparators` to show separators on your breadcrumbs component.

The new breadcrumbs look cleaner and match the design even better.

## Adaption

Some docs sites such as https://yeecord.com and https://turbo.build have adopted the new UI, I'm very excited about it.
Removing the navbar seemed to be a very risky move to me, almost no documentation framework has done it, and I was expecting some complaints about the new design.

Luckily, most people are satisfied with the new UI.
The new design was originally inspired by Arc, their sidebar looked very impressive to me.
Although I soon discovered the docs site of Linear also doesn't have a navbar, Arc is still the first inspiration of the redesign.

I'm grateful that many people gave me their feedback about the new design, so that I can keep making Fumadocs a better framework to use.
Let's make better docs.



================================================
FILE: apps/docs/content/blog/v12.mdx
================================================
---
title: Fumadocs 12
description: Introduce Fumadocs v12
date: 2024-06-09
author: Fuma Nama
---

## What's New?

Fumadocs v12 mainly aims to improve the UI, prioritizing content and reading experience.

### New UI

After observing large docs sites like https://turbo.build, I found that the navbar took too much space on the screen, while it only contains links to Blog, Showcase, GitHub, etc.
They are not necessarily related to the docs, placing them at the top of our screen doesn't bring a better reading experience.

All these links are now moved to the sidebar, allowing a clean, minimal view of the docs.

![Preview](/blog/v12.png)

I also noticed the docs start to look messy as your content grows. To ameliorate this, the sidebar now includes a border and background by default.
This helps readers to distinguish navigation elements and content easier.

The sidebar will always be placed at the left of the screen, having a bigger space on large viewports.

I believe the new UI still has room for improvement. Welcome to report UI issues, or leave feedback!

### Better Multi Page Trees

We supported multiple page trees at a very early version of Fumadocs. However, it lacks proper explanations and guides to configure it.
In the past, you needed to implement a navigation element to switch between page trees and mark the folder as a root folder.

Now, you can use the `<RootToggle />` component directly, and the docs has a better explanation of it.

<div className="flex flex-row justify-center mx-auto max-w-[300px]">
  ![Preview](/blog/v12-root-toggle.png)
</div>

### Page Tree Post Processors

You can now attach properties to page trees easily with the Source API.

```ts
import { loader } from 'fumadocs-core/source';

export const utils = loader({
  pageTree: {
    attachFile(node) {
      // modify the node
      return node;
    },
  },
});
```

### Improved i18n Support

The language switch is now added to Docs Layout.

```tsx
import { DocsLayout } from 'fumadocs-ui/layouts/docs';

export default function Layout({ children }: { children: React.ReactNode }) {
  return <DocsLayout i18n>{children}</DocsLayout>;
}
```

Note that `<LanguageSelect />` component is now replaced by `<LanguageToggle />`, make sure to remove references to the old component.

## Breaking

### UI

Remove deprecated option `enableThemeProvider` from Root Provider. Use `theme.enabled` instead.

### Core

Remove deprecated option `minWidth` from Sidebar component. Use `blockScrollingWidth` instead

## Fixes

### UI

- Fix problems with twoslash codeblocks
- Apply typography styles to headings
- Support translation for theme label

### OpenAPI

- Fix nullable types cannot be detected

### Core

- Remark Headings: Support code syntax in headings

### Create Fumadocs App

- Add `layout.config.tsx` file for sharing layout options



================================================
FILE: apps/docs/content/blog/v13.mdx
================================================
---
title: Fumadocs v13
description: Introducing Fumadocs v13
author: Fuma Nama
date: 2024-07-28
---

## Introduction

Fumadocs v13 has been released. It aims to fix the CSS pollution problem and remove deprecated APIs.

## New Features

### Better Code Blocks

Now supports keeping the original background generated by Shiki on `CodeBlock` component.

```tsx
import { Pre, CodeBlock } from 'fumadocs-ui/components/codeblock';

<MDX
  components={{
    pre: ({ ref: _ref, ...props }) => (
      <CodeBlock keepBackground {...props}>
        <Pre>{props.children}</Pre>
      </CodeBlock>
    ),
  }}
/>;
```

### Callout

Callout is now a default MDX component, you can use it in MDX files without an import, or manually adding it to MDX components.

```mdx
<Callout type="warn">Hello World</Callout>
```

### New Headless TOC

The headless component of Table of Contents (TOC) now has a separate scroll container provider.

```tsx
import * as Base from 'fumadocs-core/toc';

return (
  <Base.AnchorProvider>
    <Base.ScrollProvider>
      <Base.TOCItem />
      <Base.TOCItem />
    </Base.ScrollProvider>
  </Base.AnchorProvider>
);
```

The anchor provider can be placed anywhere.

### Opt-out of Container

Now supports disabling the default container styles of Tailwind CSS added by Fumadocs UI.

```js
import { createPreset } from 'fumadocs-ui/tailwind-plugin';

/** @type {import('tailwindcss').Config} */
export default {
  presets: [
    createPreset({
      modifyContainer: false,
    }),
  ],
};
```

### Admonition Syntax

In Docusaurus, there's an [Admonition syntax](https://docusaurus.io/docs/markdown-features/admonitions).

For people migrating from Docusaurus, you can enable the new remark plugin to support the Admonition syntax.

See [Remark Admonition](/docs/headless/mdx/remark-admonition).

## Breaking Changes

### Prefix to colors, animations, and utilities

Previously, the Tailwind CSS plugin of Fumadocs UI added colors (including `primary`, `secondary`) which conflicted with Shadcn UI and other design systems.
A `fd-` prefix is added to them to allow the flexibility to have a separated design system on docs.

To use the Fumadocs UI colors on your primary app, enable the `addGlobalColors` option.

```js
import { createPreset } from 'fumadocs-ui/tailwind-plugin';

/** @type {import('tailwindcss').Config} */
export default {
  presets: [
    createPreset({
      addGlobalColors: true,
    }),
  ],
};
```

This adds the colors without the `fd-` prefix.

Or you can just reference them with the `fd-` prefix, like `bg-fd-background`.

### Tailwind CSS Plugin ESM-only

Since Tailwind CSS supports TypeScript configuration, it makes sense to migrate the entire plugin to ESM.

Use ESM syntax in your configuration.

```ts
import { createPreset } from 'fumadocs-ui/tailwind-plugin';

/** @type {import('tailwindcss').Config} */
export default {
  content: [
    './app/**/*.{ts,tsx}',
    // others
  ],
  presets: [createPreset()],
};
```

### Remove `RollButton` component

`RollButton` was introduced because there were no "Table Of Contents" on mobile viewports.
Now users can use the TOC Popover to switch between headings, it is no longer a suitable design for Fumadocs UI.

You may copy the [last implementation of `RollButton`](https://github.com/fuma-nama/fumadocs/blob/fumadocs-ui%4012.5.6/packages/ui/src/components/roll-button.tsx).

### Better i18n

Now the `I18nProvider` component requires the `locale` prop instead of parsing it from pathname.
This fixed some bugs with the I18n middleware.

We also changed the usage of `translations` to reduce extra translations loaded on the client side.
You have to pass the active translations directly.

`locales` is passed as the available options on the Language Select component.

```tsx
import { RootProvider } from 'fumadocs-ui/provider';
import type { ReactNode } from 'react';
import { I18nProvider } from 'fumadocs-ui/i18n';

export default function Layout({
  params: { lang },
  children,
}: {
  params: { lang: string };
  children: ReactNode;
}) {
  return (
    <html lang={lang}>
      <body>
        <I18nProvider
          locale={lang}
          // options
          locales={[
            {
              name: 'English',
              locale: 'en',
            },
            {
              name: 'Chinese',
              locale: 'cn',
            },
          ]}
          // translations
          translations={
            {
              cn: {
                toc: '目錄',
              },
            }[lang]
          }
        >
          <RootProvider>{children}</RootProvider>
        </I18nProvider>
      </body>
    </html>
  );
}
```

### Code Block Usage

The previous usage was confusing, some props are passed directly to `pre` while some are not.

With v13, pass all props to the `CodeBlock` component.
This also includes class names, you may change your custom styles if necessary.

```tsx
import { Pre, CodeBlock } from 'fumadocs-ui/components/codeblock';

<MDX
  components={{
    // HTML `ref` attribute conflicts with `forwardRef`
    pre: ({ ref: _ref, ...props }) => (
      <CodeBlock {...props}>
        <Pre>{props.children}</Pre>
      </CodeBlock>
    ),
  }}
/>;
```

### Remove Deprecated APIs

- Remove deprecated `fumadocs-ui/components/api` components.
- Replace `secondary` link items with `icon` link items.
- Rename `id` prop on Tabs component to `groupId`.

## Bug Fixes

### UI

- Fixed empty folder animation problems caused by Radix UI.



================================================
FILE: apps/docs/content/blog/v14.mdx
================================================
---
title: Fumadocs v14
description: Introducing Fumadocs v14
author: Fuma Nama
date: 2024-09-19
---

## Why?

Taking some inspirations from [Shadcn UI](https://ui.shadcn.com), I decided to make Fumadocs easier to use, with more APIs that simplify the design.

This is a large update.

## New Features

### Fumadocs CLI

Clone Fumadocs UI components to your workspace and modify them.

```package-install
npm install @fumadocs/cli --save-dev
```

```bash
pnpm fumadocs add
```

See [docs](/docs/cli) for details.

### Sidebar Tabs

Previously, multiple page tree is implemented with Fumadocs UI `RootToggle` component.
You have to add it to the sidebar banner which isn't as intuitive as other APIs.

With Sidebar Tabs, by creating a root folder, Fumadocs will immediately add a tabs component to the sidebar.

```json title="meta.json"
{
  "root": true,
  "title": "Tab Name",
  "description": "Some text about the tab",
  "icon": "IconName"
}
```

### Orama

We migrated the built-in search from Flexsearch to Orama, the same search engine that powers the Node.js docs site.
It is open source, and also have their Cloud integration.

No changes required.
You can use our new `createFromSource` API to create the route handler, which offers i18n support without any configurations.

```ts
import { source } from '@/lib/source';
import { createFromSource } from 'fumadocs-core/search/server';

export const { GET } = createFromSource(source);
```

In favour of this, the new search client of Fumadocs is introduced with support for different API clients.
This includes Algolia, Orama (static and dynamic with route handlers).

```ts
import { useDocsSearch } from 'fumadocs-core/search/client';

const client = useDocsSearch({
  type: 'static',
});
```

See [Search API](/docs/headless/search).

### Static Search

For sites with static export, you cannot use route handlers.
We now support client-side search using search indexes generated during build time.

See [Static Search](/docs/headless/search/orama#static-export).

### Less Dependencies

I'm always working to reduce the dependencies required for Fumadocs, that is one reason why we separated Fumadocs into different packages.

Fumadocs UI now bundles icons from `lucide-react`, for Next.js apps that is not using Lucide, they can avoid downloading the entire icon library.

And `swr` is no longer used for search client, we implemented a light `useQuery` hook with extra care on React performance optimization.

### New Metadata Image API

To improve code organization, we made a Metadata Image API on Fumadocs Core.
It is a tiny wrapper over Next.js Metadata API, composes seamlessly with Source API.

```ts title="lib/metadata.ts"
import { createMetadataImage } from 'fumadocs-core/server';
import { source } from '@/lib/source';

export const metadataImage = createMetadataImage({
  imageRoute: '/docs-og',
  source,
});
```

```ts title="route.ts"
import { generateOGImage } from 'fumadocs-ui/og';
import { metadataImage } from '@/lib/metadata';

export const GET = metadataImage.createAPI((page) => {
  return generateOGImage({
    title: page.data.title,
    description: page.data.description,
    site: 'My App',
  });
});

export function generateStaticParams() {
  return metadataImage.generateParams();
}
```

```tsx title="page.tsx"
import { source } from '@/lib/source';
import { metadataImage } from '@/lib/metadata';
import { notFound } from 'next/navigation';

export function generateMetadata({ params }: { params: { slug?: string[] } }) {
  const page = source.getPage(params.slug);
  if (!page) notFound();

  return metadataImage.withImage(page.slugs, {
    title: page.data.title,
    description: page.data.description,
  });
}
```

In favour of this, the `getImageMeta` function from `fumadocs-ui/og` has been removed.

### Shorthands

As you may notice, we introduced more abstractions to reduce the setup steps required for enabling some features.
It is also required for the code generator from Fumadocs CLI to work.

Like the `generateParams` function, it enables zero-configuration i18n support for Next.js `generateStaticParams`.

```ts
import { source } from '@/lib/source';

export function generateStaticParams() {
  return source.generateParams();
}
```

### Better Card Component

Fumadocs UI Card can now support usage without `href`.
You can pass children as React node, Typography styles will be applied correctly.

```mdx
<Card icon={<Database />} title='Content Source'>

The input/source of your content, it can be a CMS, or local data layers like [Content Collections](https://www.content-collections.dev) and [Fumadocs MDX](/docs/mdx).

</Card>
```

### Better Category Component

The original `DocsCategory` component was copied from our official docs, which is a very simple implementation that doesn't take page tree into account.

Now it accepts the source object via `from` prop.

```tsx title="page.tsx"
import { source } from '@/lib/source';
import { DocsCategory } from 'fumadocs-ui/page';

const page = source.getPage(params.slug);

<DocsCategory page={page} from={source} />;
```

By default, it takes the `locale` property from `page` to find the corresponding page tree to traverse.
You can also force a page tree.

```tsx title="page.tsx (i18n enabled)"
import { source } from '@/lib/source';
import { DocsCategory } from 'fumadocs-ui/page';

const page = source.getPage(params.slug, params.lang);

<DocsCategory page={page} from={source} tree={source.pageTree['en']} />;
```

### OpenAPI Tag Display Name

Change the display name with `x-displayName`.

```yaml title="openapi.yaml"
tags:
  - name: test
    description: this is a tag.
    x-displayName: My Test Name
```

### Better TypeScript Docs Automation

The `AutoTypeTable` component now supports a `type` prop, you can use TypeScript inside the field:

```mdx
<AutoTypeTable
  path="file.ts"
  name="B"
  type={`
import { ReactNode } from "react"
export type B = ReactNode | { world: string }
`}
/>
```

And code highlighting in typedoc is also supported with Shiki.

We **highly recommend** to use `createTypeTable` instead of importing the component in MDX files, this allows a single instance of TypeScript Compiler API to be shared.
See [Auto Type Table](/docs/ui/components/auto-type-table).

### Next.js 15

Fumadocs v14 is compatible with Next.js 15, supporting sync and async usages of dynamic APIs.

<Callout type="info" title="Backward compatible">
  Next.js 14 is also supported, notice that guides/tutorials in the docs are
  mainly for Next.js 15.
</Callout>

## UI Improvements

### Navbar Links

The navigation menu on Home layout is redesigned, with better animation and flexibility.

See the [new API](/docs/ui/navigation).

![New Navbar](/blog/v14-navbar.png)

### Link Styles

You can escape Tailwind CSS Typography styles for the `a` tag with `data-card` attribute.

```jsx
<a data-card="">
  No styles applied <code>But it does</code>
</a>
```

### Disable Theme Switch

You can disable the default theme switcher with `disableThemeSwitch` on layouts.

## Breaking Changes

### Move `dir` option from `defineDocs`

```ts
import { defineDocs } from 'fumadocs-mdx/config';

export const { docs, meta } = defineDocs({
  dir: 'my/content/dir', // define once
});
```

### Refactor Imports

**Previous**

```ts
import { DocsLayout } from 'fumadocs-ui/layout';
import { HomeLayout } from 'fumadocs-ui/home-layout';
import { HomeLayoutProps } from 'fumadocs-ui/home-layout';
```

**New Import Path**

```ts
import { DocsLayout } from 'fumadocs-ui/layouts/docs';
import { HomeLayout } from 'fumadocs-ui/layouts/home';
import { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';
```

### Twoslash UI

We moved Twoslash UI components to `fumadocs-twoslash`.
This isolates some logic from Fumadocs UI, allowing a better code organization.

Import the CSS styles and `Popup` component differently.

```ts
import 'fumadocs-twoslash/twoslash.css';

import { Popup } from 'fumadocs-twoslash/ui';
```

<Callout>It requires Tailwind CSS.</Callout>

### Remove Deprecated APIs

The previous `createI18nSearchAPIExperimental` is now renamed to `createI18nSearchAPI`.
It takes the i18n config instead of scattering the options everywhere.

The types from `fumadocs-core/search/shared` is moved to `fumadocs-core/server`.



================================================
FILE: apps/docs/content/blog/v15-2.mdx
================================================
---
title: Fumadocs v15.2
description: From Next.js only to Next.js first.
date: 2025-03-28
author: Fuma Nama
---

## Overview

Fumadocs 15.2 introduces a layer over `fumadocs-core` to extend support to other React frameworks, including React Router and Tanstack Start. Other frameworks can also be supported using the `FrameworkProvider` from `fumadocs-core/framework/base`.

### Why?

The main focus of Fumadocs is flexibility, I aim to support more frameworks as long as it doesn't change the fundamentals of Fumadocs, like the separation of core and UI package.

The React.js ecosystem is a joy to work with, porting Fumadocs to other frameworks isn't as difficult as I thought.
It's also my goal to make it work not only for Next.js devs, but also everyone in the ecosystem who is using a SSR-compatible React framework.

### Breaking Changes

This is a minor release, it shouldn't break any previous usages unless you're relying on the lower level APIs from `fumadocs-core` without `fumadocs-ui`.

Fumadocs Core now requires a `FrameworkProvider`. It's as simple as wrapping it with appropriate provider:

```tsx
import { NextProvider } from 'fumadocs-core/framework/next';

export function Provider({ children }) {
  return <NextProvider>{children}</NextProvider>;
}
```

If you're using Fumadocs UI, there's no need to change. `RootProvider` included it by default, and allows you to provide your own framework with:

```tsx
import { RootProvider } from 'fumadocs-ui/provider/base';

export function Provider({ children }) {
  // now it doesn't add the Next.js provider
  return <RootProvider>{children}</RootProvider>;
}
```

Please report issues if you find any public APIs are broken unexpectedly.

### Compilation Time

15.2 also included some small performance improvements to Fumadocs, the time taken for Turbopack to start dev server and compile its first docs page is about 2-3 seconds.

This change also potentially allows Fumadocs to run on Vite, production build of minimal React Router setup only takes around 4s on a Macbook.

## Try it out

Upgrade from your existing Next.js docs:

```bash
pnpm update -i -r
```

If you want to try the React Router example:

```bash
pnpm create fumadocs-app
```

### Future Plans

15.2 doesn't support Astro, and probably won't unless better React.js support is provided by Astro.

- `transition:persist` is needed for Fumadocs UI layouts, however this will also affect its children (e.g. MDX content), causing page content to be persisted even after navigation.
- React contexts cannot work across islands, this changes the usage of Fumadocs significantly and hence require a redesign of APIs.

Fumadocs will continue to be Next.js first, the docs won't be changed to generalize usages of other frameworks. Instead, a new docs site will be developed for other frameworks (planned).



================================================
FILE: apps/docs/content/blog/v15.mdx
================================================
---
title: Fumadocs v15
description: Tailwind CSS v4
author: Fuma Nama
date: 2025-01-24
---

## Overview

The purpose of v15 is mainly to support Tailwind CSS v4.
Tailwind CSS v4 is a complete redesign of its API and internals, to fully adhere to the new CSS-first config style, a breaking change is required.

Fumadocs v15 has no other significant changes other than migrating the config to Tailwind CSS v4.

## Breaking Changes

Before making the switch, upgrade your site to Tailwind CSS v4 following their [upgrade guide](https://tailwindcss.com/docs/upgrade-guide).
You can remove the unused `tailwind.config.js` file and fully rely on the new CSS-first config.

Add `@import` to the presets exported by Fumadocs UI, and include the `fumadocs-ui` package in the source.

```css title="Tailwind CSS"
@import 'tailwindcss';
@import 'fumadocs-ui/css/neutral.css';
@import 'fumadocs-ui/css/preset.css';

/* relative to the CSS file, make sure it's correct for your app */
@source '../node_modules/fumadocs-ui/dist/**/*.js';
```

Since v15, you will no longer pass options in JavaScript to customise plugins.
Instead, you can use the new alternatives in Tailwind CSS v4.

### `addGlobalColors: true`

Forward the colors again:

```css
@theme {
  --color-primary: var(--color-fd-primary);
  /* same for other colors */
}
```

### CSS Variables

Fumadocs no longer use `--fd-<color>` like `--fd-primary: 0 0% 0%` for colors, it directly defines and uses colors in `@theme`.
Instead of the previous format, it uses `hsl()`:

```css
@theme {
  --color-fd-primary: hsl(0, 0%, 100%);
}
```

### Steps

Previous Tailwind CSS utilities like `steps` & `step` are renamed to `fd-steps` and `fd-step` to avoid conflicts.

### Typography

Typography utilities including `prose`, `prose-*` modifiers will continue to work. Please report problems if they are no longer working or have unexpected change in behaviours.

## Improvements

v15 also includes some minor improvements to the UI and OpenAPI integration.

### Code Block Tabs

In the past, you needed to write the `<Tabs />` manually when separating code blocks into tabs.

````mdx
<Tabs items={["Tab 1", "Tab 2"]}>

```ts tab="Tab 1"
console.log('Hello World');
```

```ts tab="Tab 2"
console.log('Hello World');
```

</Tabs>
````

Now you can do:

````mdx
```ts tab="Tab 1"
console.log('Hello World');
```

```ts tab="Tab 2"
console.log('Hello World');
```
````

Note that the previous usage still works for those who want to customise or pass props to the `<Tabs />` component.

### Reversed Items in `meta.json`

The rest item `...` in the `pages` property of `meta.json` now supports reversed order:

```json
{
  "pages": ["z...a"]
}
```

### OpenAPI Playground

v15 improves the playground UI (inspired by the minimalism of Scalar), and brought Scalar API Client support to Fumadocs OpenAPI.

You can enable the Scalar API Client using `useScalar` option in `createOpenAPI()`:

```ts
import { createOpenAPI } from 'fumadocs-openapi/server';
import { APIPlayground } from 'fumadocs-openapi/scalar';

export const openapi = createOpenAPI({
  renderer: {
    APIPlayground,
  },
});
```

And install & configure their `@scalar/api-client-react`:

```package-install
@scalar/api-client-react
```

```css title="global.css"
@import '@scalar/api-client-react/style.css' layer(base);
```

<Callout>
  Be careful that you must configure Tailwind CSS first, using the pre-built
  stylesheet of Fumadocs UI will conflict with their `style.css` because both
  libraries use Tailwind CSS for styling.
</Callout>

## Future Plans

This update should be a simple migration for most developers updating to Tailwind CSS v4.

In the future, we also want to make further improvements to Fumadocs MDX:

- remove `transform` API - you can easily do the same with `.map()` on runtime like:

```ts
import { blog } from "@/.source"

export const updatedBlog = blog.map(...)
```

- remove Manifest API - it was designed to export search indexes, but now it's recommended to implement using route handlers.

- Mention more about our [MDX Remote](/docs/headless/custom-source#mdx-remote) package, it will be the primary solution to handle large docs sites with performance needs that bundlers couldn't do, including lazy compilation of MDX files.



================================================
FILE: apps/docs/content/blog/why-docs.mdx
================================================
---
title: Why do you need docs?
description: You've read so many docs, but are they necessary?
date: 2024-05-26
author: Fuma Nama
---

People often ask me, do we really need a framework to build docs sites? Well, **You don't**.

Documentation sites are so important in software development,
internal docs for developers in your company to understand the architecture,
docs for frameworks,
docs for web standards...

Building docs seems simple, but can be difficult.

There are so many paradigms to build docs, but writing beginner-friendly docs could be difficult.
As a result, people tend to use powerful docs frameworks, making the docs site interactive and straightforward.

## Over-Engineered

For the docs of a small library/API service, you probably don't need to setup a Next.js site and spend time writing your site.
Neither Nextra nor Fumadocs could be better than GitHub wiki and Swagger docs in this case.

They offer a good, decent UI, basic functionalities, and a proper workflow of authoring docs.
The DX is good enough, I can't think of a reason to switch to a full-powered docs framework just to make your docs look fancy.

I'll just recommend writing your docs in markdown, make it accessible on your GitHub repository.

## Why Framework?

Now you may wonder, why major services and frameworks have their own docs sites built with docs frameworks?

Of course, _Usually_ using things like GitHub Wiki is adequate, but it is not always true.
Let's take Component Library for example, you cannot showcase your components with Markdown.
You will constantly find an ordinary Markdown document lacks capability and flexibility.

Documentation frameworks aim to solve this problem, with the ability to integrate with major libraries like **React.js** and **Vue.js**.
Good examples are Vitepress, Mintlify and Nextra - They made writing docs more convenient and effective, while offering a better, dedicated experience to readers.

For anything more than a simple library or API service, **it is worth trying.**

### Reinvent the Wheels

I would never recommend building a "custom docs site" on your own, without a proper docs framework.
Despite the **Don't re-invent the wheels** principle, your hand-made docs site actually takes way more effort to make it decent.

1. Document Search
2. A user-friendly navigation experience
3. Reading experience
4. UI/UX Design

Implementing them properly already sounds nerve-racking, right?

The docs itself, is definitely not your first priority. You should never spend your precious time re-inventing the wheels - **it isn't worth it**.

From my perspective, I'd rather use GitHub Wiki than re-inventing the wheels.
Why don't pick a decent solution? It saves your indispensable time, and help reduce the shitty docs sites on the internet.

## What do we focus at Fumadocs?

I personally value reading experience more than a fancy eye-catching UI.
You may notice, we do not have animations everywhere, and we avoided many fancy designs.

Fanciness of UI should stay only in landing page, a docs site should focus on **content.**
Navigation elements are helpers to browse your site, never should they take up too much space on the screen.

One thing I hated the most is the design of _two sidebars_, it is confusing and meaningless.
You can just organize all items to a single, clean sidebar, but people instead added two hamburger buttons to the navbar.

<div className='mx-auto max-w-[400px]'>

![Next.js Docs](/blog/img.png)

</div>

My favourite docs site is still [Linear docs](https://linear.app/docs), looks good and simple.

## Conclusion

1. You don't need a full-powered docs framework for a small library
2. Don't make a docs site on your own, use a proper docs framework
3. Fumadocs focuses on reading experience
4. You should focus on content, too



================================================
FILE: apps/docs/content/docs/meta.json
================================================
{
  "pages": ["ui", "headless", "mdx", "cli", "openapi"]
}



================================================
FILE: apps/docs/content/docs/cli/index.mdx
================================================
---
title: User Guide
description: The CLI tool that automates setups and installs components.
---

## Installation

Initialize a config for CLI:

```package-install
npx @fumadocs/cli
```

You can change the output paths of components in the config.

### Components

Select and install components.

```package-install
npx @fumadocs/cli add
```

You can pass component names directly.

```package-install
npx @fumadocs/cli add banner files
```

#### How the magic works?

The CLI fetches the latest version of component from the GitHub repository of Fumadocs.
When you install a component, it is guaranteed to be up-to-date.

In addition, it also transforms import paths.
Make sure to use the latest version of CLI

> This is highly inspired by Shadcn UI.

### Customise

A simple way to customise Fumadocs layouts.

```package-install
npx @fumadocs/cli customise
```

### Tree

Generate files tree for Fumadocs UI `Files` component, using the `tree` command from your terminal.

```package-install
npx @fumadocs/cli tree ./my-dir ./output.tsx
```

You can output MDX files too:

```package-install
npx @fumadocs/cli tree ./my-dir ./output.mdx
```

See help for further details:

```package-install
npx @fumadocs/cli tree -h
```

#### Example Output

```tsx title="output.tsx"
import { File, Folder, Files } from 'fumadocs-ui/components/files';

export default (
  <Files>
    <Folder name="app">
      <File name="layout.tsx" />
      <File name="page.tsx" />
      <File name="global.css" />
    </Folder>
    <Folder name="components">
      <File name="button.tsx" />
      <File name="tabs.tsx" />
      <File name="dialog.tsx" />
    </Folder>
    <File name="package.json" />
  </Files>
);
```



================================================
FILE: apps/docs/content/docs/cli/meta.json
================================================
{
  "root": true,
  "title": "Fumadocs CLI",
  "description": "The CLI tool for docs automation",
  "icon": "Terminal"
}



================================================
FILE: apps/docs/content/docs/headless/custom-source.mdx
================================================
---
title: Custom Source
description: Build your own content source
---

## Introduction

**Fumadocs is very flexible.** You can integrate with any content source, even without an official adapter.

> This guide assumes you are experienced with Next.js App Router.

### Examples

You can see examples to use Fumadocs with a CMS, which allows a nice experience on publishing content, and real-time update without re-building the app.

- [BaseHub](https://github.com/fuma-nama/fumadocs-basehub)
- [Sanity](https://github.com/fuma-nama/fumadocs-sanity)

For a custom content source implementation, you will need:

### Page Tree

You can either hardcode the page tree, or write some code to generate one.
See [Definitions of Page Tree](/docs/headless/page-tree).

Pass your Page Tree to `DocsLayout` (usually in a `layout.tsx`).

```tsx title="layout.tsx"
import { DocsLayout } from 'fumadocs-ui/layouts/docs';
import type { ReactNode } from 'react';

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <DocsLayout
      nav={{ title: 'Example Docs' }}
      tree={
        {
          /// your own tree
        }
      }
    >
      {children}
    </DocsLayout>
  );
}
```

The page tree is like a smarter "sidebar items", they will be referenced everywhere in the UI for navigation elements, such as the page footer.

### Docs Page

Same as a normal Next.js app, the code of your docs page is located in `[[...slug]]/page.tsx`.

#### SSG

Define the [`generateStaticParams`](https://nextjs.org/docs/app/api-reference/functions/generate-static-params) function.
It should return a list of parameters (`params`) to populate the `[[...slug]]` catch-all route.

#### Body

In the main body of page, find the corresponding page according to the slug and render its content inside the `DocsPage` component.

You also need table of contents, which can be generated with your own implementation, or using the [`getTableOfContents`](/docs/headless/utils/get-toc) utility (Markdown/MDX only).

```tsx
import { DocsPage, DocsBody } from 'fumadocs-ui/page';
import { getPage } from './my-content-source';
import { notFound } from 'next/navigation';

export default function Page({ params }: { params: { slug?: string[] } }) {
  const page = getPage(params.slug);
  if (!page) notFound();

  return (
    <DocsPage toc={page.tableOfContents}>
      <DocsBody>{page.render()}</DocsBody>
    </DocsPage>
  );
}
```

#### Metadata

Next.js offers a Metadata API for SEO, you can configure it with `generateMetadata` (similar as the code above).

### Document Search

This can be difficult considering your content may not be necessarily Markdown/MDX.
For Markdown and MDX, the built-in [Search API](/docs/headless/search/orama) is adequate for most use cases.
Otherwise, you will have to bring your own implementation.

We recommend 3rd party solutions like Algolia Search. They are more flexible than the built-in Search API, and is easier to integrate with remote sources.
Fumadocs offers a simple [Algolia Search Adapter](/docs/headless/search/algolia), which includes a search client to integrate with Fumadocs UI.

## MDX Remote

Fumadocs offers the **MDX Remote** package, it is a helper to integrate Markdown-based content sources with Fumadocs.
You can think it as a `next-mdx-remote` with built-in plugins for Fumadocs.

### Setup

```package-install
@fumadocs/mdx-remote
```

The main feature it offers is the MDX Compiler, it can compile MDX content to JSX nodes.
Since it doesn't use a bundler, there's some limitations:

- No imports and exports in MDX files.

It's compatible with Server Components. For example:

```tsx
import { compileMDX } from '@fumadocs/mdx-remote';
import { getPage } from './my-content-source';
import { DocsBody, DocsPage } from 'fumadocs-ui/page';
import { getMDXComponents } from '@/mdx-components';

export default async function Page({
  params,
}: {
  params: { slug?: string[] };
}) {
  const page = getPage(params.slug);
  const compiled = await compileMDX({
    source: page.content,
  });

  const MdxContent = compiled.body;

  return (
    <DocsPage toc={compiled.toc}>
      <DocsBody>
        <MdxContent components={getMDXComponents()} />
      </DocsBody>
    </DocsPage>
  );
}
```

#### Images

On some platforms like Vercel, the original `public` folder (including static assets like images) will be removed after `next build`.
`compileMDX` might no longer be able to access local images in `public`.

When referencing images, make sure to use a URL.



================================================
FILE: apps/docs/content/docs/headless/index.mdx
================================================
---
title: Introduction
description: Getting started with core library
icon: Album
---

## What is this?

Fumadocs Core offers server-side functions and headless components to build docs on any React.js frameworks like Next.js.

- Search (built-in: Orama, Algolia Search)
- Breadcrumb, Sidebar, TOC Components
- Remark/Rehype Plugins
- Additional utilities

<Callout title="Tip">

    It can be used without Fumadocs UI, in other words, it's headless.

    For beginners and normal usages, use [Fumadocs UI](/docs/ui).

</Callout>

## Installation

No other dependencies required.

```package-install
fumadocs-core
```

For some components, a framework provider is needed:

```tsx tab="Next.js"
import type { ReactNode } from 'react';
import { NextProvider } from 'fumadocs-core/framework/next';

export function RootLayout({ children }: { children: ReactNode }) {
  // or if you're using Fumadocs UI, use `<RootProvider />`
  return <NextProvider>{children}</NextProvider>;
}
```

```tsx tab="React Router"
import type { ReactNode } from 'react';
import { ReactRouterProvider } from 'fumadocs-core/framework/react-router';

export function Root({ children }: { children: ReactNode }) {
  return <ReactRouterProvider>{children}</ReactRouterProvider>;
}
```

```tsx tab="Tanstack Start/Router"
import type { ReactNode } from 'react';
import { TanstackProvider } from 'fumadocs-core/framework/tanstack';

export function Root({ children }: { children: ReactNode }) {
  return <TanstackProvider>{children}</TanstackProvider>;
}
```

It offers simple document searching as well as components for building a
good docs.

<Cards>

<Card
  title="Breadcrumb"
  href="/docs/headless/components/breadcrumb"
  description="The navigation component at the top of screen"
/>

<Card
  title="TOC"
  href="/docs/headless/components/toc"
  description="A Table of Contents with active anchor observer"
/>

<Card
  title="Sidebar"
  href="/docs/headless/components/sidebar"
  description="The navigation bar at aside of viewport"
/>

<Card
  title="Search"
  href="/docs/headless/search"
  description="Implement document searching"
/>

</Cards>



================================================
FILE: apps/docs/content/docs/headless/internationalization.mdx
================================================
---
title: Internationalization
description: Support multiple languages in your documentation
---

## Introduction

Fumadocs core provides necessary middleware and options for i18n support.

You can define a config to share between utilities.

<include cwd meta='title="lib/i18n.ts"'>
  ../../examples/i18n/lib/i18n.ts
</include>

### Hide Locale Prefix

To hide the locale prefix (e.g. `/en/page` -> `/page`), use the `hideLocale` option.

```ts
import type { I18nConfig } from 'fumadocs-core/i18n';

export const i18n: I18nConfig = {
  defaultLanguage: 'en',
  languages: ['en', 'cn'],
  hideLocale: 'default-locale',
};
```

| Mode             | Description                                        |
| ---------------- | -------------------------------------------------- |
| `always`         | Always hide the prefix, detect locale from cookies |
| `default-locale` | Only hide the default locale                       |
| `never`          | Never hide the prefix (default)                    |

<Callout type='warn' title={<>Using <code>always</code></>}>

On `always` mode, locale is stored as a cookie (set by the middleware), which isn't optimal for static sites.

This may cause undesired cache problems, and need to pay extra attention on SEO to ensure search engines can index your pages correctly.

</Callout>

### Middleware

Redirects users to appropriate locale, it can be customised from `i18n.ts`.

<include cwd meta='title="middleware.ts"'>
  ../../examples/i18n/middleware.ts
</include>

> When `hideLocale` is enabled, it uses `NextResponse.rewrite` to hide locale prefixes.



================================================
FILE: apps/docs/content/docs/headless/meta.json
================================================
{
  "title": "Fumadocs Core",
  "description": "The headless library",
  "icon": "Cuboid",
  "root": true,
  "pages": [
    "---Guide---",
    "index",
    "search",
    "---Writing---",
    "page-conventions",
    "---API References---",
    "page-tree",
    "internationalization",
    "components",
    "utils",
    "mdx",
    "---Sources---",
    "source-api",
    "content-collections/index",
    "contentlayer",
    "custom-source"
  ]
}



================================================
FILE: apps/docs/content/docs/headless/page-conventions.mdx
================================================
---
title: Routing
description: A shared convention for organizing your documents
---

<Callout title='Before reading'>

    This guide only applies for content sources that uses `loader()` API, such as Fumadocs MDX.

</Callout>

## Overview

While Next.js handles routing, Fumadocs generates **page slugs** and **sidebar items** (page tree) from your content directory using [`loader()`](/docs/headless/source-api).

You can define folders and pages similar to the file-system based routing of Next.js.

<Files>
  <Folder name="content/docs (content directory)" defaultOpen>
    <File name="index.mdx" />
    <File name="getting-started.mdx" />
  </Folder>
</Files>

## File

A [MDX](https://mdxjs.com) or Markdown file, you can customise its frontmatter.

```mdx
---
title: My Page
description: Best document ever
icon: HomeIcon
full: true
---

## Learn More
```

| name          | description                                        |
| ------------- | -------------------------------------------------- |
| `title`       | The title of page                                  |
| `description` | The description of page                            |
| `icon`        | The name of icon, see [Icons](#icons)              |
| `full`        | Fill all available space on the page (Fumadocs UI) |

<Callout title='Fumadocs MDX'>

    You can use the [`schema`](/docs/mdx/collections#schema-1) option to add frontmatter properties.

</Callout>

### Slugs

The slugs of a page are generated from its file path.

| path (relative to content folder) | slugs             |
| --------------------------------- | ----------------- |
| `./dir/page.mdx`                  | `['dir', 'page']` |
| `./dir/index.mdx`                 | `['dir']`         |

## Folder

Organize multiple pages, you can create a [Meta file](#meta) to customise folders.

### Folder Group

By default, putting a file into folder will change its slugs.
You can wrap the folder name in parentheses to avoid impacting the slugs of child files.

| path (relative to content folder) | slugs      |
| --------------------------------- | ---------- |
| `./(group-name)/page.mdx`         | `['page']` |

## Meta

Customise folders by creating a `meta.json` file in the folder.

```json title="meta.json"
{
  "title": "Display Name",
  "icon": "MyIcon",
  "pages": ["index", "getting-started"],
  "defaultOpen": true
}
```

| name          | description                           |
| ------------- | ------------------------------------- |
| `title`       | Display name                          |
| `icon`        | The name of icon, see [Icons](#icons) |
| `pages`       | Folder items (see below)              |
| `defaultOpen` | Open the folder by default            |

### Pages

By default, folder items are sorted alphabetically.

You can add or control the order of items using `pages`, items are not included unless they are listed inside.

```json title="meta.json"
{
  "title": "Name of Folder",
  "pages": ["guide", "components", "---My Separator---", "./nested/page"]
}
```

<Files>
  <File name="meta.json" />
  <File name="guide.mdx" />
  <File name="components.mdx" />
  <File name="nested/page.mdx" />
</Files>

#### Rest

Add a `...` item to include remaining pages (sorted alphabetically), or `z...a` for descending order.

```json title="meta.json"
{
  "pages": ["guide", "..."]
}
```

You can add `!name` to prevent an item from being included.

```json title="meta.json"
{
  "pages": ["guide", "...", "!components"]
}
```

#### Extract

You can extract the items from a folder with `...folder_name`.

```json title="meta.json"
{
  "pages": ["guide", "...nested"]
}
```

#### Link

Use the syntax `[Text](url)` to insert links, or `[Icon][Text](url)` to add icon.

```json title="meta.json"
{
  "pages": [
    "[Vercel](https://vercel.com)",
    "[Triangle][Vercel](https://vercel.com)"
  ]
}
```

## Icons

Since Fumadocs doesn't include an icon library, you have to convert the icon names to JSX elements in runtime, and render it as a component.

You can add an [`icon` handler](/docs/headless/source-api#icons) to `loader()`.

## Root Folder

Marks the folder as a root folder, only items in the opened root folder will be considered.

```json title="meta.json"
{
  "title": "Name of Folder",
  "description": "The description of root folder (optional)",
  "root": true
}
```

For example, when you are opening a root folder `framework`, the other folders (e.g. `headless`) are not shown on the sidebar and other navigation elements.

<Files>
  <Folder name="framework" defaultOpen>
    <File name="index.mdx" />
    <File
      name="current-page.mdx"
      className="!text-fd-primary !bg-fd-primary/10"
    />
    <File name="other-pages.mdx" />
  </Folder>
  <Folder name="headless (hidden)" className="opacity-50" disabled defaultOpen>
    <File name="my-page.mdx" />
  </Folder>
</Files>

<Callout title='Fumadocs UI'>

    Fumadocs UI renders root folders as [Sidebar Tabs](/docs/ui/navigation/sidebar#sidebar-tabs), which allows user to switch between them.

</Callout>

## Internationalization

<include>../../shared/page-conventions.i18n.mdx</include>



================================================
FILE: apps/docs/content/docs/headless/page-tree.mdx
================================================
---
title: Page Tree
description: The structure of page tree.
---

Page tree is a tree structure that describes all navigation links, with other items like separator and folders.

It will be sent to the client and being referenced in navigation elements including the sidebar and breadcrumb.
Hence, you shouldn't store any sensitive or large data in page tree.

<Callout title="Note">

By design, page tree only contains necessary information of all pages and folders.

Unserializable data such as functions can't be passed to page tree.

</Callout>

## Conventions

The type definitions of page tree, for people who want to hardcode/generate it.
You can also import the type from Fumadocs.

```ts
import type { PageTree } from 'fumadocs-core/server';

const tree: PageTree.Root = {
  // props
};
```

Certain nodes contain a `$ref` property, they are internal and not used when hardcoding it.

### Root

The initial root of page trees.

<AutoTypeTable path="./content/docs/headless/props.ts" name="PageTreeRoot" />

### Page

```json
{
  "type": "page",
  "name": "Quick Start",
  "url": "/docs"
}
```

> External urls are also supported

<AutoTypeTable path="./content/docs/headless/props.ts" name="PageTreeItem" />

### Folder

```json
{
    "type": "folder",
    "name": "Guide",
    "index": {
        "type": "page",
        ...
    }
    "children": [
        ...
    ]
}
```

<AutoTypeTable path="./content/docs/headless/props.ts" name="PageTreeFolder" />

### Separator

A label between items.

```json
{
  "type": "separator",
  "name": "Components"
}
```

<AutoTypeTable
  path="./content/docs/headless/props.ts"
  name="PageTreeSeparator"
/>

## Icons

Icon is a `ReactElement`, supported by pages and folders.



================================================
FILE: apps/docs/content/docs/headless/props.ts
================================================
import type * as Breadcrumb from 'fumadocs-core/breadcrumb';
import type * as TOC from 'fumadocs-core/toc';
import type * as Server from 'fumadocs-core/server';
import type * as Sidebar from 'fumadocs-core/sidebar';
import type { ElementType } from 'react';
import type * as MDX from 'fumadocs-core/mdx-plugins';

export type SortedResult = Server.SortedResult;

export type StructureOptions = MDX.StructureOptions;

export type BreadcrumbItem = Breadcrumb.BreadcrumbItem;

export type SidebarProviderProps = Sidebar.SidebarProviderProps;
export type SidebarContentProps = Sidebar.SidebarContentProps<ElementType>;
export type SidebarTriggerProps = Sidebar.SidebarTriggerProps<ElementType>;

export type ScrollProviderProps = TOC.ScrollProviderProps;
export type AnchorProviderProps = TOC.AnchorProviderProps;

export type TOCItemType = Server.TOCItemType;

export type PageTreeItem = Server.PageTree.Item;
export type PageTreeFolder = Server.PageTree.Folder;
export type PageTreeRoot = Server.PageTree.Root;
export type PageTreeSeparator = Server.PageTree.Separator;

export type RemarkImageOptions = MDX.RemarkImageOptions;



================================================
FILE: apps/docs/content/docs/headless/source-api.mdx
================================================
---
title: loader()
description: Turn a content source into a unified interface
---

## Usage

`loader()` provides an interface for Fumadocs to integrate with file-system based content sources.

### What it does?

- Generate page trees based on file system.
- Assign URL and slugs to each page.
- Output useful utilities to interact with content.

It doesn't rely on the real file system (zero `node:fs` usage), a virtual storage is also allowed.

You can use it with built-in content sources like Fumadocs MDX.

```ts
import { loader } from 'fumadocs-core/source';
import { docs } from '@/.source';

export const source = loader({
  source: docs.toFumadocsSource(),
});
```

### URL

You can override the base URL, or specify a function to generate URL for each page.

```ts
import { loader } from 'fumadocs-core/source';

loader({
  baseUrl: '/docs',
  // or you can customise it with function
  url(slugs, locale) {
    if (locale) return '/' + [locale, 'docs', ...slugs].join('/');
    return '/' + ['docs', ...slugs].join('/');
  },
});
```

### Icons

Load the [icon](/docs/headless/page-conventions#icons) property specified by pages and meta files.

```ts
import { loader } from 'fumadocs-core/source';
import { icons } from 'lucide-react';
import { createElement } from 'react';

loader({
  icon(icon) {
    if (!icon) {
      // You may set a default icon
      return;
    }

    if (icon in icons) return createElement(icons[icon as keyof typeof icons]);
  },
});
```

### I18n

Pass the `i18n` config to loader.

```ts title="lib/source.ts"
import { i18n } from '@/lib/i18n';
import { loader } from 'fumadocs-core/source';

export const source = loader({
  i18n, // [!code highlight]
});
```

With i18n enabled, loader will generate a page tree for every locale.

When looking for a page, it fallbacks to default locale if the page doesn't exist for specified locale.

## Output

The loader outputs a source object.

### Get Page

Get page with slugs.

```ts
import { source } from '@/lib/source';

source.getPage(['slug', 'of', 'page']);

// with i18n
source.getPage(['slug', 'of', 'page'], 'locale');
```

### Get Pages

Get a list of page available for locale.

```ts
import { source } from '@/lib/source';

// from default locale
source.getPages();

// for a specific locale
source.getPages('locale');
```

### Page Tree

```ts
import { source } from '@/lib/source';

// without i18n
source.pageTree;

// with i18n
source.pageTree['locale'];
```

### Get from Node

The page tree nodes contain references to their original file path.
You can find their original page or meta file from the tree nodes.

```ts
import { source } from '@/lib/source';

source.getNodePage(pageNode);
source.getNodeMeta(folderNode);
```

### Params

A function to generate output for Next.js `generateStaticParams`.
The generated parameter names will be `slug: string[]` and `lang: string` (i18n only).

```ts title="app/[[...slug]]/page.tsx"
import { source } from '@/lib/source';

export function generateStaticParams() {
  return source.generateParams();
}
```

### Language Entries

Get available languages and its pages.

```ts
import { source } from '@/lib/source';

// language -> pages
const entries = source.getLanguages();
```

## Deep Dive

As mentioned, Source API doesn't rely on real file systems.
During the process, your input source files will be parsed and form a virtual storage to avoid inconsistent behaviour between different OS.

### Transformer

To perform virtual file-system operations before processing, you can add a transformer.

```ts
import { loader } from 'fumadocs-core/source';

loader({
  transformers: [
    ({ storage }) => {
      storage.makeDir();
    },
  ],
});
```

### Page Tree

The page tree is generated from your file system, some unnecessary information (e.g. unused frontmatter properties) will be filtered.

You can customise it using the `pageTree` option, such as attaching custom properties to nodes, or customising the display name of pages.

```tsx
import React from 'react';
import { loader } from 'fumadocs-core/source';

loader({
  pageTree: {
    attachFile(node, file) {
      // you can access its file information
      console.log(file?.data);
      // JSX nodes are allowed
      node.name = <>Some JSX Nodes here</>;

      return node;
    },
  },
});
```

### Custom Source

To plug your own content source, create a `Source` object.

It includes a `files` property which is an array of virtual files.
Each virtual file must contain its file path and corresponding data.
You can check type definitions for more info.

Since Source API doesn't rely on file system, file paths cannot be absolute or relative (for example, `./file.mdx` and `D://content/file.mdx` are not allowed).
Instead, pass the file paths like `file.mdx` and `content/file.mdx`.

```ts
import { Source } from 'fumadocs-core/source';

export function createMySource(): Source<{
  metaData: { title: string; pages: string[] }; // Your custom type
  pageData: { title: string; description: string }; // Your custom type
}> {
  return {
    files: [],
  };
}
```



================================================
FILE: apps/docs/content/docs/headless/components/breadcrumb.mdx
================================================
---
title: Breadcrumb
description: The navigation component at the top of the screen
---

A hook for implementing Breadcrumb in your documentation. It returns breadcrumb items for a page based on the given page tree.

> If present, the index page of a folder will be used as the item.

## Usage

It exports a `useBreadcrumb` hook:

```ts twoslash
declare const tree: any;
// ---cut---
import { usePathname } from 'next/navigation';
import { useBreadcrumb } from 'fumadocs-core/breadcrumb';

const pathname = usePathname();
const items = useBreadcrumb(pathname, tree);
//    ^?
```

### Example

A styled example.

```tsx
'use client';
import { usePathname } from 'next/navigation';
import { useBreadcrumb } from 'fumadocs-core/breadcrumb';
import type { PageTree } from 'fumadocs-core/server';
import { Fragment } from 'react';
import { ChevronRight } from 'lucide-react';
import Link from 'next/link';

export function Breadcrumb({ tree }: { tree: PageTree.Root }) {
  const pathname = usePathname();
  const items = useBreadcrumb(pathname, tree);

  if (items.length === 0) return null;

  return (
    <div className="-mb-3 flex flex-row items-center gap-1 text-sm font-medium text-fd-muted-foreground">
      {items.map((item, i) => (
        <Fragment key={i}>
          {i !== 0 && (
            <ChevronRight className="size-4 shrink-0 rtl:rotate-180" />
          )}
          {item.url ? (
            <Link
              href={item.url}
              className="truncate hover:text-fd-accent-foreground"
            >
              {item.name}
            </Link>
          ) : (
            <span className="truncate">{item.name}</span>
          )}
        </Fragment>
      ))}
    </div>
  );
}
```

You can use it by passing the page tree via `tree` prop in a server component.

### Breadcrumb Item

<AutoTypeTable path="./content/docs/headless/props.ts" name="BreadcrumbItem" />



================================================
FILE: apps/docs/content/docs/headless/components/index.mdx
================================================
---
title: Components
index: true
description: Blocks for your docs
---



================================================
FILE: apps/docs/content/docs/headless/components/link.mdx
================================================
---
title: Link
description: A Link component that handles external links
---

A component that wraps `next/link` and automatically handles external links in the document.
When an external URL is detected, it uses `<a>` instead of the Next.js Link
Component. The `rel` property is automatically generated.

## Usage

Usage is the same as using `<a>`.

```mdx
import Link from 'fumadocs-core/link';

<Link href="/docs/components">Click Me</Link>
```

### External

You can force a URL to be external by passing an `external` prop.

### Dynamic hrefs

Dynamic hrefs are no longer supported in Next.js App Router. You can enable
dynamic hrefs by importing `dynamic-link` instead.

```mdx
import { DynamicLink } from 'fumadocs-core/dynamic-link';

<DynamicLink href="/[lang]/components">Click Me</DynamicLink>
```



================================================
FILE: apps/docs/content/docs/headless/components/meta.json
================================================
{
  "title": "Components",
  "pages": ["..."]
}



================================================
FILE: apps/docs/content/docs/headless/components/sidebar.mdx
================================================
---
title: Sidebar
description: The navigation bar at the side of the viewport
---

A sidebar component which handles device resizing and removes scroll bar
automatically.

## Usage

```tsx
import * as Base from 'fumadocs-core/sidebar';

return (
  <Base.SidebarProvider>
    <Base.SidebarTrigger />
    <Base.SidebarList />
  </Base.SidebarProvider>
);
```

### Sidebar Provider

<AutoTypeTable
  path="./content/docs/headless/props.ts"
  name="SidebarProviderProps"
/>

### Sidebar Trigger

Opens the sidebar on click.

<AutoTypeTable
  path="./content/docs/headless/props.ts"
  name="SidebarTriggerProps"
/>

### Sidebar List

| Data Attribute | Values        | Description     |
| -------------- | ------------- | --------------- |
| `data-open`    | `true, false` | Is sidebar open |

<AutoTypeTable
  path="./content/docs/headless/props.ts"
  type="SidebarContentProps"
/>



================================================
FILE: apps/docs/content/docs/headless/components/toc-example.tsx
================================================
import { AnchorProvider, ScrollProvider, TOCItem } from 'fumadocs-core/toc';
import { type ReactNode, useRef } from 'react';
import type { TOCItemType } from 'fumadocs-core/server';

export function Page({
  items,
  children,
}: {
  items: TOCItemType[];
  children: ReactNode;
}) {
  const viewRef = useRef<HTMLDivElement>(null);

  return (
    <AnchorProvider toc={items}>
      <div ref={viewRef} className="overflow-auto">
        <ScrollProvider containerRef={viewRef}>
          {items.map((item) => (
            <TOCItem key={item.url} href={item.url}>
              {item.title}
            </TOCItem>
          ))}
        </ScrollProvider>
      </div>
      {children}
    </AnchorProvider>
  );
}



================================================
FILE: apps/docs/content/docs/headless/components/toc.mdx
================================================
---
title: TOC
description: Table of Contents
---

A Table of Contents with active anchor observer and auto scroll.

## Usage

```tsx
import * as Base from 'fumadocs-core/toc';

return (
  <Base.AnchorProvider>
    <Base.ScrollProvider>
      <Base.TOCItem />
      <Base.TOCItem />
    </Base.ScrollProvider>
  </Base.AnchorProvider>
);
```

### Anchor Provider

Watches for the active anchor using the Intersection Observer API.

<AutoTypeTable
  path="./content/docs/headless/props.ts"
  name="AnchorProviderProps"
/>

### Scroll Provider

Scrolls the scroll container to the active anchor.

<AutoTypeTable
  path="./content/docs/headless/props.ts"
  name="ScrollProviderProps"
/>

### TOC Item

An anchor item for jumping to the target anchor.

| Data Attribute | Values        | Description          |
| -------------- | ------------- | -------------------- |
| `data-active`  | `true, false` | Is the anchor active |

## Example

<include>./toc-example.tsx</include>



================================================
FILE: apps/docs/content/docs/headless/content-collections/index.mdx
================================================
---
title: Content Collections
description: Use Content Collections for Fumadocs
---

[Content Collections](https://www.content-collections.dev) is a library that transforms your content into type-safe data collections.

## Setup

Install the required packages.

```package-install
@fumadocs/content-collections @content-collections/core @content-collections/mdx @content-collections/next
```

After the installation, add a path alias for the generated collections to the `tsconfig.json`.

```json
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./*"],
      "content-collections": ["./.content-collections/generated"]
    }
  }
}
```

In the Next.js configuration file, apply the plugin.

```js title="next.config.mjs"
import { withContentCollections } from '@content-collections/next';

/** @type {import('next').NextConfig} */
const config = {
  reactStrictMode: true,
};

export default withContentCollections(config);
```

To integrate with Fumadocs, add the following to your `content-collections.ts`.

<include cwd meta='title="content-collections.ts"'>
  ../../examples/content-collections/content-collections.ts
</include>

And pass it to Source API.

<include cwd meta='title="lib/source.ts"'>
  ../../examples/content-collections/lib/source.ts
</include>

Done! You can access the pages and generated page tree from Source API.

```ts
import { getPage } from '@/lib/source';

const page = getPage(slugs);

// MDX output
page?.data.body;

// Table of contents
page?.data.toc;

// Structured Data, for Search API
page?.data.structuredData;
```

### MDX Options

You can customise MDX options in the `transformMDX` function.

```ts
import { defineCollection } from '@content-collections/core';
import { transformMDX } from '@fumadocs/content-collections/configuration';

const docs = defineCollection({
  transform: (document, context) =>
    transformMDX(document, context, {
      // options here
    }),
});
```

### Import Components

To use components from other packages like Fumadocs UI, pass them to your `<MDXContent />` component.

```tsx
import { MDXContent } from '@content-collections/mdx/react';
import { getMDXComponents } from '@/mdx-components';

<MDXContent code="..." components={getMDXComponents()} />;
```

You can also import them in MDX Files, but it is not recommended.

<Callout title='Deep Dive: Why?'>
    Content Collections uses `mdx-bundler` to bundle MDX files.

    To support importing a package from node modules, Fumadocs added a default value to the `cwd` option of MDX Bundler.
    It works good, but we still **do not** recommend importing components in MDX files.

    Reasons:

    - It requires esbuild to bundle these components, while it should be done by the Next.js bundler (for features of Server Components)
    - You can refactor the import path of components without changing your MDX files.
    - With Remote Sources, it doesn't make sense to add an import in MDX files.

</Callout>



================================================
FILE: apps/docs/content/docs/headless/mdx/headings.mdx
================================================
---
title: Headings
description: Process headings from your document
---

## Remark Heading

Applies ids to headings.

```ts title="MDX Compiler"
import { compile } from '@mdx-js/mdx';
import { remarkHeading } from 'fumadocs-core/mdx-plugins';

await compile('...', {
  remarkPlugins: [remarkHeading],
});
```

> This plugin is included by default on Fumadocs MDX.

### Extract TOC

By default, it extracts the headings (table of contents) of a document to `vfile.data.toc`.
You can disable it with:

```ts
import { remarkHeading } from 'fumadocs-core/mdx-plugins';

export default {
  remarkPlugins: [[remarkHeading, { generateToc: false }]],
};
```

### Custom Ids [#custom-heading-id]

You can customise the heading id with `[#slug]`.

```md
# heading [#slug]
```

### Output

An array of `TOCItemType`.

<AutoTypeTable path="./content/docs/headless/props.ts" name="TOCItemType" />

## Rehype TOC

Exports table of contents (an array of `TOCItemType`), it allows JSX nodes which is not possible with a Remark plugin.

> It requires MDX.js.

### Usage

```ts
import { rehypeToc } from 'fumadocs-core/mdx-plugins';

export default {
  rehypePlugins: [rehypeToc],
};
```

### Output

For a Markdown document:

```md
## Hello `code`
```

An export will be created:

```jsx
export const toc = [
  {
    title: (
      <>
        Hello <code>code</code>
      </>
    ),
    depth: 2,
    url: '#hello-code',
  },
];
```



================================================
FILE: apps/docs/content/docs/headless/mdx/index.mdx
================================================
---
title: MDX Plugins
index: true
description: Useful remark & rehype plugins for your docs.
---



================================================
FILE: apps/docs/content/docs/headless/mdx/install.mdx
================================================
---
title: Package Install
description: Generate code blocks for installing packages
---

<Callout type="warn" title='Deprecated'>
    For Fumadocs MDX, it is now enabled by default.

    You can use the `remarkNpm` plugin from `fumadocs-core/mdx-plugins` instead.

</Callout>

## Usage

```package-install
fumadocs-docgen
```

Add the remark plugin.

```ts title="source.config.ts" tab="Fumadocs MDX"
import { remarkInstall } from 'fumadocs-docgen';
import { defineConfig } from 'fumadocs-mdx/config';

export default defineConfig({
  mdxOptions: {
    remarkPlugins: [remarkInstall],
  },
});
```

```ts tab="MDX Compiler"
import { compile } from '@mdx-js/mdx';
import { remarkInstall } from 'fumadocs-docgen';

await compile('...', {
  remarkPlugins: [remarkInstall],
});
```

Define the required components.

```tsx title="mdx-components.tsx (Fumadocs UI)"
import { Tab, Tabs } from 'fumadocs-ui/components/tabs';
import defaultComponents from 'fumadocs-ui/mdx';
import type { MDXComponents } from 'mdx/types';

export function getMDXComponents(components?: MDXComponents): MDXComponents {
  return {
    ...defaultComponents,
    Tab,
    Tabs,
    ...components,
  };
}
```

| Component |                                    |
| --------- | ---------------------------------- |
| Tabs      | Accepts an array of item (`items`) |
| Tab       | Accepts the name of item (`value`) |

Create code blocks with `package-install` as language.

````mdx
```package-install
my-package
```

```package-install
npm i my-package -D
```
````

### Output

The following structure should be generated by the plugin.

```mdx
<Tabs items={['npm', 'pnpm', 'yarn', 'bun']}>
  <Tab value="npm">...</Tab>
  <Tab value="pnpm">...</Tab>
  <Tab value="yarn">...</Tab>
  <Tab value="bun">...</Tab>
</Tabs>
```

```package-install
my-package
```

## Options

### Persistent

When using with Fumadocs UI, you can enable persistence with the `persist` option.

```ts title="source.config.ts" tab="Fumadocs MDX"
import { remarkInstall } from 'fumadocs-docgen';
import { defineConfig } from 'fumadocs-mdx/config';

const remarkInstallOptions = {
  persist: {
    id: 'some-id',
  },
};

export default defineConfig({
  mdxOptions: {
    remarkPlugins: [[remarkInstall, remarkInstallOptions]],
  },
});
```

```ts tab="MDX Compiler"
import { compile } from '@mdx-js/mdx';
import { remarkInstall } from 'fumadocs-docgen';

const remarkInstallOptions = {
  persist: {
    id: 'some-id',
  },
};

await compile('...', {
  remarkPlugins: [[remarkInstall, remarkInstallOptions]],
});
```

This will instead generate:

```mdx
<Tabs groupId="some-id" persist items={[...]}>
  ...
</Tabs>
```



================================================
FILE: apps/docs/content/docs/headless/mdx/meta.json
================================================
{
  "title": "MDX Plugins"
}



================================================
FILE: apps/docs/content/docs/headless/mdx/rehype-code.mdx
================================================
---
title: Rehype Code
description: Code syntax highlighter
---

A wrapper of [Shiki](https://shiki.style), the built-in syntax highlighter.

## Usage

Add the rehype plugin.

```ts title="MDX Compiler"
import { compile } from '@mdx-js/mdx';
import { rehypeCode } from 'fumadocs-core/mdx-plugins';

await compile('...', {
  rehypePlugins: [rehypeCode],
});
```

> This plugin is included by default on Fumadocs MDX.

### Output

A codeblock wrapped in `<pre />` element.

```html
<pre>
<code>...</code>
</pre>
```

### Meta

It parses the `title` meta string, and adds it to the `pre` element as an attribute.

````mdx
```js title="Title"
console.log('Hello');
```
````

You may filter the meta string before processing it with the `filterMetaString` option.

### Inline Code

`console.log("hello world"){:js}` works.

See https://shiki.style/packages/rehype#inline-code.

### Icon

Adds an icon according to the language of the codeblock.
It outputs HTML, you might need to render it with React `dangerouslySetInnerHTML`.

```jsx
<pre icon="<svg />">...</pre>
```

Disable or customise icons with the `icon` option.

### More Options

See [Shiki](https://shiki.style).



================================================
FILE: apps/docs/content/docs/headless/mdx/remark-admonition.mdx
================================================
---
title: Remark Admonition
description: Use Admonition in Fumadocs
---

In Docusaurus, there's an [Admonition syntax](https://docusaurus.io/docs/markdown-features/admonitions).

For people migrating from Docusaurus, you can enable this remark plugin to support the Admonition syntax.

## Usage

```ts title="source.config.ts" tab="Fumadocs MDX"
import { remarkAdmonition } from 'fumadocs-core/mdx-plugins';
import { defineConfig } from 'fumadocs-mdx/config';

export default defineConfig({
  mdxOptions: {
    remarkPlugins: [remarkAdmonition],
  },
});
```

```ts tab="MDX Compiler"
import { compile } from '@mdx-js/mdx';
import { remarkAdmonition } from 'fumadocs-core/mdx-plugins';

await compile('...', {
  remarkPlugins: [remarkAdmonition],
});
```

### Input

```md
:::warning
Hello World
:::
```

### Output

```mdx
<Callout type='warn'>

Hello World

</Callout>
```

### When to use

We highly recommend using the JSX syntax of MDX instead.
It's more flexible, some editors support IntelliSense in MDX files.

```mdx
<Callout type='warn'>

Hello World

</Callout>
```



================================================
FILE: apps/docs/content/docs/headless/mdx/remark-image.mdx
================================================
---
title: Remark Image
description: Make images compatible with Next.js Image Optimization
---

## Usage

Add it to your Remark plugins.

```ts title="MDX Compiler"
import { compile } from '@mdx-js/mdx';
import { remarkImage } from 'fumadocs-core/mdx-plugins';

await compile('...', {
  remarkPlugins: [remarkImage],
});
```

> This plugin is included by default on Fumadocs MDX.

Supported:

- Local Images
- External URLs
- Next.js static imports

### How It Works

It transforms your `![image](/test.png)` into Next.js Image usage, and add required props like `width` and `height`.

By default, it uses **static imports** to import local images, which supports the `placeholder` option of Next.js Image.
Next.js can handle image imports with its built-in image loader.

Otherwise, it uses the file system or an HTTP request to download the image and obtain its size.

### Options

<AutoTypeTable
  path="./content/docs/headless/props.ts"
  name="RemarkImageOptions"
/>

### Example: With Imports

```mdx
![Hello](/hello.png)
![Test](https://example.com/image.png)
```

Yields:

```mdx
import HelloImage from './public/hello.png';

<img alt="Hello" src={HelloImage} />
<img
  alt="Test"
  src="https://example.com/image.png"
  width="1980"
  height="1080"
/>
```

Where `./public/hello.png` points to the image in public directory.

### Example: Without Imports

You can disable Next.js static imports on local images.

```ts
import { remarkImage } from 'fumadocs-core/mdx-plugins';

export default {
  remarkPlugins: [[remarkImage, { useImport: false }]],
};
```

```mdx
![Hello](/hello.png)
![Test](https://example.com/image.png)
```

Yields:

```mdx
<img alt="Hello" src="/hello.png" width="1980" height="1080" />
<img
  alt="Test"
  src="https://example.com/image.png"
  width="1980"
  height="1080"
/>
```

### Example: Relative Paths

When `useImport` is enabled, you can reference local images using relative paths.

```mdx
![Hello](./hello.png)
```

Be careful that using it with `useImport` disabled **doesn't work**.
Next.js will not add the image to public assets unless you have imported it in code.
For images in public directory, you can just reference them without relative paths.

### Example: Public Directory

Customise the path of public directory

```ts
import { remarkImage } from 'fumadocs-core/mdx-plugins';
import path from 'node:path';

export default {
  remarkPlugins: [
    remarkImage,
    {
      publicDir: path.join(process.cwd(), 'dir'),
    },
  ],
};
```

You can pass a URL too.

```ts
import { remarkImage } from 'fumadocs-core/mdx-plugins';

export default {
  remarkPlugins: [
    remarkImage,
    {
      publicDir: 'http://localhost:3000/images',
    },
  ],
};
```



================================================
FILE: apps/docs/content/docs/headless/mdx/remark-ts2js.mdx
================================================
---
title: Remark TS to JS
description: A remark plugin to transform TypeScript codeblocks into two tabs of codeblock with its JavaScript variant.
---

## Usage

Install dependencies:

```package-install
fumadocs-docgen oxc-transform
```

Add `oxc-transform` to `serverExternalPackages` in `next.config.mjs`:

```js title="next.config.mjs"
import { createMDX } from 'fumadocs-mdx/next';

/** @type {import('next').NextConfig} */
const config = {
  reactStrictMode: true,
  serverExternalPackages: ['oxc-transform'],
};

const withMDX = createMDX();

export default withMDX(config);
```

Add the remark plugin:

```ts title="source.config.ts" tab="Fumadocs MDX"
import { remarkTypeScriptToJavaScript } from 'fumadocs-docgen/remark-ts2js';
import { defineConfig } from 'fumadocs-mdx/config';

export default defineConfig({
  mdxOptions: {
    remarkPlugins: [remarkTypeScriptToJavaScript],
  },
});
```

```ts tab="MDX Compiler"
import { remarkTypeScriptToJavaScript } from 'fumadocs-docgen/remark-ts2js';
import { compile } from '@mdx-js/mdx';

await compile('...', {
  remarkPlugins: [remarkTypeScriptToJavaScript],
});
```

Finally, make sure to define the required MDX components: `Tabs` and `Tab`.

```tsx title="mdx-components.tsx (Fumadocs UI)"
import { Tab, Tabs } from 'fumadocs-ui/components/tabs';
import defaultComponents from 'fumadocs-ui/mdx';
import type { MDXComponents } from 'mdx/types';

export function getMDXComponents(components?: MDXComponents): MDXComponents {
  return {
    ...defaultComponents,
    Tab,
    Tabs,
    ...components,
  };
}
```

You can now enable it on TypeScript/TSX codeblocks, like:

````md
```tsx ts2js
import { ReactNode } from 'react';

export default function Layout({ children }: { children: ReactNode }) {
  return <div>{children}</div>;
}
```
````

```tsx ts2js
import { ReactNode } from 'react';

export default function Layout({ children }: { children: ReactNode }) {
  return <div>{children}</div>;
}
```



================================================
FILE: apps/docs/content/docs/headless/mdx/structure.mdx
================================================
---
title: Remark Structure
description: Extract information from your documents, useful for implementing document search
---

## Usage

Add it as a remark plugin.

```ts title="MDX Compiler"
import { compile } from '@mdx-js/mdx';
import { remarkStructure } from 'fumadocs-core/mdx-plugins';

const vfile = await compile('...', {
  remarkPlugins: [remarkStructure],
});
```

> This plugin is included by default on Fumadocs MDX.

Extracted information could be found in `vfile.data.structuredData`, you may
write your own plugin to convert it into a MDX export.

### Options

<AutoTypeTable
  path="./content/docs/headless/props.ts"
  name="StructureOptions"
/>

### Output

A list of headings and contents. Paragraphs will be extracted to the `contents`
array, each item contains a `heading` prop indicating the heading of paragraph.

<Callout title="Note">A heading can have multiple paragraphs.</Callout>

#### Heading

| Prop      |                                      |
| --------- | ------------------------------------ |
| `id`      | unique identifier or slug of heading |
| `content` | Text content                         |

#### Content

| Prop      |                                 |
| --------- | ------------------------------- |
| `heading` | Heading of paragraph (nullable) |
| `content` | Text content                    |

## As a Function

Accepts MDX/markdown content and return structurized data.

```ts
import { structure } from 'fumadocs-core/mdx-plugins';

structure(page.body.raw);
```

<Callout title="Tip" className="mt-4">
If you have custom remark plugins enabled, such as
`remark-math`, you have to pass these plugins to the function. This avoids unreadable content on paragraphs.

```ts
import { structure } from 'fumadocs-core/mdx-plugins';
import remarkMath from 'remark-math';

structure(page.body.raw, [remarkMath]);
```

</Callout>

### Parameters

| Parameter       |                        |
| --------------- | ---------------------- |
| `content`       | MDX/markdown content   |
| `remarkPlugins` | List of remark plugins |
| `options`       | Custom options         |



================================================
FILE: apps/docs/content/docs/headless/search/algolia.mdx
================================================
---
title: Algolia Search
description: Integrate Algolia Search with Fumadocs
---

<Callout title="Notice">
  If you're using Algolia's free tier, you have to [display their logo on your
  search dialog](https://algolia.com/policies/free-services-terms).
</Callout>

## Introduction

The Algolia Integration automatically configures Algolia Search for document search.

It creates a record for **each paragraph** in your document, it is also recommended by Algolia.

Each record contains searchable attributes:

| Attribute | Description           |
| --------- | --------------------- |
| `title`   | Page Title            |
| `section` | Heading ID (nullable) |
| `content` | Paragraph content     |

The `section` field only exists in paragraphs under a heading. Headings and
paragraphs are indexed as an individual record, grouped by their page ID.

Notice that it expects the `url` property of a page to be unique, you shouldn't have two pages with the same
url.

## Setup

Install dependencies:

```package-install
algoliasearch
```

### Sign up on Algolia

Sign up and obtain the app id and API keys for your search. Store these
credentials in environment variables.

### Sync Search Indexes

Export the search indexes from Next.js using a route handler, this way we can access the search indexes after production build:

```ts title="app/static.json/route.ts"
import { NextResponse } from 'next/server';
import { type DocumentRecord } from 'fumadocs-core/search/algolia';
import { source } from '@/lib/source';

export const revalidate = false;

export function GET() {
  const results: DocumentRecord[] = [];

  for (const page of source.getPages()) {
    results.push({
      _id: page.url,
      structured: page.data.structuredData,
      url: page.url,
      title: page.data.title,
      description: page.data.description,
    });
  }

  return NextResponse.json(results);
}
```

Make a script to sync search indexes:

<include lang="js" meta='title="update-index.mjs"'>
  ./sync-algolia.mjs
</include>

The `sync` function will update the index settings and sync search indexes.

Now run the script after build:

```json title="package.json"
{
  "scripts": {
    "build": "next build && node ./update-index.mjs"
  }
}
```

### Workflow

You may make it a script and manually sync with `node ./update-index.mjs`, or
integrate it with your CI/CD pipeline.

<Callout type="warn" title="Typescript Usage">
  If you are running the script with [TSX](https://github.com/privatenumber/tsx)
  or other similar Typescript executors, ensure to name it `.mts` for best ESM
  compatibility.
</Callout>

### Search UI

You can consider different options for implementing the UI:

- Using [Fumadocs UI search dialog](/docs/ui/search/algolia).
- Build your own using the built-in search client hook:

  ```ts twoslash
  import { liteClient } from 'algoliasearch/lite';
  import { useDocsSearch } from 'fumadocs-core/search/client';

  const client = liteClient('id', 'key');

  const { search, setSearch, query } = useDocsSearch({
    type: 'algolia',
    indexName: 'document',
    client,
  });
  ```

- Use their official clients directly.

## Options

### Tag Filter

To configure tag filtering, add a `tag` value to indexes.

```js
import { sync } from 'fumadocs-core/search/algolia';

void sync(client, {
  indexName: 'document',
  documents: records.map((index) => ({
    ...index,
    tag: 'value', // [!code ++]
  })),
});
```

And update your search client:

- **Fumadocs UI**: Enable [Tag Filter](/docs/ui/search/algolia#tag-filter) on Search UI.
- **Search Client**: You can add the tag filter like:

  ```ts
  import { useDocsSearch } from 'fumadocs-core/search/client';

  const { search, setSearch, query } = useDocsSearch({
    tag: '<your tag value>',
    // ...
  });
  ```

The `tag` field is an attribute for faceting. You can also use the filter `tag:value` on Algolia search clients.



================================================
FILE: apps/docs/content/docs/headless/search/index.mdx
================================================
---
title: Search
description: Configure Search in Fumadocs
icon: Search
index: true
---



================================================
FILE: apps/docs/content/docs/headless/search/orama-cloud.mdx
================================================
---
title: Orama Cloud
description: Integrate with Orama Cloud
---

To begin, create an account on Orama Cloud.

## REST API

REST API integration requires your docs to upload the indexes.

1. Create a new REST API index from Dashboard.
2. Use the following schema:

   ```json
   {
     "id": "string",
     "title": "string",
     "url": "string",
     "tag": "string",
     "page_id": "string",
     "section": "string",
     "section_id": "string",
     "content": "string"
   }
   ```

3. Then, using the private API key and index ID from dashboard, create a script to sync search indexes.

   <include cwd meta='title="sync-index.mjs"' lang="js">
     ../../examples/next-mdx/scripts/sync-orama-cloud.mjs
   </include>

4. Create a route handler in your Next.js app to export search indexes.

   <include cwd meta='title="app/static.json/route.ts"'>
     ../../examples/next-mdx/app/static.json/orama-cloud.ts
   </include>

5. Run the script after `next build`.

### Search Client

To search documents on the client side, consider:

- Using [Fumadocs UI search dialog](/docs/ui/search/orama-cloud).
- Custom search UI using the built-in hook of Fumadocs:

  ```ts
  import { useDocsSearch } from 'fumadocs-core/search/client';
  import { OramaClient } from '@oramacloud/client';

  const client = new OramaClient();

  const { search, setSearch, query } = useDocsSearch({
    type: 'orama-cloud',
    client,
    params: {
      // search params
    },
  });
  ```

- Use their search client directly.

## Web Crawler

1. Create a Crawler index from dashboard, and configure it correctly with the "Documentation" preset.
2. Copy the public API key and index ID from dashboard

### Search Client

Same as REST API integration, but make sure to set `index` to `crawler`.

```ts
import { useDocsSearch } from 'fumadocs-core/search/client';
import { OramaClient } from '@oramacloud/client';

const client = new OramaClient({
  endpoint: '<endpoint_url>',
  api_key: '<api_key>',
});

const { search, setSearch, query } = useDocsSearch({
  type: 'orama-cloud',
  index: 'crawler',
  client,
  params: {
    // optional search params
  },
});
```

It's same for Fumadocs UI.



================================================
FILE: apps/docs/content/docs/headless/search/orama.mdx
================================================
---
title: Built-in Search
description: Built-in document search of Fumadocs
---

Fumadocs supports document search with Orama, It is the default but also the recommended option since it can be self-hosted and totally free.

## Setup

Host the server for handling search requests.

<Tabs items={['From Source', 'From Search Indexes', 'From Search Indexes (Raw Content)']}>

<Tab>

Create a route handler from source object.

<include cwd meta='title="app/api/search/route.ts"'>
  ../../examples/next-mdx/app/api/search/route.ts
</include>

</Tab>

<Tab>

Pass search indexes to the function, each index needs a `structuredData` field.

Usually, it is provided by your content source (e.g. Fumadocs MDX). You can also extract it from Markdown/MDX document using the [Remark Structure](/docs/headless/mdx/structure) plugin.

<include cwd meta='title="app/api/search/route.ts"'>
  ../../examples/next-mdx/app/api/search/route-full.ts
</include>

</Tab>

<Tab>

Index with the raw content of document (unrecommended).

```ts title="app/api/search/route.ts"
import { allDocs } from 'content-collections';
import { createSearchAPI } from 'fumadocs-core/search/server';

export const { GET } = createSearchAPI('simple', {
  indexes: allDocs.map((docs) => ({
    title: docs.title,
    content: docs.content, // Raw Content
    url: docs.url,
  })),
});
```

</Tab>

</Tabs>

You can search documents using:

- **Fumadocs UI**: Supported out-of-the-box, see [Search UI](/docs/ui/search/orama) for details.
- **Search Client**:

```ts twoslash
import { useDocsSearch } from 'fumadocs-core/search/client';

const client = useDocsSearch({
  type: 'fetch',
});
```

<auto-type-table type='Extract<import("fumadocs-core/search/client").Client, { type: "fetch" }>' />

### Tag Filter

Support filtering results by tag, it's useful for implementing multi-docs similar to this documentation.

<include meta='title="app/api/search/route.ts"' cwd>
  ../../examples/next-mdx/app/api/search/route-tag.ts
</include>

and update your search client:

- **Fumadocs UI**: Configure [Tag Filter](/docs/ui/search/orama#tag-filter) on Search UI.
- **Search Client**: pass a tag to the hook.

```ts
import { useDocsSearch } from 'fumadocs-core/search/client';

const client = useDocsSearch({
  type: 'fetch',
  tag: '<value>', // [!code ++]
});
```

### Static Export

To work with Next.js static export, use `staticGET` from search server.

```ts title="app/api/search/route.ts"
import { source } from '@/lib/source';
import { createFromSource } from 'fumadocs-core/search/server';

// it should be cached forever
export const revalidate = false;

// [!code highlight]
export const { staticGET: GET } = createFromSource(source);
```

> `staticGET` is also available on `createSearchAPI`.

and update your search clients:

- **Fumadocs UI**: use [static client](/docs/ui/search/orama#static) on Search UI.

- **Search Client**: use `static` instead of `fetch`.

  ```ts
  import { useDocsSearch } from 'fumadocs-core/search/client';

  const client = useDocsSearch({
    type: 'static',
  });
  ```

  <AutoTypeTable type='Extract<import("fumadocs-core/search/client").Client, { type: "static" }>' />

<Callout type='warn' title="Be Careful">

    Static Search requires clients to download the exported search indexes.
    For large docs sites, it can be expensive.

    You should use cloud solutions like Orama Cloud or Algolia for these cases.

</Callout>

## Internationalization

Make sure your language is on the Orama [Supported Languages](https://docs.orama.com/open-source/supported-languages#officially-supported-languages) list.

```ts title="app/api/search/route.ts" tab="createFromSource"
import { source } from '@/lib/source';
import { createFromSource } from 'fumadocs-core/search/server';

export const { GET } = createFromSource(source, {
  localeMap: {
    // [locale]: Orama options
    ru: { language: 'russian' },
    en: { language: 'english' },
  },
});
```

<include cwd meta='title="app/api/search/route.ts" tab="createI18nSearchAPI"'>
  ../../examples/i18n/app/api/search/route-full.ts
</include>

```tsx title="components/search.tsx" tab="Static mode"
import { useDocsSearch } from 'fumadocs-core/search/client';
import { create } from '@orama/orama';

// update your `initOrama` function [!code focus:6]
function initOrama(locale?: string) {
  return create({
    schema: { _: 'string' },
    language: locale === 'ru' ? 'russian' : 'english',
  });
}

function Search() {
  const client = useDocsSearch({
    type: 'static',
    initOrama,
    locale,
    // ...
  });
}
```

For Chinese & Japanese, they require additional configurations:

```npm
@orama/tokenizers
```

<include cwd meta='title="app/api/search/route.ts" tab="createFromSource"'>
  ../../examples/i18n/app/api/search/route.ts
</include>

```tsx tab="Static mode" title="components/search.tsx"
import { useDocsSearch } from 'fumadocs-core/search/client';
import { createTokenizer } from '@orama/tokenizers/mandarin';
import { create } from '@orama/orama';

// [!code focus:8]
function initOrama(locale?: string) {
  return create({
    schema: { _: 'string' },
    components: {
      tokenizer: locale === 'cn' ? createTokenizer() : undefined,
    },
  });
}

function Search() {
  const client = useDocsSearch({
    type: 'static',
    initOrama,
  });
  // ...
}
```

and update your search clients:

- **Fumadocs UI**: No changes needed, Fumadocs UI handles this when you have i18n configured correctly.
- **Search Client**:
  Add `locale` to the search client, this will only allow pages with specified locale to be searchable by the user.

```ts
import { useDocsSearch } from 'fumadocs-core/search/client';

const { search, setSearch, query } = useDocsSearch({
  type: 'fetch',
  locale: 'cn',
});
```

## Headless

You can host the search server on other backend such as Express and Elysia.

```ts
import { initAdvancedSearch } from 'fumadocs-core/search/server';

const server = initAdvancedSearch({
  // you still have to pass indexes
});

server.search('query', {
  // you can specify `locale` and `tag` here
});
```



================================================
FILE: apps/docs/content/docs/headless/search/sync-algolia.mjs
================================================
// @ts-check
import { algoliasearch } from 'algoliasearch';
import { sync } from 'fumadocs-core/search/algolia';
import * as fs from 'node:fs';

const content = fs.readFileSync('.next/server/app/static.json.body');

// now you can pass it to `sync`
/** @type {import('fumadocs-core/search/algolia').DocumentRecord[]} **/
const records = JSON.parse(content.toString());

const client = algoliasearch('id', 'key');

void sync(client, {
  indexName: 'document',
  documents: records, // [!code highlight]
});



================================================
FILE: apps/docs/content/docs/headless/search/trieve.mdx
================================================
---
title: Trieve Search
description: Integrate Trieve Search with Fumadocs
---

> This is a community maintained integration.

## Introduction

The Trieve Integration automatically configures Trieve Search for site search.

By default, it creates a chunk for **each paragraph** in your document, it is
officially recommended by Trieve.

## Setup

### Install Dependencies

```package-install
trieve-ts-sdk trieve-fumadocs-adapter
```

### Sign up on Trieve

Sign up and create a dataset. Then obtain 2 API keys where one has only read access and the other has admin access to create and delete chunks.
Store these credentials in environment variables.

<Callout title="Notice">
  One API Key should have only read access for the public facing search and the
  other should have admin access to create and delete chunks.
</Callout>

### Sync Dataset

You can export the search indexes from Next.js using a route handler:

```ts title="app/static.json/route.ts"
import { NextResponse } from 'next/server';
import { source } from '@/lib/source';
import { type TrieveDocument } from 'trieve-fumadocs-adapter/search/sync';

export const revalidate = false;

export function GET() {
  const results: TrieveDocument[] = [];

  for (const page of source.getPages()) {
    results.push({
      _id: page.url,
      structured: page.data.structuredData,
      url: page.url,
      title: page.data.title,
      description: page.data.description,
    });
  }

  return NextResponse.json(results);
}
```

Create a script, the `sync` function will sync search indexes.

```js title="update-index.mjs"
import * as fs from 'node:fs';
import { sync } from 'trieve-fumadocs-adapter/search/sync';
import { TrieveSDK } from 'trieve-ts-sdk';

const content = fs.readFileSync('.next/server/app/static.json.body');

// now you can pass it to `sync`
/** @type {import('trieve-fumadocs-adapter/search/sync').TrieveDocument[]} **/
const records = JSON.parse(content.toString());

const client = new TrieveSDK({
  apiKey: 'adminApiKey',
  datasetId: 'datasetId',
});

sync(client, records);
```

Make sure to run the script after build:

```json title="package.json"
{
  "scripts": {
    "build": "next build && node ./update-index.mjs"
  }
}
```

### Workflow

You may manually sync with `node ./update-index.mjs`, or
integrate it with your CI/CD pipeline.

<Callout type="info" title="Typescript Usage">
  You can use Bun or other JavaScript runtimes that supports TypeScript and ESM.
</Callout>

### Search UI

You can use their `SearchDialog` component:

```tsx title="components/search.tsx"
'use client';
import type { SharedProps } from 'fumadocs-ui/components/dialog/search';
import SearchDialog from 'trieve-fumadocs-adapter/components/dialog/search';
import { TrieveSDK } from 'trieve-ts-sdk';

const trieveClient = new TrieveSDK({
  apiKey: 'readOnlyApiKey',
  datasetId: 'datasetId',
});

export default function CustomSearchDialog(props: SharedProps) {
  return <SearchDialog trieveClient={trieveClient} {...props} />;
}
```

1. Replace `apiKey` and `datasetId` with your desired values.

2. Replace the default search dialog with your new one.

### Search Client

Add the `useTrieveSearch` hook:

```ts
import { TrieveSDK } from 'trieve-ts-sdk';
import { useTrieveSearch } from 'trieve-fumadocs-adapter/search/trieve';

const client = new TrieveSDK({
  apiKey: 'readOnlyApiKey',
  datasetId: 'datasetId',
});

const { search, setSearch, query } = useTrieveSearch(client);
```

## Options

### Tag Filter

To configure tag filtering, add a `tag` value to indexes.

```js
import { sync } from 'trieve-fumadocs-adapter/search/sync';
import { TrieveSDK } from 'trieve-ts-sdk';

const client = new TrieveSDK({
  apiKey: 'adminApiKey',
  datasetId: 'datasetId',
});

const documents = records.map((index) => ({
  ...index,
  tag: 'value', // [!code highlight]
}));

sync(client, documents);
```

#### Search UI

Enable Tag Filter.

```tsx title="components/search.tsx"
import SearchDialog from 'trieve-fumadocs-adapter/components/dialog/search';

<SearchDialog
  defaultTag="value"
  tags={[
    {
      name: 'Tag Name',
      value: 'value',
    },
  ]}
/>;
```

#### Search Client

The `tag_set` field is an attribute for filtering. To filter indexes by tag, use the filter on Trieve search clients.

```json
{
  "must": [
    {
      "field": "tag_set",
      "match": ["value"]
    }
  ]
}
```

Or with `useTrieveSearch` hook:

```ts
import { TrieveSDK } from 'trieve-ts-sdk';
import { useTrieveSearch } from 'trieve-fumadocs-adapter/search/trieve';

const client = new TrieveSDK({
  apiKey: 'readOnlyApiKey',
  datasetId: 'datasetId',
});

const { search, setSearch, query } = useTrieveSearch(
  client,
  undefined,
  '<your tag value>',
);
```



================================================
FILE: apps/docs/content/docs/headless/utils/find-neighbour.mdx
================================================
---
title: Find Neighbours
description: Find the neighbours of a page from the page tree
---

Find the neighbours of a page from the page tree, it returns the next and
previous page of a given page. It is useful for implementing a footer.

## Usage

It requires a page tree and the url of page.

```ts
import { findNeighbour } from 'fumadocs-core/server';
import { pageTree } from '@/lib/source';

const neighbours = findNeighbour(pageTree, '/url/to/page');
```

| Parameter | Type       | Description     |
| --------- | ---------- | --------------- |
| tree      | `PageTree` | The page tree   |
| url       | `string`   | The url of page |



================================================
FILE: apps/docs/content/docs/headless/utils/get-toc.mdx
================================================
---
title: Get TOC
description: Parse Table of contents from markdown/mdx content
---

Parse Table of contents from markdown/mdx content.

> [You can use the remark plugin directly](/docs/headless/mdx/headings)

## Usage

Note: If you're using a CMS, you should use the API provided by the CMS instead.

```ts
import { getTableOfContents } from 'fumadocs-core/server';

const toc = getTableOfContents('## markdown content');
```

### Output

An array of [`TOCItemType`](/docs/headless/mdx/headings#output) is returned.



================================================
FILE: apps/docs/content/docs/headless/utils/git-last-edit.mdx
================================================
---
title: Last Modified Time
description: Get the last edit time of a file in Github repository
---

## Usage

Pass your repository name, and the path to file.

```ts
import { getGithubLastEdit } from 'fumadocs-core/server';

const time = await getGithubLastEdit({
  owner: 'fuma-nama',
  repo: 'fumadocs',
  // example: "content/docs/index.mdx"
  path: `content/docs/${page.path}`,
});
```

### Github Token

Notice that you may easily reach the rate limit in development mode. Hence, you
should pass a Github token for a higher rate limit.

Learn more about
[Authenticating to the REST API](https://docs.github.com/en/rest/overview/authenticating-to-the-rest-api).

```ts
import { getGithubLastEdit } from 'fumadocs-core/server'

 const time = await getGithubLastEdit({
    ...,
    token: `Bearer ${process.env.GIT_TOKEN}`
  })
```

Also, you can skip this in development mode if you don't need that
functionality.

```ts
process.env.NODE_ENV === 'development'? null : getGithubLastEdit(...)
```



================================================
FILE: apps/docs/content/docs/headless/utils/index.mdx
================================================
---
title: Utilities
index: true
description: Utilities to provide extra functionality to your docs
---



================================================
FILE: apps/docs/content/docs/headless/utils/meta.json
================================================
{
  "title": "Utilities",
  "pages": ["..."]
}



================================================
FILE: apps/docs/content/docs/mdx/async.mdx
================================================
---
title: Async Mode
description: Runtime compilation of content files.
---

## Introduction

By default, all Markdown and MDX files need to be pre-compiled first. The same constraint also applies to the development server.

This may result in longer dev server start times for large docs sites. You can enable Async Mode on `doc` collections to improve this.

### Setup

Install required dependencies.

```package-install
@fumadocs/mdx-remote shiki
```

Enable Async Mode.

```ts tab="Docs Collection"
import { defineDocs } from 'fumadocs-mdx/config';

export const docs = defineDocs({
  dir: 'content/docs',
  docs: {
    async: true,
  },
});
```

```ts tab="Doc Collection"
import { defineCollections } from 'fumadocs-mdx/config';

export const doc = defineCollections({
  type: 'doc',
  dir: 'content/docs',
  async: true,
});
```

### Usage

Async Mode allows on-demand compilation of Markdown and MDX content by moving the compilation process from build time to Next.js runtime.

However, you need to invoke the `load()` async function to load and compile content.

For example:

```tsx title="lib/source.ts"
import { loader } from 'fumadocs-core/source';
import { docs } from '@/.source';

export const source = loader({
  baseUrl: '/docs',
  source: docs.toFumadocsSource(),
});
```

```tsx title="page.tsx"
import { source } from '@/lib/source';
import { getMDXComponents } from '@/mdx-components';

const page = source.getPage(['...']);

if (page) {
  // frontmatter properties are available
  console.log(page.data);

  // Markdown content requires await
  const { body: MdxContent, toc } = await page.data.load();

  console.log(toc);

  return <MdxContent components={getMDXComponents()} />;
}
```

When using Async Mode, we highly recommend to use third-party services to implement search, which usually have better capability to handle massive amount of content to index.

### Constraints

It comes with some limitations on MDX features.

- No import/export allowed in MDX files. For MDX components, pass them from the `components` prop instead.
- Images must be referenced with URL (e.g. `/images/test.png`). Don't use **file paths** like `./image.png`. You should locate your images in the `public` folder and reference them with URLs.



================================================
FILE: apps/docs/content/docs/mdx/collections.mdx
================================================
---
title: Collections
description: Collection of content data for your app
---

## Define Collections

Define a collection to parse a certain set of files.

```ts
import { defineCollections } from 'fumadocs-mdx/config';
import { z } from 'zod';

export const blog = defineCollections({
  type: 'doc',
  dir: './content/blog',
  schema: z.object({
    // schema
  }),
  // other options
});
```

### `type`

The accepted type of collection.

```ts
import { defineCollections } from 'fumadocs-mdx/config';

// only scan for json/yaml files
export const metaFiles = defineCollections({
  type: 'meta',
  // options
});
```

- `type: meta`

  Accept JSON/YAML files, available options:

  <AutoTypeTable path="./content/docs/mdx/props.ts" name="MetaCollection" />

- `type: doc`

  Markdown/MDX documents, available options:

  <AutoTypeTable path="./content/docs/mdx/props.ts" name="DocCollection" />

### `dir`

Directories to scan for input files.

### `schema`

The schema to validate file data (frontmatter on `doc` type, content on `meta` type).

```ts
import { defineCollections } from 'fumadocs-mdx/config';
import { z } from 'zod';

export const blog = defineCollections({
  type: 'doc',
  dir: './content/blog',
  schema: z.object({
    name: z.string(),
  }),
});
```

> [Standard Schema](https://standardschema.dev) compatible libraries, including Zod, are supported.

Note that the validation is done at build time, hence the output must be serializable.
You can also pass a function that receives the transform context.

```ts
import { defineCollections } from 'fumadocs-mdx/config';
import { z } from 'zod';

export const blog = defineCollections({
  type: 'doc',
  dir: './content/blog',
  schema: (ctx) => {
    return z.object({
      name: z.string(),
      testPath: z.string().default(
        // original file path
        ctx.path,
      ),
    });
  },
});
```

### `mdxOptions`

Customise MDX options at the collection level.

```ts title="source.config.ts"
import { defineCollections, getDefaultMDXOptions } from 'fumadocs-mdx/config';

export const blog = defineCollections({
  type: 'doc',
  mdxOptions: {
    // mdx options
  },
});
```

By design, this will remove all default settings applied by your global config and Fumadocs MDX.
You have full control over MDX options.

You can use `getDefaultMDXOptions` to apply default configurations, it accepts the [extended MDX Options](/docs/mdx/mdx#extended).

```ts title="source.config.ts"
import { defineCollections, getDefaultMDXOptions } from 'fumadocs-mdx/config';

export const blog = defineCollections({
  type: 'doc',
  mdxOptions: getDefaultMDXOptions({
    // extended mdx options
  }),
});
```

> This API is only available on `doc` type.

## Define Docs

Define a collection for Fumadocs.

```ts
import { defineDocs } from 'fumadocs-mdx/config';

export const docs = defineDocs({
  dir: '/my/content/dir',
  docs: {
    // optional, options of `doc` collection
  },
  meta: {
    // optional, options of `meta` collection
  },
});
```

### `dir`

Instead of per collection, you should customise `dir` from `defineDocs`:

```ts
import { defineDocs } from 'fumadocs-mdx/config';

export const docs = defineDocs({
  dir: 'my/content/dir',
});
```

### `schema`

You can extend the default Zod schema of `docs` and `meta`.

```ts
import { frontmatterSchema, metaSchema, defineDocs } from 'fumadocs-mdx/config';
import { z } from 'zod';

export const docs = defineDocs({
  docs: {
    schema: frontmatterSchema.extend({
      index: z.boolean().default(false),
    }),
  },
  meta: {
    schema: metaSchema.extend({
      // other props
    }),
  },
});
```



================================================
FILE: apps/docs/content/docs/mdx/global.mdx
================================================
---
title: Global Options
description: Customise Fumadocs MDX
---

## Global Options

Shared options of Fumadocs MDX.

```ts title="source.config.ts"
import { defineConfig } from 'fumadocs-mdx/config';

export default defineConfig({
  // global options
});
```

<AutoTypeTable path="./content/docs/mdx/props.ts" name="GlobalConfig" />

### MDX Options

Customise the MDX processor options for MDX files.

```ts title="source.config.ts"
import { defineConfig } from 'fumadocs-mdx/config';
import rehypeKatex from 'rehype-katex';
import remarkMath from 'remark-math';

export default defineConfig({
  mdxOptions: {
    remarkPlugins: [remarkMath],
    // When order matters
    rehypePlugins: (v) => [rehypeKatex, ...v],
  },
});
```

Some default options are applied by Fumadocs MDX, see [Extended MDX Options](/docs/mdx/mdx#extended) for available options.



================================================
FILE: apps/docs/content/docs/mdx/include.mdx
================================================
---
title: Include
description: Reuse content from other files.
---

## Usage

### Markdown

Specify the target Markdown file path in the `<include>` tag (relative to the Markdown file itself).

```mdx title="page.mdx"
<include>./another.mdx</include>
```

This will display the content from the target file (e.g. `another.mdx`).

### CodeBlock

For other types of files, it will become a codeblock:

```mdx title="page.mdx"
<include>./script.ts</include>

<include lang="tsx" meta='title="lib.ts"'>
  ./script.ts
</include>
```

### `cwd`

Resolve relative paths from cwd instead of the Markdown file:

```mdx
<include cwd lang="tsx" meta='title="lib.ts"'>
  ./script.ts
</include>
```



================================================
FILE: apps/docs/content/docs/mdx/index.mdx
================================================
---
title: Introduction
description: What is Fumadocs MDX?
icon: Album
---

Fumadocs MDX is the official content source of Fumadocs.

It provides the tool for Next.js to transform content into type-safe data, similar to Content Collections.
This library is made for Next.js, you can use it to handle blog and other contents.

## Getting Started

Set up Fumadocs MDX for your Next.js application.

```package-install
fumadocs-mdx @types/mdx
```

Add the plugin to your `next.config.mjs` file.

```js
import { createMDX } from 'fumadocs-mdx/next';

const withMDX = createMDX();

/** @type {import('next').NextConfig} */
const config = {
  reactStrictMode: true,
};

export default withMDX(config);
```

<Callout title="ESM Only" type='warn' className="mt-4">

    The Next.js config must be a `.mjs` file since Fumadocs is ESM-only.

</Callout>

### Defining Collections

**Collection** refers to a collection containing a certain type of files. You can define collections by creating a `source.config.ts` file.

Fumadocs MDX transforms collections into arrays of type-safe data, accessible in your app. Available collections:

<Tabs items={["doc", "meta", 'docs']}>

    <Tab value='doc'>

Compile Markdown & MDX files into a React Server Component, with useful properties like **Table of Contents**.

```ts title="source.config.ts"
import { defineCollections } from 'fumadocs-mdx/config';

export const test = defineCollections({
  type: 'doc',
  dir: 'content/docs',
});
```

    </Tab>

    <Tab value='meta'>

Transform YAML/JSON files into an array of data.

```ts title="source.config.ts"
import { defineCollections } from 'fumadocs-mdx/config';

export const test = defineCollections({
  type: 'meta',
  dir: 'content/docs',
});
```

    </Tab>
    <Tab value='docs'>

Combination of `meta` and `doc` collections, which is needed for Fumadocs.

```ts title="source.config.ts"
import { defineDocs } from 'fumadocs-mdx/config';

export const docs = defineDocs({
  dir: 'content/docs',
  docs: {
    // options for `doc` collection
  },
  meta: {
    // options for `meta` collection
  },
});
```

    </Tab>

</Tabs>

For example, a `doc` collection will transform the `.md` and `.mdx` files:

<Files>
  <Folder name="folder" defaultOpen>
    <File name="ui.md" />
  </Folder>
  <File name="hello.md" />
  <File name="index.mdx" />
  <File
    name="meta.json"
    className="opacity-50 cursor-not-allowed"
    aria-disabled
  />
</Files>

### Output Folder

A `.source` folder is generated in the root directory when you run `next dev` or `next build`. It contains all output data and types, you should add it to `.gitignore`.

The `fumadocs-mdx` command also generates types for `.source` folder. Add it as a post install script to ensure types are generated when initializing the project.

```json title="package.json"
{
  "scripts": {
    "postinstall": "fumadocs-mdx"
  }
}
```

### Accessing Collections

**Collection Output** is the generated data of a collection. It can have a different type/shape depending on the collection type and schema.

You can access the collection output from `.source` folder with its original name:

```ts tab="source.config.ts"
import { defineDocs } from 'fumadocs-mdx/config';

export const docs = defineDocs({
  dir: 'content/docs',
  docs: {
    // options for `doc` collection
  },
  meta: {
    // options for `meta` collection
  },
});
```

```ts tab="Usage"
import { docs } from '@/.source';

console.log(docs);
```

> Make sure you are importing from `.source` rather than `source.config.ts`. We will import it with `@/.source` import alias in this guide.

## Integrate with Fumadocs

Create a `docs` collection and use the `toFumadocsSource()` function of its output.

```ts title="lib/source.ts"
import { docs } from '@/.source';
import { loader } from 'fumadocs-core/source';

export const source = loader({
  baseUrl: '/docs',
  source: docs.toFumadocsSource(),
});
```

> You can do the same for multiple `docs` collections.

Generally, you'll interact with the collection through [`loader()`](/docs/headless/source-api#output).

```tsx
import { source } from '@/lib/source';

const page = source.getPage(['slugs']);

if (page) {
  // access page data [!code highlight]
  console.log(page.data);

  // frontmatter properties are also inside [!code highlight]
  console.log(page.data.title);
}
```

To render the page, use `page.data.body` as a component.

```tsx
import { getMDXComponents } from '@/mdx-components';

const MDX = page.data.body;

// set your MDX components with `components` prop
return <MDX components={getMDXComponents()} />;
```

## FAQ

### Built-in Properties

These properties are exported from MDX files by default.

| Property         | Description                                     |
| ---------------- | ----------------------------------------------- |
| `frontmatter`    | Frontmatter                                     |
| `toc`            | Table of Contents                               |
| `structuredData` | Structured Data, useful for implementing search |

### Customise Frontmatter

Use the [`schema`](/docs/mdx/collections#schema-1) option to pass a validation schema to validate frontmatter and define its output properties.

### MDX Plugins

For other customisation needs such as Syntax Highlighting, see [MDX Options](/docs/mdx/mdx).



================================================
FILE: apps/docs/content/docs/mdx/last-modified.mdx
================================================
---
title: Last Modified Time
description: Output the last modified time of a document
---

## Usage

This feature is not enabled by default, you can enable this from the config file. Note that it only supports Git as version control.
Please ensure you have Git installed on your machine, and **the repository is not shallow cloned**, as it relies on your local Git history.

```ts title="source.config.ts"
import { defineConfig } from 'fumadocs-mdx/config';

export default defineConfig({
  lastModifiedTime: 'git', // [!code highlight]
});
```

### Access the Property

After doing this, a `lastModified` number will be exported for each document. You can convert it to a JavaScript Date object.

```ts
import { source } from '@/lib/source';

const page = source.getPage(['...']);

console.log(new Date(page.data.lastModified));
// or with async mode:
const { lastModified } = await page.data.load();
console.log(new Date(lastModified));
```



================================================
FILE: apps/docs/content/docs/mdx/mdx.mdx
================================================
---
title: MDX Options
description: Configure MDX processor for Fumadocs MDX
---

## Customising MDX Processor

Fumadocs MDX uses [MDX Compiler](https://mdxjs.com/packages/mdx) to compile MDX files into JavaScript files.

You can customise it on [Global Config](/docs/mdx/global#mdx-options) or [Collection Config](/docs/mdx/collections#mdxoptions).

## Extended MDX Options [#extended]

Fumadocs MDX will apply some default MDX options, to make features like **syntax highlighting** work out of the box.

To allow overriding the defaults, Fumadocs MDX's `mdxOptions` option accepts **Extended MDX Options** on top of [`ProcessorOptions`](https://mdxjs.com/packages/mdx/#processoroptions).
Additional options below:

### Remark Plugins

These plugins are applied by default:

- [Remark Image](/docs/headless/mdx/remark-image) - Handle images
- [Remark Heading](/docs/headless/mdx/headings) - Extract table of contents
- [Remark Structure](/docs/headless/mdx/structure) - Generate search indexes
- Remark Exports - Exports the output generated by remark plugins above

Add other remark plugins with:

```ts tab="Global Config"
import { defineConfig } from 'fumadocs-mdx/config';
import { myPlugin } from './remark-plugin';

export default defineConfig({
  mdxOptions: {
    remarkPlugins: [myPlugin],
    // You can also pass a function to control the order of remark plugins.
    remarkPlugins: (v) => [myPlugin, ...v],
  },
});
```

```ts tab="Collection Config"
import { defineCollections, getDefaultMDXOptions } from 'fumadocs-mdx/config';
import { myPlugin } from './remark-plugin';

export const blog = defineCollections({
  type: 'doc',
  mdxOptions: getDefaultMDXOptions({
    remarkPlugins: [myPlugin],
    // You can also pass a function to control the order of remark plugins.
    remarkPlugins: (v) => [myPlugin, ...v],
  }),
});
```

### Rehype Plugins

These plugins are applied by default:

- [Rehype Code](/docs/headless/mdx/rehype-code) - Syntax highlighting

Same as remark plugins, you can pass an array or a function to add other rehype plugins.

```ts tab="Global Config"
import { defineConfig } from 'fumadocs-mdx/config';
import { myPlugin } from './rehype-plugin';

export default defineConfig({
  mdxOptions: {
    rehypePlugins: (v) => [myPlugin, ...v],
  },
});
```

```ts tab="Collection Config"
import { defineCollections, getDefaultMDXOptions } from 'fumadocs-mdx/config';
import { myPlugin } from './rehype-plugin';

export const blog = defineCollections({
  type: 'doc',
  mdxOptions: getDefaultMDXOptions({
    rehypePlugins: (v) => [myPlugin, ...v],
  }),
});
```

### Customise Built-in Plugins

Customise the options of built-in plugins like:

```ts tab="Global Config"
import { defineConfig } from 'fumadocs-mdx/config';

export default defineConfig({
  mdxOptions: {
    rehypeCodeOptions: {
      // options
    },
    remarkImageOptions: {
      // options
    },
    remarkHeadingOptions: {
      // options
    },
  },
});
```

```ts tab="Collection Config"
import { defineCollections, getDefaultMDXOptions } from 'fumadocs-mdx/config';

export const blog = defineCollections({
  type: 'doc',
  mdxOptions: getDefaultMDXOptions({
    rehypeCodeOptions: {
      // options
    },
    remarkImageOptions: {
      // options
    },
    remarkHeadingOptions: {
      // options
    },
  }),
});
```

### Export Properties from `vfile.data`

Some remark plugins store their output in `vfile.data` (compile-time memory) which cannot be accessed from your code.
Fumadocs MDX applies a remark plugin that turns `vfile.data` properties into ESM exports, so you can access these properties when importing the MDX file.

You can define additional properties to be exported.

```ts tab="Global Config"
import { defineConfig } from 'fumadocs-mdx/config';

export default defineConfig({
  mdxOptions: {
    valueToExport: ['dataName'],
  },
});
```

```ts tab="Collection Config"
import { defineCollections, getDefaultMDXOptions } from 'fumadocs-mdx/config';

export const blog = defineCollections({
  type: 'doc',
  mdxOptions: getDefaultMDXOptions({
    valueToExport: ['dataName'],
  }),
});
```

By default, it includes:

- `toc` for the Remark Heading plugin
- `structuredData` for the Remark Structure Plugin
- `frontmatter` for the frontmatter of MDX (using `gray-matter`)



================================================
FILE: apps/docs/content/docs/mdx/meta.json
================================================
{
  "title": "Fumadocs MDX",
  "description": "The official content source",
  "icon": "Pencil",
  "root": true,
  "pages": [
    "---Guide---",
    "index",
    "performance",
    "---Configuration---",
    "collections",
    "global",
    "mdx",
    "plugin",
    "---Features---",
    "include",
    "last-modified",
    "manifest",
    "async",
    "..."
  ]
}



================================================
FILE: apps/docs/content/docs/mdx/page.mdx
================================================
---
title: Use as Page
description: Use MDX file as a page
---

## Setup

You can use `page.mdx` instead of `page.tsx` for creating a new page under the app directory.

However, it doesn't have MDX components by default, so you have to provide them:

```tsx title="mdx-components.tsx"
import defaultMdxComponents from 'fumadocs-ui/mdx';
import type { MDXComponents } from 'mdx/types';

export function getMDXComponents(components?: MDXComponents): MDXComponents {
  return {
    ...defaultMdxComponents, // for Fumadocs UI
    ...components,
  };
}

// export a `useMDXComponents()` that returns MDX components
export const useMDXComponents = getMDXComponents; // [!code ++]
```

```ts title="source.config.ts"
import { defineConfig } from 'fumadocs-mdx/config';

export default defineConfig({
  mdxOptions: {
    // Path to import your `mdx-components.tsx` above. [!code ++]
    providerImportSource: '@/mdx-components',
  },
});
```

### Usage

```mdx title="app/test/page.mdx"
{/* this will enable Typography styles of Fumadocs UI */}
export { withArticle as default } from 'fumadocs-ui/page';

## Hello World
```



================================================
FILE: apps/docs/content/docs/mdx/performance.mdx
================================================
---
title: Performance
description: The performance of Fumadocs MDX
icon: Rocket
---

## Overview

Fumadocs MDX is a bundler plugin, in other words, it has a higher performance bottleneck.
With bundlers like Webpack and Turbopack, it is enough for large docs sites with nearly 500+ MDX files, which is sufficient for almost all use cases.

Since Fumadocs MDX works with your bundler, you can import any files including client components in your MDX files.
This allows high flexibility and ensures everything is optimized by default.

### Image Optimization

Fumadocs MDX resolves images into static imports with [Remark Image](/docs/headless/mdx/remark-image).
Therefore, your images will be optimized automatically by the Next.js Image API.

```mdx
![Hello](./hello.png)

or in public folder

![Hello](/hello.png)
```

Yields:

```mdx
import HelloImage from './hello.png';

<img alt="Hello" src={HelloImage} />
```

![Banner](/banner.png)

## Caveats

Although Fumadocs MDX can handle nearly 500+ files, it could be slow and inefficient.
A huge amount of MDX files can cause extremely high memory usage during build and development mode.

This is because of:

- Bundlers do a lot of work under the hood to bundle MDX and JavaScript files and optimize performance.
- Bundlers are not supposed to compile hundreds of MDX files.

### Solutions

The main solution is to make the compilation on-demand, such that content is only loaded when it's being requested.

#### Remote Source

Remote sources don't need to pre-compile MDX files, it can compile them on-demand with SSG which can **highly increase your build speed.**
However, you cannot use import in MDX files anymore.

See [Custom Source](/docs/headless/custom-source) for configuring remote sources.

#### Async Mode

See [Async Mode](/docs/mdx/async).



================================================
FILE: apps/docs/content/docs/mdx/plugin.mdx
================================================
---
title: Next.js Loader
description: Customise the Next.js loader
---

## Plugin Options

Fumadocs MDX offers loaders and a Fumadocs [Source API](/docs/headless/source-api) adapter for integration with Fumadocs.
You can configure the plugin by passing options to `createMDX` in `next.config.mjs`.

### Config Path

Customise the config file path.

```ts
import { createMDX } from 'fumadocs-mdx/next';

const withMDX = createMDX({
  configPath: './my-config.ts',
});
```

### Development Server

When running in development mode (`next dev`), a file watcher starts to monitor for changes.
It automatically re-generates the index file in `.source` folder, ensuring Next.js hot reload is working properly.



================================================
FILE: apps/docs/content/docs/mdx/props.ts
================================================
export type {
  GlobalConfig,
  DocCollection,
  MetaCollection,
} from 'fumadocs-mdx/config';



================================================
FILE: apps/docs/content/docs/openapi/index.mdx
================================================
---
title: Scalar Example
description: View the Scalar Galaxy example OpenAPI schema.
index: true
---



================================================
FILE: apps/docs/content/docs/openapi/meta.json
================================================
{
  "title": "OpenAPI Example",
  "description": "A demo for Fumadocs OpenAPI",
  "root": true,
  "icon": "Shapes",
  "pages": ["index", "...(generated)"]
}



================================================
FILE: apps/docs/content/docs/ui/comparisons.mdx
================================================
---
title: Comparisons
description: How is Fumadocs different from other existing frameworks?
icon: GitCompareArrows
---

## Nextra

Fumadocs is highly inspired by Nextra. For example, the Routing Conventions. That is why
`meta.json` also exists in Fumadocs.

Nextra is more opinionated than Fumadocs. Fumadocs is accelerated by App Router. As a result, It provides many server-side functions, and you have to
configure things manually compared to simply editing a configuration file.

Fumadocs works great if you want more control over everything, such as
adding it to an existing codebase or implementing advanced routing.

### Feature Table

| Feature             | Fumadocs     | Nextra                    |
| ------------------- | ------------ | ------------------------- |
| Static Generation   | Yes          | Yes                       |
| Cached              | Yes          | Yes                       |
| Light/Dark Mode     | Yes          | Yes                       |
| Syntax Highlighting | Yes          | Yes                       |
| Table of Contents   | Yes          | Yes                       |
| Full-text Search    | Yes          | Yes                       |
| i18n                | Yes          | Yes                       |
| Last Git Edit Time  | Yes          | Yes                       |
| Page Icons          | Yes          | Yes, via `_meta.js` files |
| RSC                 | Yes          | Yes                       |
| Remote Source       | Yes          | Yes                       |
| SEO                 | Via Metadata | Yes                       |
| Built-in Components | Yes          | Yes                       |
| RTL Layout          | Yes          | Yes                       |

### Additional Features

Features supported via 3rd party libraries like [TypeDoc](https://typedoc.org) will not be listed here.

| Feature                    | Fumadocs | Nextra |
| -------------------------- | -------- | ------ |
| OpenAPI Integration        | Yes      | No     |
| TypeScript Docs Generation | Yes      | No     |
| TypeScript Twoslash        | Yes      | Yes    |

## Mintlify

Mintlify is a documentation service, as compared to Fumadocs, it offers a free tier but isn't completely free and open source.

Fumadocs is not as powerful as Mintlify, for example, the OpenAPI integration of Mintlify.
As the creator of Fumadocs, I wouldn't recommend switching to Fumadocs from Mintlify if you're satisfied with the current way you build docs.
However, I believe Fumadocs is a suitable tool for all Next.js developers who want to have elegant docs.

## Docusaurus

Docusaurus is a powerful framework based on React.js. It offers many cool
features with plugins and custom themes.

### Better DX

Since Fumadocs is built on the top of Next.js, you'll have to start the Next.js dev
server every time to review changes, and initial boilerplate code is relatively more
compared to Docusaurus.

For a simple docs, Docusaurus might be a better choice if you don't need any Next.js specific functionality.

However, when you want to use Next.js, or seek extra customizability like tuning default UI components, Fumadocs could be a better choice.

### Plugins

You can easily achieve many things with plugins, their ecosystem is indeed larger and maintained by many contributors.

In comparison, the flexibility of Fumadocs allows you to implement them on your own, it may take longer to tune it to your satisfaction.



================================================
FILE: apps/docs/content/docs/ui/customisation.mdx
================================================
---
title: Overview
description: An overview of Fumadocs UI
---

## Architecture

<UiOverview />

|               |                                                         |
| ------------- | ------------------------------------------------------- |
| **Sidebar**   | Display site title and navigation elements.             |
| **Page Tree** | Passed by you, mainly rendered as the items of sidebar. |
| **Docs Page** | All content of the page.                                |
| **TOC**       | Navigation within the article.                          |

## Customisation

### Layouts

You can use the exposed options of different layouts:

<Cards>
  <Card title="Docs Layout" href="/docs/ui/layouts/docs">
    Layout for docs
  </Card>
  <Card title="Docs Page" href="/docs/ui/layouts/page">
    Layout for docs content
  </Card>
  <Card title="Notebook Layout" href="/docs/ui/layouts/notebook">
    A more compact version of Docs Layout
  </Card>
  <Card title="Home Layout" href="/docs/ui/layouts/home-layout">
    Layout for other pages
  </Card>
</Cards>

### Components

Fumadocs UI also offers styled components for interactive examples to enhance your docs, you can customise them with exposed props like `style` and `className`.

See [Components](/docs/ui/components).

### Design System

Since the design system is built on Tailwind CSS, you can customise it [with CSS Variables](/docs/ui/theme#colors).

### CLI

Fumadocs CLI is a tool that installs components to your codebase, similar to Shadcn UI.

```package-install
npx @fumadocs/cli
```

Use it to install Fumadocs UI components:

```package-install
npx @fumadocs/cli add
```

Or customise layouts:

```package-install
npx @fumadocs/cli customise
```



================================================
FILE: apps/docs/content/docs/ui/index.mdx
================================================
---
title: Quick Start
description: Getting Started with Fumadocs
icon: Album
---

## Introduction

Fumadocs <span className='text-fd-muted-foreground text-sm'>(Foo-ma docs)</span> is a **documentation framework** based on Next.js, designed to be fast, flexible,
and composes seamlessly into Next.js App Router.

Fumadocs has different parts:

<Cards>

<Card icon={<CpuIcon className="text-purple-300" />} title='Fumadocs Core'>

Handles most of the logic, including document search, content source adapters, and Markdown extensions.

</Card>

<Card icon={<PanelsTopLeft className="text-blue-300" />} title='Fumadocs UI'>

The default theme of Fumadocs offers a beautiful look for documentation sites and interactive components.

</Card>

<Card icon={<Database />} title='Content Source'>

The source of your content, can be a CMS or local data layers like [Fumadocs MDX](/docs/mdx) (the official content source).

</Card>

<Card icon={<Terminal />} title='Fumadocs CLI'>

A command line tool to install UI components and automate things, useful for customizing layouts.

</Card>

</Cards>

<Callout title="Want to learn more?">
  Read our in-depth [What is Fumadocs](/docs/ui/what-is-fumadocs) introduction.
</Callout>

### Terminology

**Markdown/MDX:** Markdown is a markup language for creating formatted text. Fumadocs supports Markdown and MDX (superset of Markdown) out-of-the-box.

Although not required, some basic knowledge of Next.js App Router would be useful for further customisations.

## Automatic Installation

A minimum version of Node.js 18 required, note that Node.js 23.1 might have problems with Next.js production build.

```bash tab="npm"
npm create fumadocs-app
```

```bash tab="pnpm"
pnpm create fumadocs-app
```

```bash tab="yarn"
yarn create fumadocs-app
```

```bash tab="bun"
bun create fumadocs-app
```

It will ask you:

- the React.js framework to use (the docs is only written for Next.js).
- the content source to use.

A new fumadocs app should be initialized. Now you can start hacking!

<Callout title='From Existing Codebase?'>

    You can follow the [Manual Installation](/docs/ui/manual-installation) guide to get started.

</Callout>

### Enjoy!

Create your first MDX file in the docs folder.

```mdx title="content/docs/index.mdx"
---
title: Hello World
---

## Yo what's up
```

Run the app in development mode and see http://localhost:3000/docs.

```npm
npm run dev
```

## FAQ

Some common questions you may encounter.

<Accordions>
    <Accordion id='change-base-url' title="How to change the base route of docs?">

Since Fumadocs uses Next.js App Router, you can change the base route of docs (e.g. from `/docs/page` to `/info/page`) by renaming the route:

<Files>
  <Folder name="app/docs" defaultOpen className="opacity-50" disabled>
    <File name="layout.tsx" />
  </Folder>
  <Folder name="app/info" defaultOpen>
    <File name="layout.tsx" />
  </Folder>
</Files>

And update the base URL of pages in `source.ts`:

```ts title="lib/source.ts"
import { loader } from 'fumadocs-core/source';

export const source = loader({
  baseUrl: '/info', // [!code highlight]
});
```

If you want to remove the entire base route (docs start at `/` instead of `/docs`), it's the same logic.

Make your docs folder a route group.

<Files>
  <Folder name="app/(docs)" defaultOpen>
    <File name="layout.tsx" />
  </Folder>
</Files>

And update `baseUrl`:

```ts title="lib/source.ts"
import { loader } from 'fumadocs-core/source';

export const source = loader({
  baseUrl: '/', // [!code highlight]
});
```

    </Accordion>
    <Accordion id='dynamic-route' title="It uses Dynamic Route, will it be poor in performance?">

Next.js turns dynamic route into static routes when `generateStaticParams` is configured.
Hence, it is as fast as static pages.

You can enable Static Exports on Next.js to get a static build output. (Notice that Route Handler doesn't work with static export, you have to configure static search)

    </Accordion>
    <Accordion id='custom-layout-docs-page' title='How to create a page in /docs without docs layout?'>

Same as managing layouts in Next.js App Router, remove the original MDX file from content directory (`/content/docs`).
This ensures duplicated pages will not cause errors.

Now, You can add the page to another route group, which isn't a descendant of docs layout.

For example, to replace `/docs/test`:

<Files>
  <File name="(home)/docs/test/page.tsx" />
  <Folder name="docs">
    <File name="layout.tsx" />
    <File name="[[...slug]]/page.tsx" />
  </Folder>
</Files>

For `/docs`, you need to change the catch-all route to be non-optional:

<Files>
  <File name="(home)/docs/page.tsx" />
  <Folder name="docs" defaultOpen>
    <File name="layout.tsx" />
    <File name="[...slug]/page.tsx" />
  </Folder>
</Files>

    </Accordion>

    <Accordion id='multi-docs' title="How to implement multi-docs?">
        We recommend to use [Sidebar Tabs](/docs/ui/navigation/sidebar#sidebar-tabs).
    </Accordion>

</Accordions>

### Upgrade Fumadocs

Make sure to upgrade Fumadocs when you've encountered any problems or trying out new features:

```bash title="pnpm"
pnpm update -i -r --latest
```

## Learn More

New to here? Don't worry, we are welcome for your questions.

If you find anything confusing, please give your feedback on [Github Discussion](https://github.com/fuma-nama/fumadocs/discussions)!

### Writing Content

For authoring docs, make sure to read:

<Cards>
  <Card href="/docs/ui/markdown" title="Markdown">
    Fumadocs has some additional features for authoring content.
  </Card>
  <Card href="/docs/ui/navigation" title="Navigation">
    Learn how to customise navigation links and sidebar items.
  </Card>
  <Card href="/docs/ui/page-conventions" title="Routing">
    Learn how to organise content.
  </Card>
  <Card
    href="/docs/ui/components"
    title="Components"
    description="See all available components to enhance your docs"
  />
</Cards>

### Special Needs

<Cards>
  <Card
    href="/docs/ui/static-export"
    title="Configure Static Export"
    description="Learn how to enable static export on your docs"
  />
  <Card
    href="/docs/ui/internationalization"
    title="Internationalization"
    description="Learn how to enable i18n"
  />
  <Card
    href="/docs/ui/theme"
    title="Color Themes"
    description="Add themes to Fumadocs UI"
  />
  <Card
    href="/docs/ui/customisation"
    title="Customise UI"
    description="A detailed guide on how to customise UI"
  />
</Cards>



================================================
FILE: apps/docs/content/docs/ui/internationalization.mdx
================================================
---
title: Internationalization
description: Support multiple languages in your documentation
---

## Overview

For Next.js apps, you'll have to configure i18n routing on both Next.js and Fumadocs.

Fumadocs is not a full-powered i18n library, it's up to you when internationalizing the rest of your app.
You can also use other libraries with Fumadocs like [next-intl](https://github.com/amannn/next-intl).

<Callout title="New to Next.js?">
  You can [learn more about i18n in
  Next.js](https://nextjs.org/docs/app/building-your-application/routing/internationalization).
</Callout>

## Setup

Define the i18n configurations in a file, we will import it with `@/ilb/i18n` in this guide.

<include cwd meta='title="lib/i18n.ts"'>
  ../../examples/i18n/lib/i18n.ts
</include>

> See [available options](/docs/headless/internationalization) for i18n config.

Pass it to the source loader.

```ts title="lib/source.ts"
import { i18n } from '@/lib/i18n';
import { loader } from 'fumadocs-core/source';

export const source = loader({
  i18n, // [!code ++]
  // other options
});
```

### Middleware

Create a middleware that redirects users to appropriate locale.

<include cwd meta='title="middleware.ts"'>
  ../../examples/i18n/middleware.ts
</include>

<Callout title="Using your own middleware?">

    The default middleware is optional, you can also use your own middleware or the one provided by i18n libraries.

    Make sure its behaviour aligns with the [`hidePrefix`](/docs/headless/internationalization#hide-locale-prefix) option you set in your i18n config.

</Callout>

### Routing

Create a `/app/[lang]` folder, and move your pages/layouts into it, except route handlers.

<Files>
  <Folder name="app" defaultOpen>
    <File name="api/search/route.ts" />
    <Folder name="[lang]" defaultOpen>
      <File name="layout.tsx" />
      <File name="(home)/page.tsx" />
      <File name="..." />
    </Folder>
    <File name="layout.config.tsx" />
  </Folder>
</Files>

<Callout title="Common Mistake" type="error">
  Did you accidentally find your styles lost? Make sure the import path to
  `global.css` is still correct!
</Callout>

Provide UI translations and other config to `<RootProvider />`, the English translations are used when `translations` is not specified.

```tsx title="app/[lang]/layout.tsx"
import { RootProvider } from 'fumadocs-ui/provider';
import type { Translations } from 'fumadocs-ui/i18n';

// [!code ++:17]
// translations
const cn: Partial<Translations> = {
  search: 'Translated Content',
};

// available languages that will be displayed on UI
// make sure `locale` is consistent with your i18n config
const locales = [
  {
    name: 'English',
    locale: 'en',
  },
  {
    name: 'Chinese',
    locale: 'cn',
  },
];

export default async function RootLayout({
  params,
  children,
}: {
  params: Promise<{ lang: string }>;
  children: React.ReactNode;
}) {
  const lang = (await params).lang;

  return (
    <html lang={lang}>
      <body>
        <RootProvider
          i18n={{
            locale: lang, // [!code ++]
            locales, // [!code ++]
            translations: { cn }[lang], // [!code ++]
          }}
        >
          {children}
        </RootProvider>
      </body>
    </html>
  );
}
```

### Pass Locale

Pass the locale to Fumadocs in your pages and layouts.

```tsx title="app/layout.config.tsx" tab="Shared Options"
import { i18n } from '@/lib/i18n';
import type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';

// Make `baseOptions` a function: [!code highlight]
export function baseOptions(locale: string): BaseLayoutProps {
  return {
    i18n, // [!code ++]
    // different props based on `locale`
  };
}
```

```tsx title="/app/[lang]/(home)/layout.tsx" tab="Home Layout"
import type { ReactNode } from 'react';
import { HomeLayout } from 'fumadocs-ui/layouts/home';
import { baseOptions } from '@/app/layout.config';

export default async function Layout({
  params,
  children,
}: {
  params: Promise<{ lang: string }>;
  children: ReactNode;
}) {
  const { lang } = await params;

  return <HomeLayout {...baseOptions(lang)}>{children}</HomeLayout>; // [!code highlight]
}
```

```tsx title="/app/[lang]/docs/layout.tsx" tab="Docs Layout"
import type { ReactNode } from 'react';
import { source } from '@/lib/source';
import { DocsLayout } from 'fumadocs-ui/layouts/docs';
import { baseOptions } from '@/app/layout.config';

export default async function Layout({
  params,
  children,
}: {
  params: Promise<{ lang: string }>;
  children: ReactNode;
}) {
  const { lang } = await params;

  return (
    // [!code highlight]
    <DocsLayout {...baseOptions(lang)} tree={source.pageTree[lang]}>
      {children}
    </DocsLayout>
  );
}
```

```ts title="page.tsx" tab="Docs Page"
import { source } from '@/lib/source';

export default async function Page({
  params,
}: {
  params: Promise<{ lang: string; slug?: string[] }>;
}) {
  const { slug, lang } = await params;
  // get page
  source.getPage(slug); // [!code --]
  source.getPage(slug, lang); // [!code ++]

  // get pages
  source.getPages(); // [!code --]
  source.getPages(lang); // [!code ++]
}
```

<Callout title={<>Using another name for <code>lang</code> dynamic segment?</>}>

If you're using another name like `app/[locale]`, you also need to update `generateStaticParams()` in docs page:

```tsx
export function generateStaticParams() {
  return source.generateParams(); // [!code --]
  return source.generateParams('slug', 'locale'); // [!code ++] new param name
}
```

</Callout>

### Search

Configure i18n on your search solution.

- **Built-in Search (Orama):** See [Internationalization](/docs/headless/search/orama#internationalization).
- **Cloud Solutions (e.g. Algolia):** They usually have official support for multilingual.

## Writing Documents

<include>../../shared/page-conventions.i18n.mdx</include>

## Navigation

Fumadocs only handles navigation for its own layouts (e.g. sidebar).
For other places, you can use the `useParams` hook to get the locale from url, and attend it to `href`.

```tsx
import Link from 'next/link';
import { useParams } from 'next/navigation';

const { lang } = useParams();

return <Link href={`/${lang}/another-page`}>This is a link</Link>;
```

In addition, the [`fumadocs-core/dynamic-link`](/docs/headless/components/link#dynamic-hrefs) component supports dynamic hrefs, you can use it to attend the locale prefix.
It is useful for Markdown/MDX content.

```mdx title="content.mdx"
import { DynamicLink } from 'fumadocs-core/dynamic-link';

<DynamicLink href="/[lang]/another-page">This is a link</DynamicLink>
```



================================================
FILE: apps/docs/content/docs/ui/manual-installation.mdx
================================================
---
title: Manual Installation
description: Add Fumadocs to existing projects.
---

Before continuing, make sure:

- Next.js 15 and Tailwind CSS 4 are configured.

## Getting Started

```package-install
fumadocs-ui fumadocs-core
```

### MDX Components

<include cwd meta='title="mdx-components.tsx"'>
  ../../examples/next-mdx/mdx-components.tsx
</include>

### Content Source

Fumadocs supports different content sources, including Fumadocs MDX and [Content Collections](/docs/headless/content-collections).

Fumadocs MDX is our official content source, you can configure it with:

```package-install
fumadocs-mdx @types/mdx
```

```js tab="next.config.mjs"
import { createMDX } from 'fumadocs-mdx/next';

const withMDX = createMDX();

/** @type {import('next').NextConfig} */
const config = {
  reactStrictMode: true,
};

export default withMDX(config);
```

```ts tab="source.config.ts"
import { defineDocs } from 'fumadocs-mdx/config';

export const docs = defineDocs({
  dir: 'content/docs',
});
```

```json tab="package.json"
{
  "scripts": {
    "postinstall": "fumadocs-mdx" // [!code ++]
  }
}
```

Finally, to access your content:

```ts title="lib/source.ts"
// .source folder will be generated when you run `next dev`
import { docs } from '@/.source';
import { loader } from 'fumadocs-core/source';

export const source = loader({
  baseUrl: '/docs',
  source: docs.toFumadocsSource(),
});
```

### Root Layout

Wrap the entire application inside [Root Provider](/docs/ui/layouts/root-provider), and add required styles to `body`.

```tsx title="app/layout.tsx"
import { RootProvider } from 'fumadocs-ui/provider';
import type { ReactNode } from 'react';

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        // you can use Tailwind CSS too
        style={{
          display: 'flex',
          flexDirection: 'column',
          minHeight: '100vh',
        }}
      >
        <RootProvider>{children}</RootProvider>
      </body>
    </html>
  );
}
```

### Styles

Add the following Tailwind CSS styles to `global.css`.

```css title="global.css"
@import 'tailwindcss';
@import 'fumadocs-ui/css/neutral.css';
@import 'fumadocs-ui/css/preset.css';
```

> It doesn't come with a default font, you may choose one from `next/font`.

### Layout

Create a `app/layout.config.tsx` file to put the shared options for our layouts.

<include cwd meta='title="app/layout.config.tsx"'>
  ../../examples/next-mdx/app/layout.config.tsx
</include>

Create a folder `/app/docs` for our docs, and give it a proper layout.

<include cwd meta='title="app/docs/layout.tsx"'>
  ../../examples/next-mdx/app/docs/layout.tsx
</include>

> `pageTree` refers to Page Tree, it should be provided by your content source.

### Page

Create a catch-all route `/app/docs/[[...slug]]` for docs pages.

In the page, wrap your content in the [Page](/docs/ui/layouts/page) component.

<CodeBlockTabs groupId='content-source'>

    <include cwd meta='title="app/docs/[[...slug]]/page.tsx" tab="Fumadocs MDX"'>../../examples/next-mdx/app/docs/[[...slug]]/page.tsx</include>

    <include cwd meta='title="app/docs/[[...slug]]/page.tsx" tab="Content Collections"'>../../examples/content-collections/app/docs/[[...slug]]/page.tsx</include>

</CodeBlockTabs>

### Search

Use the default document search based on Orama.

<include cwd meta='title="app/api/search/route.ts"'>
  ../../examples/next-mdx/app/api/search/route.ts
</include>

Learn more about [Document Search](/docs/headless/search).

### Done

You can start the dev server and create MDX files.

```mdx title="content/docs/index.mdx"
---
title: Hello World
---

## Introduction

I love Anime.
```

## Deploying

It should work out-of-the-box with Vercel & Netlify.

### Cloudflare

Use https://opennext.js.org/cloudflare, Fumadocs doesn't work on Edge runtime.

### Docker Deployment

If you want to deploy your Fumadocs app using Docker with **Fumadocs MDX configured**, make sure to add the `source.config.ts` file to the `WORKDIR` in the Dockerfile.
The following snippet is taken from the official [Next.js Dockerfile Example](https://github.com/vercel/next.js/blob/canary/examples/with-docker/Dockerfile):

```zsh title="Dockerfile"
# syntax=docker.io/docker/dockerfile:1

FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies based on the preferred package manager [!code highlight]
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* .npmrc* source.config.ts ./
RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm i --frozen-lockfile; \
  else echo "Lockfile not found." && exit 1; \
  fi


# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Next.js collects completely anonymous telemetry data about general usage.
# Learn more here: https://nextjs.org/telemetry
# Uncomment the following line in case you want to disable telemetry during the build.
# ENV NEXT_TELEMETRY_DISABLED=1

RUN \
  if [ -f yarn.lock ]; then yarn run build; \
  elif [ -f package-lock.json ]; then npm run build; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm run build; \
  else echo "Lockfile not found." && exit 1; \
  fi

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
# Uncomment the following line in case you want to disable telemetry during runtime.
# ENV NEXT_TELEMETRY_DISABLED=1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/public ./public

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

EXPOSE 3000

ENV PORT=3000

# server.js is created by next build from the standalone output
# https://nextjs.org/docs/pages/api-reference/config/next-config-js/output
ENV HOSTNAME="0.0.0.0"
CMD ["node", "server.js"]
```

This ensures Fumadocs MDX can access your configuration file during builds.



================================================
FILE: apps/docs/content/docs/ui/meta.json
================================================
{
  "title": "Framework",
  "description": "The docs framework",
  "icon": "Building",
  "root": true,
  "pages": [
    "---Introduction---",
    "index",
    "what-is-fumadocs",
    "comparisons",
    "---Setup---",
    "manual-installation",
    "...",
    "(integrations)",
    "---Writing---",
    "page-conventions",
    "markdown",
    "navigation",
    "---UI---",
    "customisation",
    "theme",
    "search",
    "components",
    "mdx",
    "layouts"
  ]
}



================================================
FILE: apps/docs/content/docs/ui/page-conventions.mdx
================================================
---
title: Routing
description: A shared convention for organizing your documents
---

<include>../headless/page-conventions.mdx</include>



================================================
FILE: apps/docs/content/docs/ui/props.ts
================================================
import type { Accordion, Accordions } from 'fumadocs-ui/components/accordion';
import type { Callout } from 'fumadocs-ui/components/callout';
import type { File, Folder } from 'fumadocs-ui/components/files';
import type { InlineTOC } from 'fumadocs-ui/components/inline-toc';
import type { TypeTable } from 'fumadocs-ui/components/type-table';
import type { Card } from 'fumadocs-ui/components/card';
import type { DocsLayoutProps } from 'fumadocs-ui/layouts/docs';
import type { ComponentProps, ComponentPropsWithoutRef } from 'react';
import type { DocsPageProps } from 'fumadocs-ui/page';
import type { AutoTypeTable } from 'fumadocs-typescript/ui';

export type AccordionsProps = Omit<
  ComponentPropsWithoutRef<typeof Accordions>,
  keyof ComponentPropsWithoutRef<'div'> | 'value' | 'onValueChange'
>;

export type AccordionProps = Omit<
  ComponentPropsWithoutRef<typeof Accordion>,
  keyof ComponentPropsWithoutRef<'div'>
>;

export type CalloutProps = Omit<
  ComponentPropsWithoutRef<typeof Callout>,
  keyof ComponentPropsWithoutRef<'div'>
>;

export type FileProps = Omit<
  ComponentPropsWithoutRef<typeof File>,
  keyof ComponentPropsWithoutRef<'div'>
>;

export type FolderProps = Omit<
  ComponentPropsWithoutRef<typeof Folder>,
  keyof ComponentPropsWithoutRef<'div'>
>;

export type InlineTOCProps = Omit<
  ComponentPropsWithoutRef<typeof InlineTOC>,
  keyof ComponentPropsWithoutRef<'div'>
>;

export type CardProps = Omit<
  ComponentPropsWithoutRef<typeof Card>,
  keyof Omit<ComponentProps<'a'>, 'href'>
>;

export type TypeTableProps = ComponentPropsWithoutRef<typeof TypeTable>;

export type ObjectTypeProps = ComponentPropsWithoutRef<
  typeof TypeTable
>['type'][string];

export type { DocsLayoutProps };

export type NavbarProps = NonNullable<DocsLayoutProps['nav']>;

export type SidebarProps = Omit<
  NonNullable<DocsLayoutProps['sidebar']>,
  keyof ComponentProps<'aside'>
>;

export type PageProps = DocsPageProps;

export type TOCProps = NonNullable<DocsPageProps['tableOfContent']>;
export type TOCPopoverProps = NonNullable<
  DocsPageProps['tableOfContentPopover']
>;

export type BreadcrumbProps = Omit<
  NonNullable<DocsPageProps['breadcrumb']>,
  keyof ComponentProps<'div'>
>;

export type FooterProps = Omit<
  NonNullable<DocsPageProps['footer']>,
  keyof ComponentProps<'div'>
>;

export type AutoTypeTableProps = ComponentPropsWithoutRef<typeof AutoTypeTable>;



================================================
FILE: apps/docs/content/docs/ui/static-export.mdx
================================================
---
title: Static Export
description: Enable static export with Fumadocs
---

## Overview

Fumadocs is fully compatible with Next.js static export, allowing you to export the app as a static HTML site without a Node.js server.

```js title="next.config.mjs"
/**
 * @type {import('next').NextConfig}
 */
const nextConfig = {
  output: 'export',

  // Optional: Change links `/me` -> `/me/` and emit `/me.html` -> `/me/index.html`
  // trailingSlash: true,

  // Optional: Prevent automatic `/me` -> `/me/`, instead preserve `href`
  // skipTrailingSlashRedirect: true,
};
```

See [Next.js docs](https://nextjs.org/docs/app/guides/static-exports) for limitations and details.

## Search

### Cloud Solutions

Since the search functionality is powered by remote servers, static export works without configuration.

### Built-in Search

Learn how to [enable static mode](/docs/ui/search/orama#static) on search client.

This enables the route handler to be statically cached into a single file, and search will be computed on browser instead.



================================================
FILE: apps/docs/content/docs/ui/theme.client.tsx
================================================
'use client';
import { type ReactElement, useState } from 'react';
import { cn } from '@/lib/cn';
import { buttonVariants } from '@/components/ui/button';

export function WidthTrigger(): ReactElement {
  const [enabled, setEnabled] = useState(false);

  return (
    <button
      type="button"
      className={cn(buttonVariants({ variant: 'secondary' }))}
      onClick={() => {
        setEnabled((prev) => !prev);
      }}
    >
      {enabled ? <style>{`:root { --fd-layout-width: 1400px; }`}</style> : null}
      Trigger Width:
      <span className="ms-1.5 text-fd-muted-foreground">
        {enabled ? '1400px' : 'default'}
      </span>
    </button>
  );
}



================================================
FILE: apps/docs/content/docs/ui/theme.mdx
================================================
---
title: Themes
description: Add Theme to Fumadocs UI
---

## Usage

Only Tailwind CSS v4 is supported, the preset will also include source to Fumadocs UI itself:

```css title="Tailwind CSS"
@import 'tailwindcss';
@import 'fumadocs-ui/css/neutral.css';
@import 'fumadocs-ui/css/preset.css';
```

### Preflight Changes

By using the Tailwind CSS plugin, or the pre-built stylesheet, your default border, text and background
colors will be changed.

### Light/Dark Modes

Fumadocs supports light/dark modes with [`next-themes`](https://github.com/pacocoursey/next-themes), it is included in Root Provider.

See [Root Provider](/docs/ui/layouts/root-provider#theme-provider) to learn more.

### RTL Layout

RTL (Right-to-left) layout is supported.

To enable RTL, set the `dir` prop to `rtl` in body and root provider (required for Radix UI).

```tsx
import { RootProvider } from 'fumadocs-ui/provider';
import type { ReactNode } from 'react';

export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body dir="rtl">
        <RootProvider dir="rtl">{children}</RootProvider>
      </body>
    </html>
  );
}
```

### Layout Width

Customise the max width of docs layout with CSS Variables.

```css
:root {
  --fd-layout-width: 1400px;
}
```

<WidthTrigger />

## Tailwind CSS Preset

Fumadocs UI adds its own colors, animations, and utilities with Tailwind CSS preset.

### Colors

It comes with many themes out-of-the-box, you can pick one you prefer.

```css
@import 'fumadocs-ui/css/<theme>.css';
@import 'fumadocs-ui/css/preset.css';
```

<Tabs items={['neutral', 'black', 'vitepress', 'dusk', 'catppuccin', 'ocean', 'purple']}>

    <Tab value='neutral'>

![Neutral](/themes/neutral.png)

    </Tab>

    <Tab value='black'>

![Black](/themes/black.png)

    </Tab>

    <Tab value='vitepress'>

![Vitepress](/themes/vitepress.png)

    </Tab>

    <Tab value='dusk'>

![Dusk](/themes/dusk.png)

    </Tab>

    <Tab value='Catppuccin'>

![Catppuccin](/themes/catppuccin.png)

    </Tab>

    <Tab value='ocean'>

![Ocean](/themes/ocean.png)

    </Tab>

    <Tab value='purple'>

![Purple](/themes/purple.png)

    </Tab>

</Tabs>

The design system was inspired by [Shadcn UI](https://ui.shadcn.com), you can also customize the colors using CSS variables.

```css title="global.css"
:root {
  --color-fd-background: hsl(0, 0%, 100%);
}

.dark {
  --color-fd-background: hsl(0, 0%, 0%);
}
```

For Shadcn UI, you can use the `shadcn` preset instead.
It uses colors from your Shadcn UI theme.

```css
@import 'tailwindcss';
@import 'fumadocs-ui/css/shadcn.css';
@import 'fumadocs-ui/css/preset.css';
```

### Typography

We have a built-in plugin forked from [Tailwind CSS Typography](https://tailwindcss.com/docs/typography-plugin).

The plugin adds a `prose` class and variants to customise it.

```tsx
<div className="prose">
  <h1>Good Heading</h1>
</div>
```

> The plugin works with and only with Fumadocs UI's MDX components, it may conflict with `@tailwindcss/typography`.
> If you need to use `@tailwindcss/typography` over the default plugin, [set a class name option](https://github.com/tailwindlabs/tailwindcss-typography/blob/main/README.md#changing-the-default-class-name) to avoid conflicts.



================================================
FILE: apps/docs/content/docs/ui/versioning.mdx
================================================
---
title: Versioning
description: Implementing multi-version in your docs.
---

## Overview

It's common for developer tool related docs to version their docs, such as different docs for v1 and v2 of the same tool.

Fumadocs provide the primitives for you to implement versioning on your own way.

## Partial Versioning

When versioning only applies to part of your docs, You can separate them by folders.

For example:

<Files>
  <Folder name="java-sdk" defaultOpen>
    <Folder name="v1" defaultOpen>
      <File name="getting-started.mdx" />
    </Folder>
    <Folder name="v2" defaultOpen>
      <File name="getting-started.mdx" />
    </Folder>
  </Folder>
</Files>

<Callout title="Good to Know">
  You may want to group them with tabs rather than folders [using Sidebar
  Tabs](/docs/ui/navigation/sidebar#sidebar-tabs).
</Callout>

## Full Versioning

Sometimes you want to version the entire website, such as https://v14.fumadocs.dev (Fumadocs v14) and https://fumadocs.dev (Latest Fumadocs).

You can create a Git branch for a version of docs (call it `v2` for example), and deploy it as a separate app on another subdomain like `v2.my-site.com`.

Optionally, you can link to the other versions from your docs.
This design allows some advantages over partial versioning:

- Easy maintenance: Old docs/branches won't be affected when you iterate or upgrade dependencies.
- Better consistency: Not just the docs itself, your landing page (and other pages) will also be versioned.



================================================
FILE: apps/docs/content/docs/ui/what-is-fumadocs.mdx
================================================
---
title: What is Fumadocs
description: Introducing Fumadocs, a docs framework that you can break.
icon: CircleQuestionMark
---

Fumadocs was created because I wanted a more customisable experience for building docs, to be a docs framework that is not opinionated, **a "framework" that you can break**.

## Philosophy

**Less Abstraction:** Fumadocs expects you to write code and cooperate with the rest of your software.
While most frameworks are configured with a configuration file, they usually lack flexibility when you hope to tune its details.
You can’t control how they render the page nor the internal logic. Fumadocs shows you how the app works, instead of a single configuration file.

**Next.js Fundamentals:** It gives you the utilities and a good-looking UI.
You are still using features of Next.js App Router, like **Static Site Generation**. There is nothing new for Next.js developers, so you can use it with confidence.

**Opinionated on UI:** The only thing Fumadocs UI (the default theme) offers is **User Interface**. The UI is opinionated for bringing better mobile responsiveness and user experience.
Instead, we use a much more flexible approach inspired by Shadcn UI — [Fumadocs CLI](/docs/cli), so we can iterate our design quick, and welcome for more feedback about the UI.

## Why Fumadocs

Fumadocs is designed with flexibility in mind.

You can use `fumadocs-core` as a headless UI library and bring your own styles.
Fumadocs MDX is also a useful library to handle MDX content in Next.js. It also includes:

- Many built-in components.
- Typescript Twoslash, OpenAPI, and Math (KaTeX) integrations.
- Fast and optimized by default, natively built on App Router.
- Tight integration with Next.js, you can add it to an existing Next.js project easily.

You can read [Comparisons](/docs/ui/comparisons) if you're interested.

### Documentation

Fumadocs focuses on **authoring experience**, it provides a beautiful theme and many docs automation tools.

It helps you to iterate your codebase faster while never leaving your docs behind.
You can take this site as an example of docs site built with Fumadocs.

### Blog sites

Since Next.js is already a powerful framework, most features can be implemented with **just Next.js**.

Fumadocs provides additional tooling for Next.js, including syntax highlighting, document search, and a default theme (Fumadocs UI).
It helps you to avoid reinventing the wheels.

## When to use Fumadocs

For most of the web applications, vanilla React.js is no longer enough.
Nowadays, we also wish to have a blog, a showcase page, a FAQ page, etc. With a
fancy UI that's breathtaking, in these cases, Fumadocs can help you build the
docs easier, with less boilerplate.

Fumadocs is maintained by Fuma and many contributors, with care on the maintainability of codebase.
While we don't aim to offer every functionality people wanted, we're more focused on making basic features perfect and well-maintained.
You can also help Fumadocs to be more useful by contributing!



================================================
FILE: apps/docs/content/docs/ui/(integrations)/feedback.mdx
================================================
---
title: Feedback
description: Receive feedback from your users
---

## Overview

Feedback is crucial for knowing what your reader thinks, and help you to further improve documentation content.

## Installation

Add dependencies:

```package-install
class-variance-authority lucide-react
```

Copy the component:

<include cwd meta='title="components/rate.tsx"'>
  ./components/rate.tsx
</include>

The `@/lib/cn` import specifier may be different for your project, change it to import your `cn()` function if needed. (e.g. like `@/lib/utils`)

### How to Use

Now add the `<Rate />` component to your docs page:

```tsx
import { DocsPage } from 'fumadocs-ui/page';
import { Rate } from '@/components/rate';
import posthog from 'posthog-js';

export default async function Page() {
  return (
    <DocsPage toc={toc} full={page.data.full}>
      {/* at the bottom of page */}
      <Rate
        onRateAction={async (url, feedback) => {
          'use server';

          await posthog.capture('on_rate_docs', feedback);
        }}
      />
    </DocsPage>
  );
}
```

On above example, it reports user feedback by capturing a `on_rate_docs` event on PostHog.

You can specify your own server action to `onRateAction`, and report the feedback to different destinations like database, or GitHub Discussions via their API.

### Linking to GitHub Discussion

To report your feedback to GitHub Discussion, make a custom `onRateAction`.

You can copy this example as a starting point:

<include cwd meta="lib/github.ts">
  ./lib/github.ts
</include>

- Create your own GitHub App and obtain its app ID and private key.
- Fill required environment variables.
- Replace constants like `owner`, `repo`, and `DocsCategory`.



================================================
FILE: apps/docs/content/docs/ui/(integrations)/get-llm-text.ts
================================================
import { remark } from 'remark';
import remarkGfm from 'remark-gfm';
import remarkMdx from 'remark-mdx';
import { remarkInclude } from 'fumadocs-mdx/config';
import { source } from '@/lib/source';
import type { InferPageType } from 'fumadocs-core/source';

const processor = remark()
  .use(remarkMdx)
  // needed for Fumadocs MDX
  .use(remarkInclude)
  .use(remarkGfm);

export async function getLLMText(page: InferPageType<typeof source>) {
  const processed = await processor.process({
    path: page.data._file.absolutePath,
    value: page.data.content,
  });

  return `# ${page.data.title}
URL: ${page.url}

${page.data.description}

${processed.value}`;
}



================================================
FILE: apps/docs/content/docs/ui/(integrations)/llms.mdx
================================================
---
title: AI
description: Integrate AI functionality to Fumadocs.
---

## Docs for LLM

You can make your docs site more AI-friendly with dedicated docs content for large language models.

First, make a `getLLMText` function that converts pages into static MDX content:

<include>./get-llm-text.ts</include>

> Modify it to include other remark plugins.

### `llms.txt`

A version of docs for AIs to read.

<include meta='title="app/llms.txt/route.ts"'>./llms.txt.ts</include>

### `*.mdx`

Allow people to append `.mdx` to a page to get its Markdown/MDX content.

Make a route handler to return page content.

<include meta='title="app/llms.mdx/[[...slug]]/route.ts"'>
  ./llms.mdx.ts
</include>

And redirect users to that route.

```ts title="next.config.ts"
import type { NextConfig } from 'next';

const config: NextConfig = {
  async rewrites() {
    return [
      {
        source: '/docs/:path*.mdx',
        destination: '/llms.mdx/:path*',
      },
    ];
  },
};
```

## AI Search

![AI Search](/docs/ai-search.png)

You can install the AI search dialog using Fumadocs CLI:

```package-install
npx @fumadocs/cli add
```

By default, it's configured for Inkeep AI. Since it's connected via Vercel AI SDK, you can connect to your own AI models easily.

> Note that Fumadocs doesn't provide the AI model, it's up to you.



================================================
FILE: apps/docs/content/docs/ui/(integrations)/llms.mdx.ts
================================================
import { type NextRequest, NextResponse } from 'next/server';
import { getLLMText } from '@/lib/get-llm-text';
import { source } from '@/lib/source';
import { notFound } from 'next/navigation';

export const revalidate = false;

export async function GET(
  _req: NextRequest,
  { params }: { params: Promise<{ slug?: string[] }> },
) {
  const { slug } = await params;
  const page = source.getPage(slug);
  if (!page) notFound();

  return new NextResponse(await getLLMText(page));
}

export function generateStaticParams() {
  return source.generateParams();
}



================================================
FILE: apps/docs/content/docs/ui/(integrations)/llms.txt.ts
================================================
import { source } from '@/lib/source';
import { getLLMText } from './get-llm-text';

// cached forever
export const revalidate = false;

export async function GET() {
  const scan = source.getPages().map(getLLMText);
  const scanned = await Promise.all(scan);

  return new Response(scanned.join('\n\n'));
}



================================================
FILE: apps/docs/content/docs/ui/(integrations)/open-graph.mdx
================================================
---
title: Metadata
description: Usage with Next.js Metadata API
---

## Introduction

Next.js provides an useful set of utilities, allowing a flexible experience with Fumadocs.
Fumadocs uses the Next.js Metadata API for SEO.

Make sure to read their [Metadata section](https://nextjs.org/docs/app/building-your-application/optimizing/metadata) for the fundamentals of Metadata API.

## Open Graph Image

For docs pages, Fumadocs has a built-in metadata image generator.

You will need a route handler to get started.

<include cwd meta='title="app/docs-og/[...slug]/route.tsx"'>
  ../../examples/next-mdx/app/docs-og/[...slug]/route.tsx
</include>

> We need to append `image.png` to the end of slugs so that we can access it via `/docs-og/my-page/image.png`.

In your docs page, add the image to metadata.

```tsx title="app/docs/[[...slug]]/page.tsx"
import { notFound } from 'next/navigation';
import { source } from '@/lib/source';

export async function generateMetadata({
  params,
}: {
  params: Promise<{ slug?: string[] }>;
}) {
  const { slug = [] } = await params;
  const page = source.getPage(slug);
  if (!page) notFound();

  const image = ['/docs-og', ...slug, 'image.png'].join('/');
  return {
    title: page.data.title,
    description: page.data.description,
    openGraph: {
      images: image,
    },
    twitter: {
      card: 'summary_large_image',
      images: image,
    },
  };
}
```

### Font

You can also customise the font, options for Satori are also available on the built-in generator.

```ts
import { generateOGImage } from 'fumadocs-ui/og';

generateOGImage({
  fonts: [
    {
      name: 'Roboto',
      // Use `fs` (Node.js only) or `fetch` to read the font as Buffer/ArrayBuffer and provide `data` here.
      data: robotoArrayBuffer,
      weight: 400,
      style: 'normal',
    },
  ],
});
```



================================================
FILE: apps/docs/content/docs/ui/(integrations)/python.mdx
================================================
---
title: Python
description: Generate docs from Python
---

<Callout type="warn" title="Experimental">
  Support for Python docgen is still experimental, please use it in caution.
</Callout>

## Setup

```package-install
fumadocs-python shiki
```

### Generate Docs

Install the Python command first, we need it to collect docs from your Python package.

```bash
pip install ./node_modules/fumadocs-python
```

Generate the docs as a JSON:

```bash
fumapy-generate your-package-name
# for example
fumapy-generate httpx
```

Use the following script to convert JSON into MDX:

```js title="scripts/generate-docs.mjs"
import { rimraf } from 'rimraf';
import * as Python from 'fumadocs-python';
import * as fs from 'node:fs/promises';

// output JSON file path
const jsonPath = './httpx.json';

async function generate() {
  const out = 'content/docs/(api)';
  // clean previous output
  await rimraf(out);

  const content = JSON.parse((await fs.readFile(jsonPath)).toString());
  const converted = Python.convert(content, {
    baseUrl: '/docs',
  });

  await Python.write(converted, {
    outDir: out,
  });
}

void generate();
```

<Callout type="warn" title="Be careful">
  While most docgens use Markdown or reStructuredText, Fumadocs uses **MDX**.
  Make sure your doc is valid in MDX syntax before running.
</Callout>

### MDX Components

Add the components.

```tsx
import defaultMdxComponents from 'fumadocs-ui/mdx';
import type { MDXComponents } from 'mdx/types';
import * as Python from 'fumadocs-python/components';

export function getMDXComponents(components?: MDXComponents): MDXComponents {
  return {
    ...defaultMdxComponents,
    ...Python,
    ...components,
  };
}
```

Add styles:

```css title="Tailwind CSS"
@import 'tailwindcss';
@import 'fumadocs-ui/css/neutral.css';
@import 'fumadocs-ui/css/preset.css';
/* [!code ++] */
@import 'fumadocs-python/preset.css';
```



================================================
FILE: apps/docs/content/docs/ui/(integrations)/rss.mdx
================================================
---
title: RSS
description: Generate a RSS feed for your docs/blog.
---

## Overview

You can implement the feed using a route handler like:

```ts title="app/rss.xml/route.ts"
import { Feed } from 'feed';
import { source } from '@/lib/source';
import { NextResponse } from 'next/server';

export const revalidate = false;

const baseUrl = 'https://fumadocs.dev';

export function GET() {
  const feed = new Feed({
    title: 'Fumadocs Blog',
    id: `${baseUrl}/blog`,
    link: `${baseUrl}/blog`,
    language: 'en',

    image: `${baseUrl}/banner.png`,
    favicon: `${baseUrl}/icon.png`,
    copyright: 'All rights reserved 2025, Fuma Nama',
  });

  for (const page of source.getPages().sort((a, b) => {
    return new Date(b.data.date).getTime() - new Date(a.data.date).getTime();
  })) {
    feed.addItem({
      id: page.url,
      title: page.data.title,
      description: page.data.description,
      link: `${baseUrl}${page.url}`,
      date: new Date(page.data.date),

      author: [
        {
          name: 'Fuma',
        },
      ],
    });
  }

  return new NextResponse(feed.rss2());
}
```

You can add an alternates object to the metadata object with your feed’s title and URL.

```ts title="app/layout.tsx"
import type { Metadata } from 'next';

export const metadata: Metadata = {
  alternates: {
    types: {
      'application/rss+xml': [
        {
          title: 'Fumadocs Blog',
          url: 'https://fumadocs.dev/blog/index.xml',
        },
      ],
    },
  },
};
```



================================================
FILE: apps/docs/content/docs/ui/(integrations)/typescript.mdx
================================================
---
title: Typescript
description: Generate docs from Typescript definitions
---

## Usage

```package-install
fumadocs-typescript
```

### UI Integration

It comes with the `AutoTypeTable` component. Learn more about [Auto Type Table](/docs/ui/components/auto-type-table).

### MDX Integration

You can use it as a remark plugin:

```ts title="source.config.ts" tab="Fumadocs MDX"
import { remarkAutoTypeTable, createGenerator } from 'fumadocs-typescript';
import { defineConfig } from 'fumadocs-mdx/config';

const generator = createGenerator();

export default defineConfig({
  mdxOptions: {
    remarkPlugins: [[remarkAutoTypeTable, { generator }]],
  },
});
```

```ts tab="MDX Compiler"
import { remarkAutoTypeTable, createGenerator } from 'fumadocs-typescript';
import { compile } from '@mdx-js/mdx';

const generator = createGenerator();

await compile('...', {
  remarkPlugins: [[remarkAutoTypeTable, { generator }]],
});
```

It gives you a `auto-type-table` component.

You can use it like [Auto Type Table](/docs/ui/components/auto-type-table), but with additional rules:

- The value of attributes must be string.
- `path` accepts a path relative to the MDX file itself.
- You also need to add [`TypeTable`](/docs/ui/components/type-table) to MDX components.

```ts title="path/to/file.ts"
export interface MyInterface {
  name: string;
}
```

```mdx title="page.mdx"
<auto-type-table path="./path/to/file.ts" name="MyInterface" />
```

## Annotations

### Hide

Hide a field by adding `@internal` tsdoc tag.

```ts
interface MyInterface {
  /**
   * @internal
   */
  cache: number;
}
```

### Specify Type Name

You can specify the name of a type with the `@remarks` tsdoc tag.

```ts
interface MyInterface {
  /**
   * @remarks `timestamp` Returned by API. // [!code highlight]
   */
  time: number;
}
```

This will make the type of `time` property to be shown as `timestamp`.



================================================
FILE: apps/docs/content/docs/ui/(integrations)/openapi/configurations.mdx
================================================
---
title: Configurations
description: Customise Fumadocs OpenAPI
---

## File Generator

Pass options to the `generateFiles` function.

### Input

An array of input files.
Allowed:

- File Paths
- External URLs
- Wildcard

```ts
import { generateFiles } from 'fumadocs-openapi';

void generateFiles({
  input: ['./unkey.json'],
});
```

### Output

The output directory.

```ts
import { generateFiles } from 'fumadocs-openapi';

void generateFiles({
  output: '/content/docs',
});
```

### Per

Customise how the page is generated, default to `operation`.

> Operation in OpenAPI schema refers to an API endpoint with specific method like `/api/weather:GET`.

| mode      |                             | output                                |
| --------- | --------------------------- | ------------------------------------- |
| tag       | operations with same tag    | `{tag_name}.mdx`                      |
| file      | operations in schema schema | `{file_name}.mdx`                     |
| operation | each operation              | `{operationId ?? endpoint_path}.mdx`) |

```ts
import { generateFiles } from 'fumadocs-openapi';

void generateFiles({
  per: 'tag',
});
```

### Group By

In `operation` mode, you can group output files with folders.

| value | output                                                 |
| ----- | ------------------------------------------------------ |
| tag   | `{tag}/{operationId ?? endpoint_path}.mdx`             |
| route | `{endpoint_path}/{method}.mdx` (ignores `name` option) |
| none  | `{operationId ?? endpoint_path}.mdx` (default)         |

```ts
import { generateFiles } from 'fumadocs-openapi';

void generateFiles({
  per: 'operation',
  groupBy: 'tag',
});
```

### Name

A function that controls the output path of MDX pages.

```ts
import { generateFiles } from 'fumadocs-openapi';

void generateFiles({
  name: (output, document) => {
    if (output.type === 'operation') {
      const operation = document.paths![output.item.path]![output.item.method]!;
      // operation object
      console.log(operation);

      return 'my-dir/filename';
    }

    const hook = document.webhooks![output.item.name][output.item.method]!;
    // webhook object
    console.log(hook);
    return 'my-dir/filename';
  },
});
```

### Frontmatter

Customise the frontmatter of MDX files.

By default, it includes:

| property      | description                                      |
| ------------- | ------------------------------------------------ |
| `title`       | Page title                                       |
| `description` | Page description                                 |
| `full`        | Always true, added for Fumadocs UI               |
| `method`      | Available method of operation (`operation` mode) |
| `route`       | Route of operation (`operation` mode)            |

```ts
import { generateFiles } from 'fumadocs-openapi';

void generateFiles({
  input: ['./petstore.yaml'],
  output: './content/docs',
  frontmatter: (title, description) => ({
    myProperty: 'hello',
  }),
});
```

### Add Generated Comment

Add a comment to the top of generated files indicating they are auto-generated.

```ts
import { generateFiles } from 'fumadocs-openapi';

void generateFiles({
  input: ['./petstore.yaml'],
  output: './content/docs',
  // Add default comment
  addGeneratedComment: true,

  // Or provide a custom comment
  addGeneratedComment: 'Custom auto-generated comment',

  // Or disable comments
  addGeneratedComment: false,
});
```

### Tag Display Name

Adding `x-displayName` to OpenAPI Schema can control the display name of your tags.

```yaml title="openapi.yaml"
tags:
  - name: test
    description: this is a tag.
    x-displayName: My Test Name
```

## OpenAPI Server

The server to render pages.

### Generate Code Samples

Generate custom code samples for each API endpoint. Make sure to install the types package to give you type-safety when customising it:

```package-install
openapi-types -D
```

```ts
import { createOpenAPI } from 'fumadocs-openapi/server';

export const openapi = createOpenAPI({
  generateCodeSamples(endpoint) {
    return [
      {
        lang: 'js',
        label: 'JavaScript SDK',
        source: "console.log('hello')",
      },
    ];
  },
});
```

In addition, you can also specify code samples via OpenAPI schema.

```yaml
paths:
  /plants:
    get:
      x-codeSamples:
        - lang: js
          label: JavaScript SDK
          source: |
            const planter = require('planter');
            planter.list({ unwatered: true });
```

#### Disable Code Sample

You can disable the code sample for a specific language, for example, to disable cURL:

```ts
import { createOpenAPI } from 'fumadocs-openapi/server';

export const openapi = createOpenAPI({
  generateCodeSamples(endpoint) {
    return [
      {
        lang: 'curl',
        label: 'cURL',
        source: false,
      },
    ];
  },
});
```

### Renderer

Customise components in the page.

```ts
import { createOpenAPI } from 'fumadocs-openapi/server';

export const openapi = createOpenAPI({
  renderer: {
    Root(props) {
      // your own (server) component
    },
  },
});
```

## Advanced

### Using API Page

> This is not a public API, use it carefully.

To use the `APIPage` component in your MDX files:

```mdx
---
title: Delete Api
full: true
---

<APIPage
  document="./unkey.json"
  operations={[{ path: '/v1/apis.deleteApi', method: 'post' }]}
  hasHead={false}
/>
```

Unlike using the `generateFiles()` function, this supports revalidation of the OpenAPI schema if given an URL.

| Prop         | Description                               |
| ------------ | ----------------------------------------- |
| `document`   | OpenAPI Schema                            |
| `operations` | Operations (API endpoints) to be rendered |
| `hasHead`    | Enable to render the heading of operation |



================================================
FILE: apps/docs/content/docs/ui/(integrations)/openapi/index.mdx
================================================
---
title: OpenAPI
description: Generating docs for OpenAPI schema
---

## Manual Setup

Install the required packages.

```package-install
fumadocs-openapi shiki
```

### Generate Styles

Please note that you must have Tailwind CSS v4 configured.

```css title="Tailwind CSS"
@import 'tailwindcss';
@import 'fumadocs-ui/css/neutral.css';
@import 'fumadocs-ui/css/preset.css';
/* [!code ++] */
@import 'fumadocs-openapi/css/preset.css';
```

### Configure Pages

Create an OpenAPI instance on the server. Fumadocs OpenAPI renders the pages on server-side.

```ts title="lib/source.ts"
import { createOpenAPI, attachFile } from 'fumadocs-openapi/server';
import { loader } from 'fumadocs-core/source';

export const source = loader({
  pageTree: {
    // [!code ++] adds a badge to each page item in page tree
    attachFile,
  },
});

// [!code ++]
export const openapi = createOpenAPI();
```

Add `APIPage` to your MDX Components, so that you can use it in MDX files.

```tsx title="mdx-components.tsx"
import defaultComponents from 'fumadocs-ui/mdx';
import { APIPage } from 'fumadocs-openapi/ui';
import { openapi } from '@/lib/source';
import type { MDXComponents } from 'mdx/types';

export function getMDXComponents(components?: MDXComponents): MDXComponents {
  return {
    ...defaultComponents,
    APIPage: (props) => <APIPage {...openapi.getAPIPageProps(props)} />,
    ...components,
  };
}
```

> It is a React Server Component.

### Generate Files

You can generate MDX files directly from your OpenAPI schema.

Create a script:

```js title="scripts/generate-docs.mjs"
import { generateFiles } from 'fumadocs-openapi';

void generateFiles({
  // the OpenAPI schema, you can also give it an external URL.
  input: ['./unkey.json'],
  output: './content/docs',
  // we recommend to enable it
  // make sure your endpoint description doesn't break MDX syntax.
  includeDescription: true,
});
```

> Only OpenAPI 3.0 and 3.1 are supported.

Generate docs with the script:

```bash
node ./scripts/generate-docs.mjs
```

## Features

The official OpenAPI integration supports:

- Basic API endpoint information
- Interactive API playground
- Example code to send request (in different programming languages)
- Response samples and TypeScript definitions
- Request parameters and body generated from schemas

### Demo

[View demo](/docs/openapi).



================================================
FILE: apps/docs/content/docs/ui/(integrations)/openapi/media-adapters.mdx
================================================
---
title: Media Adapters
description: Support other media types
---

## Overview

A media adapter in Fumadocs supports:

- Converting value into `fetch()` body compatible with corresponding media type.
- Generate code example based on different programming language/tool.

Put your media adapters in a separate file.

```ts tab="lib/media-adapters.ts" twoslash
import type { MediaAdapter } from 'fumadocs-openapi';

export const myAdapter: MediaAdapter = {
  encode(data) {
    return JSON.stringify(data.body);
  },
  // returns code that inits a `body` variable, used for request body
  generateExample(data, ctx) {
    if (ctx.lang === 'js') {
      return `const body = "hello world"`;
    }

    if (ctx.lang === 'python') {
      return `body = "hello world"`;
    }

    if (ctx.lang === 'go' && 'addImport' in ctx) {
      ctx.addImport('strings');

      return `body := strings.NewReader("hello world")`;
    }
  },
};
```

```ts tab="lib/media-adapters.client.ts"
'use client';

// forward them so that Fumadocs can also use your media adapter in a client component
export { myAdapter } from './media-adapters';
```

Pass the adapter.

```ts title="lib/source.ts"
import { createOpenAPI } from 'fumadocs-openapi/server';
import * as Adapters from './media-adapters';
import * as ClientAdapters from './media-adapters.client';

export const openapi = createOpenAPI({
  proxyUrl: '/api/proxy',
  mediaAdapters: {
    // [!code ++:4] override the default adapter of `application/json`
    'application/json': {
      ...Adapters.myAdapter,
      client: ClientAdapters.myAdapter,
    },
  },
});
```



================================================
FILE: apps/docs/content/docs/ui/(integrations)/openapi/meta.json
================================================
{
  "pages": ["configurations", "..."]
}



================================================
FILE: apps/docs/content/docs/ui/(integrations)/openapi/proxy.mdx
================================================
---
title: Creating Proxy
description: Avoid CORS problem
---

## Introduction

A proxy server is useful for executing HTTP (`fetch`) requests, as it doesn't have CORS constraints like on the browser.
We can use it for executing HTTP requests on the OpenAPI playground, when the target API endpoints do not have CORS configured correctly.

<Callout type="warn" title="Warning">
  Do not use this on unreliable sites and API endpoints, the proxy server will
  forward all received headers & body, including HTTP-only `Cookies` and
  `Authorization` header.
</Callout>

### Setup

Create a route handler for proxy server.

```ts title="/api/proxy/route.ts"
import { openapi } from '@/lib/source';

export const { GET, HEAD, PUT, POST, PATCH, DELETE } = openapi.createProxy({
  // optional, we recommend to set a list of allowed origins for proxied requests
  allowedOrigins: ['https://example.com'],
});
```

> Follow the [Getting Started](/docs/ui/openapi) guide if `openapi` server is not yet configured.

And enable the proxy from `createOpenAPI`.

```ts title="lib/source.ts"
import { createOpenAPI } from 'fumadocs-openapi/server';

export const openapi = createOpenAPI({
  proxyUrl: '/api/proxy', // [!code ++]
});
```



================================================
FILE: apps/docs/content/docs/ui/components/accordion.mdx
================================================
---
title: Accordion
description: Add Accordions to your documentation
preview: accordion
---

## Usage

Based on
[Radix UI Accordion](https://www.radix-ui.com/primitives/docs/components/accordion), useful for FAQ sections.

```mdx
import { Accordion, Accordions } from 'fumadocs-ui/components/accordion';

<Accordions type="single">
  <Accordion title="My Title">My Content</Accordion>
</Accordions>
```

### Accordions

<AutoTypeTable path="./content/docs/ui/props.ts" name="AccordionsProps" />

### Accordion

<AutoTypeTable path="./content/docs/ui/props.ts" name="AccordionProps" />

### Linking to Accordion

You can specify an `id` for accordion. The accordion will automatically open when the user is navigating to the page with the specified `id` in hash parameter.

```mdx
<Accordions>
<Accordion title="My Title" id="my-title">

My Content

</Accordion>
</Accordions>
```

> The value of accordion is same as title by default. When an id presents, it will be used as the value instead.



================================================
FILE: apps/docs/content/docs/ui/components/auto-type-table.mdx
================================================
---
title: Auto Type Table
description: Auto-generated type table
---

<Wrapper>

<div className="bg-fd-background p-4 rounded-xl">

<AutoTypeTable name="AutoTypeTableExample" type={`export interface AutoTypeTableExample {
    /**
     * Markdown syntax like links, \`code\` are supported.
     *
     * See https://fumadocs.vercel.app/docs/ui/components/type-table
     */
    name: string;

    /**
    * We love Shiki.
    *
    * \`\`\`ts
    * console.log("Hello World, powered by Shiki");
    * \`\`\`
    */
    options: Partial<{ a: unknown }>;

}`} />

</div>

</Wrapper>

It generates a table for your docs based on TypeScript definitions.

## Usage

```package-install
fumadocs-typescript
```

Initialize the TypeScript compiler and add it as a MDX component.

```tsx title="mdx-components.tsx"
import defaultComponents from 'fumadocs-ui/mdx';
import type { MDXComponents } from 'mdx/types';
import { createGenerator } from 'fumadocs-typescript';
import { AutoTypeTable } from 'fumadocs-typescript/ui';

const generator = createGenerator();

export function getMDXComponents(components?: MDXComponents): MDXComponents {
  return {
    ...defaultComponents,
    AutoTypeTable: (props) => (
      <AutoTypeTable {...props} generator={generator} />
    ),
    ...components,
  };
}
```

### From File

It accepts a `path` prop that points to a typescript file, and `name` for the exported type name.

```ts title="path/to/file.ts"
export interface MyInterface {
  name: string;
}
```

```mdx
<AutoTypeTable path="./path/to/file.ts" name="MyInterface" />
```

The path is relative to your project directory (`cwd`), because `AutoTypeTable` is a React Server Component, it cannot access build-time information like MDX file path.

<Callout title="Server Component only" type="warn">

You cannot use this in a client component.

</Callout>

### From Type

You can specify the type to generate, without an actual TypeScript file.

```mdx
import { AutoTypeTable } from 'fumadocs-typescript/ui';

<AutoTypeTable type="{ hello: string }" />
```

When a `path` is given, it shares the same context as the TypeScript file.

```ts title="file.ts"
export type A = { hello: string };
```

```mdx
<AutoTypeTable path="file.ts" type="A & { world: string }" />
```

When `type` has multiple lines, the export statement and `name` prop are required.

```mdx
<AutoTypeTable
  path="file.ts"
  name="B"
  type={`
import { ReactNode } from "react"
export type B = ReactNode | { world: string }
`}
/>
```

### Functions

Notice that only object type is allowed. For functions, you should wrap them into an object instead.

```ts
export interface MyInterface {
  myFn: (input: string) => void;
}
```

### References

<auto-type-table path="../props.ts" name="AutoTypeTableProps" />

### File System

It relies on the file system, hence, the page referencing this component must be built in **build time**. Rendering the component on serverless runtime may cause problems.

### Deep Dive

Under the hood, it uses the [Typescript Compiler API](https://github.com/microsoft/TypeScript/wiki/Using-the-Compiler-API) to extract type information.
Your `tsconfig.json` file in the current working directory will be loaded.

To change the compiler settings, pass a `options` prop to the component.

Learn more about [Typescript Docs Generation](/docs/ui/typescript).



================================================
FILE: apps/docs/content/docs/ui/components/banner.mdx
================================================
---
title: Banner
description: Add a banner to your site
preview: banner
---

## Usage

Put the element at the top of your root layout, you can use it for displaying announcements.

```tsx
import { Banner } from 'fumadocs-ui/components/banner';

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}): React.ReactElement {
  return (
    <html lang="en">
      <body>
        <Banner>Hello World</Banner>
        {children}
      </body>
    </html>
  );
}
```

### Variant

Change the default variant.

```tsx
import { Banner } from 'fumadocs-ui/components/banner';

<Banner variant="rainbow">Hello World</Banner>;

// customise colors
<Banner
  variant="rainbow"
  rainbowColors={[
    'rgba(255,100,0, 0.5)',
    'rgba(255,100,0, 0.5)',
    'transparent',
    'rgba(255,100,0, 0.5)',
    'transparent',
    'rgba(255,100,0, 0.5)',
    'transparent',
  ]}
>
  Hello World
</Banner>;
```

### Change Layout

By default, the banner uses a `style` tag to modify Fumadocs layouts (e.g. reduce the sidebar height).
You can disable it with:

```tsx
import { Banner } from 'fumadocs-ui/components/banner';

<Banner changeLayout={false}>Hello World</Banner>;
```

### Close

To allow users to close the banner, give the banner an ID.

```tsx
import { Banner } from 'fumadocs-ui/components/banner';

<Banner id="hello-world">Hello World</Banner>;
```

The state will be automatically persisted.



================================================
FILE: apps/docs/content/docs/ui/components/dynamic-codeblock.mdx
================================================
---
title: Code Block (Dynamic)
description: A codeblock that also highlights code
preview: dynamicCodeBlock
---

## Usage

### Client Component

```tsx
import { DynamicCodeBlock } from 'fumadocs-ui/components/dynamic-codeblock';

<DynamicCodeBlock lang="ts" code='console.log("Hello World")' />;
```

Unlike the MDX [`CodeBlock`](/docs/ui/mdx/codeblock) component, this is a client component that can be used without MDX.
It highlights the code with Shiki and use the default component to render it.

Features:

- Can be pre-rendered on server
- load languages and themes on browser lazily

#### Options

```tsx
import { DynamicCodeBlock } from 'fumadocs-ui/components/dynamic-codeblock';

<DynamicCodeBlock
  lang="ts"
  code='console.log("Hello World")'
  options={{
    themes: {
      light: 'github-light',
      dark: 'github-dark',
    },
    components: {
      // override components (e.g. `pre` and `code`)
    },
    // other Shiki options
  }}
/>;
```

### Server Component

For a server component equivalent, you can use the built-in utility from core:

<include>./server-codeblock.tsx</include>



================================================
FILE: apps/docs/content/docs/ui/components/files.mdx
================================================
---
title: Files
description: Display file structure in your documentation
preview: 'files'
---

## Usage

Wrap file components in `Files`.

```mdx
import { File, Folder, Files } from 'fumadocs-ui/components/files';

<Files>
  <Folder name="app" defaultOpen>
    <File name="layout.tsx" />
    <File name="page.tsx" />
    <File name="global.css" />
  </Folder>
  <Folder name="components">
    <File name="button.tsx" />
    <File name="tabs.tsx" />
    <File name="dialog.tsx" />
  </Folder>
  <File name="package.json" />
</Files>
```

### File

<AutoTypeTable path="./content/docs/ui/props.ts" name="FileProps" />

### Folder

<AutoTypeTable path="./content/docs/ui/props.ts" name="FolderProps" />



================================================
FILE: apps/docs/content/docs/ui/components/github-info.mdx
================================================
---
title: GitHub Info
description: Display your GitHub repository information
preview: githubInfo
---

## Usage

```tsx
import { GithubInfo } from 'fumadocs-ui/components/github-info';

<GithubInfo
  owner="fuma-nama"
  repo="fumadocs"
  // your own GitHub access token (optional)
  token={process.env.GITHUB_TOKEN}
/>;
```

It's recommended to add it to your docs layout with `links` option:

```tsx title="app/docs/layout.tsx"
import { DocsLayout, type DocsLayoutProps } from 'fumadocs-ui/layouts/notebook';
import type { ReactNode } from 'react';
import { baseOptions } from '@/app/layout.config';
import { source } from '@/lib/source';
import { GithubInfo } from 'fumadocs-ui/components/github-info';

const docsOptions: DocsLayoutProps = {
  ...baseOptions,
  tree: source.pageTree,
  links: [
    {
      type: 'custom',
      children: (
        <GithubInfo owner="fuma-nama" repo="fumadocs" className="lg:-mx-2" />
      ),
    },
  ],
};

export default function Layout({ children }: { children: ReactNode }) {
  return <DocsLayout {...docsOptions}>{children}</DocsLayout>;
}
```



================================================
FILE: apps/docs/content/docs/ui/components/image-zoom.mdx
================================================
---
title: Zoomable Image
description: Allow zoom-in images in your documentation
preview: zoomImage
---

## Usage

Replace `img` with `ImageZoom` in your MDX components.

```tsx title="mdx-components.tsx"
import { ImageZoom } from 'fumadocs-ui/components/image-zoom';
import defaultComponents from 'fumadocs-ui/mdx';
import type { MDXComponents } from 'mdx/types';

export function getMDXComponents(components?: MDXComponents): MDXComponents {
  return {
    ...defaultComponents,
    img: (props) => <ImageZoom {...(props as any)} />,
    ...components,
  };
}
```

Now image zoom will be automatically enabled on all images.

```mdx
![Test](/banner.png)
```

### Image Optimization

A default [`sizes` property](https://nextjs.org/docs/app/api-reference/components/image#sizes) will be defined for Next.js `<Image />` component if not specified.



================================================
FILE: apps/docs/content/docs/ui/components/index.mdx
================================================
---
title: Components
description: Additional components to improve your docs
index: true
---



================================================
FILE: apps/docs/content/docs/ui/components/inline-toc.mdx
================================================
---
title: Inline TOC
description: Add Inline TOC into your documentation
preview: inlineTOC
---

## Usage

Pass TOC items to the component.

```mdx
import { InlineTOC } from 'fumadocs-ui/components/inline-toc';

<InlineTOC items={toc} />
```

### Use in Pages

You can add inline TOC into every page.

```tsx
<DocsPage>
  ...
  <InlineTOC items={toc} />
  ...
</DocsPage>
```

## Reference

<AutoTypeTable path="./content/docs/ui/props.ts" name="InlineTOCProps" />



================================================
FILE: apps/docs/content/docs/ui/components/server-codeblock.tsx
================================================
import * as Base from 'fumadocs-ui/components/codeblock';
import { highlight } from 'fumadocs-core/highlight';
import { type HTMLAttributes } from 'react';

export async function CodeBlock({
  code,
  lang,
  ...rest
}: HTMLAttributes<HTMLElement> & {
  code: string;
  lang: string;
}) {
  const rendered = await highlight(code, {
    lang,
    components: {
      pre: (props) => <Base.Pre {...props} />,
    },
    // other Shiki options
  });

  return <Base.CodeBlock {...rest}>{rendered}</Base.CodeBlock>;
}



================================================
FILE: apps/docs/content/docs/ui/components/steps.mdx
================================================
---
title: Steps
description: Adding steps to your docs
preview: steps
---

## Usage

Put your steps into the `Steps` container.

```mdx
import { Step, Steps } from 'fumadocs-ui/components/steps';

<Steps>
<Step>

### Hello World

</Step>

<Step>

### Hello World

</Step>
</Steps>
```

> We recommend using Tailwind CSS utility classes directly on Tailwind CSS projects.

### Without imports

You can use the Tailwind CSS utilities without importing it.

```mdx
<div className="fd-steps">
  <div className="fd-step" />
</div>
```

It supports adding step styles to only headings with arbitrary variants.

```mdx
<div className='fd-steps [&_h3]:fd-step'>

### Hello World

</div>
```

<div className='fd-steps [&_h3]:fd-step'>

### Hello World

You no longer need to use the step component anymore.

</div>



================================================
FILE: apps/docs/content/docs/ui/components/tabs.client.tsx
================================================
'use client';

import { useEffect, useState } from 'react';
import { Tab, Tabs } from 'fumadocs-ui/components/tabs';
import { cn } from '@/lib/cn';
import { buttonVariants } from '@/components/ui/button';

export function UrlBar() {
  const [url, setUrl] = useState('');
  useEffect(() => {
    const timer = setInterval(() => {
      setUrl(window.location.pathname + window.location.hash);
    }, 100);

    return () => {
      clearInterval(timer);
    };
  }, []);

  return <pre className="rounded-lg border bg-card p-2 text-sm">{url}</pre>;
}

export function WithoutValueTest() {
  const [items, setItems] = useState(['Item 1', 'Item 2']);

  return (
    <>
      <Tabs items={items}>
        {items.map((item) => (
          <Tab key={item}>{item}</Tab>
        ))}
      </Tabs>
      <button
        className={cn(
          buttonVariants({
            variant: 'secondary',
          }),
        )}
        onClick={() => setItems(['Item 1', 'Item 3', 'Item 2'])}
      >
        Change Items
      </button>
    </>
  );
}



================================================
FILE: apps/docs/content/docs/ui/components/tabs.mdx
================================================
---
title: Tabs
description:
  A Tabs component built with Radix UI, with additional features such as
  persistent and shared value.
preview: tabs
---

## Usage

Add MDX components.

```tsx title="mdx-components.tsx"
import defaultMdxComponents from 'fumadocs-ui/mdx';
import * as TabsComponents from 'fumadocs-ui/components/tabs';
import type { MDXComponents } from 'mdx/types';

export function getMDXComponents(components?: MDXComponents): MDXComponents {
  return {
    ...defaultMdxComponents,
    ...TabsComponents, // [!code ++]
    ...components,
  };
}
```

And use it like:

```mdx
<Tabs items={['Javascript', 'Rust']}>
  <Tab value="Javascript">Javascript is weird</Tab>
  <Tab value="Rust">Rust is fast</Tab>
</Tabs>
```

<Tabs items={['Javascript', 'Rust']}>
  <Tab value="Javascript">Javascript is weird</Tab>
  <Tab value="Rust">Rust is fast</Tab>
</Tabs>

### Without `value`

Without a `value`, it detects from the children index. Note that it might cause errors on re-renders, it's not encouraged if the tabs might change.

```mdx
import { Tab, Tabs } from 'fumadocs-ui/components/tabs';

<Tabs items={['Javascript', 'Rust']}>
  <Tab>Javascript is weird</Tab>
  <Tab>Rust is fast</Tab>
</Tabs>
```

<Tabs items={['Javascript', 'Rust']}>
  <Tab>Javascript is weird</Tab>
  <Tab>Rust is fast</Tab>
</Tabs>

### Shared Value

By passing an `groupId` property, you can share a value across all tabs with the same
id.

```mdx
<Tabs groupId="language" items={['Javascript', 'Rust']}>
  <Tab value="Javascript">Javascript is weird</Tab>
  <Tab value="Rust">Rust is fast</Tab>
</Tabs>
```

### Persistent

You can enable persistent by passing a `persist` property. The value will be
stored in `localStorage`, with its id as the key.

```mdx
<Tabs groupId="language" items={['Javascript', 'Rust']} persist>
  <Tab value="Javascript">Javascript is weird</Tab>
  <Tab value="Rust">Rust is fast</Tab>
</Tabs>
```

> Persistent only works if you have passed an `id`.

### Default Value

Set a default value by passing `defaultIndex`.

```mdx
<Tabs items={['Javascript', 'Rust']} defaultIndex={1}>
  <Tab value="Javascript">Javascript is weird</Tab>
  <Tab value="Rust">Rust is fast</Tab>
</Tabs>
```

### Link to Tab

Use HTML `id` attribute to link to a specific tab.

```mdx
<Tabs items={['Javascript', 'Rust', 'C++']}>
  <Tab value="Javascript">Javascript is weird</Tab>
  <Tab value="Rust">Rust is fast</Tab>
  <Tab id="tab-cpp" value="C++">
    `Hello World`
  </Tab>
</Tabs>
```

You can add the hash `#tab-cpp` to your URL and reload, the C++ tab will be activated.

<Tabs items={['Javascript', 'Rust', 'C++']}>
  <Tab value="Javascript">Javascript is weird</Tab>
  <Tab value="Rust">Rust is fast</Tab>
  <Tab id="tab-cpp" value="C++">
    `Hello World`
  </Tab>
</Tabs>

Additionally, the `updateAnchor` property can be set to `true` in the `Tabs` component
to automatically update the URL hash whenever time a new tab is selected:

```mdx
<Tabs items={['Javascript', 'Rust', 'C++']} updateAnchor>
  <Tab id="tab-js" value="Javascript">
    Javascript is weird
  </Tab>
  <Tab id="tab-rs" value="Rust">
    Rust is fast
  </Tab>
  <Tab id="tab-cpp" value="C++">
    `Hello World`
  </Tab>
</Tabs>
```

<UrlBar />

<Tabs items={['Hello', 'World']} updateAnchor>
  <Tab id="tab-hello" value="Hello">
    Hello!
  </Tab>
  <Tab id="tab-world" value="World">
    World!
  </Tab>
</Tabs>

## Advanced Usage

Use it in the Radix UI primitive way, see [Radix UI](https://radix-ui.com/primitives/docs/components/tabs) for more details.

```mdx
<Tabs defaultValue="npm">
  <TabsList>
    <TabsTrigger value="npm">
      <NpmIcon />
      npm
    </TabsTrigger>
  </TabsList>
  <TabsContent value="npm">Hello World</TabsContent>
</Tabs>
```

<Tabs defaultValue="npm">
  <TabsList>
    <TabsTrigger value="npm">
      <svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <title>npm</title>
        <path
          fill="currentColor"
          d="M1.763 0C.786 0 0 .786 0 1.763v20.474C0 23.214.786 24 1.763 24h20.474c.977 0 1.763-.786 1.763-1.763V1.763C24 .786 23.214 0 22.237 0zM5.13 5.323l13.837.019-.009 13.836h-3.464l.01-10.382h-3.456L12.04 19.17H5.113z"
        />
      </svg>
      npm
    </TabsTrigger>
  </TabsList>
  <TabsContent value="npm">Hello World</TabsContent>
</Tabs>



================================================
FILE: apps/docs/content/docs/ui/components/type-table.mdx
================================================
---
title: Type Table
description: A table for documenting types
preview: typeTable
---

## Usage

It accepts a `type` property.

```mdx
import { TypeTable } from 'fumadocs-ui/components/type-table';

<TypeTable
  type={{
    percentage: {
      description:
        'The percentage of scroll position to display the roll button',
      type: 'number',
      default: 0.2,
    },
  }}
/>
```

## References

### Type Table

<AutoTypeTable path="./content/docs/ui/props.ts" name="TypeTableProps" />

### Object Type

<AutoTypeTable path="./content/docs/ui/props.ts" name="ObjectTypeProps" />



================================================
FILE: apps/docs/content/docs/ui/layouts/docs.mdx
================================================
---
title: Docs Layout
description: The layout of documentation
---

The layout of documentation pages, it includes a sidebar and mobile-only navbar.

> It is a server component, you should not reference it in a client component.

## Usage

Pass your page tree to the component.

```tsx title="layout.tsx"
import { DocsLayout } from 'fumadocs-ui/layouts/docs';
import { baseOptions } from '@/app/layout.config';
import type { ReactNode } from 'react';

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <DocsLayout {...baseOptions} tree={tree}>
      {children}
    </DocsLayout>
  );
}
```

<AutoTypeTable
  path="./content/docs/ui/props.ts"
  type="Omit<DocsLayoutProps, 'children' | 'disableThemeSwitch'>"
/>

## Sidebar

```tsx title="layout.tsx"
import { DocsLayout } from 'fumadocs-ui/layouts/docs';

<DocsLayout
  sidebar={{
    enabled: true,
    // replace the default sidebar
    // component:
  }}
/>;
```

> See [Sidebar Links](/docs/ui/navigation/sidebar) for customising sidebar items.

<AutoTypeTable path="./content/docs/ui/props.ts" name="SidebarProps" />

## Nav

A mobile-only navbar, we recommend to customise it from `baseOptions`.

<div className='max-w-[460px] mx-auto'>

![Docs Nav](/docs/docs-nav.png)

</div>

```tsx
import type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';

export const baseOptions: BaseLayoutProps = {
  githubUrl: 'https://github.com/fuma-nama/fumadocs',
  nav: {
    title: 'My App',
  },
};
```

<AutoTypeTable
  path="./content/docs/ui/props.ts"
  type="Omit<NavbarProps, 'children'>"
/>

### Transparent Mode

To make the navbar background transparent, you can configure transparent mode.

```tsx
import type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';

export const baseOptions: BaseLayoutProps = {
  nav: {
    transparentMode: 'top',
  },
};
```

| Mode     | Description                              |
| -------- | ---------------------------------------- |
| `always` | Always use a transparent background      |
| `top`    | When at the top of page                  |
| `none`   | Disable transparent background (default) |

### Replace Navbar

To replace the navbar in Docs Layout, set `nav.component` to your own component.

```tsx title="layout.tsx"
import { baseOptions } from '@/app/layout.config';
import { DocsLayout } from 'fumadocs-ui/layouts/notebook';
import type { ReactNode } from 'react';

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <DocsLayout
      {...baseOptions}
      nav={{
        component: <CustomNavbar />,
      }}
    >
      {children}
    </DocsLayout>
  );
}
```

Fumadocs uses **CSS Variables** to share the size of layout components, and fit each layout component into appropriate position.

You need to override `--fd-nav-height` to the exact height of your custom navbar, this can be done with a CSS stylesheet (e.g. in `global.css`):

```css
:root {
  --fd-nav-height: 80px !important;
}
```

## Advanced

### Disable Prefetching

By default, it uses the Next.js Link component with prefetch enabled.
When the link component appears into the browser viewport, the content (RSC payload) will be prefetched.

On Vercel, this may cause a high usage of serverless functions and Data Cache.
It can also hit the limits of some other hosting platforms.

You can disable prefetching to reduce the amount of RSC requests.

```tsx
import { DocsLayout } from 'fumadocs-ui/layouts/docs';

<DocsLayout sidebar={{ prefetch: false }} />;
```



================================================
FILE: apps/docs/content/docs/ui/layouts/home-layout.mdx
================================================
---
title: Home Layout
description: Shared layout for other pages
---

## Usage

Add a navbar and search dialog across other pages.

```tsx title="/app/(home)/layout.tsx"
import { HomeLayout } from 'fumadocs-ui/layouts/home';
import { baseOptions } from '@/app/layout.config';
import type { ReactNode } from 'react';

export default function Layout({ children }: { children: ReactNode }) {
  return <HomeLayout {...baseOptions}>{children}</HomeLayout>;
}
```

Create a [Route Group](https://nextjs.org/docs/app/building-your-application/routing/route-groups) to share the same layout across multiple pages.

<Files>
  <Folder name="(home)" defaultOpen>
    <File name="page.tsx" />
    <File name="layout.tsx" />
  </Folder>
  <Folder name="/docs">
    <Folder name={'[[..slugs]]'}>
      <File name="page.tsx" />
    </Folder>
    <File name="layout.tsx" />
  </Folder>
</Files>

We recommend to customise it from [`baseOptions`](/docs/ui/navigation/links).



================================================
FILE: apps/docs/content/docs/ui/layouts/notebook.mdx
================================================
---
title: Notebook
description: A more compact version of Docs Layout
---

![Notebook](/docs/notebook.png)

## Usage

Enable the notebook layout with `fumadocs-ui/layouts/notebook`, it's a more compact layout than the default one.

```tsx title="layout.tsx"
import { DocsLayout } from 'fumadocs-ui/layouts/notebook'; // [!code highlight]
import { baseOptions } from '@/app/layout.config';
import { source } from '@/lib/source';
import type { ReactNode } from 'react';

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <DocsLayout {...baseOptions} tree={source.pageTree}>
      {children}
    </DocsLayout>
  );
}
```

## Configurations

The options are inherited from [Docs Layout](/docs/ui/layouts/docs), with minor differences:

- sidebar/navbar cannot be replaced, Notebook layout is more opinionated than the default one.
- additional options (see below).

### Tab Mode

Configure the style of sidebar tabs.

![Notebook](/docs/notebook-tab-mode.png)

```tsx title="layout.tsx"
import { DocsLayout } from 'fumadocs-ui/layouts/notebook';
import { baseOptions } from '@/app/layout.config';
import { source } from '@/lib/source';
import type { ReactNode } from 'react';

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <DocsLayout
      {...baseOptions}
      tabMode="navbar" // [!code ++]
      tree={source.pageTree}
    >
      {children}
    </DocsLayout>
  );
}
```

### Nav Mode

Configure the style of navbar.

![Notebook](/docs/notebook-nav-mode.png)

```tsx title="layout.tsx"
import { DocsLayout } from 'fumadocs-ui/layouts/notebook';
import { baseOptions } from '@/app/layout.config';
import { source } from '@/lib/source';
import type { ReactNode } from 'react';

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <DocsLayout
      {...baseOptions}
      nav={{ ...baseOptions.nav, mode: 'top' }} // [!code ++]
      tree={source.pageTree}
    >
      {children}
    </DocsLayout>
  );
}
```



================================================
FILE: apps/docs/content/docs/ui/layouts/page.mdx
================================================
---
title: Docs Page
description: A page in your documentation
---

Page is the base element of a documentation, it includes Table of contents,
Footer, and Breadcrumb.

## Usage

```tsx title="page.tsx"
import {
  DocsPage,
  DocsDescription,
  DocsTitle,
  DocsBody,
} from 'fumadocs-ui/page';

<DocsPage>
  <DocsTitle>title</DocsTitle>
  <DocsDescription>description</DocsDescription>
  <DocsBody>
    <h2>This heading looks good!</h2>
    It applies the Typography styles, wrap your content here.
  </DocsBody>
</DocsPage>;
```

<Callout type='info' title='Good to know'>

Instead of rendering the title with `DocsTitle` in `page.tsx`, you can put the title into MDX file.
This will render the title in the MDX body.

</Callout>

### Edit on GitHub

You can also add your own component.

```tsx
import { DocsBody } from 'fumadocs-ui/page';

<DocsBody>
  <a
    href={`https://github.com/fuma-nama/fumadocs/blob/main/content/docs/${page.path}`}
    rel="noreferrer noopener"
    target="_blank"
    className="w-fit border rounded-xl p-2 font-medium text-sm text-fd-secondary-foreground bg-fd-secondary transition-colors hover:text-fd-accent-foreground hover:bg-fd-accent"
  >
    Edit on GitHub
  </a>
</DocsBody>;
```

## Configurations

### Full Mode

To extend the page to fill up all available space, pass `full` to the page component.
This will force TOC to be shown as a popover.

```tsx
import { DocsPage } from 'fumadocs-ui/page';

<DocsPage full>...</DocsPage>;
```

### Table of Contents

An overview of all the headings in your article, it requires an array of headings.

For Markdown and MDX documents, You can obtain it using the
[TOC Utility](/docs/headless/utils/get-toc). Content sources like Fumadocs MDX offer this out-of-the-box.

```tsx
import { DocsPage } from 'fumadocs-ui/page';

<DocsPage toc={headings}>...</DocsPage>;
```

You can customise or disable it with the `tableOfContent` option, or with `tableOfContentPopover` on smaller devices.

```tsx
import { DocsPage } from 'fumadocs-ui/page';

<DocsPage tableOfContent={options} tableOfContentPopover={options}>
  ...
</DocsPage>;
```

<AutoTypeTable path="./content/docs/ui/props.ts" name="TOCProps" />

#### Style

You can choose another style for TOC, like `clerk` inspired by https://clerk.com:

```tsx
import { DocsPage } from 'fumadocs-ui/page';

<DocsPage
  tableOfContent={{
    style: 'clerk',
  }}
>
  ...
</DocsPage>;
```

### Last Updated Time

Display last updated time of the page.

```tsx
import { DocsPage } from 'fumadocs-ui/page';

<DocsPage lastUpdate={new Date(lastModifiedTime)} />;
```

Since you might use different version controls (e.g. Github) or CMS like Sanity, Fumadocs UI doesn't display the last updated time by
default.

<Tabs items={['Fumadocs MDX', 'GitHub API']}>

    <Tab>

You can enable [`lastModifiedTime`](/docs/mdx/last-modified).

```tsx
import { DocsPage } from 'fumadocs-ui/page';
import { source } from '@/lib/source';
const page = source.getPage(['...']);

<DocsPage lastUpdate={new Date(page.data.lastModified)} />;
```

    </Tab>

    <Tab>

For Github hosted documents, you can use
the [`getGithubLastEdit`](/docs/headless/utils/git-last-edit) utility.

```tsx
import { DocsPage } from 'fumadocs-ui/page';
import { getGithubLastEdit } from 'fumadocs-core/server';

const time = await getGithubLastEdit({
  owner: 'fuma-nama',
  repo: 'fumadocs',
  path: `content/docs/${page.path}`,
});

<DocsPage lastUpdate={new Date(time)} />;
```

    </Tab>

</Tabs>

### Footer

Footer is a navigation element that has two buttons to jump to the next and previous pages. When not specified, it shows the neighbour pages found from page tree.

Customise the footer with the `footer` option.

```tsx
import { DocsPage, DocsBody } from 'fumadocs-ui/page';

<DocsPage footer={options}>
  <DocsBody>...</DocsBody>
</DocsPage>;
```

<AutoTypeTable path="./content/docs/ui/props.ts" name="FooterProps" />

### Breadcrumb

A navigation element, shown only when user is navigating in folders.

<AutoTypeTable path="./content/docs/ui/props.ts" name="BreadcrumbProps" />



================================================
FILE: apps/docs/content/docs/ui/layouts/root-provider.mdx
================================================
---
title: Root Provider
description: The context provider of Fumadocs UI.
---

The context provider of all the components, including `next-themes` and context
for search dialog. It should be located at the root layout.

## Usage

```jsx
import { RootProvider } from 'fumadocs-ui/provider';

export default function Layout({ children }) {
  return (
    <html lang="en">
      <body>
        <RootProvider>{children}</RootProvider>
      </body>
    </html>
  );
}
```

### Search Dialog

Customize or disable the search dialog with `search` option.

```jsx
<RootProvider
  search={{
    enabled: false,
  }}
>
  {children}
</RootProvider>
```

Learn more from [Search](/docs/ui/search).

### Theme Provider

Fumadocs supports light/dark modes with [`next-themes`](https://github.com/pacocoursey/next-themes).
Customise or disable it with `theme` option.

```jsx
<RootProvider
  theme={{
    enabled: false,
  }}
>
  {children}
</RootProvider>
```



================================================
FILE: apps/docs/content/docs/ui/markdown/index.mdx
================================================
---
title: Markdown
description: How to write documents
---

## Introduction

Fumadocs provides many useful extensions to MDX, a markup language. Here is a brief introduction to the default MDX syntax of Fumadocs.

> MDX is not the only supported format of Fumadocs. In fact, you can use any renderers such as `next-mdx-remote` or CMS.

## MDX

We recommend MDX, a superset of Markdown with JSX syntax.
It allows you to import components, and use them in the document, or even writing JavaScript.

See:

- [MDX Syntax](https://mdxjs.com/docs/what-is-mdx/#mdx-syntax).
- GFM (GitHub Flavored Markdown) is also supported, see [GFM Specification](https://github.github.com/gfm).

```mdx
---
title: This is a document
---

import { Component } from './component';

<Component name="Hello" />

# Heading

## Heading

### Heading

#### Heading

Hello World, **Bold**, _Italic_, ~~Hidden~~

1. First
2. Second
3. Third

- Item 1
- Item 2

> Quote here

![alt](/image.png)

| Table | Description |
| ----- | ----------- |
| Hello | World       |
```

Images are automatically optimized for `next/image`.

### Auto Links

Internal links use the `next/link` component to allow prefetching and avoid hard-reload.

External links will get the default `rel="noreferrer noopener" target="_blank"` attributes for security.

```mdx
[My Link](https://github.github.com/gfm)

This also works: https://github.github.com/gfm.
```

### Cards

Useful for adding links.

```mdx
import { HomeIcon } from 'lucide-react';

<Cards>
  <Card
    href="https://nextjs.org/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating"
    title="Fetching, Caching, and Revalidating"
  >
    Learn more about caching in Next.js
  </Card>
  <Card title="href is optional">Learn more about `fetch` in Next.js.</Card>
  <Card icon={<HomeIcon />} href="/" title="Home">
    You can include icons too.
  </Card>
</Cards>
```

<Cards>
  <Card
    href="https://nextjs.org/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating"
    title="Fetching, Caching, and Revalidating"
  >
    Learn more about caching in Next.js
  </Card>
  <Card title="href is optional">Learn more about `fetch` in Next.js.</Card>
  <Card icon={<HomeIcon />} href="/" title="Home">
    You can include icons too.
  </Card>
</Cards>

#### "Further Reading" Section

You can do something like:

```tsx title="page.tsx"
import { getPageTreePeers } from 'fumadocs-core/server';
import { source } from '@/lib/source';

<Cards>
  {getPageTreePeers(source.pageTree, '/docs/my-page').map((peer) => (
    <Card key={peer.url} title={peer.name} href={peer.url}>
      {peer.description}
    </Card>
  ))}
</Cards>;
```

This will show the other pages in the same folder as cards.

<DocsCategory url="/docs/ui/navigation" />

### Callouts

Useful for adding tips/warnings, it is included by default. You can specify the type of callout:

- `info` (default)
- `warn`/`warning`
- `error`
- `success`

```mdx
<Callout>Hello World</Callout>

<Callout title="Title">Hello World</Callout>

<Callout title="Title" type="error">
  Hello World
</Callout>
```

<Callout>Hello World</Callout>

<Callout title="Title" type="warn">
  Hello World
</Callout>

<Callout title="Title" type="error">
  Hello World
</Callout>

### Headings

An anchor is automatically applied to each heading, it sanitizes invalid characters like spaces. (e.g. `Hello World` to `hello-world`)

```md
# Hello `World`
```

#### TOC Settings

The table of contents (TOC) will be generated based on headings, you can also customise the effects of headings:

```md
# Heading [!toc]

This heading will be hidden from TOC.

# Another Heading [toc]

This heading will **only** be visible in TOC, you can use it to add additional TOC items.
Like headings rendered in a React component:

<MyComp />
```

#### Custom Anchor

You can add `[#slug]` to customise heading anchors.

```md
# heading [#my-heading-id]
```

You can also chain it with TOC settings like:

```md
# heading [toc] [#my-heading-id]
```

To link people to a specific heading, add the heading id to hash fragment: `/page#my-heading-id`.

### Codeblock

Syntax Highlighting is supported by default using [Rehype Code](/docs/headless/mdx/rehype-code).

````mdx
```js
console.log('Hello World');
```

```js title="My Title"
console.log('Hello World');
```
````

#### Line Numbers

Show line numbers, it also works with Twoslash and other transformers.

````mdx tab="Input"
```ts twoslash lineNumbers
const a = 'Hello World';
//    ^?
console.log(a); // [!code highlight]
```
````

```ts twoslash lineNumbers tab="Output"
const a = 'Hello World';
//    ^?
console.log(a); // [!code highlight]
```

You can set the initial value of line numbers.

````mdx tab="Input"
```js lineNumbers=4
function main() {
  console.log('starts from 4');

  return 0;
}
```
````

```js lineNumbers=4 tab="Output"
function main() {
  console.log('starts from 4');

  return 0;
}
```

#### Shiki Transformers

We support some of the [Shiki Transformers](https://shiki.style/packages/transformers), allowing you to highlight/style specific lines.

````md tab="Input"
```tsx
// highlight a line
<div>Hello World</div> // [\!code highlight]

// highlight a word
// [\!code word:Fumadocs]
<div>Fumadocs</div>

// diff styles
console.log('hewwo'); // [\!code --]
console.log('hello'); // [\!code ++]

// focus
return new ResizeObserver(() => {}) // [\!code focus]
```
````

```tsx tab="Output"
// highlight a line
<div>Hello World</div> // [!code highlight]

// highlight a word
// [!code word:Fumadocs]
<div>Fumadocs</div>

// diff styles:
console.log('hewwo'); // [!code --]
console.log('hello'); // [!code ++]

// focus
return new ResizeObserver(() => {}) // [!code focus]
```

#### Tab Groups

````mdx
```ts tab="Tab 1"
console.log('A');
```

```ts tab="Tab 2"
console.log('B');
```
````

```ts tab="Tab 1"
console.log('A');
```

```ts tab="Tab 2"
console.log('B');
```

While disabled by default, you use MDX in tab values by configuring the remark plugin:

```ts tab="Fumadocs MDX" title="source.config.ts"
import { defineConfig } from 'fumadocs-mdx/config';

export default defineConfig({
  mdxOptions: {
    remarkCodeTabOptions: {
      parseMdx: true, // [!code ++]
    },
  },
});
```

```ts tab="MDX Compiler"
import { compile } from '@mdx-js/mdx';
import { remarkCodeTab } from 'fumadocs-core/mdx-plugins';

await compile('...', {
  remarkPlugins: [
    [
      remarkCodeTab,
      {
        parseMdx: true, // [!code ++]
      },
    ],
  ],
});
```

````mdx
```ts tab="<Building /> Tab 1"
console.log('A');
```

```ts tab="<Rocket /> Tab 2"
console.log('B');
```
````

```ts tab="<Building /> Tab 1"
console.log('A');
```

```ts tab="<Rocket /> Tab 2"
console.log('B');
```

### Include

> This is only available on **Fumadocs MDX**.

Reference another file (can also be a Markdown/MDX document).
Specify the target file path in `<include>` tag (relative to the MDX file itself).

```mdx title="page.mdx"
<include>./another.mdx</include>
```

See [other usages of include](/docs/mdx/include).

### NPM Commands

Useful for generating commands for installing packages with different package managers.

````md tab="Input"
```npm
npm i next -D
```
````

```npm tab="Output"
npm i next -D
```

When using Fumadocs MDX, you can customise it like:

```tsx title="source.config.ts"
import { defineConfig } from 'fumadocs-mdx/config';

export default defineConfig({
  mdxOptions: {
    remarkNpmOptions: {
      // ...
    },
  },
});
```

### Other Components

You can configure & use the [built-in components](/docs/ui/components) in your MDX document, such as Tabs, Accordions and Zoomable Image.

## Additional Features

You may be interested:

<DocsCategory />



================================================
FILE: apps/docs/content/docs/ui/markdown/math.mdx
================================================
---
title: Math
description: Writing math equations in Markdown/MDX.
---

## Getting Started

```package-install
remark-math rehype-katex katex
```

### Add Plugins

Add the required remark/rehype plugins, the code might be vary depending on your content source.

```ts title="source.config.ts" tab="Fumadocs MDX"
import rehypeKatex from 'rehype-katex';
import remarkMath from 'remark-math';
import { defineConfig } from 'fumadocs-mdx/config';

export default defineConfig({
  mdxOptions: {
    remarkPlugins: [remarkMath],
    // Place it at first, it should be executed before the syntax highlighter
    rehypePlugins: (v) => [rehypeKatex, ...v],
  },
});
```

### Add Stylesheet

Add the following to root layout to make it looks great:

```tsx title="layout.tsx"
import 'katex/dist/katex.css';
```

### Done

Type some TeX expression in your documents, like the Pythagoras theorem:

````mdx
Inline: $$c = \pm\sqrt{a^2 + b^2}$$

```math
c = \pm\sqrt{a^2 + b^2}
```
````

Inline: $$c = \pm\sqrt{a^2 + b^2}$$

```math
c = \pm\sqrt{a^2 + b^2}
```

Taylor Expansion (expressing holomorphic function $$f(x)$$ in power series):

```math
\displaystyle {\begin{aligned}T_{f}(z)&=\sum _{k=0}^{\infty }{\frac {(z-c)^{k}}{2\pi i}}\int _{\gamma }{\frac {f(w)}{(w-c)^{k+1}}}\,dw\\&={\frac {1}{2\pi i}}\int _{\gamma }{\frac {f(w)}{w-c}}\sum _{k=0}^{\infty }\left({\frac {z-c}{w-c}}\right)^{k}\,dw\\&={\frac {1}{2\pi i}}\int _{\gamma }{\frac {f(w)}{w-c}}\left({\frac {1}{1-{\frac {z-c}{w-c}}}}\right)\,dw\\&={\frac {1}{2\pi i}}\int _{\gamma }{\frac {f(w)}{w-z}}\,dw=f(z),\end{aligned}}
```

<Callout title="Tip">

    You can actually copy equations on Wikipedia, they will be converted into a KaTeX string when you paste it.

```math
\displaystyle S[{\boldsymbol {q}}]=\int _{a}^{b}L(t,{\boldsymbol {q}}(t),{\dot {\boldsymbol {q}}}(t))\,dt.
```

</Callout>



================================================
FILE: apps/docs/content/docs/ui/markdown/mermaid.mdx
================================================
---
title: Mermaid
description: Rendering diagrams in your docs
---

Fumadocs doesn't have a built-in Mermaid wrapper provided, we recommend using `mermaid` directly.

## Setup

Install the required dependencies, `next-themes` is used with Fumadocs to manage the light/dark mode.

```package-install
mermaid next-themes
```

Create the Mermaid component:

<include cwd meta='title="components/mdx/mermaid.tsx"'>
  ./components/mdx/mermaid.tsx
</include>

> This is originally inspired by [remark-mermaid](https://github.com/the-guild-org/docs/blob/main/packages/remark-mermaid/src/mermaid.tsx).

Add the component as a MDX component:

```tsx title="mdx-components.tsx"
import defaultMdxComponents from 'fumadocs-ui/mdx';
import { Mermaid } from '@/components/mdx/mermaid';
import type { MDXComponents } from 'mdx/types';

export function getMDXComponents(components?: MDXComponents): MDXComponents {
  return {
    ...defaultMdxComponents,
    Mermaid,
    ...components,
  };
}
```

## Usage

Use it in MDX files.

```mdx
<Mermaid
  chart="
graph TD;
subgraph AA [Consumers]
A[Mobile app];
B[Web app];
C[Node.js client];
end
subgraph BB [Services]
E[REST API];
F[GraphQL API];
G[SOAP API];
end
Z[GraphQL API];
A --> Z;
B --> Z;
C --> Z;
Z --> E;
Z --> F;
Z --> G;"
/>
```

<Tabs items={['Diagram', 'User Journey']}>

    <Tab>
    <Mermaid
        chart="

graph TD;
subgraph AA [Consumers]
A[Mobile app];
B[Web app];
C[Node.js client];
end
subgraph BB [Services]
E[REST API];
F[GraphQL API];
G[SOAP API];
end
Z[GraphQL API];
A --> Z;
B --> Z;
C --> Z;
Z --> E;
Z --> F;
Z --> G;"
/>

</Tab>

    <Tab>
        <Mermaid
            chart="

journey
title My working day
section Go to work
Make tea: 5: Me
Go upstairs: 3: Me
Do work: 1: Me, Cat
section Go home
Go downstairs: 5: Me
Sit down: 5: Me
"
/>

    </Tab>

</Tabs>



================================================
FILE: apps/docs/content/docs/ui/markdown/twoslash.mdx
================================================
---
title: Twoslash
description: Use Typescript Twoslash in your docs
---

## Usage

Thanks to the Twoslash integration of [Shiki](https://github.com/shikijs/shiki), the default code syntax highlighter, it is as simple as adding a transformer.

```package-install
fumadocs-twoslash twoslash
```

Update your `serverExternalPackages` in Next.js config:

```js
import { createMDX } from 'fumadocs-mdx/next';

const config = {
  reactStrictMode: true,
  serverExternalPackages: ['typescript', 'twoslash'],
};

const withMDX = createMDX();

export default withMDX(config);
```

Add to your Shiki transformers.

```ts twoslash title="source.config.ts (Fumadocs MDX)"
import { defineConfig } from 'fumadocs-mdx/config';
import { transformerTwoslash } from 'fumadocs-twoslash';
import { rehypeCodeDefaultOptions } from 'fumadocs-core/mdx-plugins';

export default defineConfig({
  mdxOptions: {
    rehypeCodeOptions: {
      themes: {
        light: 'github-light',
        dark: 'github-dark',
      },
      transformers: [
        ...(rehypeCodeDefaultOptions.transformers ?? []),
        transformerTwoslash(),
      ],
    },
  },
});
```

Add styles, Tailwind CSS v4 is required.

```css title="Tailwind CSS"
@import 'fumadocs-twoslash/twoslash.css';
```

Add MDX components.

```tsx title="mdx-components.tsx"
import * as Twoslash from 'fumadocs-twoslash/ui';
import defaultComponents from 'fumadocs-ui/mdx';
import type { MDXComponents } from 'mdx/types';

export function getMDXComponents(components?: MDXComponents): MDXComponents {
  return {
    ...defaultComponents,
    ...Twoslash,
    ...components,
  };
}
```

Now you can add `twoslash` meta string to codeblocks.

````md
```ts twoslash
console.log('Hello World');
```
````

### Example

Learn more about [Twoslash notations](https://twoslash.netlify.app/refs/notations).

```ts twoslash title="Test" lineNumbers
type Player = {
  /**
   * The player name
   * @default 'user'
   */
  name: string;
};

// ---cut---
// @noErrors
console.g;
//       ^|

const player: Player = { name: 'Hello World' };
//    ^?
```

```ts twoslash
const a = '123';

console.log(a);
//      ^^^
```

```ts twoslash
import { generateFiles } from 'fumadocs-openapi';

void generateFiles({
  input: ['./museum.yaml'],
  output: './content/docs/ui',
});
```

```ts twoslash
// @errors: 2588
const a = '123';

a = 132;
```

## Cache

You can enable filesystem cache with `typesCache` option:

```ts twoslash title="source.config.ts"
import { transformerTwoslash } from 'fumadocs-twoslash';
import { createFileSystemTypesCache } from 'fumadocs-twoslash/cache-fs';

transformerTwoslash({
  typesCache: createFileSystemTypesCache(),
});
```



================================================
FILE: apps/docs/content/docs/ui/mdx/codeblock.mdx
================================================
---
title: Code Block
description: Displaying Shiki highlighted code blocks
---

<Wrapper>
<div className="bg-fd-background rounded-lg prose-no-margin">

```js title="config.js"
import createMDX from 'fumadocs-mdx/config';

const withMDX = createMDX();

// [!code word:config]
/** @type {import('next').NextConfig} */
const config = {
  // [!code highlight]
  reactStrictMode: true, // [!code highlight]
}; // [!code highlight]

export default withMDX(config);
```

</div>
</Wrapper>

This is a MDX component to be used with [Rehype Code](/docs/headless/mdx/rehype-code) to display highlighted codeblocks.

Supported features:

- Copy button
- Custom titles and icons

> If you're looking for an equivalent with runtime syntax highlighting, see [Dynamic Code Block](/docs/ui/components/dynamic-codeblock).

## Usage

Wrap the pre element in `<CodeBlock />`, which acts as the wrapper of code block.

```tsx title="mdx-components.tsx"
import defaultComponents from 'fumadocs-ui/mdx';
import type { MDXComponents } from 'mdx/types';
import { CodeBlock, Pre } from 'fumadocs-ui/components/codeblock';

export function getMDXComponents(components?: MDXComponents): MDXComponents {
  return {
    ...defaultComponents,
    // HTML `ref` attribute conflicts with `forwardRef`
    pre: ({ ref: _ref, ...props }) => (
      <CodeBlock {...props}>
        <Pre>{props.children}</Pre> {/* [!code highlight] */}
      </CodeBlock>
    ),
    ...components,
  };
}
```

See [Markdown](/docs/ui/markdown#codeblock) for usages.

### Keep Background

Use the background color generated by Shiki.

```tsx
import { Pre, CodeBlock } from 'fumadocs-ui/components/codeblock';

<CodeBlock keepBackground {...props}>
  <Pre>{props.children}</Pre>
</CodeBlock>;
```

### Icons

Specify a custom icon by passing an `icon` prop to `CodeBlock` component.

By default, the icon will be injected by the custom Shiki transformer.

```js title="config.js"
console.log('js');
```



================================================
FILE: apps/docs/content/docs/ui/mdx/index.mdx
================================================
---
title: MDX
description: Default MDX Components
---

## Usage

The default MDX components include Cards, Callouts, Code Blocks and Headings.

```ts
import defaultMdxComponents from 'fumadocs-ui/mdx';
```

### Relative Link

To support links with relative file path in `href`, override the default `a` component with:

```tsx title="app/docs/[[...slug]]/page.tsx"
import { createRelativeLink } from 'fumadocs-ui/mdx';
import { source } from '@/lib/source';
import { getMDXComponents } from '@/mdx-components';

const page = source.getPage(['...']);

return (
  <MdxContent
    components={getMDXComponents({
      // override the `a` tag
      a: createRelativeLink(source, page),
    })}
  />
);
```

```mdx
[My Link](./file.mdx)
```

[Example: `../(integrations)/open-graph.mdx`](<../(integrations)/open-graph.mdx>)

<Callout type="warn">Server Component only.</Callout>



================================================
FILE: apps/docs/content/docs/ui/navigation/index.mdx
================================================
---
title: Navigation
description: Configure navigation in your Fumadocs app.
index: true
---



================================================
FILE: apps/docs/content/docs/ui/navigation/links.mdx
================================================
---
title: Layout Links
description: Customise the shared navigation links on all layouts.
---

## Overview

Fumadocs allows adding additional links to your layouts with a `links` prop, like linking to your "showcase" page.

<div className="not-prose grid gap-2 *:border max-sm:*:last:hidden sm:grid-cols-[2fr_1fr]">

<>![Nav](/docs/nav-layout-home.png)</>

<>![Nav](/docs/nav-layout-docs.png)</>

</div>

```tsx tab="Shared Options" title="app/layout.config.tsx"
import type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';

export const baseOptions: BaseLayoutProps = {
  links: [], // [!code highlight]
  // other options
};
```

```tsx tab="Docs Layout" title="app/docs/layout.tsx"
import { DocsLayout } from 'fumadocs-ui/layouts/docs';
import { baseOptions } from '@/app/layout.config';
import { source } from '@/lib/source';
import type { ReactNode } from 'react';

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <DocsLayout
      {...baseOptions}
      tree={source.pageTree}
      links={[]} // [!code highlight]
    >
      {children}
    </DocsLayout>
  );
}
```

```tsx tab="Home Layout" title="app/(home)/layout.tsx"
import { HomeLayout } from 'fumadocs-ui/layouts/home';
import { baseOptions } from '@/app/layout.config';
import type { ReactNode } from 'react';

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <HomeLayout
      {...baseOptions}
      links={[]} // [!code highlight]
    >
      {children}
    </HomeLayout>
  );
}
```

You can see all supported items below:

### Link Item

A link to navigate to a URL/href, can be external.

```tsx title="app/layout.config.tsx"
import { BookIcon } from 'lucide-react';
import type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';

export const baseOptions: BaseLayoutProps = {
  links: [
    {
      icon: <BookIcon />,
      text: 'Blog',
      url: '/blog',
      // secondary items will be displayed differently on navbar
      secondary: false,
    },
  ],
};
```

#### Active Mode

The conditions to be marked as active.

| Mode         | Description                                                 |
| ------------ | ----------------------------------------------------------- |
| `url`        | When browsing the specified url                             |
| `nested-url` | When browsing the url and its child pages like `/blog/post` |
| `none`       | Never be active                                             |

```tsx title="app/layout.config.tsx"
import type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';

export const baseOptions: BaseLayoutProps = {
  links: [
    {
      text: 'Blog',
      url: '/blog',
      active: 'nested-url',
    },
  ],
};
```

### Icon Item

Same as link item, but is shown as an icon button.
Icon items are secondary by default.

```tsx title="app/layout.config.tsx"
import { BookIcon } from 'lucide-react';
import type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';

export const baseOptions: BaseLayoutProps = {
  links: [
    {
      type: 'icon',
      label: 'Visit Blog', // `aria-label`
      icon: <BookIcon />,
      text: 'Blog',
      url: '/blog',
    },
  ],
};
```

### Custom Item

Display a custom component.

```tsx title="app/layout.config.tsx"
import type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';

export const baseOptions: BaseLayoutProps = {
  links: [
    {
      type: 'custom',
      children: <Button variant="primary">Login</Button>,
      secondary: true,
    },
  ],
};
```

### GitHub URL

There's also a shortcut for adding GitHub repository link item.

```tsx twoslash title="app/layout.config.tsx"
import type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';

export const baseOptions: BaseLayoutProps = {
  githubUrl: 'https://github.com',
};
```

### Normal Menu

A menu containing multiple link items.

```tsx title="app/layout.config.tsx"
import type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';

export const baseOptions: BaseLayoutProps = {
  links: [
    {
      type: 'menu',
      text: 'Guide',
      items: [
        {
          text: 'Getting Started',
          description: 'Learn to use Fumadocs',
          url: '/docs',
        },
      ],
    },
  ],
};
```

### Navigation Menu

In Home Layout, you can add navigation menu (fully animated) to the navbar.

![Nav](/docs/nav-layout-menu.png)

```tsx title="app/(home)/layout.tsx"
import { baseOptions } from '@/app/layout.config';
import type { ReactNode } from 'react';
import { HomeLayout } from 'fumadocs-ui/layouts/home';
import {
  NavbarMenu,
  NavbarMenuContent,
  NavbarMenuLink,
  NavbarMenuTrigger,
} from 'fumadocs-ui/layouts/home/navbar';

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <HomeLayout
      {...baseOptions}
      links={[
        {
          type: 'custom',
          // only displayed on navbar, not mobile menu
          on: 'nav',
          children: (
            <NavbarMenu>
              <NavbarMenuTrigger>Documentation</NavbarMenuTrigger>
              <NavbarMenuContent>
                <NavbarMenuLink href="/docs">Hello World</NavbarMenuLink>
              </NavbarMenuContent>
            </NavbarMenu>
          ),
        },
        // other items
      ]}
    >
      {children}
    </HomeLayout>
  );
}
```



================================================
FILE: apps/docs/content/docs/ui/navigation/sidebar.mdx
================================================
---
title: Sidebar Links
description: Customise sidebar navigation links on Docs Layout.
---

## Overview

<div className='flex justify-center items-center *:max-w-[200px] bg-gradient-to-br from-fd-primary/10 rounded-xl border'>

    ![Sidebar](/docs/sidebar.png)

</div>

Sidebar items are rendered from the page tree you passed to `<DocsLayout />`.

For `source.pageTree`, it generates the tree from your file structure, you can see [Routing](/docs/ui/page-conventions) for available patterns.

```tsx title="layout.tsx"
import { DocsLayout } from 'fumadocs-ui/layouts/docs';
import { source } from '@/lib/source';
import type { ReactNode } from 'react';

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <DocsLayout
      tree={source.pageTree}
      // other props
    >
      {children}
    </DocsLayout>
  );
}
```

You may hardcode it too:

```tsx title="layout.tsx"
import { DocsLayout } from 'fumadocs-ui/layouts/docs';
import type { ReactNode } from 'react';

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <DocsLayout
      tree={{
        name: 'docs',
        children: [],
      }}
      // other props
    >
      {children}
    </DocsLayout>
  );
}
```

### Sidebar Tabs (Dropdown)

Sidebar Tabs are folders with tab-like behaviours, only the content of opened tab will be visible.

<div className='flex justify-center items-center *:max-w-[360px] bg-gradient-to-br from-fd-primary/10 rounded-xl border'>

    ![Sidebar Tabs](/docs/sidebar-tabs.png)

</div>

By default, the tab trigger will be displayed as a **Dropdown** component (hidden unless one of its items is active).

You can add items by marking folders as [Root Folders](/docs/ui/page-conventions#root-folder), create a `meta.json` file in the folder:

```json title="content/docs/my-folder/meta.json"
{
  "title": "Name of Folder",
  "description": "The description of root folder (optional)",
  "root": true
}
```

Or specify them explicitly:

```tsx title="/app/docs/layout.tsx"
import { DocsLayout } from 'fumadocs-ui/layouts/docs';

<DocsLayout
  sidebar={{
    tabs: [
      {
        title: 'Components',
        description: 'Hello World!',
        // active for `/docs/components` and sub routes like `/docs/components/button`
        url: '/docs/components',

        // optionally, you can specify a set of urls which activates the item
        // urls: new Set(['/docs/test', '/docs/components']),
      },
    ],
  }}
/>;
```

Set it to `false` to disable:

```tsx
import { DocsLayout } from 'fumadocs-ui/layouts/docs';

<DocsLayout sidebar={{ tabs: false }} />;
```

<Callout title="Want further customisations?">

You can specify a `banner` to the [Docs Layout](/docs/ui/layouts/docs) component.

```tsx
import { DocsLayout, type DocsLayoutProps } from 'fumadocs-ui/layouts/docs';
import type { ReactNode } from 'react';
import { baseOptions } from '@/app/layout.config';
import { source } from '@/lib/source';

const docsOptions: DocsLayoutProps = {
  ...baseOptions,
  tree: source.pageTree,
  sidebar: {
    banner: <div>Hello World</div>,
  },
};

export default function Layout({ children }: { children: ReactNode }) {
  return <DocsLayout {...docsOptions}>{children}</DocsLayout>;
}
```

</Callout>

#### Decoration

Change the icon/styles of tabs.

```tsx
import { DocsLayout } from 'fumadocs-ui/layouts/docs';

<DocsLayout
  sidebar={{
    tabs: {
      transform: (option, node) => ({
        ...option,
        icon: <MyIcon />,
      }),
    },
  }}
/>;
```



================================================
FILE: apps/docs/content/docs/ui/search/algolia.mdx
================================================
---
title: Algolia
description: Using Algolia with Fumadocs UI.
---

## Overview

For the setup guide, see [Integrate Algolia Search](/docs/headless/search/algolia).

While generally we recommend building your own search with their client-side
SDK, you can also plug the built-in dialog interface.

## Setup

Create a search dialog, replace `appId`, `apiKey` and `indexName` with your desired values.

<include meta='title="components/search.tsx"'>./algolia.tsx</include>

<Callout title="Note" className='mt-4'>

    `useDocsSearch()` doesn't use instant search (their official
    Javascript client).

</Callout>

<include>.shared.mdx</include>

### Tag Filter

Optionally, you can add UI for filtering results by tags. Configure [Tag Filter](/docs/headless/search/algolia#tag-filter) on search server and add the following:

<include>.tag-filter.mdx</include>



================================================
FILE: apps/docs/content/docs/ui/search/algolia.tsx
================================================
'use client';
import { liteClient } from 'algoliasearch/lite';
import {
  SearchDialog,
  SearchDialogClose,
  SearchDialogContent,
  SearchDialogFooter,
  SearchDialogHeader,
  SearchDialogIcon,
  SearchDialogInput,
  SearchDialogList,
  SearchDialogOverlay,
  type SharedProps,
} from 'fumadocs-ui/components/dialog/search';
import { useDocsSearch } from 'fumadocs-core/search/client';
import { useI18n } from 'fumadocs-ui/contexts/i18n';

const appId = 'replace me';
const apiKey = 'replace me';
const client = liteClient(appId, apiKey);

export default function CustomSearchDialog(props: SharedProps) {
  const { locale } = useI18n(); // (optional) for i18n
  const { search, setSearch, query } = useDocsSearch({
    type: 'algolia',
    client,
    indexName: 'document',
    locale,
  });

  return (
    <SearchDialog
      search={search}
      onSearchChange={setSearch}
      isLoading={query.isLoading}
      {...props}
    >
      <SearchDialogOverlay />
      <SearchDialogContent>
        <SearchDialogHeader>
          <SearchDialogIcon />
          <SearchDialogInput />
          <SearchDialogClose />
        </SearchDialogHeader>
        <SearchDialogList items={query.data !== 'empty' ? query.data : null} />
        <SearchDialogFooter>
          <a
            href="https://algolia.com"
            rel="noreferrer noopener"
            className="ms-auto text-xs text-fd-muted-foreground"
          >
            Search powered by Algolia
          </a>
        </SearchDialogFooter>
      </SearchDialogContent>
    </SearchDialog>
  );
}



================================================
FILE: apps/docs/content/docs/ui/search/fetch.tsx
================================================
'use client';
import { useDocsSearch } from 'fumadocs-core/search/client';
import {
  SearchDialog,
  SearchDialogClose,
  SearchDialogContent,
  SearchDialogHeader,
  SearchDialogIcon,
  SearchDialogInput,
  SearchDialogList,
  SearchDialogOverlay,
  type SharedProps,
} from 'fumadocs-ui/components/dialog/search';
import { useI18n } from 'fumadocs-ui/contexts/i18n';

export default function DefaultSearchDialog(props: SharedProps) {
  const { locale } = useI18n(); // (optional) for i18n
  const { search, setSearch, query } = useDocsSearch({
    type: 'fetch',
    locale,
  });

  return (
    <SearchDialog
      search={search}
      onSearchChange={setSearch}
      isLoading={query.isLoading}
      {...props}
    >
      <SearchDialogOverlay />
      <SearchDialogContent>
        <SearchDialogHeader>
          <SearchDialogIcon />
          <SearchDialogInput />
          <SearchDialogClose />
        </SearchDialogHeader>
        <SearchDialogList items={query.data !== 'empty' ? query.data : null} />
      </SearchDialogContent>
    </SearchDialog>
  );
}



================================================
FILE: apps/docs/content/docs/ui/search/index.mdx
================================================
---
title: Search
description: Implement document search in your docs
---

## Search UI

You can customise some configurations from root provider.

For example, to disable search UI:

```tsx title="app/layout.tsx"
import { RootProvider } from 'fumadocs-ui/provider';
import type { ReactNode } from 'react';

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <html>
      <body>
        <RootProvider
          search={{
            enabled: false, // [!code ++]
          }}
        >
          {children}
        </RootProvider>
      </body>
    </html>
  );
}
```

For further customisations, you can see [Search Client](#search-client).

### Hot Keys

Customise the hot keys to trigger search dialog, by default it's <kbd>⌘</kbd> <kbd>K</kbd> or <kbd>Ctrl</kbd> <kbd>K</kbd>.

```tsx
import { RootProvider } from 'fumadocs-ui/provider';

<RootProvider
  search={{
    hotKey: [
      {
        display: 'K',
        key: 'k', // key code, or a function determining whether the key is pressed
      },
    ],
  }}
>
  {children}
</RootProvider>;
```

## Search Client

You can choose & configure the search client according to your search engine, it defaults to Orama search.

<DocsCategory />

### Community Integrations

A list of integrations maintained by community.

- [Trieve Search](/docs/headless/search/trieve)



================================================
FILE: apps/docs/content/docs/ui/search/meta.json
================================================
{
  "pages": ["orama", "..."]
}



================================================
FILE: apps/docs/content/docs/ui/search/orama-cloud.mdx
================================================
---
title: Orama Cloud
description: Using Orama Cloud with Fumadocs UI.
---

## Setup

For the setup guide, see [Integrate Orama Cloud](/docs/headless/search/orama-cloud).

Create a search dialog, replace `endpoint` and `api_key` with your desired values.

<include meta='title="components/search.tsx"'>orama-cloud.tsx</include>

<include>.shared.mdx</include>



================================================
FILE: apps/docs/content/docs/ui/search/orama-cloud.tsx
================================================
'use client';

import {
  SearchDialog,
  SearchDialogClose,
  SearchDialogContent,
  SearchDialogFooter,
  SearchDialogHeader,
  SearchDialogIcon,
  SearchDialogInput,
  SearchDialogList,
  SearchDialogOverlay,
  type SharedProps,
} from 'fumadocs-ui/components/dialog/search';
import { useDocsSearch } from 'fumadocs-core/search/client';
import { OramaClient } from '@oramacloud/client';
import { useI18n } from 'fumadocs-ui/contexts/i18n';

const client = new OramaClient({
  endpoint: 'Endpoint URL',
  api_key: 'API Key',
});

export default function CustomSearchDialog(props: SharedProps) {
  const { locale } = useI18n(); // (optional) for i18n
  const { search, setSearch, query } = useDocsSearch({
    type: 'orama-cloud',
    client,
    locale,
  });

  return (
    <SearchDialog
      search={search}
      onSearchChange={setSearch}
      isLoading={query.isLoading}
      {...props}
    >
      <SearchDialogOverlay />
      <SearchDialogContent>
        <SearchDialogHeader>
          <SearchDialogIcon />
          <SearchDialogInput />
          <SearchDialogClose />
        </SearchDialogHeader>
        <SearchDialogList items={query.data !== 'empty' ? query.data : null} />
        <SearchDialogFooter>
          <a
            href="https://orama.com"
            rel="noreferrer noopener"
            className="ms-auto text-xs text-fd-muted-foreground"
          >
            Search powered by Orama
          </a>
        </SearchDialogFooter>
      </SearchDialogContent>
    </SearchDialog>
  );
}



================================================
FILE: apps/docs/content/docs/ui/search/orama.mdx
================================================
---
title: Orama (default)
description: The default search engine powered by Orama.
---

## Overview

Fumadocs configures [Orama search engine](/docs/headless/search/orama) out-of-the-box.

It works through a API endpoint (route handler), or a statically cached file for Next.js apps using Static Export.

## Setup

Create a search dialog.

<Tabs items={['fetch (default)', 'static']}>

    <Tab>

The UI has been configured by default, you can also re-create it for further customisations:

<include meta='title="components/search.tsx"'>fetch.tsx</include>

    </Tab>

    <Tab id='static'>

For Static Export, you can configure [static mode](/docs/headless/search/orama#static-export) on search server, and use the `static` client:

```package-install
@orama/orama
```

<include meta='title="components/search.tsx"'>./static.tsx</include>

    </Tab>

</Tabs>

<include>.shared.mdx</include>

### Tag Filter

Optionally, you can add UI for filtering results by tags. Configure [Tag Filter](/docs/headless/search/orama#tag-filter) on search server and add the following:

<include>.tag-filter.mdx</include>



================================================
FILE: apps/docs/content/docs/ui/search/static.tsx
================================================
'use client';
import {
  SearchDialog,
  SearchDialogClose,
  SearchDialogContent,
  SearchDialogHeader,
  SearchDialogIcon,
  SearchDialogInput,
  SearchDialogList,
  SearchDialogOverlay,
  type SharedProps,
} from 'fumadocs-ui/components/dialog/search';
import { useDocsSearch } from 'fumadocs-core/search/client';
import { create } from '@orama/orama';
import { useI18n } from 'fumadocs-ui/contexts/i18n';

function initOrama() {
  return create({
    schema: { _: 'string' },
    // https://docs.orama.com/open-source/supported-languages
    language: 'english',
  });
}

export default function DefaultSearchDialog(props: SharedProps) {
  const { locale } = useI18n(); // (optional) for i18n
  const { search, setSearch, query } = useDocsSearch({
    type: 'static',
    initOrama,
    locale,
  });

  return (
    <SearchDialog
      search={search}
      onSearchChange={setSearch}
      isLoading={query.isLoading}
      {...props}
    >
      <SearchDialogOverlay />
      <SearchDialogContent>
        <SearchDialogHeader>
          <SearchDialogIcon />
          <SearchDialogInput />
          <SearchDialogClose />
        </SearchDialogHeader>
        <SearchDialogList items={query.data !== 'empty' ? query.data : null} />
      </SearchDialogContent>
    </SearchDialog>
  );
}



================================================
FILE: apps/docs/content/docs/ui/search/.shared.mdx
================================================
### Replace Search Dialog

To use your own search dialog, make a client-side `<RootProvider />` wrapper, and replace the original root provider with it.

```tsx tab="provider.tsx"
'use client';
import { RootProvider } from 'fumadocs-ui/provider';
// your custom dialog [!code highlight]
import SearchDialog from '@/components/search';
import type { ReactNode } from 'react';

export function Provider({ children }: { children: ReactNode }) {
  return (
    <RootProvider
      search={{
        SearchDialog,
      }}
    >
      {children}
    </RootProvider>
  );
}
```

```tsx tab="app/layout.tsx"
import { Provider } from './provider';
import type { ReactNode } from 'react';

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <html lang="en">
      <body>
        {/* [!code ++] */}
        <Provider>{children}</Provider>
      </body>
    </html>
  );
}
```



================================================
FILE: apps/docs/content/docs/ui/search/.tag-filter.mdx
================================================
```tsx
'use client';

import {
  SearchDialog,
  SearchDialogContent,
  SearchDialogFooter,
  SearchDialogOverlay,
  type SharedProps,
  TagsList,
  TagsListItem,
} from 'fumadocs-ui/components/dialog/search';
import { useState } from 'react';
import { useDocsSearch } from 'fumadocs-core/search/client';

export default function CustomSearchDialog(props: SharedProps) {
  // [!code ++]
  const [tag, setTag] = useState<string | undefined>();
  const { search, setSearch, query } = useDocsSearch({
    tag, // [!code ++]
    // other options depending on your search engine
  });

  return (
    <SearchDialog>
      <SearchDialogOverlay />
      <SearchDialogContent>
        ...
        <SearchDialogFooter className="flex flex-row">
          {/* [!code ++:3] */}
          <TagsList tag={tag} onTagChange={setTag}>
            <TagsListItem value="my-value">My Value</TagsListItem>
          </TagsList>
        </SearchDialogFooter>
      </SearchDialogContent>
    </SearchDialog>
  );
}
```



================================================
FILE: apps/docs/content/shared/page-conventions.i18n.mdx
================================================
You can add Markdown/meta files for different languages by attending `.{locale}` to your file name, like `page.cn.md` and `meta.cn.json`.

Make sure to create a file for the default locale first, the locale code is optional (e.g. both `get-started.mdx` and `get-started.en.mdx` are accepted).

<Files>
  <Folder name="content/docs" defaultOpen>
    <File name="meta.json" />
    <File name="meta.cn.json" />
    <File name="get-started.mdx" />
    <File name="get-started.cn.mdx" />
  </Folder>
</Files>



================================================
FILE: apps/docs/lib/cn.ts
================================================
export { twMerge as cn } from 'tailwind-merge';



================================================
FILE: apps/docs/lib/get-contributors.ts
================================================
export interface Contributor {
  avatar_url: string;
  login: string;
  contributions: number;
}

export async function fetchContributors(
  repoOwner: string,
  repoName: string,
): Promise<Contributor[]> {
  const headers = new Headers();
  if (process.env.GITHUB_TOKEN)
    headers.set('Authorization', `Bearer ${process.env.GITHUB_TOKEN}`);

  const response = await fetch(
    `https://api.github.com/repos/${repoOwner}/${repoName}/contributors?per_page=50`,
    {
      headers,
      next: { revalidate: 1000 * 1000 },
    },
  );

  if (!response.ok) {
    throw new Error(`Failed to fetch contributors: ${response.statusText}`);
  }

  const contributors = (await response.json()) as Contributor[];
  return contributors
    .filter((contributor) => !contributor.login.endsWith('[bot]'))
    .sort((a, b) => b.contributions - a.contributions);
}



================================================
FILE: apps/docs/lib/get-llm-text.ts
================================================
import { remark } from 'remark';
import remarkGfm from 'remark-gfm';
import { remarkInstall } from 'fumadocs-docgen';
import remarkMdx from 'remark-mdx';
import { remarkAutoTypeTable } from 'fumadocs-typescript';
import { remarkInclude } from 'fumadocs-mdx/config';
import { type Page } from '@/lib/source';

const processor = remark()
  .use(remarkMdx)
  .use(remarkInclude)
  .use(remarkGfm)
  .use(remarkAutoTypeTable)
  .use(remarkInstall);

export async function getLLMText(page: Page) {
  const category =
    {
      ui: 'Fumadocs Framework',
      headless: 'Fumadocs Core (core library of framework)',
      mdx: 'Fumadocs MDX (the built-in content source)',
      cli: 'Fumadocs CLI (the CLI tool for automating Fumadocs apps)',
    }[page.slugs[0]] ?? page.slugs[0];

  const processed = await processor.process({
    path: page.data._file.absolutePath,
    value: page.data.content,
  });

  return `# ${category}: ${page.data.title}
URL: ${page.url}
Source: https://raw.githubusercontent.com/fuma-nama/fumadocs/refs/heads/main/apps/docs/content/docs/${page.path}

${page.data.description}
        
${processed.value}`;
}



================================================
FILE: apps/docs/lib/get-sponsors.ts
================================================
import { Octokit } from 'octokit';

export interface Sponsor extends SponsorEntity {
  tier: Tier;
}

interface SponsorEntity {
  login: string;
  avatarUrl: string;
  websiteUrl: string;
  name: string;
  __typename: string;
}

interface Tier {
  monthlyPriceInDollars: number;
  name?: string;
}

export const revalidate = 60 * 30;

export async function getSponsors(owner: string): Promise<Sponsor[]> {
  if (!process.env.GITHUB_TOKEN) {
    throw new Error('GITHUB_TOKEN environment variable is required');
  }

  const octokit = new Octokit({
    auth: process.env.GITHUB_TOKEN,
  });

  try {
    const response = await octokit.graphql<{
      user: {
        sponsorshipsAsMaintainer: {
          nodes: Array<{
            sponsorEntity: SponsorEntity;
            tier: Tier;
          }>;
        };
      };
    }>(`
      query {
        user(login: ${JSON.stringify(owner)}) {
          sponsorshipsAsMaintainer(first: 100) {
            nodes {
              sponsorEntity {
                __typename
                ... on User {
                    login
                    avatarUrl
                    name
                    websiteUrl
                }
                ... on Organization {
                    login
                    avatarUrl
                    websiteUrl
                    name
                }
              }
              tier {
                monthlyPriceInDollars
                name
              }
            }
          }
        }
      }
    `);

    const sponsors = response.user.sponsorshipsAsMaintainer.nodes.map(
      (node) => ({
        ...node.sponsorEntity,
        name: node.sponsorEntity.name || node.sponsorEntity.login,
        tier: node.tier,
      }),
    );

    // Sort sponsors by tier price in descending order
    return sponsors.sort(
      (a, b) => b.tier.monthlyPriceInDollars - a.tier.monthlyPriceInDollars,
    );
  } catch (error) {
    console.error('Error fetching sponsors:', error);
    throw error;
  }
}



================================================
FILE: apps/docs/lib/github.ts
================================================
import { App, Octokit } from 'octokit';
import type { ActionResponse, Feedback } from '@/components/rate';

export const repo = 'fumadocs';
export const owner = 'fuma-nama';
export const DocsCategory = 'Docs Feedback';

let instance: Octokit | undefined;

async function getOctokit(): Promise<Octokit> {
  if (instance) return instance;
  const appId = process.env.GITHUB_APP_ID;
  const privateKey = process.env.GITHUB_APP_PRIVATE_KEY;

  if (!appId || !privateKey) {
    throw new Error(
      'No GitHub keys provided for Github app, docs feedback feature will not work.',
    );
  }

  const app = new App({
    appId,
    privateKey,
  });

  const { data } = await app.octokit.request(
    'GET /repos/{owner}/{repo}/installation',
    {
      owner,
      repo,
      headers: {
        'X-GitHub-Api-Version': '2022-11-28',
      },
    },
  );

  instance = await app.getInstallationOctokit(data.id);
  return instance;
}

interface RepositoryInfo {
  id: string;
  discussionCategories: {
    nodes: {
      id: string;
      name: string;
    }[];
  };
}

let cachedDestination: RepositoryInfo | undefined;
async function getFeedbackDestination() {
  if (cachedDestination) return cachedDestination;
  const octokit = await getOctokit();

  const {
    repository,
  }: {
    repository: RepositoryInfo;
  } = await octokit.graphql(`
  query {
    repository(owner: "${owner}", name: "${repo}") {
      id
      discussionCategories(first: 25) {
        nodes { id name }
      }
    }
  }
`);

  return (cachedDestination = repository);
}

export async function onRateAction(
  url: string,
  feedback: Feedback,
): Promise<ActionResponse> {
  'use server';
  const octokit = await getOctokit();
  const destination = await getFeedbackDestination();
  if (!octokit || !destination)
    throw new Error('GitHub comment integration is not configured.');

  const category = destination.discussionCategories.nodes.find(
    (category) => category.name === DocsCategory,
  );

  if (!category)
    throw new Error(
      `Please create a "${DocsCategory}" category in GitHub Discussion`,
    );

  const title = `Feedback for ${url}`;
  const body = `[${feedback.opinion}] ${feedback.message}\n\n> Forwarded from user feedback.`;

  let {
    search: {
      nodes: [discussion],
    },
  }: {
    search: {
      nodes: { id: string; url: string }[];
    };
  } = await octokit.graphql(`
          query {
            search(type: DISCUSSION, query: ${JSON.stringify(`${title} in:title repo:${owner}/${repo} author:@me`)}, first: 1) {
              nodes {
                ... on Discussion { id, url }
              }
            }
          }`);

  if (discussion) {
    await octokit.graphql(`
            mutation {
              addDiscussionComment(input: { body: ${JSON.stringify(body)}, discussionId: "${discussion.id}" }) {
                comment { id }
              }
            }`);
  } else {
    const result: {
      discussion: { id: string; url: string };
    } = await octokit.graphql(`
            mutation {
              createDiscussion(input: { repositoryId: "${destination.id}", categoryId: "${category!.id}", body: ${JSON.stringify(body)}, title: ${JSON.stringify(title)} }) {
                discussion { id, url }
              }
            }`);

    discussion = result.discussion;
  }

  return {
    githubUrl: discussion.url,
  };
}



================================================
FILE: apps/docs/lib/metadata.ts
================================================
import type { Metadata } from 'next/types';

export function createMetadata(override: Metadata): Metadata {
  return {
    ...override,
    openGraph: {
      title: override.title ?? undefined,
      description: override.description ?? undefined,
      url: 'https://fumadocs.dev',
      images: '/banner.png',
      siteName: 'Fumadocs',
      ...override.openGraph,
    },
    twitter: {
      card: 'summary_large_image',
      creator: '@money_is_shark',
      title: override.title ?? undefined,
      description: override.description ?? undefined,
      images: '/banner.png',
      ...override.twitter,
    },
    alternates: {
      types: {
        'application/rss+xml': [
          {
            title: 'Fumadocs Blog',
            url: 'https://fumadocs.dev/blog/rss.xml',
          },
        ],
      },
      ...override.alternates,
    },
  };
}

export const baseUrl =
  process.env.NODE_ENV === 'development' || !process.env.VERCEL_URL
    ? new URL('http://localhost:3000')
    : new URL(`https://${process.env.VERCEL_URL}`);



================================================
FILE: apps/docs/lib/source.ts
================================================
import { createMDXSource } from 'fumadocs-mdx';
import type { InferMetaType, InferPageType } from 'fumadocs-core/source';
import { loader } from 'fumadocs-core/source';
import { icons } from 'lucide-react';
import { attachFile, createOpenAPI } from 'fumadocs-openapi/server';
import { createElement } from 'react';
import { blog as blogPosts, docs } from '@/.source';

export const source = loader({
  baseUrl: '/docs',
  icon(icon) {
    if (icon && icon in icons)
      return createElement(icons[icon as keyof typeof icons]);
  },
  source: docs.toFumadocsSource(),
  pageTree: {
    attachFile,
  },
});

export const blog = loader({
  baseUrl: '/blog',
  source: createMDXSource(blogPosts),
});

export const openapi = createOpenAPI({
  proxyUrl: '/api/proxy',
  shikiOptions: {
    themes: {
      dark: 'vesper',
      light: 'vitesse-light',
    },
  },
});

export type Page = InferPageType<typeof source>;
export type Meta = InferMetaType<typeof source>;



================================================
FILE: apps/docs/lib/chat/inkeep-qa-schema.ts
================================================
import { z } from 'zod';

const InkeepRecordTypes = z.enum([
  'documentation',
  'site',
  'discourse_post',
  'github_issue',
  'github_discussion',
  'stackoverflow_question',
  'discord_forum_post',
  'discord_message',
  'custom_question_answer',
]);

const LinkType = z.union([
  InkeepRecordTypes,
  z.string(), // catch all
]);

const LinkSchema = z
  .object({
    label: z.string().nullish(), // the value of the footnote, e.g. `1`
    url: z.string(),
    title: z.string().nullish(),
    type: LinkType.nullish(),
    breadcrumbs: z.array(z.string()).nullish(),
  })
  .passthrough();

const LinksSchema = z.array(LinkSchema).nullish();

export const ProvideLinksToolSchema = z.object({
  links: LinksSchema,
});

const KnownAnswerConfidence = z.enum([
  'very_confident',
  'somewhat_confident',
  'not_confident',
  'no_sources',
  'other',
]);

const AnswerConfidence = z.union([KnownAnswerConfidence, z.string()]); // evolvable

const AIAnnotationsToolSchema = z
  .object({
    answerConfidence: AnswerConfidence,
  })
  .passthrough();

export const ProvideAIAnnotationsToolSchema = z.object({
  aiAnnotations: AIAnnotationsToolSchema,
});



================================================
FILE: apps/docs/public/content-collections.webp
================================================
[Binary file]


================================================
FILE: apps/docs/public/robots.txt
================================================
User-agent: *
Allow: /

Host: https://fumadocs.dev

Sitemap: https://fumadocs.dev/sitemap.xml



================================================
FILE: apps/docs/scripts/build-registry.mts
================================================
import { build, writeOutput } from '@fumadocs/cli/build';
import { registry } from '@/components/registry.mjs';

export async function buildRegistry() {
  const out = await build(registry);

  await writeOutput('public/registry', out, {
    cleanDir: true,
  });
}



================================================
FILE: apps/docs/scripts/lint.mts
================================================
/* eslint-disable @typescript-eslint/no-explicit-any -- rehype plugins */
import { glob } from 'tinyglobby';
import { printErrors, scanURLs, validateFiles } from 'next-validate-link';
import { createGetUrl, getSlugs, parseFilePath } from 'fumadocs-core/source';
import { TOCItemType } from 'fumadocs-core/server';
import fs from 'node:fs/promises';
import path from 'node:path';
import matter from 'gray-matter';
import { remarkInclude } from 'fumadocs-mdx/config';
import remarkMdx from 'remark-mdx';
import { visit } from 'unist-util-visit';
import { remark } from 'remark';
import { remarkHeading } from 'fumadocs-core/mdx-plugins';

async function readFromPath(file: string) {
  const content = await fs
    .readFile(path.resolve(file))
    .then((res) => res.toString());
  const parsed = matter(content);

  return {
    path: file,
    data: parsed.data,
    content: parsed.content,
  };
}

function remarkIncludeId() {
  return (tree: any, file: any) => {
    file.data.ids ??= [];
    visit(tree, 'mdxJsxFlowElement', (element) => {
      if (!element.name || !element.attributes) return;

      const attributes = element.attributes as Record<string, unknown>[];
      const idAttr = attributes.find(
        (attr) => attr.type === 'mdxJsxAttribute' && attr.name === 'id',
      );

      if (idAttr) {
        file.data.ids.push(idAttr.value);
      }
    });
  };
}

const processor = remark()
  .use(remarkMdx)
  .use(remarkInclude)
  .use(remarkIncludeId)
  .use(remarkHeading);

async function getHeadings(path: string, content: string) {
  const ids: string[] = [];
  const result = await processor.process({
    path,
    value: content,
  });

  if ('toc' in result.data)
    ids.push(
      ...(result.data.toc as TOCItemType[]).map((item) => item.url.slice(1)),
    );

  if ('ids' in result.data) ids.push(...(result.data.ids as string[]));

  return ids;
}

async function checkLinks() {
  const docsFiles = await Promise.all(
    await glob('content/docs/**/*.mdx').then((files) =>
      files.map(readFromPath),
    ),
  );

  const blogFiles = await Promise.all(
    await glob('content/blog/**/*.mdx').then((files) =>
      files.map(readFromPath),
    ),
  );

  const docs = docsFiles.map(async (file) => {
    const info = parseFilePath(path.relative('content/docs', file.path));

    return {
      value: getSlugs(info),
      hashes: await getHeadings(file.path, file.content),
    };
  });

  const blogs = blogFiles.map(async (file) => {
    const info = parseFilePath(path.relative('content/blog', file.path));

    return {
      value: getSlugs(info)[0],
      hashes: await getHeadings(file.path, file.content),
    };
  });

  const scanned = await scanURLs({
    populate: {
      '(home)/blog/[slug]': await Promise.all(blogs),
      'docs/[...slug]': await Promise.all(docs),
    },
  });

  console.log(
    `collected ${scanned.urls.size} URLs, ${scanned.fallbackUrls.length} fallbacks`,
  );

  const getUrl = createGetUrl('/docs');
  printErrors(
    await validateFiles([...docsFiles, ...blogFiles], {
      scanned,

      pathToUrl(value) {
        const info = parseFilePath(path.relative('content/docs', value));
        return getUrl(getSlugs(info));
      },
    }),
    true,
  );
}

void checkLinks();



================================================
FILE: apps/docs/scripts/post-build.mts
================================================
import env from '@next/env';
import { updateSearchIndexes } from './update-orama-index.mjs';

env.loadEnvConfig(process.cwd());

async function main() {
  await Promise.all([updateSearchIndexes()]);
}

await main().catch((e) => {
  console.error('Failed to run post build script', e);
});



================================================
FILE: apps/docs/scripts/pre-build.mts
================================================
import { buildRegistry } from '@/scripts/build-registry.mjs';
import * as OpenAPI from 'fumadocs-openapi';
import { rimraf } from 'rimraf';

export async function generateDocs() {
  await rimraf('./content/docs/openapi/(generated)');

  await Promise.all([
    OpenAPI.generateFiles({
      input: ['./scalar.yaml'],
      output: './content/docs/openapi/(generated)',
      per: 'operation',
      includeDescription: true,
    }),
  ]);
}

async function main() {
  await Promise.all([generateDocs(), buildRegistry()]);
}

await main().catch((e) => {
  console.error('Failed to run pre build script', e);
});



================================================
FILE: apps/docs/scripts/update-orama-index.mts
================================================
import { sync, type OramaDocument } from 'fumadocs-core/search/orama-cloud';
import * as fs from 'node:fs/promises';
import { CloudManager } from '@oramacloud/client';

export async function updateSearchIndexes(): Promise<void> {
  const apiKey = process.env.ORAMA_PRIVATE_API_KEY;

  if (!apiKey) {
    console.log('no api key for Orama found, skipping');
    return;
  }

  const content = await fs.readFile('.next/server/app/static.json.body');
  const records = JSON.parse(content.toString()) as OramaDocument[];

  const manager = new CloudManager({ api_key: apiKey });

  await sync(manager, {
    index: 'twr98yz9itca86121ukrqber',
    documents: records,
  });

  console.log(`search updated: ${records.length} records`);
}



================================================
FILE: examples/README.md
================================================
## Examples

The apps here are used to generate code examples for our docs.

Please be careful.



================================================
FILE: examples/content-collections/content-collections.ts
================================================
import { defineCollection, defineConfig } from '@content-collections/core';
import {
  createMetaSchema,
  createDocSchema,
  transformMDX,
} from '@fumadocs/content-collections/configuration';

const docs = defineCollection({
  name: 'docs',
  directory: 'content/docs',
  include: '**/*.mdx',
  schema: createDocSchema,
  transform: transformMDX,
});

const metas = defineCollection({
  name: 'meta',
  directory: 'content/docs',
  include: '**/meta.json',
  parser: 'json',
  schema: createMetaSchema,
});

export default defineConfig({
  collections: [docs, metas],
});



================================================
FILE: examples/content-collections/mdx-components.tsx
================================================
import defaultMdxComponents from 'fumadocs-ui/mdx';
import type { MDXComponents } from 'mdx/types';

export function getMDXComponents(components?: MDXComponents): MDXComponents {
  return {
    ...defaultMdxComponents,
    ...components,
  };
}



================================================
FILE: examples/content-collections/next.config.mjs
================================================
import { withContentCollections } from '@content-collections/next';

/** @type {import('next').NextConfig} */
const config = {
  reactStrictMode: true,
};

export default withContentCollections(config);



================================================
FILE: examples/content-collections/package.json
================================================
{
  "name": "example-content-collections",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "build": "next build",
    "dev": "next dev",
    "start": "next start"
  },
  "dependencies": {
    "@fumadocs/content-collections": "workspace:*",
    "fumadocs-core": "workspace:*",
    "fumadocs-ui": "workspace:*",
    "next": "^15.3.5",
    "react": "19.1.0",
    "react-dom": "19.1.0"
  },
  "devDependencies": {
    "@content-collections/core": "^0.10.0",
    "@content-collections/mdx": "^0.2.2",
    "@content-collections/next": "^0.2.6",
    "@types/mdx": "^2.0.13",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "typescript": "^5.8.3"
  }
}



================================================
FILE: examples/content-collections/tsconfig.json
================================================
{
  "compilerOptions": {
    "baseUrl": ".",
    "target": "ESNext",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "paths": {
      "@/*": ["./*"],
      "content-collections": ["./.content-collections/generated"]
    },
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
FILE: examples/content-collections/app/layout.config.tsx
================================================
import { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';

export const baseOptions: BaseLayoutProps = {
  nav: {
    title: 'My App',
  },
};



================================================
FILE: examples/content-collections/app/layout.tsx
================================================
import { RootProvider } from 'fumadocs-ui/provider';
import 'fumadocs-ui/style.css';
import { Inter } from 'next/font/google';
import type { ReactNode } from 'react';

const inter = Inter({
  subsets: ['latin'],
});

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <html lang="en" className={inter.className} suppressHydrationWarning>
      <body
        style={{
          display: 'flex',
          flexDirection: 'column',
          minHeight: '100vh',
        }}
      >
        <RootProvider>{children}</RootProvider>
      </body>
    </html>
  );
}



================================================
FILE: examples/content-collections/app/(home)/layout.tsx
================================================
import type { ReactNode } from 'react';
import { HomeLayout } from 'fumadocs-ui/layouts/home';
import { baseOptions } from '@/app/layout.config';

export default function Layout({ children }: { children: ReactNode }) {
  return <HomeLayout {...baseOptions}>{children}</HomeLayout>;
}



================================================
FILE: examples/content-collections/app/(home)/page.tsx
================================================
import Link from 'next/link';

export default function HomePage() {
  return (
    <main
      style={{
        flex: 1,
        display: 'flex',
        flexDirection: 'column',
        textAlign: 'center',
        justifyContent: 'center',
      }}
    >
      <h1
        style={{
          fontSize: '2rem',
          fontWeight: 'bold',
          marginBottom: '1rem',
        }}
      >
        Hello World
      </h1>
      <p>
        You can open{' '}
        <Link
          href="/docs"
          style={{
            fontWeight: '600',
            textDecoration: 'underline',
          }}
        >
          /docs
        </Link>{' '}
        and see the documentation.
      </p>
    </main>
  );
}



================================================
FILE: examples/content-collections/app/api/search/route.ts
================================================
import { source } from '@/lib/source';
import { createFromSource } from 'fumadocs-core/search/server';

export const { GET } = createFromSource(source);



================================================
FILE: examples/content-collections/app/docs/layout.tsx
================================================
import { source } from '@/lib/source';
import { DocsLayout } from 'fumadocs-ui/layouts/docs';
import type { ReactNode } from 'react';
import { baseOptions } from '@/app/layout.config';

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <DocsLayout tree={source.pageTree} {...baseOptions}>
      {children}
    </DocsLayout>
  );
}



================================================
FILE: examples/content-collections/app/docs/[[...slug]]/page.tsx
================================================
import { source } from '@/lib/source';
import type { Metadata } from 'next';
import {
  DocsPage,
  DocsBody,
  DocsTitle,
  DocsDescription,
} from 'fumadocs-ui/page';
import { notFound } from 'next/navigation';
import { MDXContent } from '@content-collections/mdx/react';
import { getMDXComponents } from '@/mdx-components';

export default async function Page(props: {
  params: Promise<{ slug?: string[] }>;
}) {
  const params = await props.params;
  const page = source.getPage(params.slug);

  if (!page) {
    notFound();
  }

  return (
    <DocsPage toc={page.data.toc} full={page.data.full}>
      <DocsTitle>{page.data.title}</DocsTitle>
      <DocsDescription>{page.data.description}</DocsDescription>
      <DocsBody>
        <MDXContent code={page.data.body} components={getMDXComponents()} />
      </DocsBody>
    </DocsPage>
  );
}

export async function generateStaticParams() {
  return source.generateParams();
}

export async function generateMetadata(props: {
  params: Promise<{ slug?: string[] }>;
}) {
  const params = await props.params;
  const page = source.getPage(params.slug);

  if (!page) notFound();

  return {
    title: page.data.title,
    description: page.data.description,
  } satisfies Metadata;
}



================================================
FILE: examples/content-collections/content/docs/index.mdx
================================================
---
title: Hello World
description: Your first document
---

Hey there!

<Callout>Hello World</Callout>

## Heading

<Cards>
  <Card title="Learn more about Next.js" href="https://nextjs.org/docs" />
  <Card title="Learn more about Fumadocs" href="https://fumadocs.vercel.app" />
</Cards>

### Heading

#### Heading

| name        | description |
| ----------- | ----------- |
| Hello World | Goodbye     |



================================================
FILE: examples/content-collections/content/docs/test.mdx
================================================
---
title: Hello World
description: Your first document
---

Hey there!

## Heading

<Cards>
  <Card title="Learn more about Next.js" href="https://nextjs.org/docs" />
  <Card title="Learn more about Fumadocs" href="https://fumadocs.vercel.app" />
</Cards>

### Heading

```js
console.log('Hello World');
```

#### Heading



================================================
FILE: examples/content-collections/lib/source.ts
================================================
import { allDocs, allMetas } from 'content-collections';
import { loader } from 'fumadocs-core/source';
import { createMDXSource } from '@fumadocs/content-collections';

export const source = loader({
  baseUrl: '/docs',
  source: createMDXSource(allDocs, allMetas),
});



================================================
FILE: examples/i18n/mdx-components.tsx
================================================
import defaultMdxComponents from 'fumadocs-ui/mdx';
import type { MDXComponents } from 'mdx/types';

export function getMDXComponents(components?: MDXComponents): MDXComponents {
  return {
    ...defaultMdxComponents,
    ...components,
  };
}



================================================
FILE: examples/i18n/middleware.ts
================================================
import { createI18nMiddleware } from 'fumadocs-core/i18n';
import { i18n } from '@/lib/i18n';

export default createI18nMiddleware(i18n);

export const config = {
  // Matcher ignoring `/_next/` and `/api/`
  // You may need to adjust it to ignore static assets in `/public` folder
  matcher: ['/((?!api|_next/static|_next/image|favicon.ico).*)'],
};



================================================
FILE: examples/i18n/next.config.mjs
================================================
import { createMDX } from 'fumadocs-mdx/next';

const withMDX = createMDX();

/** @type {import('next').NextConfig} */
const config = {
  reactStrictMode: true,
};

export default withMDX(config);



================================================
FILE: examples/i18n/package.json
================================================
{
  "name": "example-i18n",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "build": "next build",
    "dev": "next dev --turbo",
    "start": "next start"
  },
  "dependencies": {
    "@orama/tokenizers": "^3.1.10",
    "fumadocs-core": "workspace:*",
    "fumadocs-mdx": "workspace:*",
    "fumadocs-ui": "workspace:*",
    "next": "15.3.5",
    "react": "19.1.0",
    "react-dom": "19.1.0"
  },
  "devDependencies": {
    "@types/mdx": "^2.0.13",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "typescript": "^5.8.3"
  }
}



================================================
FILE: examples/i18n/source.config.ts
================================================
import { defineDocs } from 'fumadocs-mdx/config';

export const { docs, meta } = defineDocs({
  dir: 'content/docs',
});



================================================
FILE: examples/i18n/tsconfig.json
================================================
{
  "compilerOptions": {
    "baseUrl": ".",
    "target": "ESNext",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "paths": {
      "@/*": ["./*"]
    },
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
FILE: examples/i18n/app/layout.config.tsx
================================================
import type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';
import { i18n } from '@/lib/i18n';

export function baseOptions(locale: string): BaseLayoutProps {
  return {
    i18n,
    nav: {
      title: locale === 'cn' ? 'Chinese Docs' : 'English Docs',
      url: `/${locale}`,
    },
    githubUrl: 'https://github.com',
    links: [
      {
        type: 'main',
        text: locale === 'cn' ? '文檔' : 'Documentation',
        url: `/${locale}/docs`,
      },
    ],
  };
}



================================================
FILE: examples/i18n/app/[lang]/layout.tsx
================================================
import 'fumadocs-ui/style.css';
import { RootProvider } from 'fumadocs-ui/provider';
import { Inter } from 'next/font/google';
import type { ReactNode } from 'react';

const inter = Inter({
  subsets: ['latin'],
});

export default async function Layout({
  params,
  children,
}: {
  params: Promise<{ lang: string }>;
  children: ReactNode;
}) {
  const { lang } = await params;
  return (
    <html lang={lang} className={inter.className} suppressHydrationWarning>
      <body
        style={{
          display: 'flex',
          flexDirection: 'column',
          minHeight: '100vh',
        }}
      >
        <RootProvider
          i18n={{
            locale: lang,
            locales: [
              {
                name: 'English',
                locale: 'en',
              },
              {
                name: 'Chinese',
                locale: 'cn',
              },
            ],
            translations: {
              cn: {
                toc: '目錄',
                search: '搜尋文檔',
                lastUpdate: '最後更新於',
                searchNoResult: '沒有結果',
                previousPage: '上一頁',
                nextPage: '下一頁',
                chooseLanguage: '選擇語言',
              },
            }[lang],
          }}
        >
          {children}
        </RootProvider>
      </body>
    </html>
  );
}



================================================
FILE: examples/i18n/app/[lang]/(home)/layout.tsx
================================================
import type { ReactNode } from 'react';
import { HomeLayout } from 'fumadocs-ui/layouts/home';
import { baseOptions } from '@/app/layout.config';

export default async function Layout({
  params,
  children,
}: {
  params: Promise<{ lang: string }>;
  children: ReactNode;
}) {
  const { lang } = await params;

  return <HomeLayout {...baseOptions(lang)}>{children}</HomeLayout>;
}



================================================
FILE: examples/i18n/app/[lang]/(home)/page.tsx
================================================
import { DynamicLink } from 'fumadocs-core/dynamic-link';

export default function HomePage() {
  return (
    <main
      style={{
        flex: 1,
        display: 'flex',
        flexDirection: 'column',
        textAlign: 'center',
        justifyContent: 'center',
      }}
    >
      <h1
        style={{
          fontSize: '2rem',
          fontWeight: 'bold',
          marginBottom: '1rem',
        }}
      >
        Hello World
      </h1>
      <p>
        You can open{' '}
        <DynamicLink
          href="/[lang]/docs"
          style={{
            fontWeight: '600',
            textDecoration: 'underline',
          }}
        >
          /docs
        </DynamicLink>{' '}
        and see the documentation.
      </p>
    </main>
  );
}



================================================
FILE: examples/i18n/app/[lang]/docs/layout.tsx
================================================
import type { ReactNode } from 'react';
import { source } from '@/lib/source';
import { DocsLayout } from 'fumadocs-ui/layouts/docs';
import { baseOptions } from '@/app/layout.config';

export default async function Layout({
  params,
  children,
}: {
  params: Promise<{ lang: string }>;
  children: ReactNode;
}) {
  const { lang } = await params;

  return (
    <DocsLayout {...baseOptions(lang)} tree={source.pageTree[lang]}>
      {children}
    </DocsLayout>
  );
}



================================================
FILE: examples/i18n/app/[lang]/docs/[[...slug]]/page.tsx
================================================
import { source } from '@/lib/source';
import {
  DocsPage,
  DocsBody,
  DocsTitle,
  DocsDescription,
} from 'fumadocs-ui/page';
import { notFound } from 'next/navigation';
import { metadataImage } from '@/lib/metadata';
import { getMDXComponents } from '@/mdx-components';

export default async function Page(props: {
  params: Promise<{ lang: string; slug?: string[] }>;
}) {
  const params = await props.params;
  const page = source.getPage(params.slug, params.lang);
  if (!page) notFound();

  const MDX = page.data.body;

  return (
    <DocsPage toc={page.data.toc}>
      <DocsTitle>{page.data.title}</DocsTitle>
      <DocsDescription>{page.data.description}</DocsDescription>
      <DocsBody>
        <MDX components={getMDXComponents()} />
      </DocsBody>
    </DocsPage>
  );
}

export async function generateStaticParams() {
  return source.generateParams();
}

export async function generateMetadata(props: {
  params: Promise<{ lang: string; slug?: string[] }>;
}) {
  const params = await props.params;
  const page = source.getPage(params.slug, params.lang);
  if (!page) notFound();

  return metadataImage.withImage(page.slugs, {
    title: page.data.title,
    description: page.data.description,
  });
}



================================================
FILE: examples/i18n/app/[lang]/docs-og/[...slug]/route.ts
================================================
import { metadataImage } from '@/lib/metadata';
import { generateOGImage } from 'fumadocs-ui/og';

export const GET = metadataImage.createAPI((page) => {
  return generateOGImage({
    title: page.data.title,
    description: page.data.description,
  });
});



================================================
FILE: examples/i18n/app/api/search/route-full.ts
================================================
import { source } from '@/lib/source';
import { createI18nSearchAPI } from 'fumadocs-core/search/server';
import { i18n } from '@/lib/i18n';

export const { GET } = createI18nSearchAPI('advanced', {
  i18n, // [!code ++]
  indexes: source.getLanguages().flatMap(({ language, pages }) =>
    pages.map((page) => ({
      title: page.data.title,
      description: page.data.description,
      structuredData: page.data.structuredData,
      id: page.url,
      url: page.url,
      locale: language === 'ru' ? 'russian' : 'english', // [!code ++]
    })),
  ),
});



================================================
FILE: examples/i18n/app/api/search/route.ts
================================================
import { source } from '@/lib/source';
import { createFromSource } from 'fumadocs-core/search/server';
import { createTokenizer } from '@orama/tokenizers/mandarin';

export const { GET } = createFromSource(source, {
  localeMap: {
    // [locale]: Orama options
    cn: {
      components: {
        tokenizer: createTokenizer(),
      },
      search: {
        threshold: 0,
        tolerance: 0,
      },
    },
  },
});



================================================
FILE: examples/i18n/content/docs/index.cn.mdx
================================================
---
title: 中文
description: 您的第一個文檔
---

## Hi 中文

Fumadocs 對 i18n 有良好的支持



================================================
FILE: examples/i18n/content/docs/index.mdx
================================================
---
title: Hello World
description: Your first document
---

Hey there!

## Heading

<Cards>
  <Card title="Learn more about Next.js" href="https://nextjs.org/docs" />
  <Card title="Learn more about Fumadocs" href="https://fumadocs.vercel.app" />
</Cards>

### Heading

#### Heading



================================================
FILE: examples/i18n/content/docs/test.mdx
================================================
---
title: Hello World
description: Your first document
---

Hey there!

## Heading

<Cards>
  <Card title="Learn more about Next.js" href="https://nextjs.org/docs" />
  <Card title="Learn more about Fumadocs" href="https://fumadocs.vercel.app" />
</Cards>

### Heading

```js
console.log('Hello World');
```

#### Heading



================================================
FILE: examples/i18n/lib/i18n.ts
================================================
import type { I18nConfig } from 'fumadocs-core/i18n';

export const i18n: I18nConfig = {
  defaultLanguage: 'en',
  languages: ['en', 'cn'],
};



================================================
FILE: examples/i18n/lib/metadata.ts
================================================
import { createMetadataImage } from 'fumadocs-core/server';
import { source } from '@/lib/source';

export const metadataImage = createMetadataImage({
  source,
});



================================================
FILE: examples/i18n/lib/source.ts
================================================
import { createMDXSource } from 'fumadocs-mdx';
import { loader } from 'fumadocs-core/source';
import { i18n } from '@/lib/i18n';
import { docs, meta } from '@/.source';

export const source = loader({
  baseUrl: '/docs',
  source: createMDXSource(docs, meta),
  i18n,
});



================================================
FILE: examples/next-mdx/mdx-components.tsx
================================================
import defaultMdxComponents from 'fumadocs-ui/mdx';
import type { MDXComponents } from 'mdx/types';

export function getMDXComponents(components?: MDXComponents): MDXComponents {
  return {
    ...defaultMdxComponents,
    ...components,
  };
}



================================================
FILE: examples/next-mdx/next.config.mjs
================================================
import { createMDX } from 'fumadocs-mdx/next';

const withMDX = createMDX();

/** @type {import('next').NextConfig} */
const config = {
  reactStrictMode: true,
};

export default withMDX(config);



================================================
FILE: examples/next-mdx/package.json
================================================
{
  "name": "example-next-mdx",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "build": "next build",
    "dev": "next dev --turbo",
    "start": "next start"
  },
  "dependencies": {
    "fumadocs-core": "workspace:*",
    "fumadocs-mdx": "workspace:*",
    "fumadocs-ui": "workspace:*",
    "next": "15.3.5",
    "react": "19.1.0",
    "react-dom": "19.1.0"
  },
  "devDependencies": {
    "@tailwindcss/postcss": "^4.1.11",
    "@types/mdx": "^2.0.13",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "postcss": "^8.5.6",
    "tailwindcss": "^4.1.11",
    "typescript": "^5.8.3"
  }
}



================================================
FILE: examples/next-mdx/postcss.config.mjs
================================================
export default {
  plugins: {
    '@tailwindcss/postcss': {},
  },
};



================================================
FILE: examples/next-mdx/source.config.ts
================================================
import { defineDocs, defineConfig } from 'fumadocs-mdx/config';

export const docs = defineDocs({
  dir: 'content/docs',
});

export default defineConfig();



================================================
FILE: examples/next-mdx/tsconfig.json
================================================
{
  "compilerOptions": {
    "baseUrl": ".",
    "target": "ESNext",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "paths": {
      "@/*": ["./*"]
    },
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
FILE: examples/next-mdx/app/global.css
================================================
@import 'tailwindcss';
@import 'fumadocs-ui/css/neutral.css';
@import 'fumadocs-ui/css/preset.css';



================================================
FILE: examples/next-mdx/app/layout.config.tsx
================================================
import { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';

export const baseOptions: BaseLayoutProps = {
  nav: {
    title: 'My App',
  },
};



================================================
FILE: examples/next-mdx/app/layout.tsx
================================================
import { RootProvider } from 'fumadocs-ui/provider';
import './global.css';
import { Inter } from 'next/font/google';
import type { ReactNode } from 'react';

const inter = Inter({
  subsets: ['latin'],
});

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <html lang="en" className={inter.className} suppressHydrationWarning>
      <body
        style={{
          display: 'flex',
          flexDirection: 'column',
          minHeight: '100vh',
        }}
      >
        <RootProvider>{children}</RootProvider>
      </body>
    </html>
  );
}



================================================
FILE: examples/next-mdx/app/(home)/layout.tsx
================================================
import type { ReactNode } from 'react';
import { HomeLayout } from 'fumadocs-ui/layouts/home';
import { baseOptions } from '@/app/layout.config';

export default function Layout({
  children,
}: {
  children: ReactNode;
}): React.ReactElement {
  return <HomeLayout {...baseOptions}>{children}</HomeLayout>;
}



================================================
FILE: examples/next-mdx/app/(home)/page.tsx
================================================
import Link from 'next/link';

export default function HomePage() {
  return (
    <div
      style={{
        flex: 1,
        display: 'flex',
        flexDirection: 'column',
        textAlign: 'center',
        justifyContent: 'center',
      }}
    >
      <h1
        style={{
          fontSize: '2rem',
          fontWeight: 'bold',
          marginBottom: '1rem',
        }}
      >
        Hello World
      </h1>
      <p>
        You can open{' '}
        <Link
          href="/docs"
          style={{
            fontWeight: '600',
            textDecoration: 'underline',
          }}
        >
          /docs
        </Link>{' '}
        and see the documentation.
      </p>
    </div>
  );
}



================================================
FILE: examples/next-mdx/app/api/search/route-full.ts
================================================
import { source } from '@/lib/source';
import { createSearchAPI } from 'fumadocs-core/search/server';

export const { GET } = createSearchAPI('advanced', {
  language: 'english',
  indexes: source.getPages().map((page) => ({
    title: page.data.title,
    description: page.data.description,
    url: page.url,
    id: page.url,
    structuredData: page.data.structuredData,
  })),
});



================================================
FILE: examples/next-mdx/app/api/search/route-tag.ts
================================================
import { source } from '@/lib/source';
import { createFromSource } from 'fumadocs-core/search/server';

export const { GET } = createFromSource(source, {
  buildIndex(page) {
    return {
      title: page.data.title,
      description: page.data.description,
      url: page.url,
      id: page.url,
      structuredData: page.data.structuredData,
      // use your desired value, like page.slugs[0] [!code ++]
      tag: '<value>',
    };
  },
});



================================================
FILE: examples/next-mdx/app/api/search/route.ts
================================================
import { source } from '@/lib/source';
import { createFromSource } from 'fumadocs-core/search/server';

export const { GET } = createFromSource(source, {
  // https://docs.orama.com/open-source/supported-languages
  language: 'english',
});



================================================
FILE: examples/next-mdx/app/docs/layout.tsx
================================================
import { source } from '@/lib/source';
import { DocsLayout } from 'fumadocs-ui/layouts/docs';
import type { ReactNode } from 'react';
import { baseOptions } from '@/app/layout.config';

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <DocsLayout tree={source.pageTree} {...baseOptions}>
      {children}
    </DocsLayout>
  );
}



================================================
FILE: examples/next-mdx/app/docs/[[...slug]]/page.tsx
================================================
import { source } from '@/lib/source';
import {
  DocsBody,
  DocsDescription,
  DocsPage,
  DocsTitle,
} from 'fumadocs-ui/page';
import { notFound } from 'next/navigation';
import { getMDXComponents } from '@/mdx-components';

export default async function Page(props: {
  params: Promise<{ slug?: string[] }>;
}) {
  const params = await props.params;
  const page = source.getPage(params.slug);
  if (!page) notFound();

  const MDX = page.data.body;

  return (
    <DocsPage toc={page.data.toc} full={page.data.full}>
      <DocsTitle>{page.data.title}</DocsTitle>
      <DocsDescription>{page.data.description}</DocsDescription>
      <DocsBody>
        <p>{page.data.content}</p>
        <MDX components={getMDXComponents()} />
      </DocsBody>
    </DocsPage>
  );
}

export async function generateStaticParams() {
  return source.generateParams();
}

export async function generateMetadata(props: {
  params: Promise<{ slug?: string[] }>;
}) {
  const params = await props.params;
  const page = source.getPage(params.slug);
  if (!page) notFound();

  return {
    title: page.data.title,
    description: page.data.description,
  };
}



================================================
FILE: examples/next-mdx/app/docs-og/[...slug]/route.tsx
================================================
import { generateOGImage } from 'fumadocs-ui/og';
import { source } from '@/lib/source';
import { notFound } from 'next/navigation';

export async function GET(
  _req: Request,
  { params }: { params: Promise<{ slug: string[] }> },
) {
  const { slug } = await params;
  const page = source.getPage(slug.slice(0, -1));
  if (!page) notFound();

  return generateOGImage({
    title: page.data.title,
    description: page.data.description,
    site: 'My App',
  });
}

export function generateStaticParams() {
  return source.generateParams().map((page) => ({
    ...page,
    slug: [...page.slug, 'image.png'],
  }));
}



================================================
FILE: examples/next-mdx/app/static.json/orama-cloud.ts
================================================
import { NextResponse } from 'next/server';
import { type OramaDocument } from 'fumadocs-core/search/orama-cloud';
import { source } from '@/lib/source';

export const revalidate = false;

export function GET() {
  const results: OramaDocument[] = [];

  for (const page of source.getPages()) {
    results.push({
      id: page.url,
      structured: page.data.structuredData,
      url: page.url,
      title: page.data.title,
      description: page.data.description,
    });
  }

  return NextResponse.json(results);
}



================================================
FILE: examples/next-mdx/content/docs/index.mdx
================================================
---
title: Hello World
description: |
  Your first `document`
  ```ts
  console.log("Hello World")
  ```
---

Hey there! fsd asfd sdfsfda
sfd

fdsa ff dsaf sdf sda fasd fsd

## Heading

Hello World dsasfdafsd

<Cards>
  <Card title="Learn more about Next.js" href="https://nextjs.org/docs" />
  <Card title="Learn more about Fumadocs" href="https://fumadocs.vercel.app" />
</Cards>

### Heading

#### Heading

| Head                            | Description                         |
| ------------------------------- | ----------------------------------- |
| `hello`                         | Hello World                         |
| very **important**              | Hey                                 |
| _Surprisingly_                  | Fumadocs                            |
| very long text that looks weird | hello world hello world hello world |

<include>./test.mdx</include>



================================================
FILE: examples/next-mdx/content/docs/test.mdx
================================================
---
title: Test
description: A document to test Fumadocs
---

Hey there!

## Cards

<Cards>
  <Card title="Learn more about Next.js" href="https://nextjs.org/docs" />
  <Card title="Learn more about Fumadocs" href="https://fumadocs.vercel.app" />
</Cards>

### CodeBlock

```js
console.log('Hello World');
```

#### List

- Hello
- World



================================================
FILE: examples/next-mdx/content/docs/test2.mdx
================================================
---
title: Fumadocs
description: You can just be minimal.
---

## Overview

Fumadocs is a docs framework.



================================================
FILE: examples/next-mdx/lib/source.ts
================================================
import { docs } from '@/.source';
import { loader } from 'fumadocs-core/source';

export const source = loader({
  baseUrl: '/docs',
  source: docs.toFumadocsSource(),
});



================================================
FILE: examples/next-mdx/scripts/sync-orama-cloud.mjs
================================================
import { sync } from 'fumadocs-core/search/orama-cloud';
import * as fs from 'node:fs/promises';
import { CloudManager } from '@oramacloud/client';

export async function updateSearchIndexes() {
  const apiKey = process.env.ORAMA_PRIVATE_API_KEY; // private API key [!code highlight]

  if (!apiKey) {
    console.log('no api key for Orama found, skipping');
    return;
  }

  const content = await fs.readFile('.next/server/app/static.json.body');
  const records = JSON.parse(content.toString());

  const manager = new CloudManager({ api_key: apiKey });

  await sync(manager, {
    index: '<index>',
    documents: records,
  });

  console.log(`search updated: ${records.length} records`);
}

void updateSearchIndexes();



================================================
FILE: examples/openapi/README.md
================================================
# Unkey API Docs

This is an example API documentation based on Unkey's [API documentation](https://github.com/unkeyed/unkey), using Fumadocs OpenAPI.



================================================
FILE: examples/openapi/mdx-components.tsx
================================================
import defaultMdxComponents from 'fumadocs-ui/mdx';
import type { MDXComponents } from 'mdx/types';
import { openapi } from '@/lib/source';
import { APIPage } from 'fumadocs-openapi/ui';

export function getMDXComponents(components?: MDXComponents): MDXComponents {
  return {
    ...defaultMdxComponents,
    APIPage: (props) => <APIPage {...openapi.getAPIPageProps(props)} />,
    ...components,
  };
}



================================================
FILE: examples/openapi/next.config.mjs
================================================
import { createMDX } from 'fumadocs-mdx/next';

const withMDX = createMDX();

/** @type {import('next').NextConfig} */
const config = {
  reactStrictMode: true,
};

export default withMDX(config);



================================================
FILE: examples/openapi/openapi.json
================================================
{
  "openapi": "3.1.0",
  "info": {
    "title": "Open Food Facts folksonomy REST API",
    "description": "\nFolksonomy Engine API allows you to add free property/value pairs to Open Food Facts products.\n\nThe API use the main following variables:\n* **product**: the product number\n* **k**: \"key\", meaning the property or tag\n* **v**: \"value\", the value for a related key\n\n## See also\n\n* [Project page](https://wiki.openfoodfacts.org/Folksonomy_Engine)\n* [Folksonomy Engine github repository](https://github.com/openfoodfacts/folksonomy_engine)\n* [Documented properties](https://wiki.openfoodfacts.org/Folksonomy/Property)\n",
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "https://api.folksonomy.openfoodfacts.org",
      "description": "Production server"
    },
    {
      "url": "http://localhost:8000",
      "description": "Local development server"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": ["System"],
        "summary": "Hello",
        "operationId": "hello__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HelloResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Authentication",
        "description": "Authentication: provide user/password and get a bearer token in return\n\n- **username**: Open Food Facts user_id (not email)\n- **password**: user password (clear text, but HTTPS encrypted)\n\ntoken is returned, to be used in later requests with usual \"Authorization: bearer token\" headers",
        "operationId": "authentication_auth_post",
        "parameters": [
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_authentication_auth_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth_by_cookie": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Authentication By Cookie",
        "description": "Authentication: provide Open Food Facts session cookie and get a bearer token in return\n\n- **session cookie**: Open Food Facts session cookie\n\ntoken is returned, to be used in later requests with usual \"Authorization: bearer token\" headers",
        "operationId": "authentication_by_cookie_auth_by_cookie_post",
        "parameters": [
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/products/stats": {
      "get": {
        "tags": ["Products"],
        "summary": "Product Stats",
        "description": "Get the list of products with tags statistics\n\nThe products list can be limited to some tags (k or k=v)",
        "operationId": "product_stats_products_stats_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "query",
            "required": false,
            "schema": {
              "default": "",
              "title": "Owner"
            }
          },
          {
            "name": "k",
            "in": "query",
            "required": false,
            "schema": {
              "default": "",
              "title": "K"
            }
          },
          {
            "name": "v",
            "in": "query",
            "required": false,
            "schema": {
              "default": "",
              "title": "V"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductStats"
                  },
                  "title": "Response Product Stats Products Stats Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": ["Products"],
        "summary": "Product List",
        "description": "Get the list of products matching k or k=v",
        "operationId": "product_list_products_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "query",
            "required": false,
            "schema": {
              "default": "",
              "title": "Owner"
            }
          },
          {
            "name": "k",
            "in": "query",
            "required": false,
            "schema": {
              "default": "",
              "title": "K"
            }
          },
          {
            "name": "v",
            "in": "query",
            "required": false,
            "schema": {
              "default": "",
              "title": "V"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductList"
                  },
                  "title": "Response Product List Products Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/product/{product}": {
      "get": {
        "tags": ["Product Tags"],
        "summary": "Product Tags List",
        "description": "Get a list of existing tags for a product, optionally filtering by specific keys.",
        "operationId": "product_tags_list_product__product__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "product",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Product"
            }
          },
          {
            "name": "owner",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "",
              "title": "Owner"
            }
          },
          {
            "name": "keys",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Comma-separated list of keys to filter by. If not provided, all keys are returned.",
              "title": "Keys"
            },
            "description": "Comma-separated list of keys to filter by. If not provided, all keys are returned."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductTag"
                  },
                  "title": "Response Product Tags List Product  Product  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/product/{product}/{k}": {
      "get": {
        "tags": ["Product Tags"],
        "summary": "Product Tag",
        "description": "Get a specific tag or tag hierarchy on a product\n\n- /product/xxx/key returns only the requested key\n- /product/xxx/key* returns the key and subkeys (key:subkey)",
        "operationId": "product_tag_product__product___k__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "product",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Product"
            }
          },
          {
            "name": "k",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "K"
            }
          },
          {
            "name": "owner",
            "in": "query",
            "required": false,
            "schema": {
              "default": "",
              "title": "Owner"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductTag"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Product Tags"],
        "summary": "Product Tag Delete",
        "description": "Delete a product tag",
        "operationId": "product_tag_delete_product__product___k__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "product",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Product"
            }
          },
          {
            "name": "k",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "K"
            }
          },
          {
            "name": "version",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            }
          },
          {
            "name": "owner",
            "in": "query",
            "required": false,
            "schema": {
              "default": "",
              "title": "Owner"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/product/{product}/{k}/versions": {
      "get": {
        "tags": ["Product Tags"],
        "summary": "Product Tag List Versions",
        "description": "Get a list of all versions of a tag for a product",
        "operationId": "product_tag_list_versions_product__product___k__versions_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "product",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Product"
            }
          },
          {
            "name": "k",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "K"
            }
          },
          {
            "name": "owner",
            "in": "query",
            "required": false,
            "schema": {
              "default": "",
              "title": "Owner"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductTag"
                  },
                  "title": "Response Product Tag List Versions Product  Product   K  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/product": {
      "put": {
        "tags": ["Product Tags"],
        "summary": "Product Tag Update",
        "description": "Update a product tag\n\n- **product**: which product\n- **k**: which key for the tag\n- **v**: which value to set for the tag\n- **version**: must be equal to previous version + 1\n- **owner**: None or empty for public tags, or your own user_id",
        "operationId": "product_tag_update_product_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductTag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Product Tags"],
        "summary": "Product Tag Add",
        "description": "Create a new product tag (version=1)\n\n- **product**: which product\n- **k**: which key for the tag\n- **v**: which value to set for the tag\n- **version**: none or empty or 1\n- **owner**: none or empty for public tags, or your own user_id\n\nBe aware it's not possible to create the same tag twice. Though, you can update\na tag and add multiple values the way you want (don't forget to document how); comma\nseparated list is a good option.",
        "operationId": "product_tag_add_product_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductTag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/keys": {
      "get": {
        "tags": ["Keys & Values"],
        "summary": "Keys List",
        "description": "Get the list of keys with statistics, with an optional search filter.\n\nThe keys list can be restricted to private tags from some owner",
        "operationId": "keys_list_keys_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "",
              "title": "Q"
            }
          },
          {
            "name": "owner",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "",
              "title": "Owner"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KeyStats"
                  },
                  "title": "Response Keys List Keys Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/values/{k}": {
      "get": {
        "tags": ["Keys & Values"],
        "summary": "Get Unique Values",
        "description": "Get the unique values of a given property and the corresponding number of products\n\n- **k**: The property key to get unique values for\n- **owner**: None or empty for public tags, or your own user_id\n- **q**: Filter values by a query string\n- **limit**: Maximum number of values to return (default: 50; max: 1000)",
        "operationId": "get_unique_values_values__k__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "k",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "K"
            }
          },
          {
            "name": "owner",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "",
              "title": "Owner"
            }
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "",
              "title": "Q"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 50,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValueCount"
                  },
                  "title": "Response Get Unique Values Values  K  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "tags": ["System"],
        "summary": "Pong",
        "description": "Check server health",
        "operationId": "pong_ping_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PingResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Body_authentication_auth_post": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^password$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": ["username", "password"],
        "title": "Body_authentication_auth_post"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HelloResponse": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "type": "object",
        "required": ["message"],
        "title": "HelloResponse"
      },
      "KeyStats": {
        "properties": {
          "k": {
            "type": "string",
            "title": "K"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "values": {
            "type": "integer",
            "title": "Values"
          }
        },
        "type": "object",
        "required": ["k", "count", "values"],
        "title": "KeyStats"
      },
      "PingResponse": {
        "properties": {
          "ping": {
            "type": "string",
            "title": "Ping"
          }
        },
        "type": "object",
        "required": ["ping"],
        "title": "PingResponse"
      },
      "ProductList": {
        "properties": {
          "product": {
            "type": "string",
            "title": "Product"
          },
          "k": {
            "type": "string",
            "title": "K"
          },
          "v": {
            "type": "string",
            "title": "V"
          }
        },
        "type": "object",
        "required": ["product", "k", "v"],
        "title": "ProductList"
      },
      "ProductStats": {
        "properties": {
          "product": {
            "type": "string",
            "title": "Product"
          },
          "keys": {
            "type": "integer",
            "title": "Keys"
          },
          "editors": {
            "type": "integer",
            "title": "Editors"
          },
          "last_edit": {
            "type": "string",
            "format": "date-time",
            "title": "Last Edit"
          }
        },
        "type": "object",
        "required": ["product", "keys", "editors", "last_edit"],
        "title": "ProductStats"
      },
      "ProductTag": {
        "properties": {
          "product": {
            "type": "string",
            "title": "Product"
          },
          "k": {
            "type": "string",
            "title": "K"
          },
          "v": {
            "type": "string",
            "title": "V"
          },
          "owner": {
            "type": "string",
            "title": "Owner",
            "default": ""
          },
          "version": {
            "type": "integer",
            "title": "Version",
            "default": 1
          },
          "editor": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Editor"
          },
          "last_edit": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Edit"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment",
            "default": ""
          }
        },
        "type": "object",
        "required": ["product", "k", "v"],
        "title": "ProductTag"
      },
      "TokenResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type"
          }
        },
        "type": "object",
        "required": ["access_token", "token_type"],
        "title": "TokenResponse"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      },
      "ValueCount": {
        "properties": {
          "v": {
            "type": "string",
            "title": "V"
          },
          "product_count": {
            "type": "integer",
            "title": "Product Count"
          }
        },
        "type": "object",
        "required": ["v", "product_count"],
        "title": "ValueCount"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "auth"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "System",
      "description": "System health and general API information"
    },
    {
      "name": "Authentication",
      "description": "User authentication and authorization endpoints"
    },
    {
      "name": "Products",
      "description": "Product discovery and statistics"
    },
    {
      "name": "Product Tags",
      "description": "CRUD operations for product tags and properties"
    },
    {
      "name": "Keys & Values",
      "description": "Browse available keys and their possible values"
    }
  ]
}



================================================
FILE: examples/openapi/package.json
================================================
{
  "name": "example-openapi",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "build": "next build",
    "build:docs": "node ./scripts/generate-docs.mjs",
    "dev": "next dev --turbo",
    "start": "next start",
    "types:check": "fumadocs-mdx && tsc --noEmit"
  },
  "dependencies": {
    "fumadocs-core": "workspace:*",
    "fumadocs-mdx": "workspace:*",
    "fumadocs-openapi": "workspace:*",
    "fumadocs-ui": "workspace:*",
    "next": "15.3.5",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "shiki": "^3.7.0"
  },
  "devDependencies": {
    "@tailwindcss/postcss": "^4.1.11",
    "@types/mdx": "^2.0.13",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "postcss": "^8.5.6",
    "rimraf": "^6.0.1",
    "tailwindcss": "^4.1.11",
    "typescript": "^5.8.3"
  }
}



================================================
FILE: examples/openapi/postcss.config.mjs
================================================
export default {
  plugins: {
    '@tailwindcss/postcss': {},
  },
};



================================================
FILE: examples/openapi/source.config.ts
================================================
import { defineDocs } from 'fumadocs-mdx/config';

export const { docs, meta } = defineDocs({
  dir: 'content/docs',
});



================================================
FILE: examples/openapi/tsconfig.json
================================================
{
  "compilerOptions": {
    "baseUrl": ".",
    "target": "ESNext",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "paths": {
      "@/*": ["./*"]
    },
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
FILE: examples/openapi/app/global.css
================================================
@import 'tailwindcss';
@import 'fumadocs-ui/css/neutral.css';
@import 'fumadocs-ui/css/preset.css';
@import 'fumadocs-openapi/css/preset.css';

:root {
  --fd-layout-width: 1600px;
}



================================================
FILE: examples/openapi/app/layout.config.tsx
================================================
import type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';
import { Logo } from '@/app/logo';

export const baseOptions: BaseLayoutProps = {
  nav: {
    title: <Logo />,
  },
};



================================================
FILE: examples/openapi/app/layout.tsx
================================================
import { RootProvider } from 'fumadocs-ui/provider';
import './global.css';
import { Inter, JetBrains_Mono } from 'next/font/google';
import type { ReactNode } from 'react';

const inter = Inter({
  subsets: ['latin'],
});

const mono = JetBrains_Mono({
  subsets: ['latin'],
  variable: '--font-mono',
});

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <html
      lang="en"
      className={`${inter.className} ${mono.variable}`}
      suppressHydrationWarning
    >
      <body className="flex flex-col min-h-screen">
        <RootProvider>{children}</RootProvider>
      </body>
    </html>
  );
}



================================================
FILE: examples/openapi/app/logo.tsx
================================================
'use client';
import { useId } from 'react';

export function Logo() {
  const id = useId();

  return (
    <svg
      className="min-w-[50px] ms-2"
      xmlns="http://www.w3.org/2000/svg"
      width="93"
      height="40"
      viewBox="0 0 93 40"
      id={id}
    >
      <path
        d="M10.8 30.3C4.8 30.3 1.38 27.12 1.38 21.66V9.9H4.59V21.45C4.59 25.5 6.39 27.18 10.8 27.18C15.21 27.18 17.01 25.5 17.01 21.45V9.9H20.25V21.66C20.25 27.12 16.83 30.3 10.8 30.3ZM26.3611 30H23.1211V15.09H26.0911V19.71H26.3011C26.7511 17.19 28.7311 14.79 32.5111 14.79C36.6511 14.79 38.6911 17.58 38.6911 21.03V30H35.4511V21.9C35.4511 19.11 34.1911 17.7 31.1011 17.7C27.8311 17.7 26.3611 19.38 26.3611 22.62V30ZM44.8181 30H41.5781V9.9H44.8181V21H49.0781L53.5481 15.09H57.3281L51.7181 22.26L57.2981 30H53.4881L49.0781 23.91H44.8181V30ZM66.4219 30.3C61.5319 30.3 58.3219 27.54 58.3219 22.56C58.3219 17.91 61.5019 14.79 66.3619 14.79C70.9819 14.79 74.1319 17.34 74.1319 21.87C74.1319 22.41 74.1019 22.83 74.0119 23.28H61.3519C61.4719 26.16 62.8819 27.69 66.3319 27.69C69.4519 27.69 70.7419 26.67 70.7419 24.9V24.66H73.9819V24.93C73.9819 28.11 70.8619 30.3 66.4219 30.3ZM66.3019 17.34C63.0019 17.34 61.5619 18.81 61.3819 21.48H71.0719V21.42C71.0719 18.66 69.4819 17.34 66.3019 17.34ZM78.9586 35.1H76.8286V32.16H79.7386C81.0586 32.16 81.5986 31.8 82.0486 30.78L82.4086 30L75.0586 15.09H78.6886L82.4986 23.01L83.9686 26.58H84.2086L85.6186 22.98L89.1286 15.09H92.6986L84.9286 31.62C83.6986 34.29 82.0186 35.1 78.9586 35.1Z"
        fill={`url(#${id}_radial_301_76)`}
      />
      <defs>
        <radialGradient
          id={`${id}_radial_301_76`}
          cx="0"
          cy="0"
          r="1"
          gradientUnits="userSpaceOnUse"
          gradientTransform="rotate(23.2729) scale(101.237 101.088)"
        >
          <stop offset="0.26875" stopColor="currentColor" />
          <stop offset="0.904454" stopColor="currentColor" stopOpacity="0.5" />
        </radialGradient>
      </defs>
    </svg>
  );
}



================================================
FILE: examples/openapi/app/(home)/layout.tsx
================================================
import type { ReactNode } from 'react';
import { HomeLayout } from 'fumadocs-ui/layouts/home';
import { baseOptions } from '@/app/layout.config';

export default function Layout({ children }: { children: ReactNode }) {
  return <HomeLayout {...baseOptions}>{children}</HomeLayout>;
}



================================================
FILE: examples/openapi/app/(home)/page.tsx
================================================
import Link from 'next/link';

export default function HomePage() {
  return (
    <main
      style={{
        flex: 1,
        display: 'flex',
        flexDirection: 'column',
        textAlign: 'center',
        justifyContent: 'center',
      }}
    >
      <h1
        style={{
          fontSize: '2rem',
          fontWeight: 'bold',
          marginBottom: '1rem',
        }}
      >
        Hello World
      </h1>
      <p>
        You can open{' '}
        <Link
          href="/docs"
          style={{
            fontWeight: '600',
            textDecoration: 'underline',
          }}
        >
          /docs
        </Link>{' '}
        and see the documentation.
      </p>
    </main>
  );
}



================================================
FILE: examples/openapi/app/api/search/route.ts
================================================
import { source } from '@/lib/source';
import { createFromSource } from 'fumadocs-core/search/server';

export const { GET } = createFromSource(source);



================================================
FILE: examples/openapi/app/docs/layout.tsx
================================================
import { source } from '@/lib/source';
import { DocsLayout } from 'fumadocs-ui/layouts/notebook';
import type { ReactNode } from 'react';
import { baseOptions } from '@/app/layout.config';

export default function RootDocsLayout({ children }: { children: ReactNode }) {
  return (
    <DocsLayout tree={source.pageTree} {...baseOptions}>
      {children}
    </DocsLayout>
  );
}



================================================
FILE: examples/openapi/app/docs/[[...slug]]/page.tsx
================================================
import { source } from '@/lib/source';
import {
  DocsBody,
  DocsDescription,
  DocsPage,
  DocsTitle,
} from 'fumadocs-ui/page';
import { notFound } from 'next/navigation';
import { getMDXComponents } from '@/mdx-components';
import type { Metadata } from 'next';

export default async function Page(props: {
  params: Promise<{ slug?: string[] }>;
}) {
  const params = await props.params;
  const page = source.getPage(params.slug);

  if (!page) {
    notFound();
  }

  const MDX = page.data.body;

  return (
    <DocsPage toc={page.data.toc} full={page.data.full}>
      <DocsTitle>{page.data.title}</DocsTitle>
      <DocsDescription>{page.data.description}</DocsDescription>
      <DocsBody>
        <MDX components={getMDXComponents()} />
      </DocsBody>
    </DocsPage>
  );
}

export async function generateStaticParams() {
  return source.generateParams();
}

export async function generateMetadata(props: {
  params: Promise<{ slug?: string[] }>;
}) {
  const params = await props.params;
  const page = source.getPage(params.slug);
  if (!page) notFound();
  const image = ['/docs-og', ...(params.slug ?? []), 'image.png'].join('/');

  return {
    title: page.data.title,
    description: page.data.description,
    openGraph: {
      images: image,
    },
    twitter: {
      card: 'summary_large_image',
      images: image,
    },
  } satisfies Metadata;
}



================================================
FILE: examples/openapi/app/docs-og/[...slug]/route.ts
================================================
import { generateOGImage } from 'fumadocs-ui/og';
import { source } from '@/lib/source';
import { notFound } from 'next/navigation';

export async function GET(
  _req: Request,
  { params }: { params: Promise<{ slug: string[] }> },
) {
  const { slug } = await params;
  const page = source.getPage(slug.slice(0, -1));
  if (!page) notFound();

  return generateOGImage({
    title: page.data.title,
    description: page.data.description,
  });
}

export function generateStaticParams() {
  return source.generateParams().map((page) => ({
    ...page,
    slug: [...page.slug, 'image.png'],
  }));
}



================================================
FILE: examples/openapi/content/docs/auth.mdx
================================================
---
title: 'Authentication'
description: "How to authenticate your requests to Unkey's API"
---

You'll need to authenticate your requests to access some of the endpoints in the Unkey API. In this guide, we'll look at how authentication works.

## Bearer Token

When requesting resources, you will need your root key — you will find it in the [Dashboard](https://app.unkey.com/settings/root-keys). Here's how to add the root key to the request header using cURL:

```bash
curl https://api.unkey.dev/v1/... \
  -H "Authorization: Bearer unkey_xxx"
```

Always keep your root key safe and reset it if you suspect it has been compromised.



================================================
FILE: examples/openapi/content/docs/index.mdx
================================================
---
title: Overview
description: General information about the API.
---

The Unkey API uses HTTP RPC-style methods and generally follow the schema:

```
https://api.unkey.dev/{version}/{service}.{method}
```

For example `GET https://api.unkey.dev/v1/apis.listKeys` to list all keys for an API.

## HTTP Methods

We strictly use only `GET` and `POST` methods. `PUT` and `DELETE` are not used.

### `GET`

`GET` methods are used for reading data. Filtering, sorting, or pagination is done via query parameters.

```http
curl "https://api.unkey.dev/v1/keys.getKey?keyId=key_123" \
  -H "Authorization: Bearer <ROOT_KEY>"
```

### `POST`

`POST` methods are used for creating, updating, and deleting data. Data is passed as `application/json` in the request body.

```http
curl -XPOST "https://api.unkey.dev/v1/keys.createKey" \
  -H "Authorization: Bearer <ROOT_KEY>" \
  -H "Content-Type: application/json" \
  -d '{"apiId": "api_123", "name": "My Key"}'
```



================================================
FILE: examples/openapi/content/docs/meta.json
================================================
{
  "pages": [
    "---API Documentation---",
    "index",
    "...",
    "---References---",
    "...(api)"
  ]
}



================================================
FILE: examples/openapi/lib/source.ts
================================================
import { createMDXSource } from 'fumadocs-mdx';
import { loader } from 'fumadocs-core/source';
import { attachFile, createOpenAPI } from 'fumadocs-openapi/server';
import { docs, meta } from '@/.source';

export const source = loader({
  baseUrl: '/docs',
  source: createMDXSource(docs, meta),
  pageTree: {
    attachFile,
  },
});

export const openapi = createOpenAPI();



================================================
FILE: examples/openapi/scripts/generate-docs.mjs
================================================
import * as OpenAPI from 'fumadocs-openapi';
import { rimraf } from 'rimraf';

const out = './content/docs/(api)';

async function generate() {
  // clean generated files
  await rimraf(out, {
    filter(v) {
      return !v.endsWith('index.mdx') && !v.endsWith('meta.json');
    },
  });

  await OpenAPI.generateFiles({
    // input files
    input: ['./openapi.json'],
    output: out,
  });
}

void generate();



================================================
FILE: examples/python/README.md
================================================
1. Use `pnpm python:generate` to generate JSON file locally using Python.
2. Use `pnpm build:docs` to generate docs



================================================
FILE: examples/python/mdx-components.tsx
================================================
import defaultMdxComponents from 'fumadocs-ui/mdx';
import type { MDXComponents } from 'mdx/types';
import * as Python from 'fumadocs-python/components';

// use this function to get MDX components, you will need it for rendering MDX
export function getMDXComponents(components?: MDXComponents): MDXComponents {
  return {
    ...defaultMdxComponents,
    ...Python,
    ...components,
  };
}



================================================
FILE: examples/python/next.config.mjs
================================================
import { createMDX } from 'fumadocs-mdx/next';

const withMDX = createMDX();

/** @type {import('next').NextConfig} */
const config = {
  reactStrictMode: true,
};

export default withMDX(config);



================================================
FILE: examples/python/package.json
================================================
{
  "name": "example-python",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "build": "pnpm build:docs && next build",
    "dev": "next dev --turbo",
    "start": "next start",
    "build:docs": "node ./scripts/generate-docs.mjs",
    "python:generate": "pip3 install ./node_modules/fumadocs-python && fumapy-generate httpx"
  },
  "dependencies": {
    "fumadocs-core": "workspace:*",
    "fumadocs-mdx": "workspace:*",
    "fumadocs-python": "workspace:*",
    "fumadocs-ui": "workspace:*",
    "next": "15.3.5",
    "react": "^19.1.0",
    "react-dom": "^19.1.0"
  },
  "devDependencies": {
    "@tailwindcss/postcss": "^4.1.11",
    "@types/mdx": "^2.0.13",
    "@types/node": "24.0.12",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "postcss": "^8.5.6",
    "tailwindcss": "^4.1.11",
    "typescript": "^5.8.3"
  }
}



================================================
FILE: examples/python/postcss.config.mjs
================================================
export default {
  plugins: {
    '@tailwindcss/postcss': {},
  },
};



================================================
FILE: examples/python/source.config.ts
================================================
import { defineDocs, defineConfig } from 'fumadocs-mdx/config';

// Options: https://fumadocs.vercel.app/docs/mdx/collections#define-docs
export const docs = defineDocs({
  dir: 'content/docs',
});

export default defineConfig({
  mdxOptions: {
    // MDX options
  },
});



================================================
FILE: examples/python/tsconfig.json
================================================
{
  "compilerOptions": {
    "baseUrl": ".",
    "target": "ESNext",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "paths": {
      "@/.source": ["./.source/index.ts"],
      "@/*": ["./*"]
    },
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
FILE: examples/python/app/global.css
================================================
@import 'tailwindcss';
@import 'fumadocs-ui/css/neutral.css';
@import 'fumadocs-ui/css/preset.css';
@import 'fumadocs-python/preset.css';



================================================
FILE: examples/python/app/layout.config.tsx
================================================
import type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';

/**
 * Shared layout configurations
 *
 * you can customise layouts individually from:
 * Home Layout: app/(home)/layout.tsx
 * Docs Layout: app/docs/layout.tsx
 */
export const baseOptions: BaseLayoutProps = {
  nav: {
    title: 'Python Docs',
  },
  links: [
    {
      text: 'Documentation',
      url: '/docs',
      active: 'nested-url',
    },
  ],
};



================================================
FILE: examples/python/app/layout.tsx
================================================
import './global.css';
import { RootProvider } from 'fumadocs-ui/provider';
import { Inter } from 'next/font/google';
import type { ReactNode } from 'react';

const inter = Inter({
  subsets: ['latin'],
});

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <html lang="en" className={inter.className} suppressHydrationWarning>
      <body className="flex flex-col min-h-screen">
        <RootProvider>{children}</RootProvider>
      </body>
    </html>
  );
}



================================================
FILE: examples/python/app/(home)/layout.tsx
================================================
import type { ReactNode } from 'react';
import { HomeLayout } from 'fumadocs-ui/layouts/home';
import { baseOptions } from '@/app/layout.config';

export default function Layout({ children }: { children: ReactNode }) {
  return <HomeLayout {...baseOptions}>{children}</HomeLayout>;
}



================================================
FILE: examples/python/app/(home)/page.tsx
================================================
import Link from 'next/link';

export default function HomePage() {
  return (
    <main className="flex flex-1 flex-col justify-center text-center">
      <h1 className="mb-4 text-2xl font-bold">Hello World</h1>
      <p className="text-fd-muted-foreground">
        You can open{' '}
        <Link
          href="/docs"
          className="text-fd-foreground font-semibold underline"
        >
          /docs
        </Link>{' '}
        and see the documentation.
      </p>
    </main>
  );
}



================================================
FILE: examples/python/app/api/search/route.ts
================================================
import { source } from '@/lib/source';
import { createFromSource } from 'fumadocs-core/search/server';

export const { GET } = createFromSource(source);



================================================
FILE: examples/python/app/docs/layout.tsx
================================================
import { DocsLayout } from 'fumadocs-ui/layouts/docs';
import type { ReactNode } from 'react';
import { baseOptions } from '@/app/layout.config';
import { source } from '@/lib/source';

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <DocsLayout tree={source.pageTree} {...baseOptions}>
      {children}
    </DocsLayout>
  );
}



================================================
FILE: examples/python/app/docs/[[...slug]]/page.tsx
================================================
import { source } from '@/lib/source';
import {
  DocsPage,
  DocsBody,
  DocsDescription,
  DocsTitle,
} from 'fumadocs-ui/page';
import { notFound } from 'next/navigation';
import { createRelativeLink } from 'fumadocs-ui/mdx';
import { getMDXComponents } from '@/mdx-components';

export default async function Page(props: {
  params: Promise<{ slug?: string[] }>;
}) {
  const params = await props.params;
  const page = source.getPage(params.slug);
  if (!page) notFound();

  const MDXContent = page.data.body;

  return (
    <DocsPage toc={page.data.toc} full={page.data.full}>
      <DocsTitle>{page.data.title}</DocsTitle>
      <DocsDescription>{page.data.description}</DocsDescription>
      <DocsBody>
        <MDXContent
          components={getMDXComponents({
            // this allows you to link to other pages with relative file paths
            a: createRelativeLink(source, page),
          })}
        />
      </DocsBody>
    </DocsPage>
  );
}

export async function generateStaticParams() {
  return source.generateParams();
}

export async function generateMetadata(props: {
  params: Promise<{ slug?: string[] }>;
}) {
  const params = await props.params;
  const page = source.getPage(params.slug);
  if (!page) notFound();

  return {
    title: page.data.title,
    description: page.data.description,
  };
}



================================================
FILE: examples/python/content/docs/index.mdx
================================================
---
title: Hello World
description: Your first document
---

Welcome to the docs! You can start writing documents in `/content/docs`.

## What is Next?

<Cards>
  <Card title="Learn more about Next.js" href="https://nextjs.org/docs" />
  <Card title="Learn more about Fumadocs" href="https://fumadocs.vercel.app" />
</Cards>



================================================
FILE: examples/python/lib/source.ts
================================================
import { docs } from '@/.source';
import { loader } from 'fumadocs-core/source';

// See https://fumadocs.vercel.app/docs/headless/source-api for more info
export const source = loader({
  // it assigns a URL to your pages
  baseUrl: '/docs',
  source: docs.toFumadocsSource(),
});



================================================
FILE: examples/python/scripts/generate-docs.mjs
================================================
import { rimraf } from 'rimraf';
import * as Python from 'fumadocs-python';
import * as fs from 'node:fs/promises';

async function generate() {
  const out = 'content/docs/httpx';
  await rimraf(out);

  const content = JSON.parse((await fs.readFile('./httpx.json')).toString());
  const converted = Python.convert(content, {
    baseUrl: '/docs',
  }).filter((file) => !file.path.startsWith('httpx/_transports'));

  await Python.write(converted, {
    outDir: out,
  });
}

void generate();



================================================
FILE: examples/react-router/package.json
================================================
{
  "name": "example-react-router",
  "private": true,
  "type": "module",
  "scripts": {
    "build": "react-router build",
    "dev": "react-router dev",
    "start": "react-router-serve ./build/server/index.js",
    "typecheck": "react-router typegen && tsc"
  },
  "dependencies": {
    "@fumadocs/mdx-remote": "workspace:*",
    "@react-router/node": "^7.6.3",
    "@react-router/serve": "^7.6.3",
    "fumadocs-core": "workspace:*",
    "fumadocs-ui": "workspace:*",
    "gray-matter": "^4.0.3",
    "isbot": "^5.1.28",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-router": "^7.6.3",
    "shiki": "^3.7.0"
  },
  "devDependencies": {
    "@react-router/dev": "^7.6.3",
    "@tailwindcss/vite": "^4.1.11",
    "@types/node": "^24.0.12",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "react-router-devtools": "^5.0.6",
    "tailwindcss": "^4.1.11",
    "typescript": "^5.8.3",
    "vite": "^7.0.3",
    "vite-tsconfig-paths": "^5.1.4"
  }
}



================================================
FILE: examples/react-router/react-router.config.ts
================================================
import type { Config } from '@react-router/dev/config';
import { source } from './app/source';

export default {
  ssr: true,
  async prerender({ getStaticPaths }) {
    return [...getStaticPaths(), ...source.getPages().map((page) => page.url)];
  },
} satisfies Config;



================================================
FILE: examples/react-router/tsconfig.json
================================================
{
  "include": [
    "**/*",
    "**/.server/**/*",
    "**/.client/**/*",
    ".react-router/types/**/*"
  ],
  "compilerOptions": {
    "lib": ["DOM", "DOM.Iterable", "ES2022"],
    "types": ["node", "vite/client"],
    "target": "esnext",
    "module": "esnext",
    "moduleResolution": "bundler",
    "jsx": "react-jsx",
    "rootDirs": [".", "./.react-router/types"],
    "baseUrl": ".",
    "paths": {
      "@/*": ["./app/*"]
    },
    "esModuleInterop": true,
    "verbatimModuleSyntax": true,
    "noEmit": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "strict": true
  }
}



================================================
FILE: examples/react-router/vite.config.ts
================================================
import { reactRouter } from '@react-router/dev/vite';
import tailwindcss from '@tailwindcss/vite';
import { defineConfig } from 'vite';
import tsconfigPaths from 'vite-tsconfig-paths';

export default defineConfig({
  build: {
    rollupOptions: {
      external: ['shiki'],
    },
  },
  plugins: [tailwindcss(), reactRouter(), tsconfigPaths()],
});



================================================
FILE: examples/react-router/app/app.css
================================================
@import 'tailwindcss';
@import 'fumadocs-ui/css/neutral.css';
@import 'fumadocs-ui/css/preset.css';



================================================
FILE: examples/react-router/app/root.tsx
================================================
import {
  isRouteErrorResponse,
  Links,
  Meta,
  Outlet,
  Scripts,
  ScrollRestoration,
} from 'react-router';
import { RootProvider } from 'fumadocs-ui/provider/base';
import { ReactRouterProvider } from 'fumadocs-core/framework/react-router';
import type { Route } from './+types/root';
import './app.css';

export const links: Route.LinksFunction = () => [
  { rel: 'preconnect', href: 'https://fonts.googleapis.com' },
  {
    rel: 'preconnect',
    href: 'https://fonts.gstatic.com',
    crossOrigin: 'anonymous',
  },
  {
    rel: 'stylesheet',
    href: 'https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap',
  },
];

export function Layout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <Meta />
        <Links />
      </head>
      <body className="flex flex-col min-h-screen">
        <ReactRouterProvider>
          <RootProvider>{children}</RootProvider>
        </ReactRouterProvider>
        <ScrollRestoration />
        <Scripts />
      </body>
    </html>
  );
}

export default function App() {
  return <Outlet />;
}

export function ErrorBoundary({ error }: Route.ErrorBoundaryProps) {
  let message = 'Oops!';
  let details = 'An unexpected error occurred.';
  let stack: string | undefined;

  if (isRouteErrorResponse(error)) {
    message = error.status === 404 ? '404' : 'Error';
    details =
      error.status === 404
        ? 'The requested page could not be found.'
        : error.statusText || details;
  } else if (import.meta.env.DEV && error && error instanceof Error) {
    details = error.message;
    stack = error.stack;
  }

  return (
    <main className="pt-16 p-4 container mx-auto">
      <h1>{message}</h1>
      <p>{details}</p>
      {stack && (
        <pre className="w-full p-4 overflow-x-auto">
          <code>{stack}</code>
        </pre>
      )}
    </main>
  );
}



================================================
FILE: examples/react-router/app/routes.ts
================================================
import { type RouteConfig, index, route } from '@react-router/dev/routes';

export default [
  index('routes/home.tsx'),
  route('docs/*', 'docs/page.tsx'),
  route('api/search', 'docs/search.ts'),
] satisfies RouteConfig;



================================================
FILE: examples/react-router/app/source.ts
================================================
import {
  loader,
  type MetaData,
  type PageData,
  type Source,
  type VirtualFile,
} from 'fumadocs-core/source';
import matter from 'gray-matter';
import * as path from 'node:path';

const files = Object.entries(
  import.meta.glob<true, 'raw'>('/content/docs/**/*', {
    eager: true,
    query: '?raw',
    import: 'default',
  }),
);

const virtualFiles: VirtualFile[] = files.flatMap(([file, content]) => {
  const ext = path.extname(file);
  const virtualPath = path.relative(
    'content/docs',
    path.join(process.cwd(), file),
  );

  if (ext === '.mdx' || ext === '.md') {
    const parsed = matter(content);

    return {
      type: 'page',
      path: virtualPath,
      data: {
        ...parsed.data,
        content: parsed.content,
      },
    };
  }

  if (ext === '.json') {
    return {
      type: 'meta',
      path: virtualPath,
      data: JSON.parse(content),
    };
  }

  return [];
});

export const source = loader({
  source: {
    files: virtualFiles,
  } as Source<{
    pageData: PageData & {
      content: string;
    };
    metaData: MetaData;
  }>,
  baseUrl: '/docs',
});



================================================
FILE: examples/react-router/app/docs/page.tsx
================================================
import type { Route } from './+types/page';
import { DocsLayout } from 'fumadocs-ui/layouts/docs';
import {
  DocsBody,
  DocsDescription,
  DocsPage,
  DocsTitle,
} from 'fumadocs-ui/page';
import { source } from '@/source';
import defaultMdxComponents from 'fumadocs-ui/mdx';
import { executeMdxSync } from '@fumadocs/mdx-remote/client';
import type { PageTree } from 'fumadocs-core/server';
import { createCompiler } from '@fumadocs/mdx-remote';
import * as path from 'node:path';

const compiler = createCompiler({
  development: false,
});

export async function loader({ params }: Route.LoaderArgs) {
  const slugs = params['*'].split('/').filter((v) => v.length > 0);
  const page = source.getPage(slugs);
  if (!page) throw new Error('Not found');

  const compiled = await compiler.compileFile({
    path: path.resolve('content/docs', page.path),
    value: page.data.content,
  });

  return {
    page,
    compiled: compiled.toString(),
    tree: source.pageTree,
  };
}

export default function Page(props: Route.ComponentProps) {
  const { page, compiled, tree } = props.loaderData;
  const { default: Mdx, toc } = executeMdxSync(compiled);

  return (
    <DocsLayout
      nav={{
        title: 'React Router',
      }}
      tree={tree as PageTree.Root}
    >
      <DocsPage toc={toc}>
        <title>{title}</title>
        <meta name="description" content={page.data.description} />
        <DocsTitle>{page.data.title}</DocsTitle>
        <DocsDescription>{page.data.description}</DocsDescription>
        <DocsBody>
          <Mdx components={defaultMdxComponents} />
        </DocsBody>
      </DocsPage>
    </DocsLayout>
  );
}



================================================
FILE: examples/react-router/app/docs/search.ts
================================================
import type { Route } from './+types/search';
import { createSearchAPI } from 'fumadocs-core/search/server';
import { source } from '@/source';
import { structure } from 'fumadocs-core/mdx-plugins';

const server = createSearchAPI('advanced', {
  indexes: source.getPages().map((page) => ({
    id: page.url,
    url: page.url,
    title: page.data.title ?? '',
    description: page.data.description,
    structuredData: structure(page.data.content),
  })),
});

export async function loader({ request }: Route.LoaderArgs) {
  return server.GET(request);
}



================================================
FILE: examples/react-router/app/routes/home.tsx
================================================
import type { Route } from './+types/home';
import { HomeLayout } from 'fumadocs-ui/layouts/home';
import { Link } from 'react-router';

export function meta({}: Route.MetaArgs) {
  return [
    { title: 'New React Router App' },
    { name: 'description', content: 'Welcome to React Router!' },
  ];
}

export default function Home() {
  return (
    <HomeLayout
      nav={{
        title: 'React Router',
      }}
    >
      <div className="p-4 flex flex-col items-center justify-center text-center flex-1">
        <h1 className="text-xl font-bold mb-2">Fumadocs on React Router.</h1>
        <p className="text-fd-muted-foreground mb-4">
          The truly flexible docs framework on React.js.
        </p>
        <Link
          className="text-sm bg-fd-primary text-fd-primary-foreground rounded-full font-medium px-4 py-2.5"
          to="/docs"
        >
          Open Docs
        </Link>
      </div>
    </HomeLayout>
  );
}



================================================
FILE: examples/react-router/content/docs/index.mdx
================================================
---
title: Hello World
description: |
  Your first `document`
  You'll love it!
---

Hey there! Fumadocs is the docs framework that also works on React Router!

## Heading

Hello World

<Cards>
  <Card title="Learn more about React Router" href="https://reactrouter.com" />
  <Card title="Learn more about Fumadocs" href="https://fumadocs.vercel.app" />
</Cards>

```ts
console.log('I love React!');
```

### Heading

#### Heading

| Head                            | Description                         |
| ------------------------------- | ----------------------------------- |
| `hello`                         | Hello World                         |
| very **important**              | Hey                                 |
| _Surprisingly_                  | Fumadocs                            |
| very long text that looks weird | hello world hello world hello world |



================================================
FILE: examples/react-router/content/docs/test.mdx
================================================
---
title: Test
description: A document to test Fumadocs
---

Hey there!

## Cards

<Cards>
  <Card title="Learn more about Next.js" href="https://nextjs.org/docs" />
  <Card title="Learn more about Fumadocs" href="https://fumadocs.vercel.app" />
</Cards>

### CodeBlock

```js
console.log('Hello World');
```

#### List

- Hello
- World



================================================
FILE: examples/react-router/content/docs/test2.mdx
================================================
---
title: Fumadocs
description: You can just be minimal.
---

## Overview

Fumadocs is a docs framework.



================================================
FILE: examples/react-router-i18n/package.json
================================================
{
  "name": "example-react-router-i18n",
  "private": true,
  "type": "module",
  "scripts": {
    "build": "react-router build",
    "dev": "react-router dev",
    "start": "react-router-serve ./build/server/index.js",
    "typecheck": "react-router typegen && tsc"
  },
  "dependencies": {
    "@fumadocs/mdx-remote": "workspace:*",
    "@orama/tokenizers": "^3.1.10",
    "@react-router/node": "^7.6.3",
    "@react-router/serve": "^7.6.3",
    "fumadocs-core": "workspace:*",
    "fumadocs-ui": "workspace:*",
    "gray-matter": "^4.0.3",
    "isbot": "^5.1.27",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-router": "^7.6.3"
  },
  "devDependencies": {
    "@react-router/dev": "^7.6.3",
    "@tailwindcss/vite": "^4.1.11",
    "@types/node": "^24.0.12",
    "@types/react": "^19.1.2",
    "@types/react-dom": "^19.1.2",
    "tailwindcss": "^4.1.11",
    "typescript": "^5.8.3",
    "vite": "^7.0.3",
    "vite-tsconfig-paths": "^5.1.4"
  }
}



================================================
FILE: examples/react-router-i18n/react-router.config.ts
================================================
import type { Config } from '@react-router/dev/config';

export default {
  ssr: true,
} satisfies Config;



================================================
FILE: examples/react-router-i18n/tsconfig.json
================================================
{
  "include": [
    "**/*",
    "**/.server/**/*",
    "**/.client/**/*",
    ".react-router/types/**/*"
  ],
  "compilerOptions": {
    "lib": ["DOM", "DOM.Iterable", "ES2022"],
    "types": ["node", "vite/client"],
    "target": "ES2022",
    "module": "ES2022",
    "moduleResolution": "bundler",
    "jsx": "react-jsx",
    "rootDirs": [".", "./.react-router/types"],
    "baseUrl": ".",
    "paths": {
      "~/*": ["./app/*"]
    },
    "esModuleInterop": true,
    "verbatimModuleSyntax": true,
    "noEmit": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "strict": true
  }
}



================================================
FILE: examples/react-router-i18n/vite.config.ts
================================================
import { reactRouter } from '@react-router/dev/vite';
import tailwindcss from '@tailwindcss/vite';
import { defineConfig } from 'vite';
import tsconfigPaths from 'vite-tsconfig-paths';

export default defineConfig({
  server: {
    port: 3000,
  },
  plugins: [tailwindcss(), reactRouter(), tsconfigPaths()],
});



================================================
FILE: examples/react-router-i18n/app/app.css
================================================
@import 'tailwindcss';
@import 'fumadocs-ui/css/neutral.css';
@import 'fumadocs-ui/css/preset.css';

@theme {
  --font-sans:
    'Inter', ui-sans-serif, system-ui, sans-serif, 'Apple Color Emoji',
    'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
}



================================================
FILE: examples/react-router-i18n/app/i18n.ts
================================================
import type { I18nConfig } from 'fumadocs-core/i18n';

export const i18n: I18nConfig = {
  defaultLanguage: 'en',
  hideLocale: 'default-locale',
  languages: ['en', 'cn'],
};



================================================
FILE: examples/react-router-i18n/app/root.tsx
================================================
import {
  isRouteErrorResponse,
  Links,
  Meta,
  Outlet,
  Scripts,
  ScrollRestoration,
  useParams,
} from 'react-router';

import type { Route } from './+types/root';
import './app.css';
import { ReactRouterProvider } from 'fumadocs-core/framework/react-router';
import { RootProvider } from 'fumadocs-ui/provider/base';
import { i18n } from '~/i18n';

export const links: Route.LinksFunction = () => [
  { rel: 'preconnect', href: 'https://fonts.googleapis.com' },
  {
    rel: 'preconnect',
    href: 'https://fonts.gstatic.com',
    crossOrigin: 'anonymous',
  },
  {
    rel: 'stylesheet',
    href: 'https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap',
  },
];

export function Layout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <Meta />
        <Links />
      </head>
      <body className="flex flex-col min-h-screen">
        <Provider>{children}</Provider>
        <ScrollRestoration />
        <Scripts />
      </body>
    </html>
  );
}

function Provider({ children }: { children: React.ReactNode }) {
  const { lang = i18n.defaultLanguage } = useParams();
  return (
    <ReactRouterProvider>
      <RootProvider
        i18n={{
          locale: lang,
          locales: [
            {
              name: 'Chinese',
              locale: 'cn',
            },
            {
              name: 'English',
              locale: 'en',
            },
          ],
        }}
      >
        {children}
      </RootProvider>
    </ReactRouterProvider>
  );
}

export default function App() {
  return <Outlet />;
}

export function ErrorBoundary({ error }: Route.ErrorBoundaryProps) {
  let message = 'Oops!';
  let details = 'An unexpected error occurred.';
  let stack: string | undefined;

  if (isRouteErrorResponse(error)) {
    message = error.status === 404 ? '404' : 'Error';
    details =
      error.status === 404
        ? 'The requested page could not be found.'
        : error.statusText || details;
  } else if (import.meta.env.DEV && error && error instanceof Error) {
    details = error.message;
    stack = error.stack;
  }

  return (
    <main className="pt-16 p-4 container mx-auto">
      <h1>{message}</h1>
      <p>{details}</p>
      {stack && (
        <pre className="w-full p-4 overflow-x-auto">
          <code>{stack}</code>
        </pre>
      )}
    </main>
  );
}



================================================
FILE: examples/react-router-i18n/app/routes.ts
================================================
import { route, type RouteConfig } from '@react-router/dev/routes';

export default [
  route(':lang?', 'routes/home.tsx'),
  route(':lang?/docs/*', './routes/docs/page.tsx'),
  route('api/search', './routes/docs/search.ts'),
] satisfies RouteConfig;



================================================
FILE: examples/react-router-i18n/app/source.ts
================================================
import {
  loader,
  type MetaData,
  type PageData,
  type Source,
  type VirtualFile,
} from 'fumadocs-core/source';
import matter from 'gray-matter';
import * as path from 'node:path';
import { i18n } from '~/i18n';

const files = Object.entries(
  import.meta.glob<true, 'raw'>('/content/docs/**/*', {
    eager: true,
    query: '?raw',
    import: 'default',
  }),
);

const virtualFiles: VirtualFile[] = files.flatMap(([file, content]) => {
  const ext = path.extname(file);
  const virtualPath = path.relative(
    'content/docs',
    path.join(process.cwd(), file),
  );

  if (ext === '.mdx' || ext === '.md') {
    const parsed = matter(content);

    return {
      type: 'page',
      path: virtualPath,
      data: {
        ...parsed.data,
        content: parsed.content,
      },
    };
  }

  if (ext === '.json') {
    return {
      type: 'meta',
      path: virtualPath,
      data: JSON.parse(content),
    };
  }

  return [];
});

export const source = loader({
  source: {
    files: virtualFiles,
  } as Source<{
    pageData: PageData & {
      content: string;
    };
    metaData: MetaData;
  }>,
  baseUrl: '/docs',
  i18n,
});



================================================
FILE: examples/react-router-i18n/app/routes/home.tsx
================================================
import type { Route } from './+types/home';
import { i18n } from '~/i18n';
import { Link } from 'react-router';
import { cn } from 'fumadocs-ui/utils/cn';
import { buttonVariants } from 'fumadocs-ui/components/ui/button';
import { HomeLayout } from 'fumadocs-ui/layouts/home';

export default function Home(props: Route.ComponentProps) {
  const { lang = i18n.defaultLanguage } = props.params;

  return (
    <HomeLayout
      nav={{
        title: 'Fumadocs React Router',
      }}
      i18n={i18n}
      className="items-center justify-center gap-4"
    >
      <h1 className="font-mono text-lg font-medium">locale: {lang}</h1>
      <Link
        to="/docs"
        className={cn(
          buttonVariants({
            color: 'primary',
          }),
        )}
      >
        Open Docs
      </Link>
    </HomeLayout>
  );
}



================================================
FILE: examples/react-router-i18n/app/routes/docs/page.tsx
================================================
import type { Route } from './+types/page';
import { DocsLayout } from 'fumadocs-ui/layouts/docs';
import {
  DocsBody,
  DocsDescription,
  DocsPage,
  DocsTitle,
} from 'fumadocs-ui/page';
import { source } from '~/source';
import defaultMdxComponents from 'fumadocs-ui/mdx';
import { executeMdxSync } from '@fumadocs/mdx-remote/client';
import type { PageTree } from 'fumadocs-core/server';
import { createCompiler } from '@fumadocs/mdx-remote';
import * as path from 'node:path';
import { i18n } from '~/i18n';

const compiler = createCompiler();

export async function loader({ params }: Route.LoaderArgs) {
  const lang = params['lang'] ?? i18n.defaultLanguage;
  const slugs = params['*'].split('/').filter((v) => v.length > 0);
  const page = source.getPage(slugs, lang);
  if (!page) throw new Error('Not found');

  const compiled = await compiler.compileFile({
    path: path.resolve('content/docs', page.path),
    value: page.data.content,
  });

  return {
    page,
    compiled: compiled.toString(),
    tree: source.getPageTree(lang),
  };
}

export default function Page(props: Route.ComponentProps) {
  const { page, compiled, tree } = props.loaderData;
  const { default: Mdx, toc } = executeMdxSync(compiled);

  return (
    <DocsLayout
      nav={{
        title: 'React Router',
      }}
      i18n={i18n}
      tree={tree as PageTree.Root}
    >
      <DocsPage toc={toc}>
        <DocsTitle>{page.data.title}</DocsTitle>
        <DocsDescription>{page.data.description}</DocsDescription>
        <DocsBody>
          <Mdx components={defaultMdxComponents} />
        </DocsBody>
      </DocsPage>
    </DocsLayout>
  );
}



================================================
FILE: examples/react-router-i18n/app/routes/docs/search.ts
================================================
import type { Route } from './+types/search';
import { createI18nSearchAPI } from 'fumadocs-core/search/server';
import { source } from '~/source';
import { structure } from 'fumadocs-core/mdx-plugins';
import { i18n } from '~/i18n';
import { createTokenizer } from '@orama/tokenizers/mandarin';

const server = createI18nSearchAPI('advanced', {
  i18n,
  localeMap: {
    cn: {
      tokenizer: createTokenizer(),
    },
  },
  indexes: source.getLanguages().flatMap((entry) => {
    return entry.pages.map((page) => ({
      id: page.url,
      url: page.url,
      title: page.data.title ?? '',
      description: page.data.description,
      structuredData: structure(page.data.content),
      locale: entry.language,
    }));
  }),
});

export async function loader({ request }: Route.LoaderArgs) {
  return server.GET(request);
}



================================================
FILE: examples/react-router-i18n/content/docs/index.cn.mdx
================================================
---
title: 我喜欢冰淇淋 (Chinese)
---

Hey there! Fumadocs is the docs framework that also works on React Router!

## Heading

Hello World

<Cards>
  <Card title="Learn more about React Router" href="https://reactrouter.com" />
  <Card title="Learn more about Fumadocs" href="https://fumadocs.vercel.app" />
</Cards>

```ts
console.log('I love React!');
```

### Heading

#### Heading

| Head                            | Description                         |
| ------------------------------- | ----------------------------------- |
| `hello`                         | Hello World                         |
| very **important**              | Hey                                 |
| _Surprisingly_                  | Fumadocs                            |
| very long text that looks weird | hello world hello world hello world |



================================================
FILE: examples/react-router-i18n/content/docs/index.mdx
================================================
---
title: Hello World
description: |
  Your first `document`
  You'll love it!
---

Hey there! Fumadocs is the docs framework that also works on React Router!

## Heading

Hello World

<Cards>
  <Card title="Learn more about React Router" href="https://reactrouter.com" />
  <Card title="Learn more about Fumadocs" href="https://fumadocs.vercel.app" />
</Cards>

```ts
console.log('I love React!');
```

### Heading

#### Heading

| Head                            | Description                         |
| ------------------------------- | ----------------------------------- |
| `hello`                         | Hello World                         |
| very **important**              | Hey                                 |
| _Surprisingly_                  | Fumadocs                            |
| very long text that looks weird | hello world hello world hello world |



================================================
FILE: examples/react-router-i18n/content/docs/test.mdx
================================================
---
title: Test
description: A document to test Fumadocs
---

Hey there!

## Cards

<Cards>
  <Card title="Learn more about Next.js" href="https://nextjs.org/docs" />
  <Card title="Learn more about Fumadocs" href="https://fumadocs.vercel.app" />
</Cards>

### CodeBlock

```js
console.log('Hello World');
```

#### List

- Hello
- World



================================================
FILE: examples/remote-mdx/next.config.ts
================================================
import type { NextConfig } from 'next';

const config: NextConfig = {
  reactStrictMode: true,
};

export default config;



================================================
FILE: examples/remote-mdx/package.json
================================================
{
  "name": "example-remote-mdx",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "build": "next build",
    "dev": "next dev",
    "start": "next start"
  },
  "dependencies": {
    "@fumadocs/mdx-remote": "workspace:*",
    "fumadocs-core": "workspace:*",
    "fumadocs-ui": "workspace:*",
    "next": "15.3.5",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "tinyglobby": "^0.2.14"
  },
  "devDependencies": {
    "@types/mdx": "^2.0.13",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "typescript": "^5.8.3"
  }
}



================================================
FILE: examples/remote-mdx/tsconfig.json
================================================
{
  "compilerOptions": {
    "baseUrl": ".",
    "target": "ESNext",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "paths": {
      "@/*": ["./*"]
    },
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "./scripts/**/*.mjs"
  ],
  "exclude": ["node_modules"]
}



================================================
FILE: examples/remote-mdx/app/layout.tsx
================================================
import { RootProvider } from 'fumadocs-ui/provider';
import 'fumadocs-ui/style.css';
import { Inter } from 'next/font/google';
import type { ReactNode } from 'react';

const inter = Inter({
  subsets: ['latin'],
});

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <html
      lang="en"
      className={inter.className}
      style={
        {
          '--fd-layout-width': '1600px',
        } as object
      }
      suppressHydrationWarning
    >
      <body>
        <RootProvider>{children}</RootProvider>
      </body>
    </html>
  );
}



================================================
FILE: examples/remote-mdx/app/page.tsx
================================================
import Link from 'next/link';

export default function HomePage() {
  return (
    <main
      style={{
        height: '100vh',
        display: 'flex',
        flexDirection: 'column',
        textAlign: 'center',
        justifyContent: 'center',
      }}
    >
      <h1
        style={{
          fontSize: '2rem',
          fontWeight: 'bold',
          marginBottom: '1rem',
        }}
      >
        Hello World
      </h1>
      <p>
        You can open{' '}
        <Link
          href="/docs"
          style={{
            fontWeight: '600',
            textDecoration: 'underline',
          }}
        >
          /docs
        </Link>{' '}
        and see the documentation.
      </p>
    </main>
  );
}



================================================
FILE: examples/remote-mdx/app/api/search/route.ts
================================================
import {
  type AdvancedIndex,
  createSearchAPI,
} from 'fumadocs-core/search/server';
import * as fs from 'node:fs/promises';
import { getPages } from '@/app/docs/utils';
import { parseFrontmatter } from '@fumadocs/mdx-remote';
import { structure } from 'fumadocs-core/mdx-plugins';

export const { GET } = createSearchAPI('advanced', {
  indexes: async () => {
    if (process.env.NODE_ENV !== 'production') {
      console.warn(
        'Firing the `/api/search` route handler will trigger all Markdown files to be parsed into build indexes, it may be slow.',
      );
    }
    const pages = await getPages();

    return Promise.all(
      pages.map(async (page) => {
        const content = (await fs.readFile(page.path)).toString();
        const { frontmatter } = parseFrontmatter(content);

        return {
          id: page.path,
          title: frontmatter.title,
          description: frontmatter.description,
          structuredData: structure(content),
          url: `/docs/${page.slug.join('/')}`,
        } satisfies AdvancedIndex;
      }),
    );
  },
});



================================================
FILE: examples/remote-mdx/app/docs/layout.tsx
================================================
import { DocsLayout } from 'fumadocs-ui/layouts/docs';
import type { ReactNode } from 'react';
import pageTree from '@/content/docs/page-tree';

export default async function Layout({ children }: { children: ReactNode }) {
  return (
    <DocsLayout tree={pageTree} nav={{ title: 'Example Docs' }}>
      {children}
    </DocsLayout>
  );
}



================================================
FILE: examples/remote-mdx/app/docs/utils.ts
================================================
import * as fs from 'node:fs/promises';
import * as path from 'node:path';
import { glob } from 'tinyglobby';

export interface Frontmatter {
  title: string;
  description?: string;
}

/**
 * Get Page content
 */
export async function getPage(slugs: string[] = []): Promise<
  | {
      path: string;
      content: string;
    }
  | undefined
> {
  try {
    let file = path.join('content', 'docs', ...slugs);

    const stats = await fs.stat(file).catch(() => null);

    if (stats && stats.isDirectory()) {
      file = path.join(file, 'index.mdx');
    } else {
      file = file + '.mdx';
    }

    return {
      path: file,
      content: (await fs.readFile(file)).toString(),
    };
  } catch {
    return undefined;
  }
}

interface Page {
  slug: string[];
  path: string;
}

export async function getPages(): Promise<Page[]> {
  const files = await glob('content/docs/**/*.mdx');

  return files.map((file) => {
    const slugs = file.split(path.sep).filter(Boolean).slice(2);

    if (slugs.length === 0) {
      return {
        path: file,
        slug: [],
      };
    }

    slugs[slugs.length - 1] = slugs[slugs.length - 1].slice(
      0,
      -path.extname(slugs[slugs.length - 1]).length,
    );
    if (slugs[slugs.length - 1] === 'index') slugs.pop();

    return {
      path: file,
      slug: slugs,
    };
  });
}



================================================
FILE: examples/remote-mdx/app/docs/[[...slug]]/page.tsx
================================================
import type { Metadata } from 'next';
import {
  DocsPage,
  DocsBody,
  DocsTitle,
  DocsDescription,
} from 'fumadocs-ui/page';
import { notFound } from 'next/navigation';
import defaultComponents from 'fumadocs-ui/mdx';
import { compileMDX, parseFrontmatter } from '@fumadocs/mdx-remote';
import { type Frontmatter, getPage, getPages } from '@/app/docs/utils';

export default async function Page(props: {
  params: Promise<{ slug?: string[] }>;
}) {
  const params = await props.params;
  const page = await getPage(params.slug);
  if (!page) notFound();

  const {
    frontmatter,
    body: MdxContent,
    toc,
  } = await compileMDX<Frontmatter>({
    filePath: page.path,
    source: page.content,
  });

  return (
    <DocsPage toc={toc}>
      <DocsTitle>{frontmatter.title}</DocsTitle>
      <DocsDescription>{frontmatter.description}</DocsDescription>
      <DocsBody>
        <MdxContent components={{ ...defaultComponents }} />
      </DocsBody>
    </DocsPage>
  );
}

export async function generateStaticParams() {
  return (await getPages()).map((page) => ({ slug: page.slug }));
}

export async function generateMetadata(props: {
  params: Promise<{ slug?: string[] }>;
}) {
  const params = await props.params;
  const page = await getPage(params.slug);
  if (!page) notFound();

  const { frontmatter } = parseFrontmatter(page.content);

  return {
    title: frontmatter.title,
  } satisfies Metadata;
}



================================================
FILE: examples/remote-mdx/content/docs/comparisons.mdx
================================================
---
title: Comparisons
description: How does Fumadocs different from other existing frameworks
---

<Callout type="info">This is for testing Fumadocs MDX Remote</Callout>

## Philosophy

Fumadocs, unlike the other frameworks, it expects you to write code and cooperate with other parts of your software.
While most frameworks are configured with a configuration file, they are usually lack of flexibility when you attempted to complete something more advanced.
You can't control how they render the page, neither the internal logic.

**Fumadocs has no magic:** It gives you the utilities and a good-looking user interface.
You are still using the features of Next.js App Router, configuring Static Site Generation same as a normal Next.js application.
There is nothing new for Next.js developers, you can use it with confidence.

For instance, in this docs, all index pages are rendered dynamically.
Feel free to take a look at the source code of this documentation.

**Opinionated on UI:** The only thing Fumadocs UI offers is **User Interface**, it is opinionated on UI for the best mobile responsibility and user experience.
The design is regularly updated, and we are welcome for feedback about the UI.

## Nextra

Fumadocs is highly inspired by Nextra. For example, the Routing Conventions. That is why
`meta.json` also exists in Fumadocs.

**However, it is not a drop-in replacement for Nextra.**

While we both support a lot of
advanced usages, Nextra is more opinionated than Fumadocs. Fumadocs is accelerated by App Router. As a result, It provides many server-side functions and you have to
configure things manually compared to simply editing a configuration file.

Fumadocs works great if you want more control over everything, such as
adding it to an existing codebase or implementing advanced routing.

### Feature Table

| Feature             | Fumadocs     | Nextra            |
| ------------------- | ------------ | ----------------- |
| Static Generation   | Yes          | Yes               |
| Cached              | Yes          | Yes               |
| Light/Dark Mode     | Yes          | Yes               |
| Syntax Highlighting | Yes          | Yes               |
| Table of Contents   | Yes          | Yes               |
| Full-text Search    | Yes          | Yes               |
| i18n                | Yes          | Yes               |
| Last Git Edit Time  | Yes          | Yes               |
| Page Icons          | Yes          | No                |
| RSC                 | Yes          | Pages Router Only |
| Remote Source       | Yes          | Not Documented    |
| SEO                 | Via Metadata | Yes               |
| Built-in Components | Yes          | Yes               |
| RTL Layout          | Yes          | Yes               |

## Docusaurus

Docusaurus is a powerful framework based on React.js. It offers many cool
features with plugins and custom themes.

### Better DX

Since Fumadocs is built on the top of Next.js, you'll have to start the Next.js dev
server everytime to review changes. And boilerplate code is relatively more
compared to Docusaurus. For a simple docs, Docusaurus might be a better choice
if you don't need any Next.js specific functionality.

### Plugins

You can easily achieve many things with plugins. Although the flexibility of Fumadocs is high, their
eco-system is larger and maintained by many contributors.

### When to use Fumadocs?

For most of the web applications, vanilla React.js is no longer enough.
Nowadays, we also wish to have a blog, a showcase page, a FAQ page, etc. With a
fancy UI that's breathtaking, in these cases, Fumadocs can help you build the
docs easier, with less boilerplate.

## We are working forward

More and more advanced features are rolling out. We currently support
multiple searching solutions including Algolia Search. A good UI and user
experience is always our priority, welcome to give us feedback via Github
discussions!



================================================
FILE: examples/remote-mdx/content/docs/index.mdx
================================================
---
title: Hello World
---

## Testing

```js
console.log('HELLO');
```

Vercel's AI SDK is a powerful tool designed to enhance the development experience by integrating artificial intelligence capabilities into applications. It allows developers to easily implement AI features, such as natural language processing, image recognition, and more, without needing extensive knowledge of machine learning.

Key features of Vercel's AI SDK include:

1. **Seamless Integration**: The SDK can be easily integrated into existing Vercel projects, allowing developers to add AI functionalities with minimal setup.

2. **Pre-built Models**: Vercel provides access to various pre-trained AI models, enabling developers to leverage advanced capabilities without the need for training their own models.

3. **Real-time Processing**: The SDK supports real-time data processing, making it suitable for applications that require immediate responses, such as chatbots or interactive user interfaces.

4. **Scalability**: Built on Vercel's serverless architecture, the AI SDK can scale effortlessly to handle varying loads, ensuring consistent performance.

5. **Documentation and Support**: Vercel offers comprehensive documentation and community support, making it easier for developers to get started and troubleshoot any issues.

Overall, Vercel's AI SDK empowers developers to create innovative applications that harness the power



================================================
FILE: examples/remote-mdx/content/docs/page-tree.ts
================================================
import { PageTree } from 'fumadocs-core/server';

export default {
  name: 'Docs',
  children: [
    {
      type: 'page',
      name: 'Home',
      url: '/docs',
    },
    {
      type: 'page',
      name: 'Comparisons',
      url: '/docs/comparisons',
    },
    {
      type: 'page',
      name: 'Test',
      url: '/docs/test',
    },
  ],
} satisfies PageTree.Root;



================================================
FILE: examples/remote-mdx/content/docs/test.mdx
================================================
---
title: Test
---

Hey!

```tsx
'use client';

import { useChat } from 'ai/react';

export default function Chat() {
  const { messages, input, handleInputChange, handleSubmit } = useChat({
    maxSteps: 5, // [!code highlight]
  });

  // ... rest of your component code
}
```



================================================
FILE: examples/tanstack-start/package.json
================================================
{
  "name": "example-tanstack-start",
  "private": true,
  "sideEffects": false,
  "type": "module",
  "scripts": {
    "dev": "vite dev",
    "build": "vite build && tsc --noEmit",
    "start": "node .output/server/index.mjs"
  },
  "dependencies": {
    "@fumadocs/mdx-remote": "workspace:*",
    "@tanstack/react-router": "^1.125.6",
    "@tanstack/react-router-devtools": "^1.125.6",
    "@tanstack/react-start": "^1.126.1",
    "fumadocs-core": "workspace:*",
    "fumadocs-ui": "workspace:*",
    "gray-matter": "^4.0.3",
    "lucide-static": "^0.525.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "tailwind-merge": "^3.3.1",
    "vite": "^7.0.3",
    "zod": "^4.0.2"
  },
  "devDependencies": {
    "@tailwindcss/vite": "^4.1.11",
    "@types/node": "^24.0.12",
    "@types/react": "^19.0.8",
    "@types/react-dom": "^19.0.3",
    "tailwindcss": "^4.1.11",
    "typescript": "^5.7.2",
    "vite-tsconfig-paths": "^5.1.4"
  }
}



================================================
FILE: examples/tanstack-start/tsconfig.json
================================================
{
  "include": ["**/*.ts", "**/*.tsx"],
  "compilerOptions": {
    "strict": true,
    "esModuleInterop": true,
    "jsx": "react-jsx",
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "lib": ["DOM", "DOM.Iterable", "ES2022"],
    "isolatedModules": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "target": "ES2022",
    "allowJs": true,
    "forceConsistentCasingInFileNames": true,
    "baseUrl": ".",
    "paths": {
      "~/*": ["./src/*"]
    },
    "noEmit": true
  }
}



================================================
FILE: examples/tanstack-start/vite.config.ts
================================================
import { tanstackStart } from '@tanstack/react-start/plugin/vite';
import { defineConfig } from 'vite';
import tsConfigPaths from 'vite-tsconfig-paths';
import tailwindcss from '@tailwindcss/vite';

export default defineConfig({
  server: {
    port: 3000,
  },
  plugins: [
    tailwindcss(),
    tsConfigPaths({
      projects: ['./tsconfig.json'],
    }),
    tanstackStart(),
  ],
});



================================================
FILE: examples/tanstack-start/.prettierignore
================================================
**/build
**/public
pnpm-lock.yaml
routeTree.gen.ts


================================================
FILE: examples/tanstack-start/content/index.mdx
================================================
---
title: Hello World
description: Your favourite docs framework.
icon: Rocket
---

Hey there! Fumadocs is a docs framework built for Next.js, but do you know it also works on Tanstack Start?

## Heading

Hello World!

<Cards>
  <Card
    title="Learn more about Tanstack Start"
    href="https://tanstack.com/start"
  />
  <Card title="Learn more about Fumadocs" href="https://fumadocs.vercel.app" />
</Cards>

### CodeBlock

```ts
console.log('Hello World');
```

#### Table

| Head                            | Description                         |
| ------------------------------- | ----------------------------------- |
| `hello`                         | Hello World                         |
| very **important**              | Hey                                 |
| _Surprisingly_                  | Fumadocs                            |
| very long text that looks weird | hello world hello world hello world |



================================================
FILE: examples/tanstack-start/content/test.mdx
================================================
---
title: Test
---

Hehe



================================================
FILE: examples/tanstack-start/src/router.tsx
================================================
import { createRouter as createTanStackRouter } from '@tanstack/react-router';
import { routeTree } from './routeTree.gen';

export function createRouter() {
  return createTanStackRouter({
    routeTree,
    defaultPreload: 'intent',
    scrollRestoration: true,
  });
}

declare module '@tanstack/react-router' {
  interface Register {
    router: ReturnType<typeof createRouter>;
  }
}



================================================
FILE: examples/tanstack-start/src/lib/source.ts
================================================
import {
  loader,
  type MetaData,
  type PageData,
  type Source,
  type VirtualFile,
} from 'fumadocs-core/source';
import matter from 'gray-matter';
import * as path from 'node:path';
import * as icons from 'lucide-static';

const files = Object.entries(
  import.meta.glob<true, 'raw'>('/content/**/*', {
    eager: true,
    query: '?raw',
    import: 'default',
  }),
);

const virtualFiles: VirtualFile[] = files.flatMap(([file, content]) => {
  const ext = path.extname(file);
  const virtualPath = path.relative('content', path.join(process.cwd(), file));

  if (ext === '.mdx' || ext === '.md') {
    const parsed = matter(content);

    return {
      type: 'page',
      path: virtualPath,
      data: {
        ...parsed.data,
        content: parsed.content,
      },
    };
  }

  if (ext === '.json') {
    return {
      type: 'meta',
      path: virtualPath,
      data: JSON.parse(content),
    };
  }

  return [];
});

export const source = loader({
  source: {
    files: virtualFiles,
  } as Source<{
    pageData: PageData & {
      content: string;
    };
    metaData: MetaData;
  }>,
  baseUrl: '/docs',
  // @ts-expect-error -- string
  icon(icon) {
    if (!icon) {
      return;
    }

    if (icon in icons) return icons[icon as keyof typeof icons];
  },
});



================================================
FILE: examples/tanstack-start/src/routes/__root.tsx
================================================
/// <reference types="vite/client" />
import {
  createRootRoute,
  HeadContent,
  Outlet,
  Scripts,
} from '@tanstack/react-router';
import * as React from 'react';
import appCss from '~/styles/app.css?url';
import { RootProvider } from 'fumadocs-ui/provider/base';
import { TanstackProvider } from 'fumadocs-core/framework/tanstack';

export const Route = createRootRoute({
  head: () => ({
    meta: [
      {
        charSet: 'utf-8',
      },
      {
        name: 'viewport',
        content: 'width=device-width, initial-scale=1',
      },
      {
        title: 'Fumadocs on TanStack Start',
      },
    ],
    links: [{ rel: 'stylesheet', href: appCss }],
  }),
  component: RootComponent,
});

function RootComponent() {
  return (
    <RootDocument>
      <Outlet />
    </RootDocument>
  );
}

function RootDocument({ children }: { children: React.ReactNode }) {
  return (
    <html suppressHydrationWarning>
      <head>
        <HeadContent />
      </head>
      <body className="flex flex-col min-h-screen">
        <TanstackProvider>
          <RootProvider>{children}</RootProvider>
        </TanstackProvider>
        <Scripts />
      </body>
    </html>
  );
}



================================================
FILE: examples/tanstack-start/src/routes/index.tsx
================================================
import { createFileRoute, Link } from '@tanstack/react-router';
import { HomeLayout } from 'fumadocs-ui/layouts/home';

export const Route = createFileRoute('/')({
  component: Home,
});

function Home() {
  return (
    <HomeLayout
      nav={{
        title: 'Tanstack Start',
      }}
      className="text-center py-32 justify-center"
    >
      <h1 className="font-medium text-xl mb-4">Fumadocs on Tanstack Start.</h1>
      <Link
        to="/docs/$"
        params={{
          _splat: '',
        }}
        className="px-3 py-2 rounded-lg bg-fd-primary text-fd-primary-foreground font-medium text-sm mx-auto"
      >
        Open Docs
      </Link>
    </HomeLayout>
  );
}



================================================
FILE: examples/tanstack-start/src/routes/api/search.ts
================================================
import { createServerFileRoute } from '@tanstack/react-start/server';
import { createSearchAPI } from 'fumadocs-core/search/server';
import { source } from '~/lib/source';
import { structure } from 'fumadocs-core/mdx-plugins';

const server = createSearchAPI('advanced', {
  indexes: source.getPages().map((page) => ({
    id: page.url,
    url: page.url,
    title: page.data.title!,
    structuredData: structure(page.data.content),
  })),
});

export const ServerRoute = createServerFileRoute('/api/search').methods({
  GET: async ({ request }) => server.GET(request),
});



================================================
FILE: examples/tanstack-start/src/routes/docs/$.tsx
================================================
import { createFileRoute, notFound } from '@tanstack/react-router';
import { executeMdxSync } from '@fumadocs/mdx-remote/client';
import { DocsLayout } from 'fumadocs-ui/layouts/docs';
import {
  DocsBody,
  DocsDescription,
  DocsPage,
  DocsTitle,
} from 'fumadocs-ui/page';
import { createServerFn } from '@tanstack/react-start';
import { createCompiler } from '@fumadocs/mdx-remote';
import { source } from '~/lib/source';
import path from 'node:path';
import defaultMdxComponents from 'fumadocs-ui/mdx';
import type { PageTree } from 'fumadocs-core/server';
import { useMemo } from 'react';

const compiler = createCompiler();

export const Route = createFileRoute('/docs/$')({
  component: Page,
  loader: async ({ params }) => {
    const slugs = (params._splat ?? '').split('/');
    return loader({ data: slugs });
  },
});

// a wrapper because we don't want `loader` to be called on client-side
const loader = createServerFn({
  method: 'GET',
})
  .validator((slugs: string[]) => slugs)
  .handler(async ({ data: slugs }) => {
    const page = source.getPage(slugs);
    if (!page) throw notFound();

    const { content, ...rest } = page.data;
    const compiled = await compiler.compileFile({
      path: path.resolve('content', page.path),
      value: content,
    });

    return {
      tree: source.pageTree as object,
      ...rest,
      compiled: compiled.toString(),
    };
  });

function Page() {
  const { compiled, ...data } = Route.useLoaderData();
  const { default: MDX, toc } = executeMdxSync(compiled);
  const tree = useMemo(() => {
    function traverse(folder: PageTree.Folder | PageTree.Root) {
      for (const node of folder.children) {
        if (node.type === 'page' && typeof node.icon === 'string') {
          node.icon = (
            <span
              dangerouslySetInnerHTML={{
                __html: node.icon,
              }}
            />
          );
        }

        if (node.type === 'folder') traverse(node);
      }
    }

    const tree = data.tree as PageTree.Root;
    traverse(tree);
    return tree;
  }, [data.tree]);

  return (
    <DocsLayout
      tree={tree}
      nav={{
        title: 'Fumadocs Tanstack',
      }}
    >
      <DocsPage toc={toc}>
        <DocsTitle>{data.title}</DocsTitle>
        <DocsDescription>{data.description}</DocsDescription>
        <DocsBody>
          <MDX
            components={{
              ...defaultMdxComponents,
            }}
          />
        </DocsBody>
      </DocsPage>
    </DocsLayout>
  );
}



================================================
FILE: examples/tanstack-start/src/styles/app.css
================================================
@import 'tailwindcss';
@import 'fumadocs-ui/css/neutral.css';
@import 'fumadocs-ui/css/preset.css';



================================================
FILE: packages/cli/CHANGELOG.md
================================================
# fumadocs

## 0.2.1

### Patch Changes

- 1b7bc4b: Add `@types/react` to optional peer dependency to avoid version conflict in monorepos

## 0.2.0

### Minor Changes

- ba35933: Support dynamic import transformation

### Patch Changes

- 1d07c67: Replace `execa` with `tinyexec` & removed unused devDeps
- ba35933: Improve dep install UI

## 0.1.1

### Patch Changes

- 482f728: add home layout to customise option

## 0.1.0

### Minor Changes

- 72a3e8c: Add customise command

## 0.0.8

### Patch Changes

- 4be74f6: Improve CLI

## 0.0.7

### Patch Changes

- a16bb23: Improve instructions in i18n plugin

## 0.0.6

### Patch Changes

- 969da26: Improve i18n api

## 0.0.5

### Patch Changes

- c8d9b08: support Next.js 15 i18n auto-config

## 0.0.4

### Patch Changes

- b254ec2: Fix Windows path problems

## 0.0.3

### Patch Changes

- 821e4a0: Fix src folder compatibility of plugins

## 0.0.2

### Patch Changes

- 9d37020: Change name of the package to avoid npm errors

## 0.0.1

### Patch Changes

- 75af7bc: Fix bin directive on index file



================================================
FILE: packages/cli/eslint.config.mjs
================================================
import library from 'eslint-config-custom/library.js';

export default [
  {
    ignores: ['dist', 'node_modules', 'test/repo', 'test/repo-2'],
  },
  ...library,
  {
    rules: {
      'import/no-relative-packages': 'off',
    },
  },
];



================================================
FILE: packages/cli/package.json
================================================
{
  "name": "@fumadocs/cli",
  "version": "0.2.1",
  "description": "The CLI tool for Fumadocs",
  "keywords": [
    "NextJs",
    "Docs",
    "Fumadocs"
  ],
  "homepage": "https://fumadocs.vercel.app",
  "repository": "github:fuma-nama/fumadocs",
  "license": "MIT",
  "author": "Fuma Nama",
  "type": "module",
  "exports": {
    "./build": {
      "import": "./dist/build/index.js",
      "types": "./dist/build/index.d.ts"
    }
  },
  "main": "./dist/index.js",
  "bin": {
    "fumadocs": "./dist/index.js"
  },
  "files": [
    "dist/*"
  ],
  "scripts": {
    "build": "tsup",
    "clean": "rimraf dist",
    "dev": "tsup --watch",
    "lint": "eslint .",
    "sync": "tsx ./scripts/sync.ts",
    "types:check": "tsc --noEmit"
  },
  "dependencies": {
    "@clack/prompts": "^0.11.0",
    "commander": "^14.0.0",
    "package-manager-detector": "^1.3.0",
    "picocolors": "^1.1.1",
    "tinyexec": "^1.0.1",
    "ts-morph": "^26.0.0"
  },
  "devDependencies": {
    "@types/node": "24.0.12",
    "eslint-config-custom": "workspace:*",
    "tsconfig": "workspace:*",
    "tsx": "^4.20.3"
  },
  "publishConfig": {
    "access": "public"
  }
}



================================================
FILE: packages/cli/tsconfig.json
================================================
{
  "extends": "tsconfig/base.json",
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    },
    "noEmit": true,
    "lib": ["ESNext"],
    "module": "ESNext",
    "target": "ES2020"
  },
  "exclude": ["node_modules", "test/repo", "test/repo-2", "eslint.config.mjs"]
}



================================================
FILE: packages/cli/tsup.config.ts
================================================
import { defineConfig } from 'tsup';
import { sync } from './scripts/sync';

console.log('[CLI] sync generated.js');
void sync();

export default defineConfig({
  entry: ['./src/index.ts', './src/build/index.ts'],
  format: 'esm',
  dts: true,
  target: 'node18',
});



================================================
FILE: packages/cli/vitest.config.ts
================================================
import { defineProject } from 'vitest/config';

export default defineProject({
  resolve: {
    alias: {
      '@/': new URL('./src/', import.meta.url).pathname,
    },
  },
});



================================================
FILE: packages/cli/scripts/sync.ts
================================================
import * as fs from 'node:fs/promises';
import path from 'node:path';

export const templates = {
  'lib/i18n': './examples/i18n/lib/i18n.ts',
  middleware: './examples/i18n/middleware.ts',

  'scripts/generate-docs': './examples/openapi/scripts/generate-docs.mjs',
};

export async function sync(): Promise<void> {
  const generated: Record<string, string> = {};

  const resolve = Object.entries(templates).map(async ([name, file]) => {
    generated[name] = await fs
      .readFile(
        // from root dir
        path.resolve('../../', file),
      )
      .then((v) => v.toString());
  });

  await Promise.all(resolve);
  const out = `
  export const generated = ${JSON.stringify(generated)}
  `;

  await fs.writeFile('./src/generated.js', out);
}

void sync();



================================================
FILE: packages/cli/src/config.ts
================================================
import fs from 'node:fs/promises';
import { isSrc } from '@/utils/is-src';

export interface Config {
  aliases?: {
    /**
     * Path for importing `cn` utility.
     *
     * Can be from Shadcn UI or your own `cn` function (Tailwind CSS supported)
     */
    cn?: string;
    uiDir?: string;
    componentsDir?: string;
    libDir?: string;
  };

  commands?: {
    /**
     * command to format output code automatically
     */
    format?: string;
  };
}

const src = await isSrc();

export const defaultConfig = {
  aliases: {
    cn: src ? './src/lib/utils.ts' : './lib/utils.ts',
    componentsDir: src ? './src/components' : './components',
    uiDir: src ? './src/components/ui' : './components/ui',
    libDir: src ? './src/lib' : './lib',
  },
} satisfies Config;

export async function loadConfig(file = './cli.json'): Promise<Config> {
  try {
    const content = await fs.readFile(file);

    return JSON.parse(content.toString()) as Config;
  } catch {
    return {};
  }
}

/**
 * Write new config, skip if a config already exists
 *
 * @returns true if the config is created, otherwise false
 */
export async function initConfig(file = './cli.json'): Promise<boolean> {
  if (
    await fs
      .stat(file)
      .then(() => true)
      .catch(() => false)
  ) {
    return false;
  }

  await fs.writeFile(file, JSON.stringify(defaultConfig, null, 2));
  return true;
}



================================================
FILE: packages/cli/src/constants.ts
================================================
export const typescriptExtensions = ['.ts', '.tsx', '.js', '.jsx'];



================================================
FILE: packages/cli/src/generated.d.ts
================================================
import { type templates } from '../scripts/sync';

export const generated: typeof templates;



================================================
FILE: packages/cli/src/index.ts
================================================
#!/usr/bin/env node
import fs from 'node:fs/promises';
import path from 'node:path';
import { Command } from 'commander';
import picocolors from 'picocolors';
import { isCancel, outro, select } from '@clack/prompts';
import { init } from '@/commands/init';
import {
  localResolver,
  remoteResolver,
  type Resolver,
} from '@/utils/add/install-component';
import { initConfig, loadConfig } from '@/config';
import { plugins } from '@/plugins';
import {
  type JsonTreeNode,
  treeToJavaScript,
  treeToMdx,
} from '@/commands/file-tree';
import { runTree } from '@/utils/file-tree/run-tree';
import packageJson from '../package.json';
import { customise } from '@/commands/customise';
import { add } from '@/commands/add';

const program = new Command().option('--config <string>');

program
  .name('fumadocs')
  .description('CLI to setup Fumadocs, init a config ')
  .version(packageJson.version)
  .action(async () => {
    if (await initConfig()) {
      console.log(picocolors.green('Initialized a `./cli.json` config file.'));
    } else {
      console.log(picocolors.redBright('A config file already exists.'));
    }
  });

program
  .command('customise')
  .alias('customize')
  .description('simple way to customise layouts with Fumadocs UI')
  .option('--dir <string>', 'the root url or directory to resolve registry')
  .action(async (options: { config?: string; dir?: string }) => {
    const resolver = getResolverFromDir(options.dir);
    await customise(resolver, await loadConfig(options.config));
  });

program
  .command('init')
  .description('init a new plugin to your docs')
  .argument('[string]', 'plugin name')
  .action(async (str: string | undefined, { config }) => {
    const loadedConfig = await loadConfig(config as string | undefined);

    if (str) {
      const plugin = str in plugins ? plugins[str] : undefined;
      if (!plugin) throw new Error(`Plugin not found: ${str}`);

      await init(plugin, loadedConfig);
      return;
    }

    const value = await select({
      message: 'Select components to install',
      options: Object.keys(plugins).map((c) => ({
        label: c,
        value: c,
      })),
    });

    if (isCancel(value)) {
      outro('Ended');
      return;
    }

    await init(plugins[value as keyof typeof plugins], loadedConfig);
  });

const dirShortcuts: Record<string, string> = {
  ':dev': 'https://preview.fumadocs.dev/registry',
  ':localhost': 'http://localhost:3000/registry',
};

program
  .command('add')
  .description('add a new component to your docs')
  .argument('[components...]', 'components to download')
  .option('--dir <string>', 'the root url or directory to resolve registry')
  .action(
    async (input: string[], options: { config?: string; dir?: string }) => {
      const resolver = getResolverFromDir(options.dir);
      await add(input, resolver, await loadConfig(options.config));
    },
  );

program
  .command('tree')
  .argument(
    '[json_or_args]',
    'JSON output of `tree` command or arguments for the `tree` command',
  )
  .argument('[output]', 'output path of file')
  .option('--js', 'output as JavaScript file')
  .option('--no-root', 'remove the root node')
  .option('--import-name <name>', 'where to import components (JS only)')
  .action(
    async (
      str: string | undefined,
      output: string | undefined,
      {
        js,
        root,
        importName,
      }: { js: boolean; root: boolean; importName?: string },
    ) => {
      const jsExtensions = ['.js', '.tsx', '.jsx'];
      const noRoot = !root;
      let nodes: JsonTreeNode[];

      try {
        nodes = JSON.parse(str ?? '') as JsonTreeNode[];
      } catch {
        nodes = await runTree(str ?? './');
      }

      const out =
        js || (output && jsExtensions.includes(path.extname(output)))
          ? treeToJavaScript(nodes, noRoot, importName)
          : treeToMdx(nodes, noRoot);

      if (output) {
        await fs.mkdir(path.dirname(output), { recursive: true });
        await fs.writeFile(output, out);
      } else {
        console.log(out);
      }
    },
  );

function getResolverFromDir(
  dir: string = 'https://fumadocs.dev/registry',
): Resolver {
  if (dir in dirShortcuts) dir = dirShortcuts[dir];

  return dir.startsWith('http://') || dir.startsWith('https://')
    ? remoteResolver(dir)
    : localResolver(dir);
}

program.parse();



================================================
FILE: packages/cli/src/commands/add.ts
================================================
import {
  intro,
  isCancel,
  log,
  multiselect,
  outro,
  spinner,
} from '@clack/prompts';
import type { OutputComponent, OutputIndex } from '@/build';
import picocolors from 'picocolors';
import type { Config } from '@/config';
import { installComponent, type Resolver } from '@/utils/add/install-component';
import { installDeps } from '@/utils/add/install-deps';

export async function add(input: string[], resolver: Resolver, config: Config) {
  let target = input;

  if (input.length === 0) {
    const spin = spinner();
    spin.start('fetching registry');
    const registry = (await resolver('_registry.json')) as
      | OutputIndex[]
      | undefined;
    spin.stop(picocolors.bold(picocolors.greenBright('registry fetched')));

    if (!registry) {
      log.error(`Failed to fetch '_registry.json' file from registry`);
      throw new Error(`Failed to fetch registry`);
    }

    const value = await multiselect({
      message: 'Select components to install',
      options: registry.map((item) => ({
        label: item.name,
        value: item.name,
        hint: item.description,
      })),
    });

    if (isCancel(value)) {
      outro('Ended');
      return;
    }

    target = value;
  }

  await install(target, resolver, config);
}

export async function install(
  target: string[],
  resolver: Resolver,
  config: Config,
) {
  const outputs: OutputComponent[] = [];

  for (const name of target) {
    intro(
      picocolors.bold(
        picocolors.inverse(picocolors.cyanBright(`Add Component: ${name}`)),
      ),
    );

    const output = await installComponent(name, resolver, config);
    if (!output) {
      log.error(`Failed to install ${name}: not found`);
      continue;
    }

    outro(picocolors.bold(picocolors.greenBright(`${name} installed`)));
    outputs.push(output);
  }

  intro(picocolors.bold('New Dependencies'));

  await installDeps(outputs);

  outro(picocolors.bold(picocolors.greenBright('Successful')));
}



================================================
FILE: packages/cli/src/commands/customise.ts
================================================
import {
  cancel,
  confirm,
  group,
  intro,
  log,
  outro,
  select,
} from '@clack/prompts';
import picocolors from 'picocolors';
import { type Resolver } from '@/utils/add/install-component';
import type { Config } from '@/config';
import { install } from '@/commands/add';

export async function customise(resolver: Resolver, config: Config) {
  intro(picocolors.bgBlack(picocolors.whiteBright('Customise Fumadocs UI')));

  const result = await group(
    {
      target: () =>
        select({
          message: 'What do you want to customise?',
          options: [
            {
              label: 'Docs Layout',
              value: 'docs',
              hint: 'main UI of your docs',
            },
            {
              label: 'Home Layout',
              value: 'home',
              hint: 'the navbar for your other pages',
            },
          ],
        }),
      mode: (v) => {
        if (v.results.target !== 'docs') return;

        return select({
          message: 'Which variant do you want to start from?',
          options: [
            {
              label: 'Start from minimal styles',
              value: 'minimal',
              hint: 'for those who want to build their own variant from ground up.',
            },
            {
              label: 'Start from default layout',
              value: 'full-default',
              hint: 'useful for adjusting small details.',
            },
            {
              label: 'Start from Notebook layout',
              value: 'full-notebook',
              hint: 'useful for adjusting small details.',
            },
          ],
        });
      },
      page: async (v) => {
        if (v.results.target !== 'docs' || v.results.mode === 'minimal')
          return false;

        return confirm({
          message: 'Do you want to customise the page component too?',
        });
      },
    },
    {
      onCancel: () => {
        cancel('Installation Stopped.');
        process.exit(0);
      },
    },
  );

  if (result.target === 'docs') {
    const targets = [];
    let pageAdded = false;
    if (result.mode === 'minimal') {
      targets.push('layouts/docs-min');
      pageAdded = true;
    } else {
      if (result.page) {
        targets.push('layouts/page');
        pageAdded = true;
      }

      targets.push(
        result.mode === 'full-default' ? 'layouts/docs' : 'layouts/notebook',
      );
    }

    await install(targets, resolver, config);

    intro(picocolors.bold('What is Next?'));
    log.info(
      [
        'You can check the installed components in `components/layouts`.',
        picocolors.dim('---'),
        'Open your `layout.tsx` files, replace the imports of components:',
        picocolors.greenBright(
          '`fumadocs-ui/layouts/docs` -> `@/components/layouts/docs`',
        ),
        pageAdded
          ? picocolors.greenBright(
              '`fumadocs-ui/page` -> `@/components/layouts/page`',
            )
          : '',
      ].join('\n'),
    );
  }

  if (result.target === 'home') {
    await install(['layouts/home'], resolver, config);
    intro(picocolors.bold('What is Next?'));

    log.info(
      [
        'You can check the installed components in `components/layouts`.',
        picocolors.dim('---'),
        'Open your `layout.tsx` files, replace the imports of components:',
        picocolors.greenBright(
          '`fumadocs-ui/layouts/home` -> `@/components/layouts/home`',
        ),
      ].join('\n'),
    );
  }

  outro(picocolors.bold('Have fun!'));
}



================================================
FILE: packages/cli/src/commands/file-tree.ts
================================================
export type JsonTreeNode =
  | {
      type: 'file';
      name: string;
    }
  | {
      type: 'directory';
      name: string;
      contents: JsonTreeNode[];
    }
  | {
      type: 'report';
    }
  | {
      type: 'link';
      name: string;
    };

const scanned = ['file', 'directory', 'link'];

export function treeToMdx(input: JsonTreeNode[], noRoot = false): string {
  function toNode(item: JsonTreeNode): string {
    if (item.type === 'file' || item.type === 'link') {
      return `<File name=${JSON.stringify(item.name)} />`;
    }

    if (item.type === 'directory') {
      if (item.contents.length === 1 && 'name' in item.contents[0]) {
        const child = item.contents[0];

        return toNode({
          ...child,
          name: `${item.name}/${child.name}`,
        });
      }

      return `<Folder name=${JSON.stringify(item.name)}>
${item.contents.map(toNode).filter(Boolean).join('\n')}
</Folder>`;
    }

    return '';
  }

  let children = input.filter((v) => scanned.includes(v.type));

  if (noRoot && children.length === 1 && input[0].type === 'directory') {
    children = input[0].contents;
  }

  return `<Files>
${children.map(toNode).filter(Boolean).join('\n')}
</Files>`;
}

export function treeToJavaScript(
  input: JsonTreeNode[],
  noRoot?: boolean,
  importName = 'fumadocs-ui/components/files',
): string {
  return `import { File, Files, Folder } from ${JSON.stringify(importName)}

export default (${treeToMdx(input, noRoot)})`;
}



================================================
FILE: packages/cli/src/commands/init.ts
================================================
import * as process from 'node:process';
import path from 'node:path';
import {
  cancel,
  confirm,
  intro,
  isCancel,
  log,
  note,
  spinner,
} from '@clack/prompts';
import picocolors from 'picocolors';
import { x } from 'tinyexec';
import { getPackageManager } from '@/utils/get-package-manager';
import { exists } from '@/utils/fs';
import { isSrc } from '@/utils/is-src';
import { type Config, defaultConfig } from '@/config';
import {
  resolveReference,
  toReferencePath,
  transformReferences,
} from '@/utils/transform-references';
import { createEmptyProject } from '@/utils/typescript';

export type Awaitable<T> = T | Promise<T>;

export interface PluginContext extends Config {
  src: boolean;

  /**
   * Original path in `files` - Transformed output path
   */
  outFileMap: Map<string, string>;
}

export interface Plugin {
  dependencies: string[];
  files: (ctx: PluginContext) => Awaitable<Record<string, string>>;
  instructions: (ctx: PluginContext) => Awaitable<
    (
      | {
          type: 'code';
          title?: string;
          code: string;
        }
      | {
          type: 'text';
          text: string;
        }
      | {
          type: 'title';
          text: string;
        }
    )[]
  >;

  transform?: (ctx: PluginContext) => Awaitable<void>;
  transformRejected?: (ctx: PluginContext) => Awaitable<void>;
}

export async function init(plugin: Plugin, config: Config = {}): Promise<void> {
  intro(
    picocolors.bgCyan(picocolors.black(picocolors.bold('Installing Plugins'))),
  );
  const ctx: PluginContext = {
    src: await isSrc(),
    outFileMap: new Map(),
    ...config,
  };

  const files = await plugin.files(ctx);
  const project = createEmptyProject();

  for (const [name, content] of Object.entries(files)) {
    const file = getOutputPath(name, ctx);
    ctx.outFileMap.set(name, file);

    log.step(picocolors.green(`Writing ${file} ★`));

    if (await exists(file)) {
      const value = await confirm({
        message: `${file} already exists`,
        active: 'Override',
        inactive: 'Skip',
      });

      if (isCancel(value)) {
        cancel('Operation cancelled.');
        process.exit(0);
      }

      if (!value) continue;
    }

    const sourceFile = project.createSourceFile(file, content, {
      overwrite: true,
    });

    transformReferences(sourceFile, (specifier) => {
      const resolved = resolveReference(specifier, {
        alias: {
          type: 'append',
          dir: ctx.src ? 'src' : '',
        },
        relativeTo: path.dirname(file),
      });

      if (resolved.type !== 'file') return;
      return toReferencePath(file, getOutputPath(resolved.path, ctx));
    });

    await sourceFile.save();
  }

  if (plugin.dependencies.length > 0) {
    const manager = await getPackageManager();

    const value = await confirm({
      message: `This plugin contains additional dependencies, do you want to install them? (detected: ${manager})`,
    });

    if (isCancel(value)) {
      cancel('Operation cancelled.');
      process.exit(0);
    }

    if (value) {
      const spin = spinner();
      spin.start('Installing dependencies');
      await x(manager, ['install', ...plugin.dependencies]);
      spin.stop('Successfully installed.');
    }
  }

  if (plugin.transform) {
    const value = await confirm({
      message:
        'This plugin contains changes to your files, do you want to apply them?',
    });

    if (isCancel(value)) {
      cancel('Operation cancelled.');
      process.exit(0);
    }

    if (value) {
      await plugin.transform(ctx);

      note(
        `You can format the output with Prettier or other code formatting tools
prettier . --write`,
        picocolors.bold(picocolors.green('Changes Applied')),
      );
    } else {
      await plugin.transformRejected?.(ctx);
    }
  }

  const instructions = await plugin.instructions(ctx);
  for (const text of instructions) {
    if (text.type === 'text') {
      log.message(text.text, {
        symbol: '○',
      });
    }

    if (text.type === 'code') {
      note(text.code, text.title);
    }

    if (text.type === 'title') {
      log.step(text.text);
    }
  }
}

/**
 * Find the transformed output path of input ref.
 *
 * extension name of `ref` is optional.
 */
function getOutputPath(ref: string, config: Config): string {
  if (path.isAbsolute(ref)) throw new Error(`path cannot be absolute: ${ref}`);

  if (ref === 'utils/cn' || ref === 'utils/cn.ts') {
    return config.aliases?.cn ?? defaultConfig.aliases.cn;
  }

  if (ref.startsWith('components')) {
    return path.join(
      config.aliases?.componentsDir ?? defaultConfig.aliases.componentsDir,
      path.relative('components', ref),
    );
  }

  if (ref.startsWith('lib') || ref.startsWith('utils')) {
    return path.join(
      config.aliases?.libDir ?? defaultConfig.aliases.libDir,
      path.relative('lib', ref),
    );
  }

  return ref;
}



================================================
FILE: packages/cli/src/plugins/i18n.ts
================================================
import path from 'node:path';
import { log } from '@clack/prompts';
import { type Plugin } from '@/commands/init';
import { generated } from '@/generated';
import { transformLayoutConfig } from '@/utils/i18n/transform-layout-config';
import { resolveAppPath } from '@/utils/is-src';
import { moveFiles } from '@/utils/move-files';
import { isRelative } from '@/utils/fs';
import { transformSourceI18n } from '@/utils/i18n/transform-source-i18n';
import { defaultConfig } from '@/config';
import { createEmptyProject } from '@/utils/typescript';
import { transformRootLayout } from '@/utils/i18n/transform-root-layout';
import picocolors from 'picocolors';

export const i18nPlugin: Plugin = {
  files: ({ src }) => ({
    'lib/i18n.ts': generated['lib/i18n'],
    [src ? 'src/middleware.ts' : 'middleware.ts']: generated.middleware,
  }),
  dependencies: [],
  instructions: () => [
    {
      type: 'title',
      text: `1. Update the params of ${picocolors.bold('page.tsx')} and ${picocolors.bold('layout.tsx')}, and make them async if necessary.`,
    },
    {
      type: 'code',
      title: 'layout.tsx',
      code: `
export default async function Layout({
  params,
}: {
  ${picocolors.underline(picocolors.bold('params: Promise<{ lang: string }>'))}
})
`.trim(),
    },
    {
      type: 'code',
      title: 'page.tsx',
      code: `
export default async function Page({
  params,
}: {
  ${picocolors.underline(picocolors.bold('params: Promise<{ lang: string; slug?: string[] }>'))}
})
`.trim(),
    },
    {
      type: 'title',
      text: '2. Update references to your `source` object',
    },
    {
      type: 'text',
      text: 'You can follow the instructions in https://fumadocs.vercel.app/docs/ui/internationalization#source section.',
    },
  ],
  async transform(ctx) {
    const project = createEmptyProject();

    await Promise.all([
      transformLayoutConfig(
        project,
        resolveAppPath('./app/layout.config.tsx', ctx.src),
      ),
      transformRootLayout(project, resolveAppPath('./app/layout.tsx', ctx.src)),
      transformSourceI18n(
        project,
        path.join(
          ctx.aliases?.libDir ?? defaultConfig.aliases.libDir,
          'source.ts',
        ),
        ctx,
      ),
    ]);

    await moveFiles(
      resolveAppPath('./app', ctx.src),
      resolveAppPath('./app/[lang]', ctx.src),
      (v) => {
        const parsed = path.parse(v);
        if (parsed.ext === '.css') return false;

        return parsed.name !== 'layout.config' && !isRelative('./app/api', v);
      },
      project,
      ctx.src,
    );

    log.success(
      'Moved the ./app files to a [lang] route group, and modified your root layout to add `<I18nProvider />`.',
    );
  },
  transformRejected() {
    log.info(
      `Please create a [lang] route group and move all special files into the folder.
See https://nextjs.org/docs/app/building-your-application/routing/internationalization for more info.`,
    );
  },
};



================================================
FILE: packages/cli/src/plugins/index.ts
================================================
import { i18nPlugin } from '@/plugins/i18n';
import { openapiPlugin } from '@/plugins/openapi';
import { type Plugin } from '@/commands/init';

export const plugins: Record<string, Plugin> = {
  i18n: i18nPlugin,
  openapi: openapiPlugin,
};



================================================
FILE: packages/cli/src/plugins/openapi.ts
================================================
import fs from 'node:fs/promises';
import path from 'node:path';
import { type Project, StructureKind } from 'ts-morph';
import { type Plugin } from '@/commands/init';
import { createEmptyProject } from '@/utils/typescript';
import { generated } from '@/generated';
import { getPackageManager } from '@/utils/get-package-manager';
import { transformTailwind } from '@/utils/transform-tailwind';
import { type Config, defaultConfig } from '@/config';

export const openapiPlugin: Plugin = {
  files: () => ({
    'scripts/generate-docs.mjs': generated['scripts/generate-docs'],
  }),
  dependencies: ['fumadocs-openapi', 'rimraf', 'shiki'],
  async transform(ctx) {
    const project = createEmptyProject();

    await Promise.all([
      transformSource(project, ctx),
      transformTailwind(project, {
        addContents: [`./node_modules/fumadocs-openapi/dist/**/*.js`],
      }),
      addScript(),
    ]);
  },
  instructions: async () => [
    {
      type: 'text',
      text: `I've made some changes to your Tailwind CSS config.
You can add the APIPage component to your page.tsx:`,
    },
    {
      type: 'code',
      title: 'page.tsx',
      code: `import defaultMdxComponents from 'fumadocs-ui/mdx';
import { openapi } from '@/lib/source';
 
<MDX
  components={{
    ...defaultMdxComponents,
    APIPage: openapi.APIPage,
  }}
/>;`,
    },
    {
      type: 'text',
      text: `Paste your OpenAPI schema to ./openapi.json, and use this script to generate docs:`,
    },
    {
      type: 'code',
      title: 'Terminal',
      code: `${await getPackageManager()} run build:docs`,
    },
  ],
};

async function addScript(): Promise<void> {
  const content = await fs.readFile('package.json');
  const parsed = JSON.parse(content.toString()) as Record<string, unknown>;

  if (typeof parsed.scripts !== 'object') return;

  parsed.scripts ??= {};
  Object.assign(parsed.scripts ?? {}, {
    'build:docs': 'node ./scripts/generate-docs.mjs',
  });

  await fs.writeFile('package.json', JSON.stringify(parsed, null, 2));
}

async function transformSource(
  project: Project,
  config: Config,
): Promise<void> {
  const source = path.join(
    config.aliases?.libDir ?? defaultConfig.aliases.libDir,
    'source.ts',
  );
  const content = await fs.readFile(source).catch(() => '');
  const file = project.createSourceFile(source, content.toString(), {
    overwrite: true,
  });

  file.addImportDeclaration({
    kind: StructureKind.ImportDeclaration,
    namedImports: ['createOpenAPI'],
    moduleSpecifier: 'fumadocs-openapi/server',
  });

  file.addStatements(`export const openapi = createOpenAPI();`);
  await file.save();
}



================================================
FILE: packages/cli/src/utils/fs.ts
================================================
import fs from 'node:fs/promises';
import path from 'node:path';

export async function exists(pathLike: string): Promise<boolean> {
  try {
    await fs.access(pathLike);
    return true;
  } catch {
    return false;
  }
}

export function isRelative(from: string, to: string): boolean {
  return !path.relative(from, to).startsWith(`..${path.sep}`);
}



================================================
FILE: packages/cli/src/utils/get-package-manager.ts
================================================
import { detect, type AgentName } from 'package-manager-detector';

export type PackageManager = AgentName;

export async function getPackageManager(): Promise<PackageManager> {
  const result = await detect();

  return result?.name ?? 'npm';
}



================================================
FILE: packages/cli/src/utils/is-src.ts
================================================
import path from 'node:path';
import { exists } from '@/utils/fs';

export async function isSrc(): Promise<boolean> {
  return exists('./src');
}

export function resolveAppPath(filePath: string, src: boolean): string {
  return src ? path.join('./src', filePath) : filePath;
}



================================================
FILE: packages/cli/src/utils/move-files.ts
================================================
import fs from 'node:fs/promises';
import path from 'node:path';
import { type Project } from 'ts-morph';
import { isRelative } from '@/utils/fs';
import {
  resolveReference,
  toReferencePath,
  transformReferences,
} from '@/utils/transform-references';

const transformExtensions = ['.js', '.ts', '.tsx', '.jsx'];

/**
 * Move files from directory to another directory
 *
 * And update imports is needed
 */
export async function moveFiles(
  from: string,
  to: string,
  filter: (file: string) => boolean,
  project: Project,
  src: boolean,
  /**
   * the original directory to move files from
   */
  originalDir = from,
) {
  function isIncluded(file: string) {
    // moving files that can't be refactored will cause issues, e.g. relative paths in CSS file being overlooked
    if (!transformExtensions.includes(path.extname(file))) return false;

    return filter(path.resolve(file));
  }

  const stats = await fs.lstat(from).catch(() => undefined);
  if (!stats) return;

  if (stats.isDirectory()) {
    const items = await fs.readdir(from);

    await Promise.all(
      items.map(async (item) => {
        await moveFiles(
          path.join(from, item),
          path.join(to, item),
          filter,
          project,
          src,
          originalDir,
        );
      }),
    );

    await fs.rmdir(from).catch(() => {
      // it is possible that some files are ignored, so the directory isn't empty
    });
  }

  if (!stats.isFile() || !isIncluded(from)) return;

  const content = await fs.readFile(from);
  const sourceFile = project.createSourceFile(from, content.toString(), {
    overwrite: true,
  });

  transformReferences(sourceFile, (specifier) => {
    const resolved = resolveReference(specifier, {
      alias: {
        type: 'append',
        dir: src ? 'src' : '',
      },
      relativeTo: path.dirname(from),
    });
    if (resolved.type !== 'file') return;
    if (
      // ignore if the file is also moved
      isRelative(originalDir, from) &&
      isIncluded(resolved.path)
    )
      return;

    return toReferencePath(to, resolved.path);
  });

  await sourceFile.save();
  await fs.mkdir(path.dirname(to), { recursive: true });
  await fs.rename(from, to);
}



================================================
FILE: packages/cli/src/utils/transform-references.ts
================================================
import path from 'node:path';
import { type SourceFile } from 'ts-morph';
import { typescriptExtensions } from '@/constants';

/**
 * Transform references to other files (e.g. import/export from)
 *
 * @param file - source file
 * @param transform - a function that transforms module specifier
 */
export function transformReferences(
  file: SourceFile,
  transform: (specifier: string) => string | undefined,
) {
  for (const specifier of file.getImportStringLiterals()) {
    const result = transform(specifier.getLiteralValue());
    if (!result) continue;

    specifier.setLiteralValue(result);
  }
}

/**
 * Return the import modifier for `sourceFile` to import `referenceFile`
 *
 * @example
 * ```ts
 * toReferencePath('index.ts', 'dir/hello.ts')
 * // should output './dir/hello'
 * ```
 */
export function toReferencePath(
  sourceFile: string,
  referenceFile: string,
): string {
  const extname = path.extname(referenceFile);
  const importPath = path
    .relative(
      path.dirname(sourceFile),
      path.join(
        path.dirname(referenceFile),
        path.basename(
          referenceFile,
          typescriptExtensions.includes(extname) ? extname : undefined,
        ),
      ),
    )
    .replaceAll(path.sep, '/');

  return importPath.startsWith('../') ? importPath : `./${importPath}`;
}

export type ResolvedImport =
  | {
      type: 'dep';
      name: string;
    }
  | {
      type: 'file';
      /**
       * Path relative to root directory (without ext)
       */
      path: string;
    };

export interface ReferenceResolver {
  /**
   * Transform import aliases (e.g. `@/components`)
   */
  alias?: {
    type: 'append';
    dir: string;
  };

  /**
   * which directory to resolve relative paths from (e.g. `./components`)
   */
  relativeTo: string;
}

/**
 * Get information from references (e.g. import/export from)
 */
export function resolveReference(
  ref: string,
  resolver: ReferenceResolver,
): ResolvedImport {
  if (ref.startsWith('./') || ref.startsWith('../')) {
    return {
      type: 'file',
      path: path.join(resolver.relativeTo, ref),
    };
  }

  if (ref.startsWith('@/')) {
    const rest = ref.slice('@/'.length);
    if (!resolver.alias) throw new Error('alias resolver is not configured');

    return {
      type: 'file',
      path: path.join(resolver.alias.dir, rest),
    };
  }

  if (ref.startsWith('@')) {
    const segments = ref.split('/');

    return {
      type: 'dep',
      name: segments.slice(0, 2).join('/'),
    };
  }

  return {
    type: 'dep',
    name: ref.split('/')[0],
  };
}



================================================
FILE: packages/cli/src/utils/transform-tailwind.ts
================================================
import fs from 'node:fs/promises';
import { type Project, SyntaxKind } from 'ts-morph';
import { log } from '@clack/prompts';
import { exists } from '@/utils/fs';

const tailwindConfigPaths = [
  'tailwind.config.js',
  'tailwind.config.mjs',
  'tailwind.config.ts',
  'tailwind.config.mts',
];

async function findTailwindConfig(): Promise<string | undefined> {
  for (const configPath of tailwindConfigPaths) {
    if (await exists(configPath)) {
      return configPath;
    }
  }
}

export async function transformTailwind(
  project: Project,
  options: {
    addContents: string[];
  },
): Promise<void> {
  const file = await findTailwindConfig();

  if (!file) {
    log.error(
      'Cannot find Tailwind CSS configuration file, Tailwind CSS is required for this.',
    );
    return;
  }

  const configFile = project.createSourceFile(
    file,
    await fs.readFile(file).then((res) => res.toString()),
    { overwrite: true },
  );

  const exports = configFile.getExportAssignments();
  if (exports.length === 0) return;

  const contentNode = exports[0]
    .getDescendantsOfKind(SyntaxKind.PropertyAssignment)
    .find((a) => a.getName() === 'content');

  if (!contentNode) throw new Error('No `content` detected');
  const arr = contentNode.getFirstDescendantByKind(
    SyntaxKind.ArrayLiteralExpression,
  );

  arr?.addElements(options.addContents.map((v) => JSON.stringify(v)));
  await configFile.save();
}



================================================
FILE: packages/cli/src/utils/typescript.ts
================================================
import { Project } from 'ts-morph';

export function createEmptyProject(): Project {
  return new Project({
    compilerOptions: {},
  });
}



================================================
FILE: packages/cli/src/utils/add/get-deps.ts
================================================
import fs from 'node:fs/promises';
import { exists } from '@/utils/fs';

/**
 * Get dependencies from `package.json`
 */
export async function getDeps(): Promise<Map<string, string>> {
  const dependencies = new Map<string, string>();

  if (!(await exists('package.json'))) return dependencies;

  const content = await fs.readFile('package.json');
  const parsed = JSON.parse(content.toString()) as object;

  if ('dependencies' in parsed && typeof parsed.dependencies === 'object') {
    const records = parsed.dependencies as Record<string, string>;

    Object.entries(records).forEach(([k, v]) => {
      dependencies.set(k, v);
    });
  }

  if (
    'devDependencies' in parsed &&
    typeof parsed.devDependencies === 'object'
  ) {
    const records = parsed.devDependencies as Record<string, string>;

    Object.entries(records).forEach(([k, v]) => {
      dependencies.set(k, v);
    });
  }

  return dependencies;
}



================================================
FILE: packages/cli/src/utils/add/install-component.ts
================================================
import path from 'node:path';
import fs from 'node:fs/promises';
import { confirm, isCancel, log, outro } from '@clack/prompts';
import { type Project } from 'ts-morph';
import { createEmptyProject } from '@/utils/typescript';
import { type Config, defaultConfig } from '@/config';
import { typescriptExtensions } from '@/constants';
import {
  type NamespaceType,
  type OutputComponent,
  type OutputFile,
} from '@/build';
import { type Awaitable } from '@/commands/init';
import {
  toReferencePath,
  transformReferences,
} from '@/utils/transform-references';

interface Context {
  config: Config;
  project: Project;

  resolver: Resolver;
}

export type Resolver = (file: string) => Awaitable<object | undefined>;

/**
 * A set of downloaded files
 */
const downloadedFiles = new Set<string>();

export async function installComponent(
  name: string,
  resolver: Resolver,
  config: Config = {},
): Promise<OutputComponent | undefined> {
  const project = createEmptyProject();

  return downloadComponent(name, {
    project,
    config,
    resolver,
  });
}

const downloadedComps = new Map<string, OutputComponent>();
async function downloadComponent(
  name: string,
  ctx: Context,
): Promise<OutputComponent | undefined> {
  const cached = downloadedComps.get(name);
  if (cached) return cached;

  const comp = (await ctx.resolver(`${name}.json`)) as
    | OutputComponent
    | undefined;
  if (!comp) return;

  downloadedComps.set(name, comp);

  for (const file of comp.files) {
    if (downloadedFiles.has(file.path)) continue;

    const outPath = resolveOutputPath(file.path, ctx.config);
    const output = typescriptExtensions.includes(path.extname(file.path))
      ? transformTypeScript(outPath, file, ctx)
      : file.content;

    let canWrite = true;
    const requireOverride = await fs
      .readFile(outPath)
      .then((res) => res.toString() !== output)
      .catch(() => false);

    if (requireOverride) {
      const value = await confirm({
        message: `Do you want to override ${outPath}?`,
      });

      if (isCancel(value)) {
        outro('Ended');
        process.exit(0);
      }

      canWrite = value;
    }

    if (canWrite) {
      await fs.mkdir(path.dirname(outPath), { recursive: true });
      await fs.writeFile(outPath, output);
      log.step(`downloaded ${outPath}`);
    }

    downloadedFiles.add(file.path);
  }

  for (const sub of comp.subComponents) {
    const downloaded = await downloadComponent(sub, ctx);
    if (!downloaded) continue;

    Object.assign(comp.dependencies, downloaded.dependencies);
    Object.assign(comp.devDependencies, downloaded.devDependencies);
  }

  return comp;
}

function resolveOutputPath(ref: string, config: Config): string {
  const sep = ref.indexOf(':');
  if (sep === -1) return ref;

  const namespace = ref.slice(0, sep) as NamespaceType,
    file = ref.slice(sep + 1);

  if (namespace === 'components') {
    return path.join(
      config.aliases?.componentsDir ?? defaultConfig.aliases.componentsDir,
      file,
    );
  }

  return path.join(
    config.aliases?.libDir ?? defaultConfig.aliases.libDir,
    file,
  );
}

function transformTypeScript(
  filePath: string,
  file: OutputFile,
  ctx: Context,
): string {
  const sourceFile = ctx.project.createSourceFile(filePath, file.content, {
    overwrite: true,
  });

  transformReferences(sourceFile, (specifier) => {
    if (specifier in file.imports) {
      const outputPath = resolveOutputPath(file.imports[specifier], ctx.config);
      return toReferencePath(filePath, outputPath);
    }
  });

  return sourceFile.getFullText();
}

export function remoteResolver(url: string): Resolver {
  return async (file) => {
    const res = await fetch(`${url}/${file}`);
    if (!res.ok) return;

    return res.json();
  };
}

export function localResolver(dir: string): Resolver {
  return async (file) => {
    return await fs
      .readFile(path.join(dir, file))
      .then((res) => JSON.parse(res.toString()) as OutputComponent)
      .catch(() => undefined);
  };
}



================================================
FILE: packages/cli/src/utils/add/install-deps.ts
================================================
import { getPackageManager } from '@/utils/get-package-manager';
import { confirm, isCancel, spinner } from '@clack/prompts';
import { x } from 'tinyexec';
import type { OutputComponent } from '@/build';
import { getDeps } from '@/utils/add/get-deps';

export async function installDeps(results: OutputComponent[]) {
  const installed = await getDeps();
  const deps: Record<string, string> = {};
  const devDeps: Record<string, string> = {};

  for (const result of results) {
    Object.assign(deps, result.dependencies);
    Object.assign(devDeps, result.devDependencies);
  }

  const items = Object.entries(deps)
    .filter(([k]) => !installed.has(k))
    .map(([k, v]) => (v.length === 0 ? k : `${k}@${v}`));

  const devItems = Object.entries(devDeps)
    .filter(([k]) => !installed.has(k))
    .map(([k, v]) => (v.length === 0 ? k : `${k}@${v}`));

  if (items.length > 0 || devItems.length > 0) {
    const manager = await getPackageManager();
    const value = await confirm({
      message: `Do you want to install with ${manager}?
${[...items, ...devItems].map((v) => `- ${v}`).join('\n')}`,
    });

    if (isCancel(value)) {
      return;
    }

    if (value) {
      const spin = spinner();
      spin.start('Installing dependencies...');
      if (items.length > 0) await x(manager, ['install', ...items]);
      if (devItems.length > 0) await x(manager, ['install', ...devItems, '-D']);

      spin.stop('Dependencies installed.');
    }
  }
}



================================================
FILE: packages/cli/src/utils/file-tree/run-tree.ts
================================================
import { x } from 'tinyexec';
import type { JsonTreeNode } from '@/commands/file-tree';

export async function runTree(args: string): Promise<JsonTreeNode[]> {
  const out = await x('tree', [args, '--gitignore', '--prune', '-J']);

  try {
    return JSON.parse(out.stdout) as JsonTreeNode[];
  } catch (e) {
    throw new Error('failed to run `tree` command', {
      cause: e,
    });
  }
}



================================================
FILE: packages/cli/src/utils/i18n/transform-layout-config.ts
================================================
import fs from 'node:fs/promises';
import { type Project, SyntaxKind } from 'ts-morph';

export async function transformLayoutConfig(
  project: Project,
  filePath: string,
): Promise<void> {
  let content: string;

  try {
    content = await fs.readFile(filePath).then((res) => res.toString());
  } catch {
    return;
  }

  const sourceFile = project.createSourceFile(filePath, content, {
    overwrite: true,
  });

  const configExport = sourceFile
    .getDescendantsOfKind(SyntaxKind.VariableDeclaration)
    .find((node) => node.getName() === 'baseOptions');

  if (!configExport) return;

  const init = configExport.getInitializerIfKind(
    SyntaxKind.ObjectLiteralExpression,
  );
  if (!init) return;
  if (init.getProperty('i18n')) return;

  init.addPropertyAssignment({
    name: 'i18n',
    initializer: 'true',
  });

  return sourceFile.save();
}



================================================
FILE: packages/cli/src/utils/i18n/transform-root-layout.ts
================================================
import fs from 'node:fs/promises';
import { type Project, type SourceFile, StructureKind, ts } from 'ts-morph';
import ScriptKind = ts.ScriptKind;
import SyntaxKind = ts.SyntaxKind;

export async function transformRootLayout(
  project: Project,
  filePath: string,
): Promise<void> {
  let content: string;

  try {
    content = await fs.readFile(filePath).then((res) => res.toString());
  } catch {
    return;
  }

  const sourceFile = project.createSourceFile(filePath, content, {
    overwrite: true,
    scriptKind: ScriptKind.TSX,
  });

  runTransform(sourceFile);

  return sourceFile.save();
}

export function runTransform(sourceFile: SourceFile): void {
  const rootProvider = sourceFile
    .getDescendantsOfKind(SyntaxKind.JsxElement)
    .find(
      (node) =>
        node.getOpeningElement().getTagNameNode().getFullText() ===
        'RootProvider',
    );

  if (!rootProvider) return;

  const parent = rootProvider.getParentIfKind(SyntaxKind.JsxElement);

  if (parent) {
    const inner = parent
      .getJsxChildren()
      .map((v) => v.getFullText())
      .filter((v) => v.length > 0)
      .join('\n');

    parent.setBodyText(
      `<I18nProvider locale={(await params).lang} locales={[
    { locale: 'en', name: 'English' }
]}>
  ${inner.trim()}
</I18nProvider>`,
    );

    sourceFile.addImportDeclaration({
      kind: StructureKind.ImportDeclaration,
      moduleSpecifier: 'fumadocs-ui/i18n',
      namedImports: ['I18nProvider'],
    });
  }

  // add types for `params`
  const func = sourceFile
    .getDescendantsOfKind(SyntaxKind.FunctionDeclaration)
    .find((v) => v.isDefaultExport());
  func?.toggleModifier('async', true);

  const param = func?.getParameters().at(0);
  param?.setType(`{ params: Promise<{ lang: string }>, children: ReactNode }`);
  param?.set({
    name: `{ params, children }`,
  });
}



================================================
FILE: packages/cli/src/utils/i18n/transform-source-i18n.ts
================================================
import * as fs from 'node:fs/promises';
import path from 'node:path';
import { type Project, StructureKind, SyntaxKind } from 'ts-morph';
import { toReferencePath } from '@/utils/transform-references';
import { type Config, defaultConfig } from '@/config';

export async function transformSourceI18n(
  project: Project,
  filePath: string,
  config: Config,
): Promise<void> {
  let content: string;

  try {
    content = await fs.readFile(filePath).then((res) => res.toString());
  } catch {
    return;
  }
  const sourceFile = project.createSourceFile(filePath, content, {
    overwrite: true,
  });

  sourceFile.addImportDeclaration({
    kind: StructureKind.ImportDeclaration,
    moduleSpecifier: toReferencePath(
      filePath,
      path.join(config.aliases?.libDir ?? defaultConfig.aliases.libDir, 'i18n'),
    ),
    namedImports: ['i18n'],
  });

  const sourceExport = sourceFile
    .getDescendantsOfKind(SyntaxKind.VariableDeclaration)
    .find((node) => node.getName() === 'source');

  if (!sourceExport) return;

  const loaderCall = sourceExport.getFirstDescendantByKind(
    SyntaxKind.ObjectLiteralExpression,
  );

  if (!loaderCall || loaderCall.getProperty('i18n')) return;

  loaderCall.addPropertyAssignment({
    name: 'i18n',
    initializer: 'i18n',
  });

  return sourceFile.save();
}



================================================
FILE: packages/cli/test/index.test.ts
================================================
import path from 'node:path';
import fs from 'node:fs/promises';
import { expect, test } from 'vitest';
import { runTransform } from '@/utils/i18n/transform-root-layout';
import { createEmptyProject } from '@/utils/typescript';
import { build } from '@/build/build-registry';
import * as repo from './repo/registry';
import * as repo2 from './repo-2/registry';

const project = createEmptyProject();

test('transform layout: i18n', { timeout: 1000 * 15 }, async () => {
  const sourceFile = project.createSourceFile(
    'layout.tsx',
    await fs
      .readFile(path.join(__dirname, './fixture/layout'))
      .then((r) => r.toString()),
  );

  runTransform(sourceFile);
  await expect(sourceFile.getFullText()).toMatchFileSnapshot(
    './fixture/layout.out',
  );
});

test('build registry', { timeout: 1000 * 15 }, async () => {
  const out = await build(repo.registry);

  await expect(JSON.stringify(out.index, null, 2)).toMatchFileSnapshot(
    `./out/repo/_registry.json`,
  );

  for (const comp of out.components) {
    await expect(JSON.stringify(comp, null, 2)).toMatchFileSnapshot(
      `./out/repo/${comp.name}.json`,
    );
  }
});

test('build registry: extended', { timeout: 1000 * 15 }, async () => {
  const out = await build(repo2.registry);

  await expect(JSON.stringify(out.index, null, 2)).toMatchFileSnapshot(
    `./out/extended/_registry.json`,
  );

  for (const comp of out.components) {
    await expect(JSON.stringify(comp, null, 2)).toMatchFileSnapshot(
      `./out/extended/${comp.name}.json`,
    );
  }
});



================================================
FILE: packages/cli/test/fixture/layout
================================================
import './global.css';
import { RootProvider } from 'fumadocs-ui/provider';
import { Inter } from 'next/font/google';
import type { ReactNode } from 'react';

const inter = Inter({
  subsets: ['latin'],
});

export default function Layout({
  children,
}: {
  children: ReactNode;
}) {
  return (
    <html lang="en" className={inter.className} suppressHydrationWarning>
      <body>
        <RootProvider>{children}</RootProvider>
      </body>
    </html>
  );
}



================================================
FILE: packages/cli/test/repo/package.json
================================================
{
  "name": "test-registry-1",
  "version": "0.0.0",
  "dependencies": {
    "react": "^18.3.1"
  },
  "devDependencies": {
    "@types/react": "^18.3.11"
  }
}



================================================
FILE: packages/cli/test/repo/registry.ts
================================================
import { fileURLToPath } from 'node:url';
import { type Registry } from '../../src/build';
import * as path from 'node:path';

export const registry: Registry = {
  dir: path.dirname(fileURLToPath(import.meta.url)),
  rootDir: '.',
  namespaces: {
    './components': 'components',
    './utils': 'lib',
    './hooks': 'hooks',
  },
  components: [
    {
      name: 'button',
      unlisted: true,
      files: ['components/button.tsx'],
    },
    {
      name: 'popover',
      description: 'Popover component',
      files: ['components/popover.tsx'],
    },
  ],
};



================================================
FILE: packages/cli/test/repo/tsconfig.json
================================================
{
  "compilerOptions": {
    "baseUrl": ".",
    "target": "ESNext",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}



================================================
FILE: packages/cli/test/repo/components/button.tsx
================================================
export function Button(): string {
  return 'Hello';
}



================================================
FILE: packages/cli/test/repo/components/popover.tsx
================================================
'use client';
import * as fs from 'node:fs';
import { createContext } from 'react';
import { useExample } from '../hooks/use-example';
import { Button } from './button';
import { Hello } from './nested/hello';

const Context = createContext('test');

export function Popover(): string {
  console.log('This component uses button.');
  const res = useExample();
  console.log(res);
  Hello();

  return Button();
}

export function externalImports(): void {
  fs.writeFileSync('path', 'content');
  console.log(Context);
}



================================================
FILE: packages/cli/test/repo/components/nested/hello.tsx
================================================
export function Hello(): string {
  return 'Hello';
}



================================================
FILE: packages/cli/test/repo/hooks/use-example.ts
================================================
export function useExample(): string {
  return 'test';
}



================================================
FILE: packages/cli/test/repo/utils/example-util.ts
================================================
export function print(): void {
  console.log('Hello World');
}



================================================
FILE: packages/cli/test/repo-2/package.json
================================================
{
  "name": "test-registry-2",
  "version": "0.0.0"
}



================================================
FILE: packages/cli/test/repo-2/registry.ts
================================================
import { fileURLToPath } from 'node:url';
import { type Registry } from '../../src/build';
import * as ui from '../repo/registry';
import * as path from 'node:path';

export const registry: Registry = {
  dir: path.dirname(fileURLToPath(import.meta.url)),
  on: {
    ui: {
      type: 'local',
      registry: ui.registry,
    },
  },
  rootDir: '.',
  namespaces: {
    './components': 'components',
    './utils': 'lib',
    './hooks': 'hooks',
  },
  components: [
    {
      name: 'select',
      files: ['components/select.ts'],
      mapImportPath: {
        '../repo/components/button.tsx': {
          type: 'component',
          registry: 'ui',
          name: 'button',
          file: 'components/button.tsx',
        },
      },
    },
  ],
};



================================================
FILE: packages/cli/test/repo-2/tsconfig.json
================================================
{
  "compilerOptions": {
    "baseUrl": ".",
    "target": "ESNext",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}



================================================
FILE: packages/cli/test/repo-2/components/select.ts
================================================
import { Button } from '../../repo/components/button';

export function Select(): string {
  return Button();
}



================================================
FILE: packages/content-collections/README.md
================================================
# Fumadocs Content Collections

The Content Collections adapter for Fumadocs.



================================================
FILE: packages/content-collections/CHANGELOG.md
================================================
# @fumadocs/content-collections

## 1.2.1

### Patch Changes

- 1b7bc4b: Add `@types/react` to optional peer dependency to avoid version conflict in monorepos
- Updated dependencies [7a45921]
- Updated dependencies [1b7bc4b]
  - fumadocs-core@15.5.2

## 1.2.0

### Minor Changes

- 7b4a505: Add `remarkCodeTab` by default

### Patch Changes

- df244e8: Prepare for Content Collections v1
  - fumadocs-core@15.3.4

## 1.1.8

### Patch Changes

- a06af26: Support pages without `title`
- Updated dependencies [08236e1]
- Updated dependencies [a06af26]
  - fumadocs-core@15.0.6

## 1.1.7

### Patch Changes

- a89d6e0: Support Fumadocs v15
- Updated dependencies [5b8cca8]
- Updated dependencies [a763058]
- Updated dependencies [581f4a5]
  - fumadocs-core@15.0.0

## 1.1.6

### Patch Changes

- 3550efc: Fix remark image default config
  - fumadocs-core@14.6.3

## 1.1.5

### Patch Changes

- 8ef00dc: Improve types
- be820c4: Bump deps
- Updated dependencies [e45bc67]
- Updated dependencies [d9e908e]
- Updated dependencies [d9e908e]
- Updated dependencies [f949520]
- Updated dependencies [9a0b09f]
- Updated dependencies [9a0b09f]
- Updated dependencies [367f4c3]
- Updated dependencies [e1ee822]
- Updated dependencies [e612f2a]
- Updated dependencies [9a0b09f]
- Updated dependencies [d9e908e]
- Updated dependencies [8ef00dc]
- Updated dependencies [979e301]
- Updated dependencies [d9e908e]
- Updated dependencies [979e301]
- Updated dependencies [15781f0]
- Updated dependencies [be820c4]
- Updated dependencies [d9e908e]
  - fumadocs-core@14.0.0

## 1.1.4

### Patch Changes

- 0c251e5: Bump deps
- Updated dependencies [7dabbc1]
- Updated dependencies [0c251e5]
- Updated dependencies [3b56170]
  - fumadocs-core@13.4.2

## 1.1.3

### Patch Changes

- dfd8ac4: Fix type errors

## 1.1.2

### Patch Changes

- 758013f: Use Fumadocs Remark Image instead of `rehype-img-size`
- Updated dependencies [36b771b]
- Updated dependencies [61b91fa]
  - fumadocs-core@13.2.2

## 1.1.1

### Patch Changes

- c7aa090: Improve Fumadocs OpenAPI support
- Updated dependencies [17fa173]
  - fumadocs-core@13.2.1

## 1.1.0

### Minor Changes

- bc80ce3: Support dynamic resolving plugins

### Patch Changes

- Updated dependencies [fccdfdb]
- Updated dependencies [2ffd5ea]
  - fumadocs-core@12.5.4

## 1.0.3

### Patch Changes

- 6e9d4bf: Add `icon` and `root` fields to meta schema
- 2db6172: Add `cwd` option by default

## 1.0.2

### Patch Changes

- dd1e4f3: Change type definitions of built-in schemas
  - fumadocs-core@12.4.1

## 1.0.1

### Patch Changes

- 8efc775: Fix Content Collections compatibility
  - fumadocs-core@12.4.0

## 1.0.0

### Major Changes

- a25b3d1: Support Content Collections integration



================================================
FILE: packages/content-collections/eslint.config.mjs
================================================
import library from 'eslint-config-custom/library.js';

export default [
  {
    ignores: ['dist', 'node_modules', '*.test.ts', 'eslint.config.mjs'],
  },
  ...library,
];



================================================
FILE: packages/content-collections/package.json
================================================
{
  "name": "@fumadocs/content-collections",
  "version": "1.2.1",
  "description": "The Content Collections adapter for Fumadocs",
  "keywords": [
    "NextJs",
    "Docs",
    "Content Collections"
  ],
  "homepage": "https://fumadocs.vercel.app",
  "repository": "github:fuma-nama/fumadocs",
  "license": "MIT",
  "author": "Fuma Nama",
  "type": "module",
  "exports": {
    ".": {
      "import": "./dist/index.js",
      "types": "./dist/index.d.ts"
    },
    "./configuration": {
      "import": "./dist/configuration.js",
      "types": "./dist/configuration.d.ts"
    }
  },
  "main": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "files": [
    "dist/*"
  ],
  "scripts": {
    "build": "tsup",
    "clean": "rimraf dist",
    "dev": "tsup --watch",
    "lint": "eslint .",
    "types:check": "tsc --noEmit"
  },
  "devDependencies": {
    "@content-collections/core": "^0.10.0",
    "@content-collections/mdx": "^0.2.2",
    "@types/node": "24.0.12",
    "eslint-config-custom": "workspace:*",
    "fumadocs-core": "workspace:*",
    "tsconfig": "workspace:*",
    "unified": "^11.0.5",
    "zod": "^4.0.2"
  },
  "peerDependencies": {
    "@content-collections/core": "0.x.x",
    "@content-collections/mdx": "0.x.x",
    "fumadocs-core": "^14.0.0 || ^15.0.0"
  },
  "publishConfig": {
    "access": "public"
  }
}



================================================
FILE: packages/content-collections/tsconfig.json
================================================
{
  "extends": "tsconfig/base.json",
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    },
    "noEmit": true,
    "lib": ["ESNext"],
    "module": "ESNext",
    "target": "ES2020"
  },
  "exclude": ["node_modules", "dist", "eslint.config.mjs"]
}



================================================
FILE: packages/content-collections/tsup.config.ts
================================================
import { defineConfig } from 'tsup';

export default defineConfig({
  dts: true,
  target: 'esnext',
  format: 'esm',
  entry: ['src/{index,configuration}.ts'],
});



================================================
FILE: packages/content-collections/src/configuration.ts
================================================
/**
 * Default configuration
 *
 * You may copy and modify the code
 */
import type { Context, Meta } from '@content-collections/core';
import {
  compileMDX as baseCompileMDX,
  type Options as MDXOptions,
} from '@content-collections/mdx';
import type { StructuredData } from 'fumadocs-core/mdx-plugins';
import * as Plugins from 'fumadocs-core/mdx-plugins';
import { z, z as Zod } from 'zod';
import {
  resolvePlugin,
  resolvePlugins,
  type ResolvePlugins,
} from '@/resolve-plugins';

export interface TransformOptions
  extends Omit<MDXOptions, 'remarkPlugins' | 'rehypePlugins'> {
  remarkPlugins?: ResolvePlugins;
  rehypePlugins?: ResolvePlugins;

  /**
   * Generate `structuredData`
   *
   * @defaultValue true
   * @deprecated use `remarkStructureOptions` instead
   */
  generateStructuredData?: boolean;

  remarkStructureOptions?: Plugins.StructureOptions | boolean;
  remarkHeadingOptions?: Plugins.RemarkHeadingOptions | boolean;
  rehypeCodeOptions?: Plugins.RehypeCodeOptions | boolean;
  remarkImageOptions?: Plugins.RemarkImageOptions | boolean;
  remarkCodeTabOptions?: Plugins.RemarkCodeTabOptions | boolean;
}

/**
 * The default TOC types support `ReactNode`, which isn't serializable
 */
export type SerializableTOC = {
  title: string;
  url: string;
  depth: number;
}[];

interface BaseDoc {
  _meta: Meta;
  content: string;
}

/**
 * We need to convert interface types to object types.
 *
 * Otherwise, `T extends Serializable? true : false` gives us `false`.
 * Because interface types cannot extend a union type, but `Serializable` is.
 */
type InterfaceToObject<T> = T extends object
  ? {
      [K in keyof T]: InterfaceToObject<T[K]>;
    }
  : T;

export async function transformMDX<D extends BaseDoc>(
  document: D,
  context: Context,
  options: TransformOptions = {},
): Promise<
  D & {
    body: string;
    toc: SerializableTOC;
    /**
     * `StructuredData` for search indexes
     */
    structuredData: InterfaceToObject<StructuredData>;
  }
> {
  const {
    generateStructuredData,
    remarkStructureOptions = generateStructuredData ?? true,
    rehypeCodeOptions = true,
    remarkHeadingOptions = true,
    remarkImageOptions = true,
    remarkCodeTabOptions = true,
    ...rest
  } = options;

  return context.cache(
    {
      type: 'fumadocs',
      document,
    },
    async () => {
      let data: Record<string, unknown> = {};

      const body = await baseCompileMDX(
        {
          ...context,
          // avoid nested caching
          cache: async (input, fn) => fn(input),
        },
        document,
        {
          cwd: process.cwd(),
          ...rest,
          rehypePlugins: resolvePlugins(
            (plugins) => [
              resolvePlugin(Plugins.rehypeCode, rehypeCodeOptions),
              ...plugins,
            ],
            rest.rehypePlugins,
          ),
          remarkPlugins: resolvePlugins(
            (plugins) => [
              Plugins.remarkGfm,
              resolvePlugin(Plugins.remarkHeading, remarkHeadingOptions),
              resolvePlugin(Plugins.remarkImage, remarkImageOptions, {
                useImport: false,
              }),
              'remarkCodeTab' in Plugins &&
                resolvePlugin(Plugins.remarkCodeTab, remarkCodeTabOptions),
              ...plugins,
              resolvePlugin(Plugins.remarkStructure, remarkStructureOptions),
              () => {
                return (_, file) => {
                  data = file.data;
                };
              },
            ],
            rest.remarkPlugins,
          ),
        },
      );

      return {
        ...document,
        toc: data.toc as SerializableTOC,
        structuredData: data.structuredData as StructuredData,
        body,
      };
    },
  );
}

export const metaSchema = z.object({
  title: z.string().optional(),
  pages: z.array(z.string()).optional(),
  description: z.string().optional(),
  root: z.boolean().optional(),
  defaultOpen: z.boolean().optional(),
  icon: z.string().optional(),
});

export const frontmatterSchema = z.object({
  title: z.string(),
  description: z.string().optional(),
  icon: z.string().optional(),
  full: z.boolean().optional(),

  // Fumadocs OpenAPI generated
  _openapi: z.looseObject({}).optional(),
});

export function createDocSchema(z: typeof Zod) {
  return {
    title: z.string(),
    description: z.string().optional(),
    icon: z.string().optional(),
    full: z.boolean().optional(),
    // Fumadocs OpenAPI generated
    _openapi: z.record(z.string(), z.any()).optional(),
  };
}

export function createMetaSchema(z: typeof Zod) {
  return {
    title: z.string().optional(),
    description: z.string().optional(),
    pages: z.array(z.string()).optional(),
    icon: z.string().optional(),
    root: z.boolean().optional(),
    defaultOpen: z.boolean().optional(),
  };
}



================================================
FILE: packages/content-collections/src/index.ts
================================================
import type { Source, VirtualFile } from 'fumadocs-core/source';
import type { BaseDocsData, BaseMetaData } from '@/types';

export function createMDXSource<
  Docs extends BaseDocsData,
  Meta extends BaseMetaData,
>(
  allDocs: Docs[],
  allMetas: Meta[],
): Source<{
  metaData: Meta;
  pageData: Docs;
}> {
  return {
    files: [
      ...allDocs.map<VirtualFile>((v) => ({
        type: 'page',
        data: v,
        path: v._meta.filePath,
      })),
      ...allMetas.map<VirtualFile>((v) => ({
        type: 'meta',
        data: v,
        path: v._meta.filePath,
      })),
    ],
  };
}



================================================
FILE: packages/content-collections/src/resolve-plugins.ts
================================================
import type { Pluggable, Plugin } from 'unified';

export type ResolvePlugins = Pluggable[] | ((v: Pluggable[]) => Pluggable[]);

export function resolvePlugins(
  def: (v: Pluggable[]) => (Pluggable | false)[],
  options: ResolvePlugins = [],
): Pluggable[] {
  const list = def(Array.isArray(options) ? options : []).filter(
    Boolean,
  ) as Pluggable[];

  if (typeof options === 'function') {
    return options(list);
  }

  return list;
}

export function resolvePlugin<Param>(
  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- config type
  plugin: Plugin<[Param], any, any>,
  options: Param | boolean,
  defaultOptions?: Param,
): Pluggable | false {
  if (typeof options === 'boolean')
    return options ? [plugin, defaultOptions] : false;

  return [plugin, { ...defaultOptions, ...options }];
}



================================================
FILE: packages/content-collections/src/types.ts
================================================
import type { MetaData, PageData } from 'fumadocs-core/source';
import type { Meta } from '@content-collections/core';

export interface BaseMetaData extends MetaData {
  _meta: Meta;
}

export interface BaseDocsData extends PageData {
  _meta: Meta;
}



================================================
FILE: packages/core/README.md
================================================
# Fumadocs Core

The core library for Fumadocs.

📘 Learn More: [Documentation](https://fumadocs.vercel.app)



================================================
FILE: packages/core/CHANGELOG.md
================================================
# next-docs-zeta

## 15.6.3

## 15.6.2

## 15.6.1

### Patch Changes

- 1a902ff: Fix static export map

## 15.6.0

### Minor Changes

- f8d1709: **Redesigned Codeblock Tabs**

  Instead of relying on `Tabs` component, it supports a dedicated tabs component for codeblocks:

  ```tsx
  <CodeBlockTabs>
    <CodeBlockTabsList>
      <CodeBlockTabsTrigger value="value">Name</CodeBlockTabsTrigger>
    </CodeBlockTabsList>
    <CodeBlockTab value="value" asChild>
      <CodeBlock>...</CodeBlock>
    </CodeBlockTab>
  </CodeBlockTabs>
  ```

  The old usage is not deprecated, you can still use them while Fumadocs' remark plugins will generate codeblock tabs using the new way.

### Patch Changes

- d0f8a15: Enable `remarkNpm` by default, replace `remarkInstall` with it.
- 84918b8: Support passing `tag` to search client/server as string array

## 15.5.5

### Patch Changes

- 0d3f76b: Fix wrong indexing of file system

## 15.5.4

### Patch Changes

- 35c3c0b: Support handling duplicated slugs and conflicts such as `dir/index.mdx` vs `dir.mdx`

## 15.5.3

### Patch Changes

- 7d1ac21: hotfix paths not being normalized on Windows

## 15.5.2

### Patch Changes

- 7a45921: Add `absolutePath` and `path` properties to pages, mark `file` as deprecated
- 1b7bc4b: Add `@types/react` to optional peer dependency to avoid version conflict in monorepos

## 15.5.1

### Patch Changes

- b4916d2: Move `hide-if-empty` component to Fumadocs Core
- 8738b9c: Always encode generated slugs for non-ASCII characters in `loader()`
- a66886b: **Deprecate other parameters for `useDocsSearch()`**

  The new usage passes options to a single object, improving the readability:

  ```ts
  import { useDocsSearch } from 'fumadocs-core/search/client';

  const { search, setSearch, query } = useDocsSearch({
    type: 'fetch',
    locale: 'optional',
    tag: 'optional',
    delayMs: 100,
    allowEmpty: false,
  });
  ```

## 15.5.0

## 15.4.2

### Patch Changes

- 0ab6c7f: Improve performance by using shallow compare on `useOnChange` by default

## 15.4.1

## 15.4.0

### Minor Changes

- 961b67e: **Bump algolia search to v5**

  This also introduced changes to some APIs since `algoliasearch` v4 and v5 has many differences.

  Now we highly recommend to pass an index name to `sync()`:

  ```ts
  import { algoliasearch } from 'algoliasearch';
  import { sync } from 'fumadocs-core/search/algolia';
  const client = algoliasearch('id', 'key');

  void sync(client, {
    indexName: 'document',
    documents: records,
  });
  ```

  For search client, pass them to `searchOptions`:

  ```tsx
  'use client';

  import { liteClient } from 'algoliasearch/lite';
  import type { SharedProps } from 'fumadocs-ui/components/dialog/search';
  import SearchDialog from 'fumadocs-ui/components/dialog/search-algolia';

  const client = liteClient(appId, apiKey);

  export default function CustomSearchDialog(props: SharedProps) {
    return (
      <SearchDialog
        searchOptions={{
          client,
          indexName: 'document',
        }}
        {...props}
        showAlgolia
      />
    );
  }
  ```

### Patch Changes

- 1b999eb: Introduce `<Markdown />` component
- 7d78bc5: Improve `createRelativeLink` and `getPageByHref` for i18n usage

## 15.3.4

## 15.3.3

### Patch Changes

- 4ae7b4a: Support MDX in codeblock tab value

## 15.3.2

### Patch Changes

- c25d678: Support Shiki focus notation transformer by default

## 15.3.1

### Patch Changes

- 3372792: Support line numbers in codeblock

## 15.3.0

### Patch Changes

- c05dc03: Improve error message of remark image

## 15.2.15

### Patch Changes

- 50db874: Remove placeholder space for codeblocks
- 79e75c3: Improve default MDX attribute indexing strategy for `remarkStructure`

## 15.2.14

### Patch Changes

- 6ea1718: Fix type inference for `pageTree.attachFile` in `loader()`

## 15.2.13

## 15.2.12

### Patch Changes

- acff667: **Deprecate `createFromSource(source, pageToIndex, options)`**

  Migrate:

  ```ts
  import { source } from '@/lib/source';
  import { createFromSource } from 'fumadocs-core/search/server';

  // from
  export const { GET } = createFromSource(
    source,
    (page) => ({
      title: page.data.title,
      description: page.data.description,
      url: page.url,
      id: page.url,
      structuredData: page.data.structuredData,
      // use your desired value, like page.slugs[0]
      tag: '<value>',
    }),
    {
      // options
    },
  );

  // to
  export const { GET } = createFromSource(source, {
    buildIndex(page) {
      return {
        title: page.data.title,
        description: page.data.description,
        url: page.url,
        id: page.url,
        structuredData: page.data.structuredData,
        // use your desired value, like page.slugs[0]
        tag: '<value>',
      };
    },
    // other options
  });
  ```

## 15.2.11

### Patch Changes

- 07cd690: Support separators without name

## 15.2.10

## 15.2.9

## 15.2.8

## 15.2.7

### Patch Changes

- ec85a6c: support more options on `remarkStructure`
- e1a61bf: Support `remarkSteps` plugin

## 15.2.6

### Patch Changes

- d49f9ae: Fix order of `<I18nProvider />`
- b07e98c: fix `loader().getNodePage()` returning undefined for other locales
- 3a4bd88: Fix wrong index files output in i18n page tree generation

## 15.2.5

### Patch Changes

- c66ed79: Fix `removeScrollOn` on sidebar primitive

## 15.2.4

### Patch Changes

- 1057957: Fix type problems on dynamic codeblock

## 15.2.3

## 15.2.2

### Patch Changes

- 0829544: deprecate `blockScrollingWidth` in favour of `removeScrollOn`

## 15.2.1

## 15.2.0

### Minor Changes

- 2fd325c: Enable `lazy` on `rehypeCode` by default
- a7cf4fa: Support other frameworks via `FrameworkProvider`

## 15.1.3

### Patch Changes

- b734f92: support `mdxJsxFlowElement` in `remarkStructure`

## 15.1.2

### Patch Changes

- 3f580c4: Support directory-based i18n routing

## 15.1.1

### Patch Changes

- c5add28: use internal store for Shiki highlighter instances
- f3cde4f: Support markdown files with default local code in file name
- 7c8a690: Improve file info interface
- b812457: Remove Next.js usage from search server

## 15.1.0

### Minor Changes

- f491f6f: Lazy build page tree by default
- f491f6f: Support `getPageByHref()` on loader API

### Patch Changes

- f491f6f: Fix `findNeighbour()` doesn't exclude other nodes of another root

## 15.0.18

## 15.0.17

### Patch Changes

- 72f79cf: Support Orama Cloud crawler index

## 15.0.16

## 15.0.15

### Patch Changes

- 9f6d39a: Fix peer deps
- 2035cb1: remove hook-level cache from `useDocsSearch()`

## 15.0.14

### Patch Changes

- 37dc0a6: Update `image-size` to v2
- 796cc5e: Upgrade to Orama v3
- 2cc0be5: Support to add custom serialization to `remarkStructure` via `data._string`

## 15.0.13

## 15.0.12

### Patch Changes

- 3534a10: Move `fumadocs-core` highlighting utils to `fumadocs-core/highlight` and `fumadocs-core/highlight/client`
- 93952db: Generate a `$id` attribute to page tree nodes

## 15.0.11

## 15.0.10

### Patch Changes

- d95c21f: add `initOrama` option to static client

## 15.0.9

## 15.0.8

## 15.0.7

### Patch Changes

- 5deaf40: Support icons in separators of `meta.json`

## 15.0.6

### Patch Changes

- 08236e1: Support custom toc settings in headings
- a06af26: Support pages without `title`

## 15.0.5

## 15.0.4

## 15.0.3

## 15.0.2

## 15.0.1

## 15.0.0

### Minor Changes

- 581f4a5: **Support code block tabs without hardcoding `<Tabs />` items**

  **migrate:** Use the `remarkCodeTab` plugin.

  **before:**

  ````mdx
  import { Tab, Tabs } from 'fumadocs-ui/components/tabs';

  <Tabs items={["Tab 1", "Tab 2"]}>

  ```ts tab
  console.log('A');
  ```

  ```ts tab
  console.log('B');
  ```

  </Tabs>
  ````

  **after:**

  ````mdx
  import { Tab, Tabs } from 'fumadocs-ui/components/tabs';

  ```ts tab="Tab 1"
  console.log('A');
  ```

  ```ts tab="Tab 2"
  console.log('B');
  ```
  ````

### Patch Changes

- 5b8cca8: Fix `remarkAdmonition` missing some types from Docusaurus
- a763058: Support reversed rest items in `meta.json`

## 14.7.7

## 14.7.6

### Patch Changes

- b9601fb: Update Shiki

## 14.7.5

### Patch Changes

- 777188b: [Page Tree Builder] Inline folders without children

## 14.7.4

### Patch Changes

- bb73a72: Fix search params being ignored in middleware redirection
- 69bd4fe: Support `source.getPageTree()` function

## 14.7.3

### Patch Changes

- 041f230: Support trailing slash

## 14.7.2

### Patch Changes

- 14b280c: Revert default i18n config

## 14.7.1

### Patch Changes

- 72dc093: Add chinese i18n configuration for Orama search if not specified

## 14.7.0

### Minor Changes

- 97ed36c: Remove defaults from `loader` and deprecate `rootDir` options

## 14.6.8

## 14.6.7

### Patch Changes

- 5474343: Export dynamic-link

## 14.6.6

## 14.6.5

### Patch Changes

- 969da26: Improve i18n api

## 14.6.4

### Patch Changes

- b71064a: Support remark plugins & vfile input on `getTableOfContents`

## 14.6.3

## 14.6.2

### Patch Changes

- 2357d40: Fix typings of `HighlightOptions`

## 14.6.1

## 14.6.0

### Minor Changes

- bebb16b: Add support for pre-rendering to `useShiki` hook
- 050b326: Support codeblock `tab` meta without value

### Patch Changes

- 4dfde6b: support additional `components` option of Orama search
- 4766292: Support React 19

## 14.5.6

### Patch Changes

- 9a18c14: Downgrade Orama to v2 to fix external tokenizers

## 14.5.5

## 14.5.4

## 14.5.3

## 14.5.2

## 14.5.1

## 14.5.0

## 14.4.2

## 14.4.1

## 14.4.0

## 14.3.1

## 14.3.0

## 14.2.1

### Patch Changes

- ca94bfd: Support sync usage of `getTableOfContents`

## 14.2.0

### Minor Changes

- e248a0f: Support Orama Cloud integration

## 14.1.1

### Patch Changes

- 1573d63: Support URL format `publicDir` in Remark Image plugin

## 14.1.0

### Minor Changes

- b262d99: bundle default Shiki transformers
- 90725c1: Support server-side `highlight` and client `useShiki` hook

### Patch Changes

- d6d290c: Upgrade Shiki
- 4a643ff: Prefer `peerDependenciesMeta` over `optionalDependencies`
- b262d99: Support JSX comment syntax on default Shiki transformers

## 14.0.2

## 14.0.1

## 14.0.0

### Major Changes

- e45bc67: **Remove deprecated `fumadocs-core/middleware` export**

  **migrate:** Use `fumadocs-core/i18n`.

- d9e908e: **Remove deprecated `languages` and `defaultLanguage` option from loader**

  **migrate:** Use I18n config API

- 9a0b09f: **Change usage of `useDocsSearch`**

  **why:** Allow static search

  **migrate:**

  Pass client option, it can be algolia, static, or fetch (default).

  ```ts
  import { useDocsSearch } from 'fumadocs-core/search/client';

  const { search, setSearch, query } = useDocsSearch({
    type: 'fetch',
    api: '/api/search', // optional
  });
  ```

- 9a0b09f: **Remove Algolia Search Client**

  **why:** Replace by the new search client

  **migrate:**

  ```ts
  import { useDocsSearch } from 'fumadocs-core/search/client';

  const { search, setSearch, query } = useDocsSearch({
    type: 'algolia',
    index,
    ...searchOptions,
  });
  ```

- 9a0b09f: **Refactor import path of `fumadocs-core/search-algolia/server` to `fumadocs-core/search/algolia`**
- d9e908e: Improved usage for `createI18nSearchAPI` (replaced `createI18nSearchAPIExperimental`)
- d9e908e: Replace `fumadocs-core/search/shared` with `fumadocs-core/server`

### Minor Changes

- d9e908e: Create search api from source (Support i18n without modifying search route handler)
- 367f4c3: Support referencing original page/meta from page tree nodes
- e1ee822: Support hast nodes in `toc` variable
- 979e301: Replace flexearch with Orama
- 979e301: Support static search (without server)
- d9e908e: Support creating metadata API from sources

### Patch Changes

- f949520: Support Shiki diff transformer
- e612f2a: Make compatible with Next.js 15
- 8ef00dc: Apply `hideLocale` to Source `getPage` APIs
- 15781f0: Fix breadcrumb empty when `includePage` isn't specified
- be820c4: Bump deps

## 13.4.10

### Patch Changes

- 6231ad3: fix(types): PageData & MetaData exactOptionalPropertyTypes compat

## 13.4.9

### Patch Changes

- 083f04a: Fix link items text

## 13.4.8

### Patch Changes

- 78e59e7: Support to add icons to link items in meta.json

## 13.4.7

### Patch Changes

- 6e1923e: Improve anchors observer

## 13.4.6

### Patch Changes

- afb697e: Fix Next.js 14.2.8 dynamic import problems
- daa66d2: Support generating static params automatically with Source API

## 13.4.5

## 13.4.4

### Patch Changes

- 729928e: Fix build error without JS engine

## 13.4.3

## 13.4.2

### Patch Changes

- 7dabbc1: Remark Image: Support relative imports
- 0c251e5: Bump deps
- 3b56170: Support to enable experiment Shiki JS engine

## 13.4.1

### Patch Changes

- 95dbba1: Scan table into search indexes by default

## 13.4.0

## 13.3.3

### Patch Changes

- f8cc167: Ignore numeric locale file name

## 13.3.2

### Patch Changes

- 0e0ef8c: Support headless search servers

## 13.3.1

## 13.3.0

### Minor Changes

- fd46eb6: Export new `createI18nSearchAPIExperimental` API for i18n config
- fd46eb6: Introduce `i18n` config for Core APIs
- fd46eb6: Deprecated `languages` and `defaultLanguage` option on Source API, replaced with `i18n` config
- fd46eb6: Move I18n middleware to `fumadocs-core/i18n`
- 9aae448: Support multiple toc active items
- c542561: Use cookie to store active locale on `always` mode

### Patch Changes

- 4916f84: Improve Source API performance

## 13.2.2

### Patch Changes

- 36b771b: Remark Image: Support relative import path
- 61b91fa: Improve Fumadocs OpenAPI support

## 13.2.1

### Patch Changes

- 17fa173: Remark Image: Support fetching image size of external urls

## 13.2.0

### Patch Changes

- 96c9dda: Change Heading scroll margins

## 13.1.0

### Patch Changes

- f280191: Page Tree Builder: Sort folders to bottom

## 13.0.7

### Patch Changes

- 37bbfff: Improve active anchor observer

## 13.0.6

## 13.0.5

### Patch Changes

- 2cf65f6: Support debounce value on algolia search client

## 13.0.4

### Patch Changes

- 5355391: Support indexing description field on documents

## 13.0.3

### Patch Changes

- 978342f: Type file system utilities (Note: This is an internal module, you're not supposed to reference it)

## 13.0.2

### Patch Changes

- 4819820: Page Tree Builder: Fallback to page icon when metadata doesn't exist

## 13.0.1

## 13.0.0

### Major Changes

- 09c3103: **Change usage of TOC component**

  **why:** Improve the flexibility of headless components

  **migrate:**

  Instead of

  ```tsx
  import * as Base from 'fumadocs-core/toc';

  return (
    <Base.TOCProvider>
      <Base.TOCItem />
    </Base.TOCProvider>
  );
  ```

  Use

  ```tsx
  import * as Base from 'fumadocs-core/toc';

  return (
    <Base.AnchorProvider>
      <Base.ScrollProvider>
        <Base.TOCItem />
        <Base.TOCItem />
      </Base.ScrollProvider>
    </Base.AnchorProvider>
  );
  ```

- b02eebf: **Remove deprecated option `defaultLang`**

  **why:** The default language feature has been supported by Shiki Rehype integration, you should use it directly.

  **migrate:** Rename to `defaultLanguage`.

### Minor Changes

- c714eaa: Support Remark Admonition plugin

## 12.5.6

## 12.5.5

## 12.5.4

### Patch Changes

- fccdfdb: Improve TOC Popover design
- 2ffd5ea: Support folder group on Page Tree Builder

## 12.5.3

## 12.5.2

### Patch Changes

- a5c34f0: Support specifying the url of root node when breadcrumbs have `includeRoot` enabled

## 12.5.1

## 12.5.0

### Minor Changes

- b9fa99d: Support `tag` facet field for Algolia Search Integration

### Patch Changes

- 525925b: Support including root folder into breadcrumbs

## 12.4.2

### Patch Changes

- 503e8e9: Support `keywords` API in advanced search

## 12.4.1

## 12.4.0

## 12.3.6

## 12.3.5

## 12.3.4

## 12.3.3

### Patch Changes

- 90d51cb: Fix problem with I18n middleware & language toggle

## 12.3.2

### Patch Changes

- ca7d0f4: Support resolving async search indexes

## 12.3.1

### Patch Changes

- cf852f6: Add configurable delayMs Parameter for Debounced Search Performance

## 12.3.0

### Minor Changes

- ce3c8ad: Page Tree Builder: Support `defaultLanguage` option
- ce3c8ad: Support hiding locale prefixes with I18n middleware

## 12.2.5

## 12.2.4

## 12.2.3

## 12.2.2

## 12.2.1

## 12.2.0

### Minor Changes

- b70ff06: Support `!name` to hide pages on `meta.json`

## 12.1.3

## 12.1.2

### Patch Changes

- b4856d1: Fix `createGetUrl` wrong locale position

## 12.1.1

### Patch Changes

- a39dbcb: Export `loadFiles` from Source API

## 12.1.0

### Minor Changes

- 0a377a9: **Support writing code blocks as a `<Tab />` element.**

  ````mdx
  import { Tabs } from 'fumadocs-ui/components/tabs';

  <Tabs items={["Tab 1", "Tab 2"]}>

  ```js tab="Tab 1"
  console.log('Hello');
  ```

  ```js tab="Tab 2"
  console.log('Hello');
  ```

  </Tabs>
  ````

  This is same as wrapping the code block in a `<Tab />` component.

- 0a377a9: **Pass the `icon` prop to code blocks as HTML instead of MDX attribute.**

  **why:** Only MDX flow elements support attributes with JSX value, like:

  ```mdx
  <Pre icon={<svg />}>...</Pre>
  ```

  As Shiki outputs hast elements, we have to convert the output of Shiki to a MDX flow element so that we can pass the `icon` property.

  Now, `rehype-code` passes a HTML string instead of JSX, and render it with `dangerouslySetInnerHTML`:

  ```mdx
  <Pre icon="<svg />">...</Pre>
  ```

  **migrate:** Not needed, it should work seamlessly.

## 12.0.7

## 12.0.6

### Patch Changes

- 7a29b79: Remove default language from `source.getLanguages`
- b0c1242: Support Next.js 15 cache behaviour in `getGithubLastEdit`

## 12.0.5

## 12.0.4

### Patch Changes

- 72dbaf1: Support `ReactNode` in page tree, table of contents and breadcrumb type definitions
- 51ca944: Support including separators in breadcrumbs

## 12.0.3

### Patch Changes

- 053609d: Rename `defaultLang` to `defaultLanguage`

## 12.0.2

## 12.0.1

## 12.0.0

### Major Changes

- 98430e9: **Remove `minWidth` deprecated option from `Sidebar` component.**

  **migrate:** Use `blockScrollingWidth` instead

### Minor Changes

- 57eb762: Support attaching custom properties during page tree builder process

### Patch Changes

- d88dfa6: Support attaching `id` property to page trees
- ba20694: Remark Headings: Support code syntax in headings

## 11.3.2

### Patch Changes

- 1b8e12b: Use `display: grid` for codeblocks

## 11.3.1

## 11.3.0

### Minor Changes

- 917d87f: Rename sidebar primitive `minWidth` prop to `blockScrollingWidth`

## 11.2.2

## 11.2.1

## 11.2.0

## 11.1.3

### Patch Changes

- 88008b1: Fix ESM compatibility problems in i18n middleware
- 944541a: Add dynamic page url according to locale
- 07a9312: Improve Search I18n utilities

## 11.1.2

## 11.1.1

### Patch Changes

- 8ef2b68: Bump deps
- 26f464d: Support relative paths in meta.json
- 26f464d: Support non-external link in meta.json

## 11.1.0

## 11.0.8

### Patch Changes

- 98258b5: Fix regex problems

## 11.0.7

### Patch Changes

- f7c2c5c: Fix custom heading ids conflicts with MDX syntax

## 11.0.6

### Patch Changes

- 5653d5d: Support customising heading id in headings
- 5653d5d: Support custom heading slugger

## 11.0.5

## 11.0.4

### Patch Changes

- 7b61b2f: Migrate `fumadocs-ui` to fully ESM, adding support for ESM `tailwind.config` file

## 11.0.3

## 11.0.2

## 11.0.1

## 11.0.0

### Major Changes

- 2d8df75: Remove `cwd` option from `remark-dynamic-content`

  why: Use `cwd` from vfile

  migrate: Pass the `cwd` option from remark instead

- 92cb12f: Simplify Source API virtual storage.

  why: Improve performance

  migrate:

  ```diff
  - storage.write('path.mdx', { type: 'page', ... })
  - storage.readPage('page')
  + storage.write('path.mdx', 'page', { ... })
  + storage.read('page', 'page')
  ```

  Transformers can now access file loader options.

  ```ts
  load({
    transformers: [
      ({ storage, options }) => {
        options.getUrl();
        options.getSlugs();
      },
    ],
  });
  ```

- f75287d: **Introduce `fumadocs-docgen` package.**

  Offer a better authoring experience for advanced use cases.
  - Move `remark-dynamic-content` and `remark-install` plugins to the new package `fumadocs-docgen`.
  - Support Typescript generator by default

  **Usage**

  Add the `remarkDocGen` plugin to your remark plugins.

  ```ts
  import { remarkDocGen, fileGenerator } from 'fumadocs-docgen';

  remark().use(remarkDocGen, { generators: [fileGenerator()] });
  ```

  Generate docs with code blocks.

  ````mdx
  ```json doc-gen:<generator>
  {
    // options
  }
  ```
  ````

  **Migrate**

  For `remarkDynamicContent`, enable `fileGenerator` and use this syntax:

  ````mdx
  ```json doc-gen:file
  {
    "file": "./path/to/my-file.txt"
  }
  ```
  ````

  For `remarkInstall`, it remains the same:

  ```ts
  import { remarkInstall } from 'fumadocs-docgen';
  ```

- 2d8df75: Remove support for `getTableOfContentsFromPortableText`

  why: Sanity integration should be provided by 3rd party integrations

  migrate: Use built-in sources, or write a custom implementation

## 10.1.3

### Patch Changes

- bbad52f: Support `bun` in `remark-install` plugin

## 10.1.2

## 10.1.1

### Patch Changes

- 779c599: Mark `getTableOfContentsFromPortableText` deprecated
- 0c01300: Fix remark-dynamic-content ignored code blocks
- 779c599: Support relative resolve path for remark-dynamic-content

## 10.1.0

## 10.0.5

### Patch Changes

- e47c62f: Improve remark plugin typings

## 10.0.4

## 10.0.3

### Patch Changes

- 6f321e5: Fix type errors of flexseach

## 10.0.2

### Patch Changes

- 10e099a: Remove deprecated options from `fumadocs-core/toc`

## 10.0.1

### Patch Changes

- c9b7763: Update to Next.js 14.1.0
- 0e78dc8: Support customising search API URL
- d8483a8: Remove undefined values from page tree

## 10.0.0

### Major Changes

- 321d1e1f: **Move Typescript integrations to `fumadocs-typescript`**

  why: It is now a stable feature

  migrate: Use `fumadocs-typescript` instead.

  ```diff
  - import { AutoTypeTable } from "fumadocs-ui/components/auto-type-table"
  + import { AutoTypeTable } from "fumadocs-typescript/ui"
  ```

### Minor Changes

- b5d16938: Support external link in `pages` property

## 9.1.0

### Minor Changes

- 909b0e35: Support duplicated names with meta and page files
- 1c388ca5: Support `defaultOpen` for folder nodes

### Patch Changes

- 691f12aa: Source API: Support relative paths as root directory

## 9.0.0

## 8.3.0

## 8.2.0

### Minor Changes

- 5c24659: Support code block icons

## 8.1.1

## 8.1.0

### Minor Changes

- eb028b4: Migrate to shiki
- 054ec60: Support generating docs for Typescript file

### Patch Changes

- 6c5a39a: Rename Git repository to `fumadocs`

## 8.0.0

### Major Changes

- 2ea9437: **Migrate to rehype-shikiji**
  - Dropped support for inline code syntax highlighting
  - Use notation-based word/line highlighting instead of meta string

  Before:

  ````md
  ```ts /config/ {1}
  const config = 'Hello';

  something.call(config);
  ```
  ````

  After:

  ````md
  ```ts
  // [!code word:config]
  const config = 'Hello'; // [!code highlight]

  something.call(config);
  ```
  ````

  Read the docs of Shikiji for more information.

- cdff313: **Separate Contentlayer integration into another package**

  why: As Fumadocs MDX is the preferred default source, Contentlayer should be optional.

  migrate:

  Install `fumadocs-contentlayer`.

  ```diff
  - import { createContentlayerSource } from "fumadocs-core/contentlayer"
  + import { createContentlayerSource } from "fumadocs-contentlayer"

  - import { createConfig } from "fumadocs-core/contentlayer/configuration"
  + import { createConfig } from "fumadocs-contentlayer/configuration"
  ```

- 2b11c20: **Rename to Fumadocs**

  `next-docs-zeta` -> `fumadocs-core`

  `next-docs-ui` -> `fumadocs-ui`

  `next-docs-mdx` -> `fumadocs-mdx`

  `@fuma-docs/openapi` -> `fumadocs-openapi`

  `create-next-docs-app` -> `create-fumadocs-app`

### Minor Changes

- 1a346a1: Add `remark-image` plugin that converts relative image urls into static image imports (Inspired by Nextra)

## 7.1.2

## 7.1.1

## 7.1.0

## 7.0.0

### Major Changes

- 9929c5b: **Migrate Contentlayer Integration to Source API**

  `createContentlayer` is now replaced by `createContentlayerSource`.

  You should configure base URL and root directory in the loader instead of Contentlayer configuration.

  It's no longer encouraged to access `allDocs` directly because they will not include `url` property anymore. Please consider `getPages` instead.

  ```ts
  import { allDocs, allMeta } from 'contentlayer/generated';
  import { createContentlayerSource } from 'next-docs-zeta/contentlayer';
  import { loader } from 'next-docs-zeta/source';

  export const { getPage, pageTree, getPages } = loader({
    baseUrl: '/docs',
    rootDir: 'docs',
    source: createContentlayerSource(allMeta, allDocs),
  });
  ```

  The interface is very similar, but you can only access Contentlayer properties from `page.data`.

  ```diff
  - <Content code={page.body.code} />
  + <Content code={page.data.body.code} />
  ```

- 9929c5b: **Source API**

  To reduce boilerplate, the Source API is now released to handle File-system based files.

  Thanks to this, you don't have to deal with the inconsistent behaviours between different content sources anymore.

  The interface is now unified, you can easily plug in a content source.

  ```ts
  import { map } from '@/.map';
  import { createMDXSource } from 'next-docs-mdx';
  import { loader } from 'next-docs-zeta/source';

  export const { getPage, getPages, pageTree } = loader({
    baseUrl: '/docs',
    rootDir: 'docs',
    source: createMDXSource(map),
  });
  ```

  **Page Tree Builder API is removed in favor of this**

- 49201be: **Change `remarkToc` to `remarkHeading`**

  The previous `remarkToc` plugin only extracts table of contents from documents, now it also adds the `id` property to all heading elements.

  ```diff
  - import { remarkToc } from "next-docs-zeta/mdx-plugins"
  + import { remarkHeading } from "next-docs-zeta/mdx-plugins"
  ```

- 4c1334e: **Improve `createI18nMiddleware` function**

  Now, you can export the middleware directly without a wrapper.

  From:

  ```ts
  export default function middleware(request: NextRequest) {
    return createI18nMiddleware(...);
  }
  ```

  To:

  ```ts
  export default createI18nMiddleware({
    defaultLanguage,
    languages,
  });
  ```

### Minor Changes

- 338ea98: **Export `create` function for Contentlayer configuration**

  If you want to include other document types, or override the output configuration, the `create` function can return the fields and document types you need.

  ```ts
  import { create } from 'next-docs-zeta/contentlayer/configuration';

  const config = create(options);

  export default {
    contentDirPath: config.contentDirPath,
    documentTypes: [config.Docs, config.Meta],
    mdx: config.mdx,
  };
  ```

- 9929c5b: **Support multiple page tree roots**

  You can specify a `root` property in `meta.json`, the nearest root folder will be used as the root of page tree instead.

  ```json
  {
    "title": "Hello World",
    "root": true
  }
  ```

## 6.1.0

### Minor Changes

- f39ae40: **Forward ref to `Link` and `DynamicLink` component**

  **Legacy import name `SafeLink` is now removed**

  ```diff
  - import { SafeLink } from "next-docs-zeta/link"
  + import Link from "next-docs-zeta/link"
  ```

## 6.0.2

## 6.0.1

## 6.0.0

### Major Changes

- 9ef047d: **Pre-bundle page urls into raw pages.**

  This means you don't need `getPageUrl` anymore for built-in adapters, including `next-docs-mdx` and Contentlayer. It is now replaced by the `url` property from the pages array provided by your adapter.

  Due to this change, your old configuration might not continues to work.

  ```diff
  import { fromMap } from 'next-docs-mdx/map'

  fromMap({
  -  slugs: ...
  +  getSlugs: ...
  })
  ```

  For Contentlayer, the `getUrl` option is now moved to `createConfig`.

## 5.0.0

### Minor Changes

- de44efe: Migrate to Shikiji
- de44efe: Support code highlighting options

## 4.0.9

### Patch Changes

- a883009: Fix empty extracted paragraphs in `remark-structure`

## 4.0.8

### Patch Changes

- e0c5c96: Make ESM only

## 4.0.7

### Patch Changes

- b9af5ed: Update tsup & dependencies

## 4.0.6

### Patch Changes

- ff38f6e: Replace `getGitLastEditTime` with new `getGithubLastEdit` API

## 4.0.5

## 4.0.4

## 4.0.3

### Patch Changes

- 0cc10cb: Support custom build page tree options

## 4.0.2

## 4.0.1

### Patch Changes

- 2da93d8: Support generating package install codeblocks automatically
- 01b23e2: Support Next.js 14

## 4.0.0

### Major Changes

- 6c4a782: Create `PageTreeBuilder` API

  The old `buildPageTree` function provided by 'next-docs-zeta/contentlayer' is
  now removed. Please use new API directly, or use the built-in
  `createContentlayer` utility instead.

  ```diff
  - import { buildPageTree } from 'next-docs-zeta/contentlayer'
  + import { createPageTreeBuilder } from 'next-docs-zeta/server'
  ```

### Minor Changes

- 6c4a782: Improve CommonJS/ESM compatibility

  Since this release, all server utilities will be CommonJS by default unless
  they have referenced ESM modules in the code. For instance,
  `next-docs-zeta/middleware` is now a CommonJS file. However, some modules,
  such as `next-docs-zeta/server` requires ESM-only package, hence, they remain
  a ESM file.

  Notice that the extension of client-side files is now `.js` instead of `.mjs`,
  but they're still ESM.

  **Why?**

  After migrating to `.mjs` Next.js config file, some imports stopped to work.
  The built-in Next.js bundler seems can't resolve these `next` imports in
  external packages, causing errors when modules have imported Next.js itself
  (e.g. `next/image`) in the code.

  By changing client-side files extension to `.mjs` and using CommonJS for
  server-side files, this error is solved.

## 4.0.0

### Major Changes

- 24245a3: Create `PageTreeBuilder` API

  The old `buildPageTree` function provided by 'next-docs-zeta/contentlayer' is
  now removed. Please use new API directly, or use the built-in
  `createContentlayer` utility instead.

  ```diff
  - import { buildPageTree } from 'next-docs-zeta/contentlayer'
  + import { createPageTreeBuilder } from 'next-docs-zeta/server'
  ```

### Minor Changes

- 678cd3d: Improve CommonJS/ESM compatibility

  Since this release, all server utilities will be CommonJS by default unless
  they have referenced ESM modules in the code. For instance,
  `next-docs-zeta/middleware` is now a CommonJS file. However, some modules,
  such as `next-docs-zeta/server` requires ESM-only package, hence, they remain
  a ESM file.

  Notice that the extension of client-side files is now `.js` instead of `.mjs`,
  but they're still ESM.

  **Why?**

  After migrating to `.mjs` Next.js config file, some imports stopped to work.
  The built-in Next.js bundler seems can't resolve these `next` imports in
  external packages, causing errors when modules have imported Next.js itself
  (e.g. `next/image`) in the code.

  By changing client-side files extension to `.mjs` and using CommonJS for
  server-side files, this error is solved.

## 3.0.0

### Major Changes

- a4a8120: Update search utilities import paths.

  Search Utilities in `next-docs-zeta/server` is now moved to
  `next-docs-zeta/search` and `next-docs-zeta/server-algolia`.

  Client-side Changes: `next-docs-zeta/search` -> `next-docs-zeta/search/client`
  `next-docs-zeta/search-algolia` -> `next-docs-zeta/search-algolia/client`

  If you're using Next Docs UI, make sure to import the correct path.

### Minor Changes

- 7a0690b: Export remark-toc and remark-structure MDX plugins

### Patch Changes

- 1043532: Type MDX Plugins

## 2.4.1

### Patch Changes

- dfc8b44: Remove tree root node from breadcrumb
- ef4d8cc: Expose props from SafeLink component

## 2.4.0

### Patch Changes

- 27ce871: Add missing shiki peer deps

## 2.3.3

### Patch Changes

- 634f7d3: Reduce dependencies
- eac081c: Update github urls & author name

## 2.3.2

## 2.3.1

## 2.3.0

### Minor Changes

- 6664178: Support algolia search
- a0f9911: Support `useAlgoliaSearch`
- 6664178: Improve search document structurize algorithm

## 2.2.0

## 2.1.2

### Patch Changes

- dfbbc17: Exclude index page from "..." operator
- 79227d8: Fix breadcrumb resolve index file

## 2.1.1

## 2.1.0

### Patch Changes

- a5a661e: Remove `item` prop from TOC items

## 2.0.3

## 2.0.2

### Patch Changes

- 74e5e85: Contentlayer: Support rest item in meta.json
- 72e9fdf: Contentlayer: Support extracting folder in meta.json

## 2.0.1

### Patch Changes

- 48c5256: Contentlayer: Sort pages by default

## 2.0.0

## 1.6.9

## 1.6.8

## 1.6.7

## 1.6.6

## 1.6.5

### Patch Changes

- 79abe84: Support collapsible sidebar

## 1.6.4

## 1.6.3

### Patch Changes

- 8d07003: Replace type of `TreeNode[]` with `PageTree`

## 1.6.2

## 1.6.1

### Patch Changes

- fc6279e: Support get last git edit time

## 1.6.0

### Minor Changes

- edb9930: Redesign Contentlayer adapter API

### Patch Changes

- cdd30d5: Create remark-dynamic-content plugin

## 1.5.3

### Patch Changes

- fa8d4cf: Update dependencies

## 1.5.2

## 1.5.1

## 1.5.0

### Minor Changes

- fb2abb3: Rewrite create search API & stabilize experimental Advanced Search

## 1.4.1

### Patch Changes

- Support better document search with `experimental_initSearchAPI`
- 3d92c92: Support custom computed fields in Contentlayer

## 1.4.0

### Patch Changes

- 0f106d9: Fix default sidebar element type

## 1.3.1

### Patch Changes

- ff05f5d: Support custom fields in Contentlayer configuration generator
- 7fb2b9e: Support custom page & folder icons

## 1.3.0

### Minor Changes

- 98226d9: Rewrite slugger and TOC utilities

## 1.2.1

### Patch Changes

- b15895f: Remove url prop from page tree folders

## 1.2.0

### Patch Changes

- 5f248fb: Support Auto Scroll in TOC for headless docs

## 1.1.4

### Patch Changes

- 496a6b0: Configure eslint + prettier

## 1.1.3

### Patch Changes

- 0998b1b: Support edge runtime middlewares

## 1.1.2

### Patch Changes

- Fix aria attributes

## 1.1.1

## 1.1.0

### Patch Changes

- 255fc92: Support finding neighbours of a page & Flatten page tree

## 1.0.0

### Major Changes

- 8e4a001: Rewrite Contentlayer tree builder + Support Context API

### Minor Changes

- 4fa45c0: Add support for dynamic hrefs and relative paths to `<SafeLink />`
  component
- 0983891: Add international Docs search

## 0.3.2

## 0.3.1

## 0.3.0

## 0.2.1

### Patch Changes

- 67cd8ab: Remove unused files in dist

## 0.2.0

### Minor Changes

- 5ff94af: Replace TOC data attribute `data-active` with `aria-selected`

### Patch Changes

- 5ff94af: Fix contentlayer parser bugs

## 0.1.0

### Minor Changes

- Add get toc utils for sanity (portable text)

## 0.0.2

### Patch Changes

- d909192: Fix several contentlayer scanner bugs
- e88eec8: Add README



================================================
FILE: packages/core/eslint.config.mjs
================================================
import next from 'eslint-config-custom/next.js';

export default [
  {
    ignores: ['dist/', 'node_modules/', '*.test.ts', '*.output.js'],
  },
  ...next,
  {
    rules: {
      'no-console': 'off',
      // handled by bundler
      'import/no-cycle': 'off',
    },
  },
];



================================================
FILE: packages/core/package.json
================================================
{
  "name": "fumadocs-core",
  "version": "15.6.3",
  "description": "The library for building a documentation website in Next.js",
  "keywords": [
    "NextJs",
    "Docs"
  ],
  "homepage": "https://fumadocs.vercel.app",
  "repository": "github:fuma-nama/fumadocs",
  "license": "MIT",
  "author": "Fuma Nama",
  "type": "module",
  "exports": {
    "./sidebar": {
      "import": "./dist/sidebar.js",
      "types": "./dist/sidebar.d.ts"
    },
    "./breadcrumb": {
      "import": "./dist/breadcrumb.js",
      "types": "./dist/breadcrumb.d.ts"
    },
    "./toc": {
      "import": "./dist/toc.js",
      "types": "./dist/toc.d.ts"
    },
    "./content": {
      "import": "./dist/content/index.js",
      "types": "./dist/content/index.d.ts"
    },
    "./hide-if-empty": {
      "import": "./dist/hide-if-empty.js",
      "types": "./dist/hide-if-empty.d.ts"
    },
    "./search/*": {
      "import": "./dist/search/*.js",
      "types": "./dist/search/*.d.ts"
    },
    "./server": {
      "import": "./dist/server/index.js",
      "types": "./dist/server/index.d.ts"
    },
    "./source": {
      "import": "./dist/source/index.js",
      "types": "./dist/source/index.d.ts"
    },
    "./utils/*": {
      "import": "./dist/utils/*.js",
      "types": "./dist/utils/*.d.ts"
    },
    "./link": {
      "import": "./dist/link.js",
      "types": "./dist/link.d.ts"
    },
    "./dynamic-link": {
      "import": "./dist/dynamic-link.js",
      "types": "./dist/dynamic-link.d.ts"
    },
    "./mdx-plugins": {
      "import": "./dist/mdx-plugins/index.js",
      "types": "./dist/mdx-plugins/index.d.ts"
    },
    "./i18n": {
      "import": "./dist/i18n/index.js",
      "types": "./dist/i18n/index.d.ts"
    },
    "./highlight": {
      "import": "./dist/highlight/index.js",
      "types": "./dist/highlight/index.d.ts"
    },
    "./highlight/client": {
      "import": "./dist/highlight/client.js",
      "types": "./dist/highlight/client.d.ts"
    },
    "./framework": {
      "import": "./dist/framework/index.js",
      "types": "./dist/framework/index.d.ts"
    },
    "./framework/*": {
      "import": "./dist/framework/*.js",
      "types": "./dist/framework/*.d.ts"
    }
  },
  "files": [
    "dist/*"
  ],
  "scripts": {
    "build": "tsup",
    "clean": "rimraf dist",
    "dev": "tsup --watch",
    "lint": "eslint .",
    "types:check": "tsc --noEmit"
  },
  "dependencies": {
    "@formatjs/intl-localematcher": "^0.6.1",
    "@orama/orama": "^3.1.10",
    "@shikijs/rehype": "^3.7.0",
    "@shikijs/transformers": "^3.7.0",
    "github-slugger": "^2.0.0",
    "hast-util-to-estree": "^3.1.3",
    "hast-util-to-jsx-runtime": "^2.3.6",
    "image-size": "^2.0.2",
    "negotiator": "^1.0.0",
    "npm-to-yarn": "^3.0.1",
    "react-remove-scroll": "^2.7.1",
    "remark": "^15.0.0",
    "remark-gfm": "^4.0.1",
    "remark-rehype": "^11.1.2",
    "scroll-into-view-if-needed": "^3.1.0",
    "shiki": "^3.7.0",
    "unist-util-visit": "^5.0.0"
  },
  "devDependencies": {
    "@mdx-js/mdx": "^3.1.0",
    "@oramacloud/client": "^2.1.4",
    "@tanstack/react-router": "^1.125.6",
    "@types/estree-jsx": "^1.0.5",
    "@types/hast": "^3.0.4",
    "@types/mdast": "^4.0.3",
    "@types/negotiator": "^0.6.4",
    "@types/node": "24.0.12",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "algoliasearch": "5.32.0",
    "eslint-config-custom": "workspace:*",
    "mdast-util-mdx-jsx": "^3.2.0",
    "mdast-util-mdxjs-esm": "^2.0.1",
    "next": "^15.3.5",
    "react-router": "^7.6.3",
    "remark-mdx": "^3.1.0",
    "tsconfig": "workspace:*",
    "typescript": "^5.8.3",
    "unified": "^11.0.5",
    "vfile": "^6.0.3"
  },
  "peerDependencies": {
    "@oramacloud/client": "1.x.x || 2.x.x",
    "@types/react": "*",
    "algoliasearch": "5.x.x",
    "next": "14.x.x || 15.x.x",
    "react": "18.x.x || 19.x.x",
    "react-dom": "18.x.x || 19.x.x"
  },
  "peerDependenciesMeta": {
    "@types/react": {
      "optional": true
    },
    "@oramacloud/client": {
      "optional": true
    },
    "algoliasearch": {
      "optional": true
    },
    "next": {
      "optional": true
    },
    "react": {
      "optional": true
    },
    "react-dom": {
      "optional": true
    }
  },
  "publishConfig": {
    "access": "public"
  }
}



================================================
FILE: packages/core/tsconfig.json
================================================
{
  "extends": "tsconfig/react-library.json",
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "exclude": ["node_modules", "dist", "eslint.config.mjs"]
}



================================================
FILE: packages/core/tsup.config.ts
================================================
import { defineConfig } from 'tsup';

export default defineConfig({
  external: [
    'algoliasearch',
    'unified',
    'next',
    'react',
    'react-dom',
    '@tanstack/react-router',
    'react-router',
  ],
  dts: true,
  target: 'es2022',
  format: 'esm',
  entry: [
    'src/{toc,link,breadcrumb,sidebar,dynamic-link,hide-if-empty}.tsx',
    'src/{server,source,mdx-plugins,content}/index.ts',
    'src/search/client.ts',
    'src/search/server.ts',
    'src/search/algolia.ts',
    'src/search/orama-cloud.ts',
    'src/utils/use-on-change.ts',
    'src/utils/use-effect-event.ts',
    'src/utils/use-media-query.ts',
    'src/i18n/index.ts',
    'src/highlight/index.ts',
    'src/highlight/client.tsx',
    'src/framework/*',
  ],
});



================================================
FILE: packages/core/vitest.config.ts
================================================
import { defineProject } from 'vitest/config';

export default defineProject({
  resolve: {
    alias: {
      '@/': new URL('./src/', import.meta.url).pathname,
    },
  },
});



================================================
FILE: packages/core/src/breadcrumb.tsx
================================================
import { type ReactNode, useMemo } from 'react';
import type * as PageTree from '@/server/page-tree';

export interface BreadcrumbItem {
  name: ReactNode;
  url?: string;
}

export interface BreadcrumbOptions {
  /**
   * Include the root itself in the breadcrumb items array.
   * Specify the url by passing an object instead
   *
   * @defaultValue false
   */
  includeRoot?:
    | boolean
    | {
        url: string;
      };

  /**
   * Include the page itself in the breadcrumb items array
   *
   * @defaultValue true
   */
  includePage?: boolean;

  /**
   * Count separator as an item
   *
   * @defaultValue false
   */
  includeSeparator?: boolean;
}

export function useBreadcrumb(
  url: string,
  tree: PageTree.Root,
  options?: BreadcrumbOptions,
): BreadcrumbItem[] {
  return useMemo(
    () => getBreadcrumbItems(url, tree, options),
    [tree, url, options],
  );
}

export function getBreadcrumbItems(
  url: string,
  tree: PageTree.Root,
  options: BreadcrumbOptions = {},
): BreadcrumbItem[] {
  return getBreadcrumbItemsFromPath(
    tree,
    searchPath(tree.children, url) ?? [],
    options,
  );
}

export function getBreadcrumbItemsFromPath(
  tree: PageTree.Root,
  path: PageTree.Node[],
  options: BreadcrumbOptions,
): BreadcrumbItem[] {
  const { includePage = true, includeSeparator = false, includeRoot } = options;
  let items: BreadcrumbItem[] = [];

  path.forEach((item, i) => {
    if (item.type === 'separator' && item.name && includeSeparator) {
      items.push({
        name: item.name,
      });
    }

    if (item.type === 'folder') {
      const next = path.at(i + 1);
      if (next && item.index === next) return;

      if (item.root) {
        items = [];
        return;
      }

      items.push({
        name: item.name,
        url: item.index?.url,
      });
    }

    if (item.type === 'page' && includePage) {
      items.push({
        name: item.name,
        url: item.url,
      });
    }
  });

  if (includeRoot) {
    items.unshift({
      name: tree.name,
      url: typeof includeRoot === 'object' ? includeRoot.url : undefined,
    });
  }

  return items;
}

/**
 * Search the path of a node in the tree by a specified url
 *
 * - When the page doesn't exist, return null
 *
 * @returns The path to the target node from root
 * @internal
 */
export function searchPath(
  nodes: PageTree.Node[],
  url: string,
): PageTree.Node[] | null {
  if (url.endsWith('/')) url = url.slice(0, -1);

  let separator: PageTree.Separator | undefined;

  for (const node of nodes) {
    if (node.type === 'separator') separator = node;

    if (node.type === 'folder') {
      if (node.index?.url === url) {
        const items: PageTree.Node[] = [];

        if (separator) items.push(separator);
        items.push(node, node.index);

        return items;
      }

      const items = searchPath(node.children, url);

      if (items) {
        items.unshift(node);
        if (separator) items.unshift(separator);

        return items;
      }
    }

    if (node.type === 'page' && node.url === url) {
      const items: PageTree.Node[] = [];

      if (separator) items.push(separator);
      items.push(node);

      return items;
    }
  }

  return null;
}



================================================
FILE: packages/core/src/dynamic-link.tsx
================================================
'use client';

import { forwardRef, useMemo } from 'react';
import Link, { type LinkProps } from './link';
import { useParams } from '@/framework';

export type DynamicLinkProps = LinkProps;

/**
 * Extends the default `Link` component
 *
 * It supports dynamic hrefs, which means you can use `/[lang]/my-page` with `dynamicHrefs` enabled
 */

export const DynamicLink = forwardRef<HTMLAnchorElement, DynamicLinkProps>(
  ({ href, ...props }, ref) => {
    const params = useParams();

    const url = useMemo(() => {
      return href?.replace(/\[.*]/, (key) => {
        const mappedKey = key.slice(1, -1);
        const value = mappedKey in params ? params[mappedKey] : undefined;
        if (!value) return '';

        return typeof value === 'string' ? value : value.join('/');
      });
    }, [params, href]);

    return <Link ref={ref} href={url} {...props} />;
  },
);

DynamicLink.displayName = 'DynamicLink';

export default DynamicLink;



================================================
FILE: packages/core/src/hide-if-empty.tsx
================================================
'use client';
import React, { type ReactNode } from 'react';

const isEmpty = (node: HTMLElement) => {
  for (let i = 0; i < node.childNodes.length; i++) {
    const child = node.childNodes.item(i);

    if (
      child.nodeType === Node.TEXT_NODE ||
      (child.nodeType === Node.ELEMENT_NODE &&
        window.getComputedStyle(child as HTMLElement).display !== 'none')
    ) {
      return false;
    }
  }

  return true;
};

/**
 * The built-in CSS `:empty` selector cannot detect if the children is hidden, classes such as `md:hidden` causes it to fail.
 * This component is an enhancement to `empty:hidden` to fix the issue described above.
 *
 * This can be expensive, please avoid this whenever possible.
 */
export function HideIfEmpty({ children }: { children: ReactNode }) {
  const id = React.useId();
  const [empty, setEmpty] = React.useState<boolean | undefined>();

  React.useEffect(() => {
    const element = document.querySelector(
      `[data-fdid="${id}"]`,
    ) as HTMLElement | null;
    if (!element) return;

    const onUpdate = () => {
      setEmpty(isEmpty(element));
    };

    const observer = new ResizeObserver(onUpdate);
    observer.observe(element);
    onUpdate();
    return () => {
      observer.disconnect();
    };
  }, [id]);

  let child;
  if (React.isValidElement(children)) {
    child = React.cloneElement(children, {
      ...(children.props as object),
      'data-fdid': id,
      'data-empty': empty,
      suppressHydrationWarning: true,
    } as object);
  } else {
    child =
      React.Children.count(children) > 1 ? React.Children.only(null) : null;
  }

  return (
    <>
      {child}
      {empty === undefined && (
        <script
          suppressHydrationWarning
          dangerouslySetInnerHTML={{
            __html: `{
const element = document.querySelector('[data-fdid="${id}"]')
if (element) {
  element.setAttribute('data-empty', String((${isEmpty.toString()})(element)))
}}`,
          }}
        />
      )}
    </>
  );
}



================================================
FILE: packages/core/src/link.tsx
================================================
'use client';
import { type AnchorHTMLAttributes, forwardRef } from 'react';
import { Link as Base } from '@/framework';

export interface LinkProps extends AnchorHTMLAttributes<HTMLAnchorElement> {
  /**
   * If the href is an external URL
   *
   * automatically determined by default
   */
  external?: boolean;

  /**
   * Prefetch links, supported on Next.js
   */
  prefetch?: boolean;
}

const Link = forwardRef<HTMLAnchorElement, LinkProps>(
  (
    {
      href = '#',
      external = !(
        href.startsWith('/') ||
        href.startsWith('#') ||
        href.startsWith('.')
      ),
      prefetch,
      ...props
    },
    ref,
  ) => {
    if (external) {
      return (
        <a
          ref={ref}
          href={href}
          rel="noreferrer noopener"
          target="_blank"
          {...props}
        >
          {props.children}
        </a>
      );
    }

    return <Base ref={ref} href={href} prefetch={prefetch} {...props} />;
  },
);

Link.displayName = 'Link';

export { Link as default };



================================================
FILE: packages/core/src/sidebar.tsx
================================================
'use client';
import {
  type ComponentPropsWithoutRef,
  createContext,
  type ElementType,
  type ReactElement,
  type ReactNode,
  useContext,
  useMemo,
  useState,
} from 'react';
import { RemoveScroll } from 'react-remove-scroll';
import { useMediaQuery } from './utils/use-media-query';

const SidebarContext = createContext<SidebarContextType | null>(null);

type SidebarContextType = {
  open: boolean;
  setOpen: (value: boolean) => void;
};

export interface SidebarProviderProps {
  open?: boolean;
  onOpenChange?: (v: boolean) => void;
  children: ReactNode;
}

function useSidebarContext(): SidebarContextType {
  const ctx = useContext(SidebarContext);
  if (!ctx) throw new Error('Missing sidebar provider');
  return ctx;
}

export function SidebarProvider(props: SidebarProviderProps) {
  const [open, setOpen] =
    props.open === undefined
      ? // eslint-disable-next-line react-hooks/rules-of-hooks
        useState(false)
      : [props.open, props.onOpenChange];

  return (
    <SidebarContext.Provider
      value={useMemo(
        () => ({ open, setOpen: setOpen ?? (() => undefined) }),
        [open, setOpen],
      )}
    >
      {props.children}
    </SidebarContext.Provider>
  );
}

type AsProps<T extends ElementType> = Omit<
  ComponentPropsWithoutRef<T>,
  'as'
> & {
  as?: T;
};

export type SidebarTriggerProps<T extends ElementType> = AsProps<T>;

export function SidebarTrigger<T extends ElementType = 'button'>({
  as,
  ...props
}: SidebarTriggerProps<T>): ReactElement {
  const { open, setOpen } = useSidebarContext();
  const As = as ?? 'button';

  return (
    <As
      aria-label="Toggle Sidebar"
      data-open={open}
      onClick={() => {
        setOpen(!open);
      }}
      {...props}
    />
  );
}

export type SidebarContentProps<T extends ElementType> = AsProps<T> & {
  /**
   * Disable scroll blocking when the viewport width is larger than a certain number (in pixels)
   *
   * @deprecated use `removeScrollOn`
   */
  blockScrollingWidth?: number;

  /**
   * A media query.
   *
   * When the sidebar is opening and media query is matched, scrolling outside the sidebar will be blocked.
   *
   * @example (max-width: 1000px)
   */
  removeScrollOn?: string;
};

export function SidebarList<T extends ElementType = 'aside'>({
  as,
  blockScrollingWidth,
  removeScrollOn = blockScrollingWidth
    ? `(width < ${blockScrollingWidth}px)`
    : undefined,
  ...props
}: SidebarContentProps<T>): ReactElement {
  const { open } = useSidebarContext();
  const isBlocking =
    useMediaQuery(removeScrollOn ?? '', !removeScrollOn) ?? false;

  return (
    <RemoveScroll
      as={as ?? 'aside'}
      data-open={open}
      enabled={isBlocking && open}
      {...props}
    >
      {props.children}
    </RemoveScroll>
  );
}



================================================
FILE: packages/core/src/toc.tsx
================================================
'use client';
import type { AnchorHTMLAttributes, ReactNode, RefObject } from 'react';
import { createContext, forwardRef, useContext, useMemo, useRef } from 'react';
import scrollIntoView from 'scroll-into-view-if-needed';
import type { TableOfContents } from '@/server/get-toc';
import { mergeRefs } from '@/utils/merge-refs';
import { useOnChange } from '@/utils/use-on-change';
import { useAnchorObserver } from './utils/use-anchor-observer';

const ActiveAnchorContext = createContext<string[]>([]);

const ScrollContext = createContext<RefObject<HTMLElement | null>>({
  current: null,
});

/**
 * The estimated active heading ID
 */
export function useActiveAnchor(): string | undefined {
  return useContext(ActiveAnchorContext).at(-1);
}

/**
 * The id of visible anchors
 */
export function useActiveAnchors(): string[] {
  return useContext(ActiveAnchorContext);
}

export interface AnchorProviderProps {
  toc: TableOfContents;
  /**
   * Only accept one active item at most
   *
   * @defaultValue true
   */
  single?: boolean;
  children?: ReactNode;
}

export interface ScrollProviderProps {
  /**
   * Scroll into the view of container when active
   */
  containerRef: RefObject<HTMLElement | null>;

  children?: ReactNode;
}

export function ScrollProvider({
  containerRef,
  children,
}: ScrollProviderProps): React.ReactElement {
  return (
    <ScrollContext.Provider value={containerRef}>
      {children}
    </ScrollContext.Provider>
  );
}

export function AnchorProvider({
  toc,
  single = true,
  children,
}: AnchorProviderProps): React.ReactElement {
  const headings = useMemo(() => {
    return toc.map((item) => item.url.split('#')[1]);
  }, [toc]);

  return (
    <ActiveAnchorContext.Provider value={useAnchorObserver(headings, single)}>
      {children}
    </ActiveAnchorContext.Provider>
  );
}

export interface TOCItemProps
  extends Omit<AnchorHTMLAttributes<HTMLAnchorElement>, 'href'> {
  href: string;

  onActiveChange?: (v: boolean) => void;
}

export const TOCItem = forwardRef<HTMLAnchorElement, TOCItemProps>(
  ({ onActiveChange, ...props }, ref) => {
    const containerRef = useContext(ScrollContext);
    const anchors = useActiveAnchors();
    const anchorRef = useRef<HTMLAnchorElement>(null);
    const mergedRef = mergeRefs(anchorRef, ref);

    const isActive = anchors.includes(props.href.slice(1));

    useOnChange(isActive, (v) => {
      const element = anchorRef.current;
      if (!element) return;

      if (v && containerRef.current) {
        scrollIntoView(element, {
          behavior: 'smooth',
          block: 'center',
          inline: 'center',
          scrollMode: 'always',
          boundary: containerRef.current,
        });
      }

      onActiveChange?.(v);
    });

    return (
      <a ref={mergedRef} data-active={isActive} {...props}>
        {props.children}
      </a>
    );
  },
);

TOCItem.displayName = 'TOCItem';



================================================
FILE: packages/core/src/content/index.ts
================================================
import { remark } from 'remark';
import remarkGfm from 'remark-gfm';
import remarkRehype from 'remark-rehype';
import type { VFile } from 'vfile';
import { type Components, toJsxRuntime } from 'hast-util-to-jsx-runtime';
import type { Root } from 'hast';
import * as JsxRuntime from 'react/jsx-runtime';
import type { PluggableList, Processor } from 'unified';
import type { ReactNode } from 'react';

function rehypeReact(
  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- processor errors
  this: Processor<any, any, any, any>,
  options: MarkdownProps = {},
) {
  this.compiler = (tree, file) => {
    return toJsxRuntime(tree as Root, {
      development: false,
      filePath: file.path,
      ...JsxRuntime,
      ...options,
    });
  };
}

interface MarkdownProps {
  components?: Components;
}

export async function Markdown({
  children: content,
  remarkPlugins = [],
  rehypePlugins = [],
  ...options
}: MarkdownProps & {
  remarkPlugins?: PluggableList;
  rehypePlugins?: PluggableList;
  children: string | VFile;
}) {
  const processor = remark()
    .use(remarkGfm)
    .use(remarkPlugins)
    .use(remarkRehype)
    .use(rehypePlugins)
    .use(rehypeReact, options);

  return (await processor.process(content)).result as ReactNode;
}



================================================
FILE: packages/core/src/framework/index.tsx
================================================
'use client';
import type { ComponentProps, FC, ReactNode } from 'react';
import React from 'react';
import type { StaticImport } from 'next/dist/shared/lib/get-img-props';

export interface ImageProps extends Omit<ComponentProps<'img'>, 'src'> {
  sizes?: string;

  /**
   * Next.js Image component has other allowed type for `src`
   */
  src?: string | StaticImport;

  /**
   * priority of image (from Next.js)
   */
  priority?: boolean;
}

interface LinkProps extends ComponentProps<'a'> {
  prefetch?: boolean;
}

export interface Router {
  push: (url: string) => void;
  refresh: () => void;
}

export interface Framework {
  usePathname: () => string;
  useParams: () => Record<string, string | string[]>;
  useRouter: () => Router;

  Link?: FC<
    ComponentProps<'a'> & {
      prefetch?: boolean;
    }
  >;

  Image?: FC<ImageProps>;
}

const notImplemented = () => {
  throw new Error(
    'You need to wrap your application inside `FrameworkProvider`.',
  );
};

const FrameworkContext = createContext<Framework>('FrameworkContext', {
  useParams: notImplemented,
  useRouter: notImplemented,
  usePathname: notImplemented,
});

export function FrameworkProvider({
  Link,
  useRouter,
  useParams,
  usePathname,
  Image,
  children,
}: Framework & { children: ReactNode }) {
  const framework = React.useMemo(
    () => ({
      usePathname,
      useRouter,
      Link,
      Image,
      useParams,
    }),
    [Link, usePathname, useRouter, useParams, Image],
  );

  return (
    <FrameworkContext.Provider value={framework}>
      {children}
    </FrameworkContext.Provider>
  );
}

export function usePathname() {
  return FrameworkContext.use().usePathname();
}

export function useRouter() {
  return FrameworkContext.use().useRouter();
}

export function useParams() {
  return FrameworkContext.use().useParams();
}

export function Image(props: ImageProps) {
  const { Image } = FrameworkContext.use();
  if (!Image) {
    const { src, alt, priority, ...rest } = props;

    return (
      <img
        alt={alt}
        src={src as string}
        fetchPriority={priority ? 'high' : 'auto'}
        {...rest}
      />
    );
  }

  return <Image {...props} />;
}

export function Link(props: LinkProps) {
  const { Link } = FrameworkContext.use();
  if (!Link) {
    const { href, prefetch: _, ...rest } = props;
    return <a href={href} {...rest} />;
  }

  return <Link {...props} />;
}

export function createContext<T>(name: string, v?: T) {
  const Context = React.createContext(v);

  return {
    Provider: (props: { value: T; children: ReactNode }) => {
      return (
        <Context.Provider value={props.value}>
          {props.children}
        </Context.Provider>
      );
    },
    use: (errorMessage?: string): Exclude<T, undefined | null> => {
      const value = React.useContext(Context);

      if (!value)
        throw new Error(
          errorMessage ?? `Provider of ${name} is required but missing.`,
        );
      return value as Exclude<T, undefined | null>;
    },
  };
}



================================================
FILE: packages/core/src/framework/next.tsx
================================================
'use client';
import { type Framework, FrameworkProvider } from '@/framework/index';
import type { ReactNode } from 'react';
import { useParams, usePathname, useRouter } from 'next/navigation';
import Link from 'next/link';
import Image from 'next/image';

export function NextProvider({ children }: { children: ReactNode }) {
  return (
    <FrameworkProvider
      usePathname={usePathname}
      useRouter={useRouter}
      useParams={useParams}
      Link={Link as Framework['Link']}
      Image={Image as Framework['Image']}
    >
      {children}
    </FrameworkProvider>
  );
}



================================================
FILE: packages/core/src/framework/react-router.tsx
================================================
import { type ReactNode, useMemo } from 'react';
import { type Framework, FrameworkProvider } from '@/framework/index';
import {
  Link,
  useLocation,
  useNavigate,
  useParams,
  useRevalidator,
} from 'react-router';

const framework: Framework = {
  usePathname() {
    return useLocation().pathname;
  },
  useParams() {
    return useParams() as Record<string, string | string[]>;
  },
  useRouter() {
    const navigate = useNavigate();
    const revalidator = useRevalidator();

    return useMemo(
      () => ({
        push(url) {
          navigate(url);
        },
        refresh() {
          void revalidator.revalidate();
        },
      }),
      [navigate, revalidator],
    );
  },
  Link({ href, prefetch, ...props }) {
    return (
      <Link to={href!} prefetch={prefetch ? 'intent' : 'none'} {...props}>
        {props.children}
      </Link>
    );
  },
};

export function ReactRouterProvider({ children }: { children: ReactNode }) {
  return <FrameworkProvider {...framework}>{children}</FrameworkProvider>;
}



================================================
FILE: packages/core/src/framework/tanstack.tsx
================================================
import { type ReactNode, useMemo } from 'react';
import { type Framework, FrameworkProvider } from '@/framework/index';
import {
  useParams,
  Link,
  useRouter,
  useLocation,
} from '@tanstack/react-router';

const framework: Framework = {
  Link({ href, prefetch, ...props }) {
    return (
      <Link to={href} preload={prefetch ? 'intent' : false} {...props}>
        {props.children}
      </Link>
    );
  },
  usePathname() {
    return useLocation().pathname;
  },
  useRouter() {
    const router = useRouter();

    return useMemo(
      () => ({
        push(url) {
          void router.navigate({
            href: url,
          });
        },
        refresh() {
          void router.invalidate();
        },
      }),
      [router],
    );
  },
  useParams() {
    return useParams({ strict: false });
  },
};

/**
 * Fumadocs adapter for Tanstack Router/Start
 */
export function TanstackProvider({ children }: { children: ReactNode }) {
  return <FrameworkProvider {...framework}>{children}</FrameworkProvider>;
}



================================================
FILE: packages/core/src/highlight/client.tsx
================================================
'use client';
import {
  type DependencyList,
  type ReactNode,
  use,
  useEffect,
  useId,
  useMemo,
  useRef,
  useState,
} from 'react';
import {
  _highlight,
  _renderHighlight,
  highlight,
  type HighlightOptions,
} from './shiki';
import type { Root } from 'hast';

interface Task {
  key: string;
  aborted: boolean;
}

export function useShiki(
  code: string,
  {
    withPrerenderScript = false,
    loading,
    ...options
  }: HighlightOptions & {
    withPrerenderScript?: boolean;

    /**
     * Displayed before highlighter is loaded.
     */
    loading?: ReactNode;
  },
  deps?: DependencyList,
): ReactNode {
  const markupId = useId();
  const key = useMemo(
    () => (deps ? JSON.stringify(deps) : `${options.lang}:${code}`),
    [code, deps, options.lang],
  );
  const shikiOptions: HighlightOptions = {
    ...options,
    engine: options.engine ?? 'js',
  };

  const currentTask = useRef<Task | undefined>({
    key,
    aborted: false,
  });

  const [rendered, setRendered] = useState<ReactNode>(() => {
    const element =
      withPrerenderScript && typeof document !== 'undefined'
        ? document.querySelector(`[data-markup-id="${markupId}"]`)
        : null;
    const attr = element?.getAttribute('data-markup');

    if (attr) {
      const hast = JSON.parse(attr);
      return renderHighlightWithMarkup(markupId, hast, shikiOptions, attr);
    }

    currentTask.current = undefined;
    return loading;
  });

  useEffect(() => {
    if (currentTask.current?.key === key) return;

    if (currentTask.current) {
      currentTask.current.aborted = true;
    }

    const task: Task = {
      key,
      aborted: false,
    };
    currentTask.current = task;

    void highlight(code, shikiOptions).then((result) => {
      if (!task.aborted) setRendered(result);
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps -- listen for defined deps only
  }, [key]);

  if (typeof window === 'undefined') {
    // return promise on server
    return use(
      _highlight(code, shikiOptions).then((tree) =>
        renderHighlightWithMarkup(markupId, tree, shikiOptions),
      ),
    );
  }

  return rendered;
}

function renderHighlightWithMarkup(
  id: string,
  tree: Root,
  shikiOptions: HighlightOptions,
  rawAttr?: string,
) {
  const Pre = (shikiOptions.components?.pre ?? 'pre') as 'pre';

  return _renderHighlight(tree, {
    ...shikiOptions,
    components: {
      ...shikiOptions.components,
      pre: (props) => (
        <Pre
          {...props}
          data-markup-id={id}
          data-markup={rawAttr ?? JSON.stringify(tree)}
        />
      ),
    },
  });
}



================================================
FILE: packages/core/src/highlight/index.ts
================================================
export {
  highlight,
  getHighlighter,
  type HighlightOptions,
  type HighlightOptionsCommon,
  type HighlightOptionsThemes,
} from './shiki';



================================================
FILE: packages/core/src/highlight/shiki.ts
================================================
import {
  type Awaitable,
  type BundledHighlighterOptions,
  type BundledLanguage,
  type CodeOptionsMeta,
  type CodeOptionsThemes,
  type CodeToHastOptionsCommon,
  type Highlighter,
  type RegexEngine,
} from 'shiki';
import type { BundledTheme } from 'shiki/themes';
import { type Components, toJsxRuntime } from 'hast-util-to-jsx-runtime';
import { Fragment, type ReactNode } from 'react';
import { jsx, jsxs } from 'react/jsx-runtime';
import type { Root } from 'hast';

export const defaultThemes = {
  light: 'github-light',
  dark: 'github-dark',
};

export type HighlightOptionsCommon = CodeToHastOptionsCommon<BundledLanguage> &
  CodeOptionsMeta & {
    engine?: 'js' | 'oniguruma' | Awaitable<RegexEngine>;
    components?: Partial<Components>;

    fallbackLanguage?: BundledLanguage;
  };

export type HighlightOptionsThemes = CodeOptionsThemes<BundledTheme>;

export type HighlightOptions = HighlightOptionsCommon &
  (HighlightOptionsThemes | Record<never, never>);

const highlighters = new Map<string, Promise<Highlighter>>();

export async function _highlight(code: string, options: HighlightOptions) {
  const {
    lang: initialLang,
    fallbackLanguage,
    components: _,
    engine = 'oniguruma',
    ...rest
  } = options;
  let lang = initialLang;
  let themes: CodeOptionsThemes<BundledTheme>;
  let themesToLoad;

  if ('theme' in options && options.theme) {
    themes = { theme: options.theme };
    themesToLoad = [themes.theme];
  } else {
    themes = {
      themes:
        'themes' in options && options.themes ? options.themes : defaultThemes,
    };
    themesToLoad = Object.values(themes.themes).filter((v) => v !== undefined);
  }

  let highlighter;
  if (typeof engine === 'string') {
    highlighter = await getHighlighter(engine, {
      langs: [],
      themes: themesToLoad,
    });
  } else {
    highlighter = await getHighlighter('custom', {
      engine,
      langs: [],
      themes: themesToLoad,
    });

    if (process.env.NODE_ENV === 'development') {
      console.warn(
        '[Fumadocs `highlight()`] Avoid passing `engine` directly. For custom engines, use `shiki` directly instead.',
      );
    }
  }

  try {
    await highlighter.loadLanguage(lang as BundledLanguage);
  } catch {
    lang = fallbackLanguage ?? 'text';
    await highlighter.loadLanguage(lang as BundledLanguage);
  }

  return highlighter.codeToHast(code, {
    lang,
    ...rest,
    ...themes,
    defaultColor: 'themes' in themes ? false : undefined,
  });
}

export function _renderHighlight(hast: Root, options?: HighlightOptions) {
  return toJsxRuntime(hast, {
    jsx,
    jsxs,
    development: false,
    components: options?.components,
    Fragment,
  });
}

/**
 * Get Shiki highlighter instance of Fumadocs (mostly for internal use, don't recommend you to use it).
 *
 * @param engineType - engine type, the engine specified in `options` will only be effective when this is set to `custom`.
 * @param options - Shiki options.
 */
export async function getHighlighter(
  engineType: 'js' | 'oniguruma' | 'custom',
  options: BundledHighlighterOptions<BundledLanguage, BundledTheme>,
) {
  const { createHighlighter } = await import('shiki');
  let highlighter = highlighters.get(engineType);

  if (!highlighter) {
    let engine;

    if (engineType === 'js') {
      engine = import('shiki/engine/javascript').then((res) =>
        res.createJavaScriptRegexEngine(),
      );
    } else if (engineType === 'oniguruma' || !options.engine) {
      engine = import('shiki/engine/oniguruma').then((res) =>
        res.createOnigurumaEngine(import('shiki/wasm')),
      );
    } else {
      engine = options.engine;
    }

    highlighter = createHighlighter({
      ...options,
      engine,
    });

    highlighters.set(engineType, highlighter);
    return highlighter;
  }

  return highlighter.then(async (instance) => {
    await Promise.all([
      // @ts-expect-error unknown
      instance.loadLanguage(...options.langs),
      // @ts-expect-error unknown
      instance.loadTheme(...options.themes),
    ]);

    return instance;
  });
}

export async function highlight(
  code: string,
  options: HighlightOptions,
): Promise<ReactNode> {
  return _renderHighlight(await _highlight(code, options), options);
}



================================================
FILE: packages/core/src/i18n/index.ts
================================================
export * from './middleware';

export interface I18nConfig {
  /**
   * Supported locale codes.
   *
   * A page tree will be built for each language.
   */
  languages: string[];

  /**
   * Default locale if not specified
   */
  defaultLanguage: string;

  /**
   * Don't show the locale prefix on URL.
   *
   * - `always`: Always hide the prefix
   * - `default-locale`: Only hide the default locale
   * - `never`: Never hide the prefix
   *
   * This API uses `NextResponse.rewrite`.
   *
   * @defaultValue 'never'
   */
  hideLocale?: 'always' | 'default-locale' | 'never';

  /**
   * Used by `loader()`, specify the way to parse i18n file structure.
   *
   * @defaultValue 'dot'
   */
  parser?: 'dot' | 'dir';
}



================================================
FILE: packages/core/src/i18n/middleware.ts
================================================
import { match as matchLocale } from '@formatjs/intl-localematcher';
import Negotiator from 'negotiator';
import type { NextMiddleware } from 'next/dist/server/web/types';
import { type NextRequest, NextResponse } from 'next/server';
import type { I18nConfig } from '@/i18n';

interface MiddlewareOptions extends I18nConfig {
  /**
   * A function that adds the locale prefix to path name
   */
  format?: (locale: string, path: string) => string;
}

const COOKIE = 'FD_LOCALE';

function getLocale(
  request: NextRequest,
  locales: string[],
  defaultLanguage: string,
): string {
  // Negotiator expects plain object so we need to transform headers
  const negotiatorHeaders: Record<string, string> = {};
  request.headers.forEach((value, key) => {
    negotiatorHeaders[key] = value;
  });

  // Use negotiator and intl-localematcher to get best locale
  const languages = new Negotiator({ headers: negotiatorHeaders }).languages(
    locales,
  );

  return matchLocale(languages, locales, defaultLanguage);
}

const defaultFormat: NonNullable<MiddlewareOptions['format']> = (
  locale,
  path,
) => {
  return `/${locale}/${path}`;
};

export function createI18nMiddleware({
  languages,
  defaultLanguage,
  format = defaultFormat,
  hideLocale = 'never',
}: MiddlewareOptions): NextMiddleware {
  function getUrl(
    request: NextRequest,
    pathname: string,
    locale?: string,
  ): URL {
    if (!locale) {
      return new URL(
        pathname.startsWith('/') ? pathname : `/${pathname}`,
        request.url,
      );
    }

    return new URL(
      format(locale, pathname.startsWith('/') ? pathname.slice(1) : pathname),
      request.url,
    );
  }

  return (request) => {
    const inputPath = `${request.nextUrl.pathname}${request.nextUrl.search}`;

    const pathLocale = languages.find(
      (locale) =>
        inputPath.startsWith(`/${locale}/`) || inputPath === `/${locale}`,
    );

    if (!pathLocale) {
      if (hideLocale === 'default-locale') {
        return NextResponse.rewrite(
          getUrl(request, inputPath, defaultLanguage),
        );
      }

      const preferred = getLocale(request, languages, defaultLanguage);

      if (hideLocale === 'always') {
        const locale = request.cookies.get(COOKIE)?.value ?? preferred;

        return NextResponse.rewrite(getUrl(request, inputPath, locale));
      }

      return NextResponse.redirect(getUrl(request, inputPath, preferred));
    }

    if (hideLocale === 'always') {
      const path = inputPath.slice(`/${pathLocale}`.length);

      const res = NextResponse.redirect(getUrl(request, path));
      res.cookies.set(COOKIE, pathLocale);
      return res;
    }

    // Remove explicit default locale
    // (Only possible for default locale)
    if (hideLocale === 'default-locale' && pathLocale === defaultLanguage) {
      return NextResponse.redirect(
        getUrl(request, inputPath.slice(`/${pathLocale}`.length)),
      );
    }

    return NextResponse.next();
  };
}



================================================
FILE: packages/core/src/mdx-plugins/hast-utils.ts
================================================
import type { Element, Root, RootContent } from 'hast';

/**
 * Visit a node with filtered tag names
 */
export function visit(
  node: RootContent | Root,
  tagNames: string[],
  handler: (node: Element) => 'skip' | undefined,
): void {
  if (node.type === 'element' && tagNames.includes(node.tagName)) {
    const result = handler(node);
    if (result === 'skip') return;
  }

  if ('children' in node)
    node.children.forEach((n) => {
      visit(n, tagNames, handler);
    });
}



================================================
FILE: packages/core/src/mdx-plugins/index.ts
================================================
export {
  default as remarkGfm,
  type Options as RemarkGfmOptions,
} from 'remark-gfm';
export * from './rehype-code';
export * from './remark-image';
export * from './remark-structure';
export * from './remark-heading';
export * from './remark-admonition';
export * from './rehype-toc';
export * from './remark-code-tab';
export * from './remark-steps';
export * from './remark-npm';



================================================
FILE: packages/core/src/mdx-plugins/rehype-code.ts
================================================
import type { Root } from 'hast';
import type { RehypeShikiOptions } from '@shikijs/rehype';
import rehypeShikiFromHighlighter from '@shikijs/rehype/core';
import {
  transformerNotationDiff,
  transformerNotationFocus,
  transformerNotationHighlight,
  transformerNotationWordHighlight,
} from '@shikijs/transformers';
import type { Processor, Transformer } from 'unified';
import {
  type BuiltinTheme,
  bundledLanguages,
  type ShikiTransformer,
} from 'shiki';
import type { MdxJsxFlowElement } from 'mdast-util-mdx-jsx';
import type { CodeBlockIcon, IconOptions } from './transformer-icon';
import { transformerIcon } from './transformer-icon';
import { defaultThemes, getHighlighter } from '@/highlight/shiki';

type Meta = Record<string, unknown>;

type MetaValue =
  | {
      name: string;
      regex: RegExp;
    }
  | {
      regex: RegExp;
      onSet: (map: Meta, match: string[]) => void;
    };

/**
 * Custom meta string values
 */
const metaValues: MetaValue[] = [
  {
    name: 'title',
    regex: /title="(?<value>[^"]*)"/,
  },
  {
    name: 'custom',
    regex: /custom="(?<value>[^"]+)"/,
  },
  {
    name: 'tab',
    regex: /tab="(?<value>[^"]+)"/,
  },
  {
    regex: /lineNumbers=(\d+)|lineNumbers/,
    onSet(map, args) {
      map['data-line-numbers'] = true;
      if (args[0] !== undefined)
        map['data-line-numbers-start'] = Number(args[0]);
    },
  },
];

export const rehypeCodeDefaultOptions: RehypeCodeOptions = {
  lazy: true,
  themes: defaultThemes,
  defaultColor: false,
  defaultLanguage: 'plaintext',
  experimentalJSEngine: false,
  transformers: [
    transformerNotationHighlight({
      matchAlgorithm: 'v3',
    }),
    transformerNotationWordHighlight({
      matchAlgorithm: 'v3',
    }),
    transformerNotationDiff({
      matchAlgorithm: 'v3',
    }),
    transformerNotationFocus({
      matchAlgorithm: 'v3',
    }),
  ],
  parseMetaString(meta) {
    const map: Meta = {};

    for (const value of metaValues) {
      meta = meta.replace(value.regex, (_, ...args) => {
        if ('onSet' in value) {
          value.onSet(map, args);
        } else {
          const first = args.at(0);
          map[value.name] = typeof first === 'string' ? first : '';
        }

        return '';
      });
    }

    map.__parsed_raw = meta;
    return map;
  },
};

export type RehypeCodeOptions = RehypeShikiOptions & {
  /**
   * Filter meta string before processing
   */
  filterMetaString?: (metaString: string) => string;

  /**
   * Add icon to code blocks
   */
  icon?: IconOptions | false;

  /**
   * Wrap code blocks in `<Tab>` component when "tab" meta string presents
   *
   * @defaultValue true
   */
  tab?: false;

  /**
   * Enable Shiki's experimental JS engine
   *
   * @defaultValue false
   */
  experimentalJSEngine?: boolean;
};

/**
 * Handle codeblocks
 */
export function rehypeCode(
  this: Processor,
  _options: Partial<RehypeCodeOptions> = {},
): Transformer<Root, Root> {
  const options: RehypeCodeOptions = {
    ...rehypeCodeDefaultOptions,
    ..._options,
  };

  const transformers = [...(options.transformers ?? [])];
  transformers.unshift({
    name: 'rehype-code:pre-process',
    preprocess(code, { meta }) {
      if (meta && '__parsed_raw' in meta) {
        meta.__raw = meta.__parsed_raw;
        delete meta.__parsed_raw;
      }

      if (meta && options.filterMetaString) {
        meta.__raw = options.filterMetaString(meta.__raw ?? '');
      }

      // Remove empty line at end
      return code.replace(/\n$/, '');
    },
  });

  if (options.icon !== false) {
    transformers.push(transformerIcon(options.icon));
  }

  if (options.tab !== false) {
    transformers.push(transformerTab());
  }

  const highlighter = getHighlighter(
    options.experimentalJSEngine ? 'js' : 'oniguruma',
    {
      themes:
        'themes' in options
          ? (Object.values(options.themes).filter(Boolean) as BuiltinTheme[])
          : [options.theme],
      langs:
        options.langs ??
        (options.lazy ? ['ts', 'tsx'] : Object.keys(bundledLanguages)),
    },
  );

  const transformer = highlighter.then((loaded) =>
    rehypeShikiFromHighlighter(loaded, {
      ...options,
      transformers,
    }),
  );

  return async (tree, file) => {
    await (
      await transformer
    )(tree, file, () => {
      // nothing
    });
  };
}

function transformerTab(): ShikiTransformer {
  return {
    name: 'rehype-code:tab',
    // @ts-expect-error -- types not compatible with MDX
    root(root) {
      const value = this.options.meta?.tab;
      if (typeof value !== 'string') return root;
      console.warn(
        '[Fumadocs] For `tab="value" in codeblocks, please use `remarkCodeTab` plugin instead.',
      );

      return {
        type: 'root',
        children: [
          {
            type: 'mdxJsxFlowElement',
            name: 'Tab',
            data: {
              _codeblock: true,
            },
            attributes: [{ type: 'mdxJsxAttribute', name: 'value', value }],
            children: root.children,
          } as MdxJsxFlowElement,
        ],
      };
    },
  };
}

export { type CodeBlockIcon, transformerIcon, transformerTab };



================================================
FILE: packages/core/src/mdx-plugins/rehype-toc.ts
================================================
import type { Processor, Transformer } from 'unified';
import type { Root, RootContent } from 'hast';
import { toEstree } from 'hast-util-to-estree';
import type { Declaration, JSXElement } from 'estree-jsx';
import { visit } from '@/mdx-plugins/hast-utils';

export interface RehypeTocOptions {
  /**
   * Export generated toc as a variable
   *
   * @defaultValue true
   */
  exportToc?: boolean;
}

const TocOnlyTag = '[toc]';
const NoTocTag = '[!toc]';

export function rehypeToc(
  this: Processor,
  { exportToc = true }: RehypeTocOptions = {},
): Transformer<Root, Root> {
  return (tree) => {
    const output: {
      title: JSXElement;
      url: string;
      depth: number;
    }[] = [];

    visit(tree, ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'], (element) => {
      const id = element.properties.id as string | undefined;
      if (!id) return 'skip';
      let isTocOnly = false;

      const last = element.children.at(-1);
      if (last?.type === 'text' && last.value.endsWith(TocOnlyTag)) {
        isTocOnly = true;
        last.value = last.value
          .substring(0, last.value.length - TocOnlyTag.length)
          .trimEnd();
      } else if (last?.type === 'text' && last.value.endsWith(NoTocTag)) {
        last.value = last.value
          .substring(0, last.value.length - NoTocTag.length)
          .trimEnd();
        return 'skip';
      }

      const estree = toEstree(element, {
        elementAttributeNameCase: 'react',
        stylePropertyNameCase: 'dom',
      });

      if (estree.body[0].type === 'ExpressionStatement')
        output.push({
          title: estree.body[0].expression as unknown as JSXElement,
          depth: Number(element.tagName.slice(1)),
          url: `#${id}`,
        });

      if (isTocOnly) {
        Object.assign(element, {
          type: 'comment',
          value: '',
        } satisfies RootContent);
      }

      return 'skip';
    });

    const declaration: Declaration = {
      type: 'VariableDeclaration',
      kind: 'const',
      declarations: [
        {
          type: 'VariableDeclarator',
          id: {
            type: 'Identifier',
            name: 'toc',
          },
          init: {
            type: 'ArrayExpression',
            elements: output.map((item) => ({
              type: 'ObjectExpression',
              properties: [
                {
                  type: 'Property',
                  method: false,
                  shorthand: false,
                  computed: false,
                  key: {
                    type: 'Identifier',
                    name: 'depth',
                  },
                  value: {
                    type: 'Literal',
                    value: item.depth,
                  },
                  kind: 'init',
                },
                {
                  type: 'Property',
                  method: false,
                  shorthand: false,
                  computed: false,
                  key: {
                    type: 'Identifier',
                    name: 'url',
                  },
                  value: {
                    type: 'Literal',
                    value: item.url,
                  },
                  kind: 'init',
                },
                {
                  type: 'Property',
                  method: false,
                  shorthand: false,
                  computed: false,
                  key: {
                    type: 'Identifier',
                    name: 'title',
                  },
                  value: {
                    type: 'JSXFragment',
                    openingFragment: { type: 'JSXOpeningFragment' },
                    closingFragment: { type: 'JSXClosingFragment' },
                    children: item.title.children,
                  },
                  kind: 'init',
                },
              ],
            })),
          },
        },
      ],
    };

    tree.children.push({
      type: 'mdxjsEsm',
      value: '',
      data: {
        estree: {
          type: 'Program',
          body: [
            exportToc
              ? {
                  type: 'ExportNamedDeclaration',
                  declaration,
                  attributes: [],
                  specifiers: [],
                }
              : declaration,
          ],
          sourceType: 'module',
          comments: [],
        },
      },
    } satisfies RootContent);
  };
}



================================================
FILE: packages/core/src/mdx-plugins/remark-admonition.ts
================================================
import { type Transformer } from 'unified';
import { visit } from 'unist-util-visit';
import { type Root, type RootContent } from 'mdast';
import { flattenNode } from '@/mdx-plugins/remark-utils';

export interface RemarkAdmonitionOptions {
  tag?: string;

  /**
   * Map type to another type
   */
  typeMap?: Record<string, string>;
}

/**
 * Remark Plugin to support Admonition syntax
 *
 * Useful when Migrating from Docusaurus
 */
export function remarkAdmonition(
  options: RemarkAdmonitionOptions = {},
): Transformer<Root, Root> {
  const tag = options.tag ?? ':::';
  // compatible with Docusaurus
  const typeMap = options.typeMap ?? {
    info: 'info',
    warn: 'warn',

    note: 'info',
    tip: 'info',
    warning: 'warn',
    danger: 'error',
  };

  function replaceNodes(nodes: RootContent[]) {
    if (nodes.length === 0) return;

    let open = -1;
    let attributes = [];
    // if children contain nested admonitions
    let hasIntercept = false;

    for (let i = 0; i < nodes.length; i++) {
      if (nodes[i].type !== 'paragraph') continue;

      const text = flattenNode(nodes[i]);
      const typeName = Object.keys(typeMap).find((type) =>
        text.startsWith(`${tag}${type}`),
      );

      if (typeName) {
        if (open !== -1) {
          hasIntercept = true;
          continue;
        }

        open = i;

        attributes.push({
          type: 'mdxJsxAttribute',
          name: 'type',
          value: typeMap[typeName],
        });

        const meta = text.slice(`${tag}${typeName}`.length);
        if (meta.startsWith('[') && meta.endsWith(']')) {
          attributes.push({
            type: 'mdxJsxAttribute',
            name: 'title',
            value: meta.slice(1, -1),
          });
        }
      }

      if (open !== -1 && text === tag) {
        const children = nodes.slice(open + 1, i);

        nodes.splice(open, i - open + 1, {
          type: 'mdxJsxFlowElement',
          name: 'Callout',
          attributes,
          children: hasIntercept ? replaceNodes(children) : children,
        } as RootContent);
        open = -1;
        hasIntercept = false;
        attributes = [];
        i = open;
      }
    }
  }

  return (tree) => {
    visit(tree, (node) => {
      if (!('children' in node)) return;

      replaceNodes(node.children);
    });
  };
}



================================================
FILE: packages/core/src/mdx-plugins/remark-code-tab.ts
================================================
import type { Processor, Transformer } from 'unified';
import type { Code, Root } from 'mdast';
import { visit } from 'unist-util-visit';
import type { MdxJsxFlowElement } from 'mdast-util-mdx-jsx';

const TabRegex = /tab="(.+?)"/;

type TabType = keyof typeof Types;
export interface RemarkCodeTabOptions {
  Tabs?: TabType;

  /**
   * Parse MDX in tab values
   *
   * @defaultValue false
   */
  parseMdx?: boolean;
}

const Tabs = {
  convert(
    processor: Processor,
    nodes: Code[],
    withMdx = false,
    withParent = true,
  ): MdxJsxFlowElement {
    const names = processTabValue(nodes);

    if (!withMdx) {
      const children: MdxJsxFlowElement[] = nodes.map((node, i) => {
        return {
          type: 'mdxJsxFlowElement',
          name: 'Tab',
          attributes: [
            {
              type: 'mdxJsxAttribute',
              name: 'value',
              value: names[i],
            },
          ],
          children: [node],
        };
      });

      if (!withParent) return createFragment(children);

      return {
        type: 'mdxJsxFlowElement',
        name: 'Tabs',
        attributes: [
          {
            type: 'mdxJsxAttribute',
            name: 'items',
            value: {
              type: 'mdxJsxAttributeValueExpression',
              value: names.join(', '),
              data: {
                estree: {
                  type: 'Program',
                  sourceType: 'module',
                  comments: [],
                  body: [
                    {
                      type: 'ExpressionStatement',
                      expression: {
                        type: 'ArrayExpression',
                        elements: names.map((name) => ({
                          type: 'Literal',
                          value: name,
                        })),
                      },
                    },
                  ],
                },
              },
            },
          },
        ],
        children,
      };
    }

    const children: MdxJsxFlowElement[] = [
      {
        type: 'mdxJsxFlowElement',
        name: 'TabsList',
        attributes: [],
        children: names.map((name) => ({
          type: 'mdxJsxFlowElement',
          name: 'TabsTrigger',
          attributes: [
            {
              type: 'mdxJsxAttribute',
              name: 'value',
              value: name,
            },
          ],
          children: [
            // eslint-disable-next-line @typescript-eslint/no-explicit-any -- needed
            mdxToAst(processor, name) as any,
          ],
        })),
      },
      ...nodes.map(
        (node, i) =>
          ({
            type: 'mdxJsxFlowElement',
            name: 'TabsContent',
            attributes: [
              {
                type: 'mdxJsxAttribute',
                name: 'value',
                value: names[i],
              },
            ],
            children: [node],
          }) as MdxJsxFlowElement,
      ),
    ];

    if (!withParent) return createFragment(children);

    return {
      type: 'mdxJsxFlowElement',
      name: 'Tabs',
      attributes: [
        {
          type: 'mdxJsxAttribute',
          name: 'defaultValue',
          value: names[0],
        },
      ],
      children,
    };
  },
};

const CodeBlockTabs = {
  convert(
    processor: Processor,
    nodes: Code[],
    withMdx = false,
    withParent = true,
  ): MdxJsxFlowElement {
    const names = processTabValue(nodes);
    const children: MdxJsxFlowElement[] = [
      {
        type: 'mdxJsxFlowElement',
        name: 'CodeBlockTabsList',
        attributes: [],
        children: names.map((name) => {
          return {
            type: 'mdxJsxFlowElement',
            name: 'CodeBlockTabsTrigger',
            attributes: [
              {
                type: 'mdxJsxAttribute',
                name: 'value',
                value: name,
              },
            ],
            children: [
              withMdx
                ? // eslint-disable-next-line @typescript-eslint/no-explicit-any -- needed
                  (mdxToAst(processor, name) as any)
                : {
                    type: 'text',
                    value: name,
                  },
            ],
          };
        }),
      },
      ...nodes.map((node, i) => {
        return {
          type: 'mdxJsxFlowElement',
          name: 'CodeBlockTab',
          attributes: [
            {
              type: 'mdxJsxAttribute',
              name: 'value',
              value: names[i],
            },
          ],
          children: [node],
        } as MdxJsxFlowElement;
      }),
    ];

    if (!withParent) return createFragment(children);

    return {
      type: 'mdxJsxFlowElement',
      name: 'CodeBlockTabs',
      attributes: [
        {
          type: 'mdxJsxAttribute',
          name: 'defaultValue',
          value: names[0],
        },
      ],
      children,
    };
  },
};

const Types = {
  CodeBlockTabs,
  Tabs,
};

export function remarkCodeTab(
  this: Processor,
  options: RemarkCodeTabOptions = {},
): Transformer<Root, Root> {
  const { parseMdx = false, Tabs = 'CodeBlockTabs' } = options;

  return (tree) => {
    visit(tree, (node) => {
      if (!('children' in node)) return;
      let start = -1;
      let i = 0;
      let localTabs: TabType = Tabs;
      let localParseMdx = parseMdx;
      let withParent = true;

      if (
        node.type === 'mdxJsxFlowElement' &&
        node.name &&
        node.name in Types
      ) {
        withParent = false;
        localTabs = node.name as TabType;

        // for `Tabs` in simple mode, it doesn't support MDX tab names
        if (node.name === 'Tabs') {
          localParseMdx = node.attributes.every(
            (attribute) =>
              attribute.type !== 'mdxJsxAttribute' ||
              attribute.name !== 'items',
          );
        }
      }

      while (i < node.children.length) {
        const child = node.children[i];
        const isSwitcher =
          child.type === 'code' && child.meta && child.meta.match(TabRegex);

        if (isSwitcher && start === -1) {
          start = i;
        }

        // if switcher code blocks terminated, convert them to tabs
        const isLast = i === node.children.length - 1;
        if (start !== -1 && (isLast || !isSwitcher)) {
          const end = isSwitcher ? i + 1 : i;
          const targets = node.children.slice(start, end) as Code[];
          const replacement = Types[localTabs].convert(
            this,
            targets,
            localParseMdx,
            withParent,
          );

          node.children.splice(start, end - start, replacement);
          if (isLast) break;
          i = start + 1;
          start = -1;
        } else {
          i++;
        }
      }
    });
  };
}

function processTabValue(nodes: Code[]) {
  return nodes.map((node, i) => {
    let title = `Tab ${i + 1}`;

    node.meta = node.meta?.replace(TabRegex, (_, value) => {
      title = value;
      return '';
    });

    return title;
  });
}

/**
 * MDX tab name to tab trigger node children
 */
function mdxToAst(processor: Processor, name: string) {
  const node = processor.parse(name) as Root;

  if (node.type === 'root') {
    node.children = node.children.flatMap((child) => {
      if (child.type === 'paragraph') return child.children;

      return child;
    });
  }

  return node;
}

function createFragment(children: MdxJsxFlowElement[]): MdxJsxFlowElement {
  return {
    type: 'mdxJsxFlowElement',
    name: null,
    attributes: [],
    children,
  };
}



================================================
FILE: packages/core/src/mdx-plugins/remark-heading.ts
================================================
import Slugger from 'github-slugger';
import type { Heading, Root } from 'mdast';
import type { Transformer } from 'unified';
import { visit } from 'unist-util-visit';
import type { TOCItemType } from '@/server/get-toc';
import { flattenNode } from '@/mdx-plugins/remark-utils';

const slugger = new Slugger();

declare module 'mdast' {
  export interface HeadingData extends Data {
    hProperties?: {
      id?: string;
    };
  }
}

const regex = /\s*\[#(?<slug>[^]+?)]\s*$/;

export interface RemarkHeadingOptions {
  slug?: (root: Root, heading: Heading, text: string) => string;

  /**
   * Allow custom headings ids
   *
   * @defaultValue true
   */
  customId?: boolean;

  /**
   * Attach an array of `TOCItemType` to `file.data.toc`
   *
   * @defaultValue true
   */
  generateToc?: boolean;
}

/**
 * Add heading ids and extract TOC
 */
export function remarkHeading({
  slug: defaultSlug,
  customId = true,
  generateToc = true,
}: RemarkHeadingOptions = {}): Transformer<Root, Root> {
  return (root, file) => {
    const toc: TOCItemType[] = [];
    slugger.reset();

    visit(root, 'heading', (heading) => {
      heading.data ||= {};
      heading.data.hProperties ||= {};

      let id = heading.data.hProperties.id;
      const lastNode = heading.children.at(-1);

      if (!id && lastNode?.type === 'text' && customId) {
        const match = regex.exec(lastNode.value);

        if (match?.[1]) {
          id = match[1];
          lastNode.value = lastNode.value.slice(0, match.index);
        }
      }

      let flattened: string | null = null;
      if (!id) {
        flattened ??= flattenNode(heading);

        id = defaultSlug
          ? defaultSlug(root, heading, flattened)
          : slugger.slug(flattened);
      }

      heading.data.hProperties.id = id;

      if (generateToc) {
        toc.push({
          title: flattened ?? flattenNode(heading),
          url: `#${id}`,
          depth: heading.depth,
        });
      }

      return 'skip';
    });

    if (generateToc) file.data.toc = toc;
  };
}



================================================
FILE: packages/core/src/mdx-plugins/remark-image.ts
================================================
import * as path from 'node:path';
import type { Root } from 'mdast';
import type { Transformer } from 'unified';
import { visit } from 'unist-util-visit';
import { imageSize } from 'image-size';
import type { MdxjsEsm } from 'mdast-util-mdxjs-esm';
import { joinPath, slash } from '@/utils/path';
import type { ISizeCalculationResult } from 'image-size/types/interface';
import { imageSizeFromFile } from 'image-size/fromFile';

const VALID_BLUR_EXT = ['.jpeg', '.png', '.webp', '.avif', '.jpg'];
const EXTERNAL_URL_REGEX = /^https?:\/\//;

export interface RemarkImageOptions {
  /**
   * Directory or base URL to resolve absolute image paths
   */
  publicDir?: string;

  /**
   * Preferred placeholder type
   *
   * @defaultValue 'blur'
   */
  placeholder?: 'blur' | 'none';

  /**
   * Import images in the file, and let bundlers handle it.
   *
   * ```tsx
   * import MyImage from "./public/img.png";
   *
   * <img src={MyImage} />
   * ```
   *
   * When disabled, `placeholder` will be ignored.
   *
   * @defaultValue true
   */
  useImport?: boolean;

  /**
   * Fetch image size of external URLs
   *
   * @defaultValue true
   */
  external?: boolean;
}

// Based on the Nextra: https://github.com/shuding/nextra

/**
 * Turn images into Next.js Image compatible usage.
 */
export function remarkImage({
  placeholder = 'blur',
  external = true,
  useImport = true,
  publicDir = path.join(process.cwd(), 'public'),
}: RemarkImageOptions = {}): Transformer<Root, Root> {
  return async (tree, file) => {
    const importsToInject: { variableName: string; importPath: string }[] = [];
    const promises: Promise<void>[] = [];

    function getImportPath(src: string): string {
      if (!src.startsWith('/')) return src;
      const to = path.join(publicDir, src);

      if (file.dirname) {
        const relative = slash(path.relative(file.dirname, to));

        return relative.startsWith('./') ? relative : `./${relative}`;
      }

      return slash(to);
    }

    visit(tree, 'image', (node) => {
      const url = decodeURI(node.url);
      if (!url) return;
      const isExternal = EXTERNAL_URL_REGEX.test(url);

      if ((isExternal && external) || !useImport) {
        const task = getImageSize(url, publicDir)
          .then((size) => {
            if (!size.width || !size.height) return;

            Object.assign(node, {
              type: 'mdxJsxFlowElement',
              name: 'img',
              attributes: [
                {
                  type: 'mdxJsxAttribute',
                  name: 'alt',
                  value: node.alt ?? 'image',
                },
                {
                  type: 'mdxJsxAttribute',
                  name: 'src',
                  value: url,
                },
                {
                  type: 'mdxJsxAttribute',
                  name: 'width',
                  value: size.width.toString(),
                },
                {
                  type: 'mdxJsxAttribute',
                  name: 'height',
                  value: size.height.toString(),
                },
              ],
            });
          })
          .catch((e) => {
            throw new Error(
              `[Remark Image] Failed obtain image size for ${url} (public directory configured as ${publicDir})`,
              {
                cause: e,
              },
            );
          });

        promises.push(task);
      } else if (!isExternal) {
        // Unique variable name for the given static image URL
        const variableName = `__img${importsToInject.length.toString()}`;
        const hasBlur =
          placeholder === 'blur' &&
          VALID_BLUR_EXT.some((ext) => url.endsWith(ext));

        importsToInject.push({
          variableName,
          importPath: getImportPath(url),
        });

        Object.assign(node, {
          type: 'mdxJsxFlowElement',
          name: 'img',
          attributes: [
            {
              type: 'mdxJsxAttribute',
              name: 'alt',
              value: node.alt ?? 'image',
            },
            hasBlur && {
              type: 'mdxJsxAttribute',
              name: 'placeholder',
              value: 'blur',
            },
            {
              type: 'mdxJsxAttribute',
              name: 'src',
              value: {
                type: 'mdxJsxAttributeValueExpression',
                value: variableName,
                data: {
                  estree: {
                    body: [
                      {
                        type: 'ExpressionStatement',
                        expression: { type: 'Identifier', name: variableName },
                      },
                    ],
                  },
                },
              },
            },
          ].filter(Boolean),
        });
      }
    });

    await Promise.all(promises);
    if (importsToInject.length === 0) return;

    const imports = importsToInject.map(
      ({ variableName, importPath }) =>
        ({
          type: 'mdxjsEsm',
          data: {
            estree: {
              body: [
                {
                  type: 'ImportDeclaration',
                  source: { type: 'Literal', value: importPath },
                  specifiers: [
                    {
                      type: 'ImportDefaultSpecifier',
                      local: { type: 'Identifier', name: variableName },
                    },
                  ],
                },
              ],
            },
          },
        }) as MdxjsEsm,
    );

    tree.children.unshift(...imports);
  };
}

async function getImageSize(
  src: string,
  dir: string,
): Promise<ISizeCalculationResult> {
  const isRelative = src.startsWith('/') || !path.isAbsolute(src);
  let url: string;

  if (EXTERNAL_URL_REGEX.test(src)) {
    url = src;
  } else if (EXTERNAL_URL_REGEX.test(dir) && isRelative) {
    const base = new URL(dir);
    base.pathname = joinPath(base.pathname, src);
    url = base.toString();
  } else {
    return imageSizeFromFile(isRelative ? path.join(dir, src) : src);
  }

  const res = await fetch(url);
  if (!res.ok) {
    throw new Error(
      `[Remark Image] Failed to fetch ${url} (${res.status}): ${await res.text()}`,
    );
  }

  return imageSize(new Uint8Array(await res.arrayBuffer()));
}



================================================
FILE: packages/core/src/mdx-plugins/remark-npm.ts
================================================
import type { Root } from 'mdast';
import type { Transformer } from 'unified';
import { visit } from 'unist-util-visit';
import convert from 'npm-to-yarn';
import type { MdxJsxAttribute, MdxJsxFlowElement } from 'mdast-util-mdx-jsx';

interface PackageManager {
  name: string;

  /**
   * Convert from npm to another package manager
   */
  command: (command: string) => string;
}

export interface RemarkNpmOptions {
  /**
   * Persist Tab value (Fumadocs UI only)
   *
   * @defaultValue false
   */
  persist?:
    | {
        id: string;
      }
    | false;

  packageManagers?: PackageManager[];
}

const aliases = ['npm', 'package-install'];

/**
 * It generates multiple tabs of codeblocks for different package managers from a npm command codeblock.
 */
export function remarkNpm({
  persist = false,
  packageManagers = [
    { command: (cmd) => convert(cmd, 'npm'), name: 'npm' },
    { command: (cmd) => convert(cmd, 'pnpm'), name: 'pnpm' },
    { command: (cmd) => convert(cmd, 'yarn'), name: 'yarn' },
    { command: (cmd) => convert(cmd, 'bun'), name: 'bun' },
  ],
}: RemarkNpmOptions = {}): Transformer<Root, Root> {
  return (tree) => {
    visit(tree, 'code', (node) => {
      if (!node.lang || !aliases.includes(node.lang)) return 'skip';

      const value =
        node.value.startsWith('npm') || node.value.startsWith('npx')
          ? node.value
          : `npm install ${node.value}`;
      const attributes: MdxJsxAttribute[] = [
        {
          type: 'mdxJsxAttribute',
          name: 'defaultValue',
          value: packageManagers[0].name,
        },
      ];

      if (typeof persist === 'object') {
        attributes.push(
          {
            type: 'mdxJsxAttribute',
            name: 'groupId',
            value: persist.id,
          },
          {
            type: 'mdxJsxAttribute',
            name: 'persist',
            value: null,
          },
        );
      }

      const children: MdxJsxFlowElement[] = [
        {
          type: 'mdxJsxFlowElement',
          name: 'CodeBlockTabsList',
          attributes: [],
          children: packageManagers.map(
            ({ name }) =>
              ({
                type: 'mdxJsxFlowElement',
                attributes: [
                  { type: 'mdxJsxAttribute', name: 'value', value: name },
                ],
                name: 'CodeBlockTabsTrigger',
                children: [
                  {
                    type: 'text',
                    value: name,
                  } as unknown,
                ],
              }) as MdxJsxFlowElement,
          ),
        },
      ];

      for (const { name, command } of packageManagers) {
        children.push({
          type: 'mdxJsxFlowElement',
          name: 'CodeBlockTab',
          attributes: [{ type: 'mdxJsxAttribute', name: 'value', value: name }],
          children: [
            {
              type: 'code',
              lang: 'bash',
              meta: node.meta,
              value: command(value),
            },
          ],
        });
      }

      const tab: MdxJsxFlowElement = {
        type: 'mdxJsxFlowElement',
        name: 'CodeBlockTabs',
        attributes,
        children,
      };

      Object.assign(node, tab);
      return;
    });
  };
}



================================================
FILE: packages/core/src/mdx-plugins/remark-steps.ts
================================================
import type { Transformer } from 'unified';
import type { BlockContent, Heading, Root, RootContent } from 'mdast';
import { visit } from 'unist-util-visit';
import type { MdxJsxFlowElement } from 'mdast-util-mdx-jsx';

export interface RemarkStepsOptions {
  /**
   * Class name for steps container
   *
   * @defaultValue fd-steps
   */
  steps?: string;

  /**
   * Class name for step container
   *
   * @defaultValue fd-step
   */
  step?: string;
}

const StepRegex = /^(\d+)\.\s(.+)$/;

/**
 * Convert headings in the format of `1. Hello World` into steps.
 */
export function remarkSteps({
  steps = 'fd-steps',
  step = 'fd-step',
}: RemarkStepsOptions = {}): Transformer<Root, Root> {
  function convertToSteps(nodes: RootContent[]): MdxJsxFlowElement {
    const depth = (nodes[0] as Heading).depth;
    const children: MdxJsxFlowElement[] = [];

    for (const node of nodes) {
      if (node.type === 'heading' && node.depth === depth) {
        children.push({
          type: 'mdxJsxFlowElement',
          name: 'div',
          attributes: [
            {
              type: 'mdxJsxAttribute',
              name: 'className',
              value: step,
            },
          ],
          children: [node],
        });
      } else {
        children[children.length - 1].children.push(node as BlockContent);
      }
    }

    return {
      type: 'mdxJsxFlowElement',
      name: 'div',
      attributes: [
        {
          type: 'mdxJsxAttribute',
          name: 'className',
          value: steps,
        },
      ],
      data: {
        _fd_step: true,
      } as object,
      children,
    };
  }

  return (tree) => {
    visit(tree, (parent) => {
      if (!('children' in parent) || parent.type === 'heading') return;
      if (parent.data && '_fd_step' in parent.data) return 'skip';

      let startIdx = -1;
      let i = 0;

      const onEnd = () => {
        if (startIdx === -1) return;
        // range: start index to i - 1
        const item = {};
        const nodes = parent.children.splice(
          startIdx,
          i - startIdx,
          item as RootContent,
        );
        Object.assign(item, convertToSteps(nodes));
        i = startIdx + 1;
        startIdx = -1;
      };

      for (; i < parent.children.length; i++) {
        const node = parent.children[i];

        if (node.type !== 'heading') continue;
        if (startIdx !== -1) {
          const startDepth = (parent.children[startIdx] as Heading).depth;

          if (node.depth > startDepth) continue;
          else if (node.depth < startDepth) onEnd();
        }

        const head = node.children.filter((c) => c.type === 'text').at(0);
        if (!head) {
          onEnd();
          continue;
        }

        const match = StepRegex.exec(head.value);
        if (!match) {
          onEnd();
          continue;
        }

        head.value = match[2];
        if (startIdx === -1) startIdx = i;
      }

      onEnd();
    });
  };
}



================================================
FILE: packages/core/src/mdx-plugins/remark-structure.ts
================================================
import Slugger from 'github-slugger';
import type { Nodes, Root } from 'mdast';
import { remark } from 'remark';
import remarkGfm from 'remark-gfm';
import type { PluggableList, Transformer } from 'unified';
import { visit } from 'unist-util-visit';
import { flattenNode } from './remark-utils';
import type {
  MdxJsxAttribute,
  MdxJsxExpressionAttribute,
  MdxJsxFlowElement,
} from 'mdast-util-mdx-jsx';

interface Heading {
  id: string;
  content: string;
}

interface Content {
  heading: string | undefined;
  content: string;
}

export interface StructuredData {
  headings: Heading[];
  /**
   * Refer to paragraphs, a heading may contain multiple contents as well
   */
  contents: Content[];
}

export interface StructureOptions {
  /**
   * Types to be scanned as content.
   *
   * @defaultValue ['heading', 'paragraph', 'blockquote', 'tableCell', 'mdxJsxFlowElement']
   */
  types?: string[] | ((node: Nodes) => boolean);

  /**
   * A list of indexable MDX attributes, either:
   *
   * - an array of attribute names.
   * - a function that determines if attribute should be indexed.
   */
  allowedMdxAttributes?:
    | string[]
    | ((
        node: MdxJsxFlowElement,
        attribute: MdxJsxAttribute | MdxJsxExpressionAttribute,
      ) => boolean);
}

declare module 'mdast' {
  interface Data {
    /**
     * Get content of unserializable element
     *
     * Needed for `remarkStructure` to generate search index
     */
    _string?: string[];
  }
}

const slugger = new Slugger();

/**
 * Attach structured data to VFile, you can access via `vfile.data.structuredData`.
 */
export function remarkStructure({
  types = [
    'heading',
    'paragraph',
    'blockquote',
    'tableCell',
    'mdxJsxFlowElement',
  ],
  allowedMdxAttributes = (node) => {
    if (!node.name) return false;

    return ['TypeTable', 'Callout'].includes(node.name);
  },
}: StructureOptions = {}): Transformer<Root, Root> {
  if (Array.isArray(allowedMdxAttributes)) {
    const arr = allowedMdxAttributes;
    allowedMdxAttributes = (_node, attribute) =>
      attribute.type === 'mdxJsxAttribute' && arr.includes(attribute.name);
  }

  if (Array.isArray(types)) {
    const arr = types;
    types = (node) => arr.includes(node.type);
  }

  return (node, file) => {
    slugger.reset();
    const data: StructuredData = { contents: [], headings: [] };
    let lastHeading: string | undefined = '';

    // Fumadocs OpenAPI Generated Structured Data
    if (file.data.frontmatter) {
      const frontmatter = file.data.frontmatter as {
        _openapi?: {
          structuredData?: StructuredData;
        };
      };

      if (frontmatter._openapi?.structuredData) {
        data.headings.push(...frontmatter._openapi.structuredData.headings);
        data.contents.push(...frontmatter._openapi.structuredData.contents);
      }
    }

    visit(node, (element) => {
      if (element.type === 'root') return;
      if (!types(element)) return;

      if (element.type === 'heading') {
        element.data ||= {};
        element.data.hProperties ||= {};
        const properties = element.data.hProperties;
        const content = flattenNode(element).trim();
        const id = properties.id ?? slugger.slug(content);

        data.headings.push({
          id,
          content,
        });

        lastHeading = id;
        return 'skip';
      }

      if (element.data?._string) {
        for (const content of element.data._string) {
          data.contents.push({
            heading: lastHeading,
            content,
          });
        }

        return 'skip';
      }

      if (element.type === 'mdxJsxFlowElement' && element.name) {
        data.contents.push(
          ...element.attributes.flatMap((attribute) => {
            const value =
              typeof attribute.value === 'string'
                ? attribute.value
                : attribute.value?.value;
            if (!value || value.length === 0) return [];
            if (
              allowedMdxAttributes &&
              !allowedMdxAttributes(element, attribute)
            )
              return [];

            return {
              heading: lastHeading,
              content:
                attribute.type === 'mdxJsxAttribute'
                  ? `${attribute.name}: ${value}`
                  : value,
            };
          }),
        );

        return;
      }

      const content = flattenNode(element).trim();
      if (content.length === 0) return;

      data.contents.push({
        heading: lastHeading,
        content,
      });

      return 'skip';
    });

    file.data.structuredData = data;
  };
}

/**
 * Extract data from markdown/mdx content
 */
export function structure(
  content: string,
  remarkPlugins: PluggableList = [],
  options: StructureOptions = {},
): StructuredData {
  const result = remark()
    .use(remarkGfm)
    .use(remarkPlugins)
    .use(remarkStructure, options)
    .processSync(content);

  return result.data.structuredData as StructuredData;
}



================================================
FILE: packages/core/src/mdx-plugins/remark-utils.ts
================================================
import type { RootContent } from 'mdast';

export function flattenNode(node: RootContent): string {
  if ('children' in node)
    return node.children.map((child) => flattenNode(child)).join('');

  if ('value' in node) return node.value;

  return '';
}



================================================
FILE: packages/core/src/mdx-plugins/transformer-icon.ts
================================================
import { type ShikiTransformer } from 'shiki';

export interface CodeBlockIcon {
  viewBox: string;
  fill: string;
  d: string;
}

const defaultShortcuts: Record<string, string> = {
  js: 'javascript',
  jsx: 'react',
  ts: 'typescript',
  tsx: 'react',
  'c#': 'csharp',
  cs: 'csharp',
  gql: 'graphql',
  py: 'python',
  bash: 'shellscript',
  sh: 'shellscript',
  shell: 'shellscript',
  zsh: 'shellscript',
  'c++': 'cpp',
};

// From https://simpleicons.org
// Java - Not supported, https://github.com/simple-icons/simple-icons/issues/7374
const defaultIcons: Record<string, CodeBlockIcon> = {
  react: {
    viewBox: '0 0 24 24',
    fill: 'currentColor',
    d: 'M14.23 12.004a2.236 2.236 0 0 1-2.235 2.236 2.236 2.236 0 0 1-2.236-2.236 2.236 2.236 0 0 1 2.235-2.236 2.236 2.236 0 0 1 2.236 2.236zm2.648-10.69c-1.346 0-3.107.96-4.888 2.622-1.78-1.653-3.542-2.602-4.887-2.602-.41 0-.783.093-1.106.278-1.375.793-1.683 3.264-.973 6.365C1.98 8.917 0 10.42 0 12.004c0 1.59 1.99 3.097 5.043 4.03-.704 3.113-.39 5.588.988 6.38.32.187.69.275 1.102.275 1.345 0 3.107-.96 4.888-2.624 1.78 1.654 3.542 2.603 4.887 2.603.41 0 .783-.09 1.106-.275 1.374-.792 1.683-3.263.973-6.365C22.02 15.096 24 13.59 24 12.004c0-1.59-1.99-3.097-5.043-4.032.704-3.11.39-5.587-.988-6.38-.318-.184-.688-.277-1.092-.278zm-.005 1.09v.006c.225 0 .406.044.558.127.666.382.955 1.835.73 3.704-.054.46-.142.945-.25 1.44-.96-.236-2.006-.417-3.107-.534-.66-.905-1.345-1.727-2.035-2.447 1.592-1.48 3.087-2.292 4.105-2.295zm-9.77.02c1.012 0 2.514.808 4.11 2.28-.686.72-1.37 1.537-2.02 2.442-1.107.117-2.154.298-3.113.538-.112-.49-.195-.964-.254-1.42-.23-1.868.054-3.32.714-3.707.19-.09.4-.127.563-.132zm4.882 3.05c.455.468.91.992 1.36 1.564-.44-.02-.89-.034-1.345-.034-.46 0-.915.01-1.36.034.44-.572.895-1.096 1.345-1.565zM12 8.1c.74 0 1.477.034 2.202.093.406.582.802 1.203 1.183 1.86.372.64.71 1.29 1.018 1.946-.308.655-.646 1.31-1.013 1.95-.38.66-.773 1.288-1.18 1.87-.728.063-1.466.098-2.21.098-.74 0-1.477-.035-2.202-.093-.406-.582-.802-1.204-1.183-1.86-.372-.64-.71-1.29-1.018-1.946.303-.657.646-1.313 1.013-1.954.38-.66.773-1.286 1.18-1.868.728-.064 1.466-.098 2.21-.098zm-3.635.254c-.24.377-.48.763-.704 1.16-.225.39-.435.782-.635 1.174-.265-.656-.49-1.31-.676-1.947.64-.15 1.315-.283 2.015-.386zm7.26 0c.695.103 1.365.23 2.006.387-.18.632-.405 1.282-.66 1.933-.2-.39-.41-.783-.64-1.174-.225-.392-.465-.774-.705-1.146zm3.063.675c.484.15.944.317 1.375.498 1.732.74 2.852 1.708 2.852 2.476-.005.768-1.125 1.74-2.857 2.475-.42.18-.88.342-1.355.493-.28-.958-.646-1.956-1.1-2.98.45-1.017.81-2.01 1.085-2.964zm-13.395.004c.278.96.645 1.957 1.1 2.98-.45 1.017-.812 2.01-1.086 2.964-.484-.15-.944-.318-1.37-.5-1.732-.737-2.852-1.706-2.852-2.474 0-.768 1.12-1.742 2.852-2.476.42-.18.88-.342 1.356-.494zm11.678 4.28c.265.657.49 1.312.676 1.948-.64.157-1.316.29-2.016.39.24-.375.48-.762.705-1.158.225-.39.435-.788.636-1.18zm-9.945.02c.2.392.41.783.64 1.175.23.39.465.772.705 1.143-.695-.102-1.365-.23-2.006-.386.18-.63.406-1.282.66-1.933zM17.92 16.32c.112.493.2.968.254 1.423.23 1.868-.054 3.32-.714 3.708-.147.09-.338.128-.563.128-1.012 0-2.514-.807-4.11-2.28.686-.72 1.37-1.536 2.02-2.44 1.107-.118 2.154-.3 3.113-.54zm-11.83.01c.96.234 2.006.415 3.107.532.66.905 1.345 1.727 2.035 2.446-1.595 1.483-3.092 2.295-4.11 2.295-.22-.005-.406-.05-.553-.132-.666-.38-.955-1.834-.73-3.703.054-.46.142-.944.25-1.438zm4.56.64c.44.02.89.034 1.345.034.46 0 .915-.01 1.36-.034-.44.572-.895 1.095-1.345 1.565-.455-.47-.91-.993-1.36-1.565z',
  },
  vue: {
    viewBox: '0 0 24 24',
    fill: 'currentColor',
    d: 'M24,1.61H14.06L12,5.16,9.94,1.61H0L12,22.39ZM12,14.08,5.16,2.23H9.59L12,6.41l2.41-4.18h4.43Z',
  },
  ruby: {
    viewBox: '0 0 24 24',
    fill: 'currentColor',
    d: 'M20.156.083c3.033.525 3.893 2.598 3.829 4.77L24 4.822 22.635 22.71 4.89 23.926h.016C3.433 23.864.15 23.729 0 19.139l1.645-3 2.819 6.586.503 1.172 2.805-9.144-.03.007.016-.03 9.255 2.956-1.396-5.431-.99-3.9 8.82-.569-.615-.51L16.5 2.114 20.159.073l-.003.01zM0 19.089zM5.13 5.073c3.561-3.533 8.157-5.621 9.922-3.84 1.762 1.777-.105 6.105-3.673 9.636-3.563 3.532-8.103 5.734-9.864 3.957-1.766-1.777.045-6.217 3.612-9.75l.003-.003z',
  },
  zig: {
    viewBox: '0 0 24 24',
    fill: 'currentColor',
    d: 'm23.53 1.02-7.686 3.45h-7.06l-2.98 3.452h7.173L.47 22.98l7.681-3.607h7.065v-.002l2.978-3.45-7.148-.001 12.482-14.9zM0 4.47v14.901h1.883l2.98-3.45H3.451v-8h.942l2.824-3.45H0zm22.117 0-2.98 3.608h1.412v7.844h-.942l-2.98 3.45H24V4.47h-1.883z',
  },
  swift: {
    viewBox: '0 0 24 24',
    fill: 'currentColor',
    d: 'M7.508 0c-.287 0-.573 0-.86.002-.241.002-.483.003-.724.01-.132.003-.263.009-.395.015A9.154 9.154 0 0 0 4.348.15 5.492 5.492 0 0 0 2.85.645 5.04 5.04 0 0 0 .645 2.848c-.245.48-.4.972-.495 1.5-.093.52-.122 1.05-.136 1.576a35.2 35.2 0 0 0-.012.724C0 6.935 0 7.221 0 7.508v8.984c0 .287 0 .575.002.862.002.24.005.481.012.722.014.526.043 1.057.136 1.576.095.528.25 1.02.495 1.5a5.03 5.03 0 0 0 2.205 2.203c.48.244.97.4 1.498.495.52.093 1.05.124 1.576.138.241.007.483.009.724.01.287.002.573.002.86.002h8.984c.287 0 .573 0 .86-.002.241-.001.483-.003.724-.01a10.523 10.523 0 0 0 1.578-.138 5.322 5.322 0 0 0 1.498-.495 5.035 5.035 0 0 0 2.203-2.203c.245-.48.4-.972.495-1.5.093-.52.124-1.05.138-1.576.007-.241.009-.481.01-.722.002-.287.002-.575.002-.862V7.508c0-.287 0-.573-.002-.86a33.662 33.662 0 0 0-.01-.724 10.5 10.5 0 0 0-.138-1.576 5.328 5.328 0 0 0-.495-1.5A5.039 5.039 0 0 0 21.152.645 5.32 5.32 0 0 0 19.654.15a10.493 10.493 0 0 0-1.578-.138 34.98 34.98 0 0 0-.722-.01C17.067 0 16.779 0 16.492 0H7.508zm6.035 3.41c4.114 2.47 6.545 7.162 5.549 11.131-.024.093-.05.181-.076.272l.002.001c2.062 2.538 1.5 5.258 1.236 4.745-1.072-2.086-3.066-1.568-4.088-1.043a6.803 6.803 0 0 1-.281.158l-.02.012-.002.002c-2.115 1.123-4.957 1.205-7.812-.022a12.568 12.568 0 0 1-5.64-4.838c.649.48 1.35.902 2.097 1.252 3.019 1.414 6.051 1.311 8.197-.002C9.651 12.73 7.101 9.67 5.146 7.191a10.628 10.628 0 0 1-1.005-1.384c2.34 2.142 6.038 4.83 7.365 5.576C8.69 8.408 6.208 4.743 6.324 4.86c4.436 4.47 8.528 6.996 8.528 6.996.154.085.27.154.36.213.085-.215.16-.437.224-.668.708-2.588-.09-5.548-1.893-7.992z',
  },
  prisma: {
    viewBox: '0 0 24 24',
    fill: 'currentColor',
    d: 'M21.8068 18.2848L13.5528.7565c-.207-.4382-.639-.7273-1.1286-.7541-.5023-.0293-.9523.213-1.2062.6253L2.266 15.1271c-.2773.4518-.2718 1.0091.0158 1.4555l4.3759 6.7786c.2608.4046.7127.6388 1.1823.6388.1332 0 .267-.0188.3987-.0577l12.7019-3.7568c.3891-.1151.7072-.3904.8737-.7553s.1633-.7828-.0075-1.1454zm-1.8481.7519L9.1814 22.2242c-.3292.0975-.6448-.1873-.5756-.5194l3.8501-18.4386c.072-.3448.5486-.3996.699-.0803l7.1288 15.138c.1344.2856-.019.6224-.325.7128z',
  },
  typescript: {
    viewBox: '0 0 24 24',
    fill: 'currentColor',
    d: 'M1.125 0C.502 0 0 .502 0 1.125v21.75C0 23.498.502 24 1.125 24h21.75c.623 0 1.125-.502 1.125-1.125V1.125C24 .502 23.498 0 22.875 0zm17.363 9.75c.612 0 1.154.037 1.627.111a6.38 6.38 0 0 1 1.306.34v2.458a3.95 3.95 0 0 0-.643-.361 5.093 5.093 0 0 0-.717-.26 5.453 5.453 0 0 0-1.426-.2c-.3 0-.573.028-.819.086a2.1 2.1 0 0 0-.623.242c-.17.104-.3.229-.393.374a.888.888 0 0 0-.14.49c0 .196.053.373.156.529.104.156.252.304.443.444s.423.276.696.41c.273.135.582.274.926.416.47.197.892.407 1.266.628.374.222.695.473.963.753.268.279.472.598.614.957.142.359.214.776.214 1.253 0 .657-.125 1.21-.373 1.656a3.033 3.033 0 0 1-1.012 1.085 4.38 4.38 0 0 1-1.487.596c-.566.12-1.163.18-1.79.18a9.916 9.916 0 0 1-1.84-.164 5.544 5.544 0 0 1-1.512-.493v-2.63a5.033 5.033 0 0 0 3.237 1.2c.333 0 .624-.03.872-.09.249-.06.456-.144.623-.25.166-.108.29-.234.373-.38a1.023 1.023 0 0 0-.074-1.089 2.12 2.12 0 0 0-.537-.5 5.597 5.597 0 0 0-.807-.444 27.72 27.72 0 0 0-1.007-.436c-.918-.383-1.602-.852-2.053-1.405-.45-.553-.676-1.222-.676-2.005 0-.614.123-1.141.369-1.582.246-.441.58-.804 1.004-1.089a4.494 4.494 0 0 1 1.47-.629 7.536 7.536 0 0 1 1.77-.201zm-15.113.188h9.563v2.166H9.506v9.646H6.789v-9.646H3.375z',
  },
  javascript: {
    viewBox: '0 0 24 24',
    fill: 'currentColor',
    d: 'M0 0h24v24H0V0zm22.034 18.276c-.175-1.095-.888-2.015-3.003-2.873-.736-.345-1.554-.585-1.797-1.14-.091-.33-.105-.51-.046-.705.15-.646.915-.84 1.515-.66.39.12.75.42.976.9 1.034-.676 1.034-.676 1.755-1.125-.27-.42-.404-.601-.586-.78-.63-.705-1.469-1.065-2.834-1.034l-.705.089c-.676.165-1.32.525-1.71 1.005-1.14 1.291-.811 3.541.569 4.471 1.365 1.02 3.361 1.244 3.616 2.205.24 1.17-.87 1.545-1.966 1.41-.811-.18-1.26-.586-1.755-1.336l-1.83 1.051c.21.48.45.689.81 1.109 1.74 1.756 6.09 1.666 6.871-1.004.029-.09.24-.705.074-1.65l.046.067zm-8.983-7.245h-2.248c0 1.938-.009 3.864-.009 5.805 0 1.232.063 2.363-.138 2.711-.33.689-1.18.601-1.566.48-.396-.196-.597-.466-.83-.855-.063-.105-.11-.196-.127-.196l-1.825 1.125c.305.63.75 1.172 1.324 1.517.855.51 2.004.675 3.207.405.783-.226 1.458-.691 1.811-1.411.51-.93.402-2.07.397-3.346.012-2.054 0-4.109 0-6.179l.004-.056z',
  },
  php: {
    viewBox: '0 0 24 24',
    fill: 'currentColor',
    d: 'M7.01 10.207h-.944l-.515 2.648h.838c.556 0 .97-.105 1.242-.314.272-.21.455-.559.55-1.049.092-.47.05-.802-.124-.995-.175-.193-.523-.29-1.047-.29zM12 5.688C5.373 5.688 0 8.514 0 12s5.373 6.313 12 6.313S24 15.486 24 12c0-3.486-5.373-6.312-12-6.312zm-3.26 7.451c-.261.25-.575.438-.917.551-.336.108-.765.164-1.285.164H5.357l-.327 1.681H3.652l1.23-6.326h2.65c.797 0 1.378.209 1.744.628.366.418.476 1.002.33 1.752a2.836 2.836 0 0 1-.305.847c-.143.255-.33.49-.561.703zm4.024.715l.543-2.799c.063-.318.039-.536-.068-.651-.107-.116-.336-.174-.687-.174H11.46l-.704 3.625H9.388l1.23-6.327h1.367l-.327 1.682h1.218c.767 0 1.295.134 1.586.401s.378.7.263 1.299l-.572 2.944h-1.389zm7.597-2.265a2.782 2.782 0 0 1-.305.847c-.143.255-.33.49-.561.703a2.44 2.44 0 0 1-.917.551c-.336.108-.765.164-1.286.164h-1.18l-.327 1.682h-1.378l1.23-6.326h2.649c.797 0 1.378.209 1.744.628.366.417.477 1.001.331 1.751zM17.766 10.207h-.943l-.516 2.648h.838c.557 0 .971-.105 1.242-.314.272-.21.455-.559.551-1.049.092-.47.049-.802-.125-.995s-.524-.29-1.047-.29z',
  },
  shellscript: {
    viewBox: '0 0 24 24',
    fill: 'currentColor',
    d: 'm 4,4 a 1,1 0 0 0 -0.7070312,0.2929687 1,1 0 0 0 0,1.4140625 L 8.5859375,11 3.2929688,16.292969 a 1,1 0 0 0 0,1.414062 1,1 0 0 0 1.4140624,0 l 5.9999998,-6 a 1.0001,1.0001 0 0 0 0,-1.414062 L 4.7070312,4.2929687 A 1,1 0 0 0 4,4 Z m 8,14 a 1,1 0 0 0 -1,1 1,1 0 0 0 1,1 h 8 a 1,1 0 0 0 1,-1 1,1 0 0 0 -1,-1 z',
  },
  c: {
    viewBox: '0 0 24 24',
    fill: 'currentColor',
    d: 'M16.5921 9.1962s-.354-3.298-3.627-3.39c-3.2741-.09-4.9552 2.474-4.9552 6.14 0 3.6651 1.858 6.5972 5.0451 6.5972 3.184 0 3.5381-3.665 3.5381-3.665l6.1041.365s.36 3.31-2.196 5.836c-2.552 2.5241-5.6901 2.9371-7.8762 2.9201-2.19-.017-5.2261.034-8.1602-2.97-2.938-3.0101-3.436-5.9302-3.436-8.8002 0-2.8701.556-6.6702 4.047-9.5502C7.444.72 9.849 0 12.254 0c10.0422 0 10.7172 9.2602 10.7172 9.2602z',
  },
  cpp: {
    viewBox: '0 0 24 24',
    fill: 'currentColor',
    d: 'M22.394 6c-.167-.29-.398-.543-.652-.69L12.926.22c-.509-.294-1.34-.294-1.848 0L2.26 5.31c-.508.293-.923 1.013-.923 1.6v10.18c0 .294.104.62.271.91.167.29.398.543.652.69l8.816 5.09c.508.293 1.34.293 1.848 0l8.816-5.09c.254-.147.485-.4.652-.69.167-.29.27-.616.27-.91V6.91c.003-.294-.1-.62-.268-.91zM12 19.11c-3.92 0-7.109-3.19-7.109-7.11 0-3.92 3.19-7.11 7.11-7.11a7.133 7.133 0 016.156 3.553l-3.076 1.78a3.567 3.567 0 00-3.08-1.78A3.56 3.56 0 008.444 12 3.56 3.56 0 0012 15.555a3.57 3.57 0 003.08-1.778l3.078 1.78A7.135 7.135 0 0112 19.11zm7.11-6.715h-.79v.79h-.79v-.79h-.79v-.79h.79v-.79h.79v.79h.79zm2.962 0h-.79v.79h-.79v-.79h-.79v-.79h.79v-.79h.79v.79h.79z',
  },
  go: {
    viewBox: '0 0 24 24',
    fill: 'currentColor',
    d: 'M1.811 10.231c-.047 0-.058-.023-.035-.059l.246-.315c.023-.035.081-.058.128-.058h4.172c.046 0 .058.035.035.07l-.199.303c-.023.036-.082.07-.117.07zM.047 11.306c-.047 0-.059-.023-.035-.058l.245-.316c.023-.035.082-.058.129-.058h5.328c.047 0 .07.035.058.07l-.093.28c-.012.047-.058.07-.105.07zm2.828 1.075c-.047 0-.059-.035-.035-.07l.163-.292c.023-.035.07-.07.117-.07h2.337c.047 0 .07.035.07.082l-.023.28c0 .047-.047.082-.082.082zm12.129-2.36c-.736.187-1.239.327-1.963.514-.176.046-.187.058-.34-.117-.174-.199-.303-.327-.548-.444-.737-.362-1.45-.257-2.115.175-.795.514-1.204 1.274-1.192 2.22.011.935.654 1.706 1.577 1.835.795.105 1.46-.175 1.987-.77.105-.13.198-.27.315-.434H10.47c-.245 0-.304-.152-.222-.35.152-.362.432-.97.596-1.274a.315.315 0 01.292-.187h4.253c-.023.316-.023.631-.07.947a4.983 4.983 0 01-.958 2.29c-.841 1.11-1.94 1.8-3.33 1.986-1.145.152-2.209-.07-3.143-.77-.865-.655-1.356-1.52-1.484-2.595-.152-1.274.222-2.419.993-3.424.83-1.086 1.928-1.776 3.272-2.02 1.098-.2 2.15-.07 3.096.571.62.41 1.063.97 1.356 1.648.07.105.023.164-.117.2m3.868 6.461c-1.064-.024-2.034-.328-2.852-1.029a3.665 3.665 0 01-1.262-2.255c-.21-1.32.152-2.489.947-3.529.853-1.122 1.881-1.706 3.272-1.95 1.192-.21 2.314-.095 3.33.595.923.63 1.496 1.484 1.648 2.605.198 1.578-.257 2.863-1.344 3.962-.771.783-1.718 1.273-2.805 1.495-.315.06-.63.07-.934.106zm2.78-4.72c-.011-.153-.011-.27-.034-.387-.21-1.157-1.274-1.81-2.384-1.554-1.087.245-1.788.935-2.045 2.033-.21.912.234 1.835 1.075 2.21.643.28 1.285.244 1.905-.07.923-.48 1.425-1.228 1.484-2.233z',
  },
  graphql: {
    viewBox: '0 0 24 24',
    fill: 'currentColor',
    d: 'M12.002 0a2.138 2.138 0 1 0 0 4.277 2.138 2.138 0 1 0 0-4.277zm8.54 4.931a2.138 2.138 0 1 0 0 4.277 2.138 2.138 0 1 0 0-4.277zm0 9.862a2.138 2.138 0 1 0 0 4.277 2.138 2.138 0 1 0 0-4.277zm-8.54 4.931a2.138 2.138 0 1 0 0 4.276 2.138 2.138 0 1 0 0-4.276zm-8.542-4.93a2.138 2.138 0 1 0 0 4.276 2.138 2.138 0 1 0 0-4.277zm0-9.863a2.138 2.138 0 1 0 0 4.277 2.138 2.138 0 1 0 0-4.277zm8.542-3.378L2.953 6.777v10.448l9.049 5.224 9.047-5.224V6.777zm0 1.601 7.66 13.27H4.34zm-1.387.371L3.97 15.037V7.363zm2.774 0 6.646 3.838v7.674zM5.355 17.44h13.293l-6.646 3.836z',
  },
  python: {
    viewBox: '0 0 24 24',
    fill: 'currentColor',
    d: 'M14.25.18l.9.2.73.26.59.3.45.32.34.34.25.34.16.33.1.3.04.26.02.2-.01.13V8.5l-.05.63-.13.55-.21.46-.26.38-.3.31-.33.25-.35.19-.35.14-.33.1-.3.07-.26.04-.21.02H8.77l-.69.05-.59.14-.5.22-.41.27-.33.32-.27.35-.2.36-.15.37-.1.35-.07.32-.04.27-.02.21v3.06H3.17l-.21-.03-.28-.07-.32-.12-.35-.18-.36-.26-.36-.36-.35-.46-.32-.59-.28-.73-.21-.88-.14-1.05-.05-1.23.06-1.22.16-1.04.24-.87.32-.71.36-.57.4-.44.42-.33.42-.24.4-.16.36-.1.32-.05.24-.01h.16l.06.01h8.16v-.83H6.18l-.01-2.75-.02-.37.05-.34.11-.31.17-.28.25-.26.31-.23.38-.2.44-.18.51-.15.58-.12.64-.1.71-.06.77-.04.84-.02 1.27.05zm-6.3 1.98l-.23.33-.08.41.08.41.23.34.33.22.41.09.41-.09.33-.22.23-.34.08-.41-.08-.41-.23-.33-.33-.22-.41-.09-.41.09zm13.09 3.95l.28.06.32.12.35.18.36.27.36.35.35.47.32.59.28.73.21.88.14 1.04.05 1.23-.06 1.23-.16 1.04-.24.86-.32.71-.36.57-.4.45-.42.33-.42.24-.4.16-.36.09-.32.05-.24.02-.16-.01h-8.22v.82h5.84l.01 2.76.02.36-.05.34-.11.31-.17.29-.25.25-.31.24-.38.2-.44.17-.51.15-.58.13-.64.09-.71.07-.77.04-.84.01-1.27-.04-1.07-.14-.9-.2-.73-.25-.59-.3-.45-.33-.34-.34-.25-.34-.16-.33-.1-.3-.04-.25-.02-.2.01-.13v-5.34l.05-.64.13-.54.21-.46.26-.38.3-.32.33-.24.35-.2.35-.14.33-.1.3-.06.26-.04.21-.02.13-.01h5.84l.69-.05.59-.14.5-.21.41-.28.33-.32.27-.35.2-.36.15-.36.1-.35.07-.32.04-.28.02-.21V6.07h2.09l.14.01zm-6.47 14.25l-.23.33-.08.41.08.41.23.33.33.23.41.08.41-.08.33-.23.23-.33.08-.41-.08-.41-.23-.33-.33-.23-.41-.08-.41.08z',
  },
  md: {
    viewBox: '0 0 24 24',
    fill: 'currentColor',
    d: 'M22.27 19.385H1.73A1.73 1.73 0 010 17.655V6.345a1.73 1.73 0 011.73-1.73h20.54A1.73 1.73 0 0124 6.345v11.308a1.73 1.73 0 01-1.73 1.731zM5.769 15.923v-4.5l2.308 2.885 2.307-2.885v4.5h2.308V8.078h-2.308l-2.307 2.885-2.308-2.885H3.46v7.847zM21.232 12h-2.309V8.077h-2.307V12h-2.308l3.461 4.039z',
  },
  kotlin: {
    viewBox: '0 0 24 24',
    fill: 'currentColor',
    d: 'M24 24H0V0h24L12 12Z',
  },
  rust: {
    viewBox: '0 0 24 24',
    fill: 'currentColor',
    d: 'M23.8346 11.7033l-1.0073-.6236a13.7268 13.7268 0 00-.0283-.2936l.8656-.8069a.3483.3483 0 00-.1154-.578l-1.1066-.414a8.4958 8.4958 0 00-.087-.2856l.6904-.9587a.3462.3462 0 00-.2257-.5446l-1.1663-.1894a9.3574 9.3574 0 00-.1407-.2622l.49-1.0761a.3437.3437 0 00-.0274-.3361.3486.3486 0 00-.3006-.154l-1.1845.0416a6.7444 6.7444 0 00-.1873-.2268l.2723-1.153a.3472.3472 0 00-.417-.4172l-1.1532.2724a14.0183 14.0183 0 00-.2278-.1873l.0415-1.1845a.3442.3442 0 00-.49-.328l-1.076.491c-.0872-.0476-.1742-.0952-.2623-.1407l-.1903-1.1673A.3483.3483 0 0016.256.955l-.9597.6905a8.4867 8.4867 0 00-.2855-.086l-.414-1.1066a.3483.3483 0 00-.5781-.1154l-.8069.8666a9.2936 9.2936 0 00-.2936-.0284L12.2946.1683a.3462.3462 0 00-.5892 0l-.6236 1.0073a13.7383 13.7383 0 00-.2936.0284L9.9803.3374a.3462.3462 0 00-.578.1154l-.4141 1.1065c-.0962.0274-.1903.0567-.2855.086L7.744.955a.3483.3483 0 00-.5447.2258L7.009 2.348a9.3574 9.3574 0 00-.2622.1407l-1.0762-.491a.3462.3462 0 00-.49.328l.0416 1.1845a7.9826 7.9826 0 00-.2278.1873L3.8413 3.425a.3472.3472 0 00-.4171.4171l.2713 1.1531c-.0628.075-.1255.1509-.1863.2268l-1.1845-.0415a.3462.3462 0 00-.328.49l.491 1.0761a9.167 9.167 0 00-.1407.2622l-1.1662.1894a.3483.3483 0 00-.2258.5446l.6904.9587a13.303 13.303 0 00-.087.2855l-1.1065.414a.3483.3483 0 00-.1155.5781l.8656.807a9.2936 9.2936 0 00-.0283.2935l-1.0073.6236a.3442.3442 0 000 .5892l1.0073.6236c.008.0982.0182.1964.0283.2936l-.8656.8079a.3462.3462 0 00.1155.578l1.1065.4141c.0273.0962.0567.1914.087.2855l-.6904.9587a.3452.3452 0 00.2268.5447l1.1662.1893c.0456.088.0922.1751.1408.2622l-.491 1.0762a.3462.3462 0 00.328.49l1.1834-.0415c.0618.0769.1235.1528.1873.2277l-.2713 1.1541a.3462.3462 0 00.4171.4161l1.153-.2713c.075.0638.151.1255.2279.1863l-.0415 1.1845a.3442.3442 0 00.49.327l1.0761-.49c.087.0486.1741.0951.2622.1407l.1903 1.1662a.3483.3483 0 00.5447.2268l.9587-.6904a9.299 9.299 0 00.2855.087l.414 1.1066a.3452.3452 0 00.5781.1154l.8079-.8656c.0972.0111.1954.0203.2936.0294l.6236 1.0073a.3472.3472 0 00.5892 0l.6236-1.0073c.0982-.0091.1964-.0183.2936-.0294l.8069.8656a.3483.3483 0 00.578-.1154l.4141-1.1066a8.4626 8.4626 0 00.2855-.087l.9587.6904a.3452.3452 0 00.5447-.2268l.1903-1.1662c.088-.0456.1751-.0931.2622-.1407l1.0762.49a.3472.3472 0 00.49-.327l-.0415-1.1845a6.7267 6.7267 0 00.2267-.1863l1.1531.2713a.3472.3472 0 00.4171-.416l-.2713-1.1542c.0628-.0749.1255-.1508.1863-.2278l1.1845.0415a.3442.3442 0 00.328-.49l-.49-1.076c.0475-.0872.0951-.1742.1407-.2623l1.1662-.1893a.3483.3483 0 00.2258-.5447l-.6904-.9587.087-.2855 1.1066-.414a.3462.3462 0 00.1154-.5781l-.8656-.8079c.0101-.0972.0202-.1954.0283-.2936l1.0073-.6236a.3442.3442 0 000-.5892zm-6.7413 8.3551a.7138.7138 0 01.2986-1.396.714.714 0 11-.2997 1.396zm-.3422-2.3142a.649.649 0 00-.7715.5l-.3573 1.6685c-1.1035.501-2.3285.7795-3.6193.7795a8.7368 8.7368 0 01-3.6951-.814l-.3574-1.6684a.648.648 0 00-.7714-.499l-1.473.3158a8.7216 8.7216 0 01-.7613-.898h7.1676c.081 0 .1356-.0141.1356-.088v-2.536c0-.074-.0536-.0881-.1356-.0881h-2.0966v-1.6077h2.2677c.2065 0 1.1065.0587 1.394 1.2088.0901.3533.2875 1.5044.4232 1.8729.1346.413.6833 1.2381 1.2685 1.2381h3.5716a.7492.7492 0 00.1296-.0131 8.7874 8.7874 0 01-.8119.9526zM6.8369 20.024a.714.714 0 11-.2997-1.396.714.714 0 01.2997 1.396zM4.1177 8.9972a.7137.7137 0 11-1.304.5791.7137.7137 0 011.304-.579zm-.8352 1.9813l1.5347-.6824a.65.65 0 00.33-.8585l-.3158-.7147h1.2432v5.6025H3.5669a8.7753 8.7753 0 01-.2834-3.348zm6.7343-.5437V8.7836h2.9601c.153 0 1.0792.1772 1.0792.8697 0 .575-.7107.7815-1.2948.7815zm10.7574 1.4862c0 .2187-.008.4363-.0243.651h-.9c-.09 0-.1265.0586-.1265.1477v.413c0 .973-.5487 1.1846-1.0296 1.2382-.4576.0517-.9648-.1913-1.0275-.4717-.2704-1.5186-.7198-1.8436-1.4305-2.4034.8817-.5599 1.799-1.386 1.799-2.4915 0-1.1936-.819-1.9458-1.3769-2.3153-.7825-.5163-1.6491-.6195-1.883-.6195H5.4682a8.7651 8.7651 0 014.907-2.7699l1.0974 1.151a.648.648 0 00.9182.0213l1.227-1.1743a8.7753 8.7753 0 016.0044 4.2762l-.8403 1.8982a.652.652 0 00.33.8585l1.6178.7188c.0283.2875.0425.577.0425.8717zm-9.3006-9.5993a.7128.7128 0 11.984 1.0316.7137.7137 0 01-.984-1.0316zm8.3389 6.71a.7107.7107 0 01.9395-.3625.7137.7137 0 11-.9405.3635z',
  },
  csharp: {
    viewBox: '0 0 24 24',
    fill: 'currentColor',
    d: 'M1.194 7.543v8.913c0 1.103.588 2.122 1.544 2.674l7.718 4.456a3.086 3.086 0 0 0 3.088 0l7.718-4.456a3.087 3.087 0 0 0 1.544-2.674V7.543a3.084 3.084 0 0 0-1.544-2.673L13.544.414a3.086 3.086 0 0 0-3.088 0L2.738 4.87a3.085 3.085 0 0 0-1.544 2.673Zm5.403 2.914v3.087a.77.77 0 0 0 .772.772.773.773 0 0 0 .772-.772.773.773 0 0 1 1.317-.546.775.775 0 0 1 .226.546 2.314 2.314 0 1 1-4.631 0v-3.087c0-.615.244-1.203.679-1.637a2.312 2.312 0 0 1 3.274 0c.434.434.678 1.023.678 1.637a.769.769 0 0 1-.226.545.767.767 0 0 1-1.091 0 .77.77 0 0 1-.226-.545.77.77 0 0 0-.772-.772.771.771 0 0 0-.772.772Zm12.35 3.087a.77.77 0 0 1-.772.772h-.772v.772a.773.773 0 0 1-1.544 0v-.772h-1.544v.772a.773.773 0 0 1-1.317.546.775.775 0 0 1-.226-.546v-.772H12a.771.771 0 1 1 0-1.544h.772v-1.543H12a.77.77 0 1 1 0-1.544h.772v-.772a.773.773 0 0 1 1.317-.546.775.775 0 0 1 .226.546v.772h1.544v-.772a.773.773 0 0 1 1.544 0v.772h.772a.772.772 0 0 1 0 1.544h-.772v1.543h.772a.776.776 0 0 1 .772.772Zm-3.088-2.315h-1.544v1.543h1.544v-1.543Z',
  },
  default: {
    viewBox: '0 0 24 24',
    fill: 'currentColor',
    d: 'M 6,1 C 4.354992,1 3,2.354992 3,4 v 16 c 0,1.645008 1.354992,3 3,3 h 12 c 1.645008,0 3,-1.354992 3,-3 V 8 7 A 1.0001,1.0001 0 0 0 20.707031,6.2929687 l -5,-5 A 1.0001,1.0001 0 0 0 15,1 h -1 z m 0,2 h 7 v 3 c 0,1.645008 1.354992,3 3,3 h 3 v 11 c 0,0.564129 -0.435871,1 -1,1 H 6 C 5.4358712,21 5,20.564129 5,20 V 4 C 5,3.4358712 5.4358712,3 6,3 Z M 15,3.4140625 18.585937,7 H 16 C 15.435871,7 15,6.5641288 15,6 Z',
  },
};

export interface IconOptions {
  shortcuts?: Record<string, string>;
  extend?: Record<string, CodeBlockIcon>;
}

/**
 * Inject icons to `icon` property (as HTML)
 */
export function transformerIcon(options: IconOptions = {}): ShikiTransformer {
  const shortcuts = {
    ...defaultShortcuts,
    ...options.shortcuts,
  };
  const icons = {
    ...defaultIcons,
    ...options.extend,
  };

  const defaultIcon = 'default' in icons ? icons.default : undefined;
  return {
    name: 'rehype-code:icon',
    pre(pre) {
      const lang = this.options.lang;
      if (!lang) return;

      const iconName = lang in shortcuts ? shortcuts[lang] : lang;
      const icon = iconName in icons ? icons[iconName] : defaultIcon;

      if (icon) {
        pre.properties.icon = `<svg viewBox="${icon.viewBox}"><path d="${icon.d}" fill="${icon.fill}" /></svg>`;
      }

      return pre;
    },
  };
}



================================================
FILE: packages/core/src/search/algolia.ts
================================================
import type { Algoliasearch } from 'algoliasearch';
import type { StructuredData } from '@/mdx-plugins/remark-structure';

export interface DocumentRecord {
  /**
   * The ID of document, must be unique
   */
  _id: string;

  title: string;
  description?: string;

  /**
   * URL to the page
   */
  url: string;
  structured: StructuredData;

  /**
   * Tag to filter results
   */
  tag?: string;

  /**
   * Data to be added to each section index
   */
  extra_data?: object;
}

export interface SyncOptions {
  /**
   * Index Name for documents.
   *
   * @deprecated Use `indexName` instead
   */
  document?: string;

  /**
   * Index Name for documents.
   */
  indexName?: string;

  /**
   * Search indexes
   */
  documents: DocumentRecord[];
}

/**
 * Update index settings and replace all objects
 *
 * @param client - Algolia Admin Client
 * @param options - Index Options
 */
export async function sync(
  client: Algoliasearch,
  options: SyncOptions,
): Promise<void> {
  const { document = 'document', indexName = document, documents } = options;
  await setIndexSettings(client, indexName);
  await updateDocuments(client, indexName, documents);
}

export async function setIndexSettings(
  client: Algoliasearch,
  indexName: string,
): Promise<void> {
  await client.setSettings({
    indexName,
    indexSettings: {
      attributeForDistinct: 'page_id',
      attributesToRetrieve: [
        'title',
        'section',
        'content',
        'url',
        'section_id',
      ],
      searchableAttributes: ['title', 'section', 'content'],
      attributesToSnippet: [],
      attributesForFaceting: ['tag'],
    },
  });
}

function toIndex(page: DocumentRecord): BaseIndex[] {
  let id = 0;
  const indexes: BaseIndex[] = [];
  const scannedHeadings = new Set<string>();

  function createIndex(
    section: string | undefined,
    sectionId: string | undefined,
    content: string,
  ): BaseIndex {
    return {
      objectID: `${page._id}-${(id++).toString()}`,
      title: page.title,
      url: page.url,
      page_id: page._id,
      tag: page.tag,
      section,
      section_id: sectionId,
      content,
      ...page.extra_data,
    };
  }

  if (page.description)
    indexes.push(createIndex(undefined, undefined, page.description));
  const { headings, contents } = page.structured;

  for (const p of contents) {
    const heading = p.heading ? headings.find((h) => p.heading === h.id) : null;

    const index = createIndex(heading?.content, heading?.id, p.content);

    if (heading && !scannedHeadings.has(heading.id)) {
      scannedHeadings.add(heading.id);

      indexes.push(createIndex(heading.content, heading.id, heading.content));
    }

    indexes.push(index);
  }

  return indexes;
}

export async function updateDocuments(
  client: Algoliasearch,
  indexName: string,
  documents: DocumentRecord[],
): Promise<void> {
  const objects = documents.flatMap(toIndex);

  await client.replaceAllObjects({
    indexName,
    objects: objects as unknown as Record<string, unknown>[],
  });
}

export interface BaseIndex {
  objectID: string;
  title: string;
  url: string;
  tag?: string;

  /**
   * The id of page, used for distinct
   */
  page_id: string;

  /**
   * Heading content
   */
  section?: string;

  /**
   * Heading (anchor) id
   */
  section_id?: string;

  content: string;
}



================================================
FILE: packages/core/src/search/client.ts
================================================
import { useRef, useState } from 'react';
import { useDebounce } from '@/utils/use-debounce';
import type { SortedResult } from '@/server/types';
import { type FetchOptions } from '@/search/client/fetch';
import { useOnChange } from '@/utils/use-on-change';
import { type StaticOptions } from '@/search/client/static';
import { type AlgoliaOptions } from '@/search/client/algolia';
import { type OramaCloudOptions } from '@/search/client/orama-cloud';

interface UseDocsSearch {
  search: string;
  setSearch: (v: string) => void;
  query: {
    isLoading: boolean;
    data?: SortedResult[] | 'empty';
    error?: Error;
  };
}

export type Client =
  | ({
      type: 'fetch';
    } & FetchOptions)
  | ({
      type: 'static';
    } & StaticOptions)
  | ({
      type: 'algolia';
    } & AlgoliaOptions)
  | ({
      type: 'orama-cloud';
    } & OramaCloudOptions);

function isDifferentDeep(a: unknown, b: unknown): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    return b.length !== a.length || a.some((v, i) => isDifferentDeep(v, b[i]));
  }

  if (typeof a === 'object' && a && typeof b === 'object' && b) {
    const aKeys = Object.keys(a);
    const bKeys = Object.keys(b);

    return (
      aKeys.length !== bKeys.length ||
      aKeys.some((key) =>
        isDifferentDeep(a[key as keyof object], b[key as keyof object]),
      )
    );
  }

  return a !== b;
}

/**
 * Provide a hook to query different official search clients.
 *
 * Note: it will re-query when its parameters changed, make sure to use `useCallback()` on functions passed to this hook.
 */
export function useDocsSearch(
  clientOptions: Client & {
    /**
     * The debounced delay for performing a search (in ms).
     * .
     * @defaultValue 100
     */
    delayMs?: number;

    /**
     * still perform search even if query is empty.
     *
     * @defaultValue false
     */
    allowEmpty?: boolean;
  },
  /**
   * @deprecated pass to `client` object instead
   */
  _locale?: string,
  /**
   * @deprecated pass to `client` object instead
   */
  _tag?: string,
  /**
   * @deprecated pass to `client` object instead
   */
  _delayMs = 100,
  /**
   * @deprecated pass to `client` object instead
   */
  _allowEmpty = false,
  /**
   * @deprecated No longer used
   */
  _key?: string,
): UseDocsSearch {
  // handle deprecated params
  const {
    delayMs = _delayMs ?? 100,
    allowEmpty = _allowEmpty ?? false,
    ...client
  } = clientOptions;
  client.tag ??= _tag;
  client.locale ??= _locale;

  const [search, setSearch] = useState('');
  const [results, setResults] = useState<SortedResult[] | 'empty'>('empty');
  const [error, setError] = useState<Error>();
  const [isLoading, setIsLoading] = useState(false);
  const debouncedValue = useDebounce(search, delayMs);
  const onStart = useRef<() => void>(undefined);

  useOnChange(
    [client, debouncedValue],
    () => {
      if (onStart.current) {
        onStart.current();
        onStart.current = undefined;
      }

      setIsLoading(true);
      let interrupt = false;
      onStart.current = () => {
        interrupt = true;
      };

      async function run(): Promise<SortedResult[] | 'empty'> {
        if (debouncedValue.length === 0 && !allowEmpty) return 'empty';

        if (client.type === 'fetch') {
          const { fetchDocs } = await import('./client/fetch');
          return fetchDocs(debouncedValue, client);
        }

        if (client.type === 'algolia') {
          const { searchDocs } = await import('./client/algolia');
          return searchDocs(debouncedValue, client);
        }

        if (client.type === 'orama-cloud') {
          const { searchDocs } = await import('./client/orama-cloud');
          return searchDocs(debouncedValue, client);
        }

        if (client.type === 'static') {
          const { search } = await import('./client/static');
          return search(debouncedValue, client);
        }

        throw new Error('unknown search client');
      }

      void run()
        .then((res) => {
          if (interrupt) return;

          setError(undefined);
          setResults(res);
        })
        .catch((err: Error) => {
          setError(err);
        })
        .finally(() => {
          setIsLoading(false);
        });
    },
    isDifferentDeep,
  );

  return { search, setSearch, query: { isLoading, data: results, error } };
}

export type { OramaCloudOptions, FetchOptions, StaticOptions, AlgoliaOptions };



================================================
FILE: packages/core/src/search/orama-cloud.ts
================================================
import type { CloudManager } from '@oramacloud/client';
import type { StructuredData } from '@/mdx-plugins';

export interface SyncOptions {
  /**
   * Index name to sync
   */
  index: string;

  documents: OramaDocument[];

  /**
   * Deploy changes
   *
   * @defaultValue true
   */
  autoDeploy?: boolean;
}

export type I18nSyncOptions = Omit<SyncOptions, 'index' | 'documents'> & {
  /**
   * Indexes to sync.
   *
   * Pairs of `locale`-`index`.
   **/
  indexes: Record<string, string>;

  documents: {
    locale: string;
    items: OramaDocument[];
  }[];
};

export interface OramaDocument {
  /**
   * The ID of document, must be unique
   */
  id: string;

  title: string;
  description?: string;

  /**
   * URL to the page
   */
  url: string;
  structured: StructuredData;

  /**
   * Tag to filter results
   */
  tag?: string;

  /**
   * Data to be added to each section index
   */
  extra_data?: object;
}

export interface OramaIndex {
  id: string;

  title: string;
  url: string;

  tag?: string;

  /**
   * The id of page, used for `group by`
   */
  page_id: string;

  /**
   * Heading content
   */
  section?: string;

  /**
   * Heading (anchor) id
   */
  section_id?: string;

  content: string;
}

export async function sync(
  cloudManager: CloudManager,
  options: SyncOptions,
): Promise<void> {
  const { autoDeploy = true } = options;
  const index = cloudManager.index(options.index);

  await index.snapshot(options.documents.flatMap(toIndex));
  if (autoDeploy) await index.deploy();
}

export async function syncI18n(
  cloudManager: CloudManager,
  options: I18nSyncOptions,
): Promise<void> {
  const { autoDeploy = true } = options;

  const tasks = options.documents.map(async (document) => {
    const index = cloudManager.index(options.indexes[document.locale]);

    await index.snapshot(document.items.flatMap(toIndex));
    if (autoDeploy) await index.deploy();
  });

  await Promise.all(tasks);
}

function toIndex(page: OramaDocument): OramaIndex[] {
  let id = 0;
  const indexes: OramaIndex[] = [];
  const scannedHeadings = new Set<string>();

  function createIndex(
    section: string | undefined,
    sectionId: string | undefined,
    content: string,
  ): OramaIndex {
    return {
      id: `${page.id}-${(id++).toString()}`,
      title: page.title,
      url: page.url,
      page_id: page.id,
      tag: page.tag,
      section,
      section_id: sectionId,
      content,
      ...page.extra_data,
    };
  }

  if (page.description)
    indexes.push(createIndex(undefined, undefined, page.description));

  page.structured.contents.forEach((p) => {
    const heading = p.heading
      ? page.structured.headings.find((h) => p.heading === h.id)
      : null;

    const index = createIndex(heading?.content, heading?.id, p.content);

    if (heading && !scannedHeadings.has(heading.id)) {
      scannedHeadings.add(heading.id);

      indexes.push(createIndex(heading.content, heading.id, heading.content));
    }

    indexes.push(index);
  });

  return indexes;
}



================================================
FILE: packages/core/src/search/server.ts
================================================
import {
  create,
  type Orama,
  type RawData,
  save,
  type SearchParams,
} from '@orama/orama';
import type { StructuredData } from '@/mdx-plugins/remark-structure';
import type { SortedResult } from '@/server/types';
import { createEndpoint } from '@/search/orama/create-endpoint';
import {
  type AdvancedDocument,
  type advancedSchema,
  createDB,
  createDBSimple,
  type SimpleDocument,
  simpleSchema,
} from '@/search/orama/create-db';
import { searchSimple } from '@/search/orama/search/simple';
import { searchAdvanced } from '@/search/orama/search/advanced';

type SearchType = 'simple' | 'advanced';

export type ExportedData =
  | (RawData & { type: SearchType })
  | {
      type: 'i18n';
      data: Record<string, RawData & { type: SearchType }>;
    };

export interface SearchServer {
  search: (
    query: string,
    options?: { locale?: string; tag?: string | string[] },
  ) => Promise<SortedResult[]>;

  /**
   * Export the database
   *
   * You can reference the exported database to implement client-side search
   */
  export: () => Promise<ExportedData>;
}

export interface SearchAPI extends SearchServer {
  GET: (request: Request) => Promise<Response>;

  /**
   * `GET` route handler that exports search indexes for static search.
   */
  staticGET: () => Promise<Response>;
}

/**
 * Resolve indexes dynamically
 */
export type Dynamic<T> = () => T[] | Promise<T[]>;

type OramaInput = Parameters<typeof create>[0];

type SharedOptions = Pick<OramaInput, 'sort' | 'components' | 'plugins'> & {
  language?: string;
  tokenizer?: Required<OramaInput>['components']['tokenizer'];
};

export interface SimpleOptions extends SharedOptions {
  indexes: Index[] | Dynamic<Index>;

  /**
   * Customise search options on server
   */
  search?: Partial<SearchParams<Orama<typeof simpleSchema>, SimpleDocument>>;
}

export interface AdvancedOptions extends SharedOptions {
  indexes: AdvancedIndex[] | Dynamic<AdvancedIndex>;

  /**
   * Customise search options on server
   */
  search?: Partial<
    SearchParams<Orama<typeof advancedSchema>, AdvancedDocument>
  >;
}

export function createSearchAPI<T extends SearchType>(
  type: T,
  options: T extends 'simple' ? SimpleOptions : AdvancedOptions,
): SearchAPI {
  if (type === 'simple') {
    return createEndpoint(initSimpleSearch(options as SimpleOptions));
  }

  return createEndpoint(initAdvancedSearch(options as AdvancedOptions));
}

export interface Index {
  title: string;
  description?: string;
  content: string;
  url: string;
  keywords?: string;
}

export function initSimpleSearch(options: SimpleOptions): SearchServer {
  const doc = createDBSimple(options);

  return {
    async export() {
      return {
        type: 'simple',
        ...save(await doc),
      };
    },
    async search(query) {
      const db = await doc;

      return searchSimple(db, query, options.search);
    },
  };
}

export interface AdvancedIndex {
  id: string;
  title: string;
  description?: string;

  /**
   * @deprecated No longer used
   */
  keywords?: string;

  /**
   * Required if tag filter is enabled
   */
  tag?: string | string[];

  /**
   * preprocess mdx content with `structure`
   */
  structuredData: StructuredData;
  url: string;
}

export function initAdvancedSearch(options: AdvancedOptions): SearchServer {
  const get = createDB(options);

  return {
    async export() {
      return {
        type: 'advanced',
        ...save(await get),
      };
    },
    async search(query, searchOptions) {
      const db = await get;

      return searchAdvanced(db, query, searchOptions?.tag, options.search);
    },
  };
}

export { createFromSource } from './orama/create-from-source';
export { createI18nSearchAPI } from './orama/create-i18n';



================================================
FILE: packages/core/src/search/client/algolia.ts
================================================
import type { SortedResult } from '@/server/types';
import type { BaseIndex } from '@/search/algolia';
import type { Hit, LiteClient, SearchResponse } from 'algoliasearch/lite';

export interface AlgoliaOptions {
  indexName: string;
  client: LiteClient;

  /**
   * Filter results with specific tag.
   */
  tag?: string;

  locale?: string;

  onSearch?: (
    query: string,
    tag?: string,
    locale?: string,
  ) => Promise<{
    results: SearchResponse<BaseIndex>[];
  }>;
}

export function groupResults(hits: Hit<BaseIndex>[]): SortedResult[] {
  const grouped: SortedResult[] = [];
  const scannedUrls = new Set<string>();

  for (const hit of hits) {
    if (!scannedUrls.has(hit.url)) {
      scannedUrls.add(hit.url);

      grouped.push({
        id: hit.url,
        type: 'page',
        url: hit.url,
        content: hit.title,
      });
    }

    grouped.push({
      id: hit.objectID,
      type: hit.content === hit.section ? 'heading' : 'text',
      url: hit.section_id ? `${hit.url}#${hit.section_id}` : hit.url,
      content: hit.content,
    });
  }

  return grouped;
}

export async function searchDocs(
  query: string,
  { indexName, onSearch, client, locale, tag }: AlgoliaOptions,
): Promise<SortedResult[]> {
  if (query.length > 0) {
    const result = onSearch
      ? await onSearch(query, tag, locale)
      : await client.searchForHits<BaseIndex>({
          requests: [
            {
              type: 'default',
              indexName,
              query,
              distinct: 5,
              hitsPerPage: 10,
              filters: tag ? `tag:${tag}` : undefined,
            },
          ],
        });

    return groupResults(result.results[0].hits).filter(
      (hit) => hit.type === 'page',
    );
  }

  return [];
}



================================================
FILE: packages/core/src/search/client/fetch.ts
================================================
import type { SortedResult } from '@/server';

export interface FetchOptions {
  /**
   * API route for search endpoint
   *
   * @defaultValue '/api/search'
   */
  api?: string;

  /**
   * Filter results with specific tag(s).
   */
  tag?: string | string[];

  /**
   * Filter by locale
   */
  locale?: string;
}

const cache = new Map<string, SortedResult[]>();

export async function fetchDocs(
  query: string,
  { api = '/api/search', locale, tag }: FetchOptions,
): Promise<SortedResult[]> {
  const params = new URLSearchParams();
  params.set('query', query);
  if (locale) params.set('locale', locale);
  if (tag) params.set('tag', Array.isArray(tag) ? tag.join(',') : tag);

  const key = `${api}?${params}`;
  const cached = cache.get(key);
  if (cached) return cached;

  const res = await fetch(key);

  if (!res.ok) throw new Error(await res.text());
  const result = (await res.json()) as SortedResult[];
  cache.set(key, result);
  return result;
}



================================================
FILE: packages/core/src/search/client/orama-cloud.ts
================================================
import type { SortedResult } from '@/server';
import type { ClientSearchParams, OramaClient } from '@oramacloud/client';
import { removeUndefined } from '@/utils/remove-undefined';
import type { OramaIndex } from '@/search/orama-cloud';

interface CrawlerIndex {
  path: string;
  title: string;
  content: string;
  section: string;
  category: string;
}

export interface OramaCloudOptions {
  client: OramaClient;
  /**
   * The type of your index.
   *
   * You can set it to `crawler` if you use crawler instead of the JSON index with schema provided by Fumadocs
   */
  index?: 'default' | 'crawler';
  params?: ClientSearchParams;

  /**
   * Filter results with specific tag.
   */
  tag?: string;

  /**
   * Filter by locale (unsupported at the moment)
   */
  locale?: string;
}

export async function searchDocs(
  query: string,
  options: OramaCloudOptions,
): Promise<SortedResult[]> {
  const list: SortedResult[] = [];
  const { index = 'default', client, params: extraParams = {}, tag } = options;

  if (index === 'crawler') {
    const result = await client.search({
      ...extraParams,
      term: query,
      where: {
        category: tag
          ? {
              eq: tag.slice(0, 1).toUpperCase() + tag.slice(1),
            }
          : undefined,
        ...extraParams.where,
      },
      limit: 10,
    });
    if (!result) return list;

    if (index === 'crawler') {
      for (const hit of result.hits) {
        const doc = hit.document as unknown as CrawlerIndex;

        list.push(
          {
            id: hit.id,
            type: 'page',
            content: doc.title,
            url: doc.path,
          },
          {
            id: 'page' + hit.id,
            type: 'text',
            content: doc.content,
            url: doc.path,
          },
        );
      }

      return list;
    }
  }

  const params: ClientSearchParams = {
    ...extraParams,
    term: query,
    where: removeUndefined({
      tag,
      ...extraParams.where,
    }),
    groupBy: {
      properties: ['page_id'],
      maxResult: 7,
      ...extraParams.groupBy,
    },
  };

  const result = await client.search(params);
  if (!result || !result.groups) return list;

  for (const item of result.groups) {
    let addedHead = false;

    for (const hit of item.result) {
      const doc = hit.document as unknown as OramaIndex;

      if (!addedHead) {
        list.push({
          id: doc.page_id,
          type: 'page',
          content: doc.title,
          url: doc.url,
        });
        addedHead = true;
      }

      list.push({
        id: doc.id,
        content: doc.content,
        type: doc.content === doc.section ? 'heading' : 'text',
        url: doc.section_id ? `${doc.url}#${doc.section_id}` : doc.url,
      });
    }
  }

  return list;
}



================================================
FILE: packages/core/src/search/client/static.ts
================================================
import { type AnyOrama, create, load, type Orama } from '@orama/orama';
import { searchSimple } from '@/search/orama/search/simple';
import { searchAdvanced } from '@/search/orama/search/advanced';
import {
  type advancedSchema,
  type simpleSchema,
} from '@/search/orama/create-db';
import type { ExportedData } from '@/search/server';

export interface StaticOptions {
  /**
   * Where to download exported search indexes (URL)
   *
   * @defaultValue '/api/search'
   */
  from?: string;

  initOrama?: (locale?: string) => AnyOrama | Promise<AnyOrama>;

  /**
   * Filter results with specific tag(s).
   */
  tag?: string | string[];

  /**
   * Filter by locale (unsupported at the moment)
   */
  locale?: string;
}

const cache = new Map<string, Promise<Database>>();

// locale -> db
type Database = Map<
  string,
  {
    type: 'simple' | 'advanced';
    db: AnyOrama;
  }
>;

async function loadDB({
  from = '/api/search',
  initOrama = (locale) => create({ schema: { _: 'string' }, language: locale }),
}: StaticOptions): Promise<Database> {
  const cacheKey = from;
  const cached = cache.get(cacheKey);
  if (cached) return cached;

  async function init() {
    const res = await fetch(from);

    if (!res.ok)
      throw new Error(
        `failed to fetch exported search indexes from ${from}, make sure the search database is exported and available for client.`,
      );

    const data = (await res.json()) as ExportedData;
    const dbs: Database = new Map();

    if (data.type === 'i18n') {
      await Promise.all(
        Object.entries(data.data).map(async ([k, v]) => {
          const db = await initOrama(k);

          load(db, v);
          dbs.set(k, {
            type: v.type,
            db,
          });
        }),
      );

      return dbs;
    }

    const db = await initOrama();
    load(db, data);
    dbs.set('', {
      type: data.type,
      db,
    });
    return dbs;
  }

  const result = init();
  cache.set(cacheKey, result);
  return result;
}

export async function search(query: string, options: StaticOptions) {
  const { tag, locale } = options;

  const db = (await loadDB(options)).get(locale ?? '');

  if (!db) return [];
  if (db.type === 'simple')
    return searchSimple(db as unknown as Orama<typeof simpleSchema>, query);

  return searchAdvanced(db.db as Orama<typeof advancedSchema>, query, tag);
}



================================================
FILE: packages/core/src/search/orama/_stemmers.ts
================================================
/* Cloned from https://github.com/oramasearch/orama/blob/main/packages/orama/src/components/tokenizer/languages.ts */
export const STEMMERS: Record<string, string> = {
  arabic: 'ar',
  armenian: 'am',
  bulgarian: 'bg',
  czech: 'cz',
  danish: 'dk',
  dutch: 'nl',
  english: 'en',
  finnish: 'fi',
  french: 'fr',
  german: 'de',
  greek: 'gr',
  hungarian: 'hu',
  indian: 'in',
  indonesian: 'id',
  irish: 'ie',
  italian: 'it',
  lithuanian: 'lt',
  nepali: 'np',
  norwegian: 'no',
  portuguese: 'pt',
  romanian: 'ro',
  russian: 'ru',
  serbian: 'rs',
  slovenian: 'ru',
  spanish: 'es',
  swedish: 'se',
  tamil: 'ta',
  turkish: 'tr',
  ukrainian: 'uk',
  sanskrit: 'sk',
};



================================================
FILE: packages/core/src/search/orama/create-db.ts
================================================
import {
  create,
  insertMultiple,
  type Orama,
  type PartialSchemaDeep,
  type TypedDocument,
} from '@orama/orama';
import { type AdvancedOptions, type SimpleOptions } from '@/search/server';

export type AdvancedDocument = TypedDocument<Orama<typeof advancedSchema>>;
export const advancedSchema = {
  content: 'string',
  page_id: 'string',
  type: 'string',
  tags: 'enum[]',
  url: 'string',
} as const;

export async function createDB({
  indexes,
  tokenizer,
  search: _,
  ...rest
}: AdvancedOptions): Promise<Orama<typeof advancedSchema>> {
  const items = typeof indexes === 'function' ? await indexes() : indexes;

  const db = create({
    schema: advancedSchema,
    ...rest,
    components: {
      ...rest.components,
      tokenizer: tokenizer ?? rest.components?.tokenizer,
    },
  }) as Orama<typeof advancedSchema>;

  const mapTo: PartialSchemaDeep<AdvancedDocument>[] = [];
  items.forEach((page) => {
    const tags = Array.isArray(page.tag)
      ? page.tag
      : page.tag
        ? [page.tag]
        : [];
    const data = page.structuredData;
    let id = 0;

    mapTo.push({
      id: page.id,
      page_id: page.id,
      type: 'page',
      content: page.title,
      tags,
      url: page.url,
    });

    if (page.description) {
      mapTo.push({
        id: `${page.id}-${(id++).toString()}`,
        page_id: page.id,
        tags,
        type: 'text',
        url: page.url,
        content: page.description,
      });
    }

    for (const heading of data.headings) {
      mapTo.push({
        id: `${page.id}-${(id++).toString()}`,
        page_id: page.id,
        type: 'heading',
        tags,
        url: `${page.url}#${heading.id}`,
        content: heading.content,
      });
    }

    for (const content of data.contents) {
      mapTo.push({
        id: `${page.id}-${(id++).toString()}`,
        page_id: page.id,
        tags,
        type: 'text',
        url: content.heading ? `${page.url}#${content.heading}` : page.url,
        content: content.content,
      });
    }
  });

  await insertMultiple(db, mapTo);
  return db;
}

export type SimpleDocument = TypedDocument<Orama<typeof simpleSchema>>;
export const simpleSchema = {
  url: 'string',
  title: 'string',
  description: 'string',
  content: 'string',
  keywords: 'string',
} as const;

export async function createDBSimple({
  indexes,
  tokenizer,
  ...rest
}: SimpleOptions): Promise<Orama<typeof simpleSchema>> {
  const items = typeof indexes === 'function' ? await indexes() : indexes;
  const db = create({
    schema: simpleSchema,
    ...rest,
    components: {
      ...rest.components,
      tokenizer: tokenizer ?? rest.components?.tokenizer,
    },
  }) as Orama<typeof simpleSchema>;

  await insertMultiple(
    db,
    items.map((page) => ({
      title: page.title,
      description: page.description,
      url: page.url,
      content: page.content,
      keywords: page.keywords,
    })),
  );

  return db;
}



================================================
FILE: packages/core/src/search/orama/create-endpoint.ts
================================================
import { type SearchAPI, type SearchServer } from '@/search/server';

export function createEndpoint(server: SearchServer): SearchAPI {
  const { search } = server;

  return {
    ...server,
    async staticGET() {
      return Response.json(await server.export());
    },
    async GET(request) {
      const url = new URL(request.url);
      const query = url.searchParams.get('query');
      if (!query) return Response.json([]);

      return Response.json(
        await search(query, {
          tag: url.searchParams.get('tag')?.split(',') ?? undefined,
          locale: url.searchParams.get('locale') ?? undefined,
        }),
      );
    },
  };
}



================================================
FILE: packages/core/src/search/orama/create-from-source.ts
================================================
import {
  type AdvancedIndex,
  type AdvancedOptions,
  createI18nSearchAPI,
  createSearchAPI,
  type SearchAPI,
} from '@/search/server';
import {
  type InferPageType,
  type LoaderConfig,
  type LoaderOutput,
  type Page,
} from '@/source';
import { type StructuredData } from '@/mdx-plugins';
import { type LocaleMap } from '@/search/orama/create-i18n';
import { basename, extname } from '@/source/path';

function pageToIndex(page: Page): AdvancedIndex {
  if (!('structuredData' in page.data)) {
    throw new Error(
      'Cannot find structured data from page, please define the page to index function.',
    );
  }

  const structuredData = page.data.structuredData as StructuredData;

  return {
    title: page.data.title ?? basename(page.path, extname(page.path)),
    description:
      'description' in page.data
        ? (page.data.description as string)
        : undefined,
    url: page.url,
    id: page.url,
    structuredData,
  };
}

interface Options<Page = unknown> extends Omit<AdvancedOptions, 'indexes'> {
  localeMap?: LocaleMap<Partial<AdvancedOptions>>;
  buildIndex?: (page: Page) => AdvancedIndex;
}

export function createFromSource<S extends LoaderOutput<LoaderConfig>>(
  source: S,
  options?: Options<InferPageType<S>>,
): SearchAPI;

/**
 * @deprecated Use `createFromSource(source, options)` instead.
 */
export function createFromSource<S extends LoaderOutput<LoaderConfig>>(
  source: S,
  pageToIndexFn?: (page: InferPageType<S>) => AdvancedIndex,
  options?: Omit<Options, 'buildIndex'>,
): SearchAPI;

export function createFromSource<S extends LoaderOutput<LoaderConfig>>(
  source: S,
  _buildIndexOrOptions:
    | ((page: InferPageType<S>) => AdvancedIndex)
    | Options<InferPageType<S>> = pageToIndex,
  _options?: Omit<Options, 'buildIndex'>,
): SearchAPI {
  const options: Options<InferPageType<S>> = {
    ...(typeof _buildIndexOrOptions === 'function'
      ? {
          buildIndex: _buildIndexOrOptions,
        }
      : _buildIndexOrOptions),
    ..._options,
  };

  if (source._i18n) {
    return createI18nSearchAPI('advanced', {
      ...options,
      i18n: source._i18n,
      indexes: source.getLanguages().flatMap((entry) => {
        return entry.pages.map((page) => {
          return {
            ...(options.buildIndex ?? pageToIndex)(page as InferPageType<S>),
            locale: entry.language,
          };
        });
      }),
    });
  }

  return createSearchAPI('advanced', {
    ...options,
    indexes: source.getPages().map((page) => {
      return (options.buildIndex ?? pageToIndex)(page as InferPageType<S>);
    }),
  });
}



================================================
FILE: packages/core/src/search/orama/create-i18n.ts
================================================
import { type Language, type Tokenizer } from '@orama/orama';
import {
  type AdvancedIndex,
  type AdvancedOptions,
  type Dynamic,
  type Index,
  initAdvancedSearch,
  initSimpleSearch,
  type SearchAPI,
  type SearchServer,
  type SimpleOptions,
} from '@/search/server';
import { createEndpoint } from '@/search/orama/create-endpoint';
import { type I18nConfig } from '@/i18n';
import { STEMMERS } from '@/search/orama/_stemmers';

export type LocaleMap<O> = Record<string, Language | O>;

type I18nOptions<O extends SimpleOptions | AdvancedOptions, Idx> = Omit<
  O,
  'language' | 'indexes'
> & {
  i18n: I18nConfig;

  /**
   * Map locale name from i18n config to Orama compatible `language` or options
   */
  localeMap?: LocaleMap<Partial<O>>;

  indexes: WithLocale<Idx>[] | Dynamic<WithLocale<Idx>>;
};

type I18nSimpleOptions = I18nOptions<SimpleOptions, Index>;
type I18nAdvancedOptions = I18nOptions<AdvancedOptions, AdvancedIndex>;

type WithLocale<T> = T & {
  locale: string;
};

async function getTokenizer(
  locale: string,
): Promise<{ language: string } | { tokenizer: Tokenizer }> {
  return {
    language:
      Object.keys(STEMMERS).find((lang) => STEMMERS[lang] === locale) ?? locale,
  };
}

async function initSimple(
  options: I18nSimpleOptions,
): Promise<Map<string, SearchServer>> {
  const map = new Map<string, SearchServer>();
  if (options.i18n.languages.length === 0) {
    return map;
  }

  const indexes =
    typeof options.indexes === 'function'
      ? await options.indexes()
      : options.indexes;

  for (const locale of options.i18n.languages) {
    const localeIndexes = indexes.filter((index) => index.locale === locale);
    const mapped = options.localeMap?.[locale] ?? (await getTokenizer(locale));

    map.set(
      locale,
      typeof mapped === 'object'
        ? initSimpleSearch({
            ...options,
            ...mapped,
            indexes: localeIndexes,
          })
        : initSimpleSearch({
            ...options,
            language: mapped,
            indexes: localeIndexes,
          }),
    );
  }

  return map;
}

async function initAdvanced(
  options: I18nAdvancedOptions,
): Promise<Map<string, SearchServer>> {
  const map = new Map<string, SearchServer>();
  if (options.i18n.languages.length === 0) {
    return map;
  }

  const indexes =
    typeof options.indexes === 'function'
      ? await options.indexes()
      : options.indexes;

  for (const locale of options.i18n.languages) {
    const localeIndexes = indexes.filter((index) => index.locale === locale);
    const mapped = options.localeMap?.[locale] ?? (await getTokenizer(locale));

    map.set(
      locale,
      typeof mapped === 'object'
        ? initAdvancedSearch({
            ...options,
            indexes: localeIndexes,
            ...mapped,
          })
        : initAdvancedSearch({
            ...options,
            language: mapped,
            indexes: localeIndexes,
          }),
    );
  }

  return map;
}

export function createI18nSearchAPI<T extends 'simple' | 'advanced'>(
  type: T,
  options: T extends 'simple' ? I18nSimpleOptions : I18nAdvancedOptions,
): SearchAPI {
  const get =
    type === 'simple'
      ? initSimple(options as I18nSimpleOptions)
      : initAdvanced(options as I18nAdvancedOptions);
  return createEndpoint({
    async export() {
      const map = await get;
      const entries = Array.from(map.entries()).map(async ([k, v]) => [
        k,
        await (v as SearchServer).export(),
      ]);

      return {
        type: 'i18n',
        data: Object.fromEntries(await Promise.all(entries)),
      };
    },
    async search(query, searchOptions) {
      const map = await get;

      const locale = searchOptions?.locale ?? options.i18n.defaultLanguage;
      const handler = map.get(locale);

      if (handler) return handler.search(query, searchOptions);
      return [];
    },
  });
}



================================================
FILE: packages/core/src/search/orama/search/advanced.ts
================================================
import { getByID, type Orama, search, type SearchParams } from '@orama/orama';
import {
  type AdvancedDocument,
  type advancedSchema,
} from '@/search/orama/create-db';
import { removeUndefined } from '@/utils/remove-undefined';
import type { SortedResult } from '@/server';

export async function searchAdvanced(
  db: Orama<typeof advancedSchema>,
  query: string,
  tag: string | string[] = [],
  extraParams: Partial<
    SearchParams<Orama<typeof advancedSchema>, AdvancedDocument>
  > = {},
): Promise<SortedResult[]> {
  if (typeof tag === 'string') tag = [tag];

  let params = {
    ...extraParams,
    where: removeUndefined({
      tags:
        tag.length > 0
          ? {
              containsAll: tag,
            }
          : undefined,
      ...extraParams.where,
    }),
    groupBy: {
      properties: ['page_id'],
      maxResult: 8,
      ...extraParams.groupBy,
    },
  } as SearchParams<typeof db, AdvancedDocument>;

  if (query.length > 0) {
    params = {
      ...params,
      term: query,
      properties: ['content'],
    } as SearchParams<typeof db, AdvancedDocument>;
  }

  const result = await search(db, params);
  const list: SortedResult[] = [];
  for (const item of result.groups ?? []) {
    const pageId = item.values[0] as string;

    const page = await getByID(db, pageId);
    if (!page) continue;

    list.push({
      id: pageId,
      type: 'page',
      content: page.content,
      url: page.url,
    });

    for (const hit of item.result) {
      if (hit.document.type === 'page') continue;

      list.push({
        id: hit.document.id.toString(),
        content: hit.document.content,
        type: hit.document.type as SortedResult['type'],
        url: hit.document.url,
      });
    }
  }
  return list;
}



================================================
FILE: packages/core/src/search/orama/search/simple.ts
================================================
import { type Orama, search, type SearchParams } from '@orama/orama';
import type { SortedResult } from '@/server';
import {
  type simpleSchema,
  type SimpleDocument,
} from '@/search/orama/create-db';

export async function searchSimple(
  db: Orama<typeof simpleSchema>,
  query: string,
  params: Partial<
    SearchParams<Orama<typeof simpleSchema>, SimpleDocument>
  > = {},
): Promise<SortedResult[]> {
  const result = await search(db, {
    term: query,
    tolerance: 1,
    ...params,
    boost: {
      title: 2,
      ...('boost' in params ? params.boost : undefined),
    },
  });

  return result.hits.map<SortedResult>((hit) => ({
    type: 'page',
    content: hit.document.title,
    id: hit.document.url,
    url: hit.document.url,
  }));
}



================================================
FILE: packages/core/src/server/get-toc.ts
================================================
import { remark } from 'remark';
import type { ReactNode } from 'react';
import { remarkHeading } from '@/mdx-plugins/remark-heading';
import type { PluggableList } from 'unified';
import type { Compatible } from 'vfile';

export interface TOCItemType {
  title: ReactNode;
  url: string;
  depth: number;
}

export type TableOfContents = TOCItemType[];

/**
 * Get Table of Contents from markdown/mdx document (using remark)
 *
 * @param content - Markdown content or file
 */
export function getTableOfContents(content: Compatible): TableOfContents;

/**
 * Get Table of Contents from markdown/mdx document (using remark)
 *
 * @param content - Markdown content or file
 * @param remarkPlugins - remark plugins to be applied first
 */
export function getTableOfContents(
  content: Compatible,
  remarkPlugins: PluggableList,
): Promise<TableOfContents>;

export function getTableOfContents(
  content: Compatible,
  remarkPlugins?: PluggableList,
): TableOfContents | Promise<TableOfContents> {
  if (remarkPlugins) {
    return remark()
      .use(remarkPlugins)
      .use(remarkHeading)
      .process(content)
      .then((result) => {
        if ('toc' in result.data) return result.data.toc as TableOfContents;

        return [];
      });
  }

  // compatible with previous versions
  const result = remark().use(remarkHeading).processSync(content);

  if ('toc' in result.data) return result.data.toc as TableOfContents;

  return [];
}



================================================
FILE: packages/core/src/server/git-api.ts
================================================
type Response = {
  commit: {
    committer: {
      date: string;
    };
  };
}[];

export interface GetGithubLastCommitOptions {
  /**
   * Repository name, like "fumadocs"
   */
  repo: string;

  /** Owner of repository */
  owner: string;

  /**
   * Path to file
   */
  path: string;

  /**
   * GitHub access token
   */
  token?: string;

  /**
   * SHA or ref (branch or tag) name.
   */
  sha?: string;

  /**
   * Custom query parameters
   */
  params?: Record<string, string>;

  options?: RequestInit;
}

/**
 * Get the last edit time of a file using GitHub API
 *
 * By default, this will cache the result forever.
 * Set `options.next.revalidate` to customise this.
 */
export async function getGithubLastEdit({
  repo,
  token,
  owner,
  path,
  sha,
  options = {},
  params: customParams = {},
}: GetGithubLastCommitOptions): Promise<Date | null> {
  const headers = new Headers(options.headers);
  const params = new URLSearchParams();
  params.set('path', path);
  params.set('page', '1');
  params.set('per_page', '1');

  if (sha) params.set('sha', sha);

  for (const [key, value] of Object.entries(customParams)) {
    params.set(key, value);
  }

  if (token) {
    headers.append('authorization', token);
  }

  const res = await fetch(
    `https://api.github.com/repos/${owner}/${repo}/commits?${params.toString()}`,
    {
      cache: 'force-cache',
      ...options,
      headers,
    },
  );

  if (!res.ok)
    throw new Error(
      `Failed to fetch last edit time from Git ${await res.text()}`,
    );
  const data = (await res.json()) as Response;

  if (data.length === 0) return null;
  return new Date(data[0].commit.committer.date);
}



================================================
FILE: packages/core/src/server/index.ts
================================================
export * from './get-toc';
export * from '../utils/page-tree';
export * as PageTree from './page-tree';
export * from './git-api';
export * from './types';
export * from './metadata';



================================================
FILE: packages/core/src/server/metadata.ts
================================================
import type { Metadata } from 'next';
import { type NextRequest } from 'next/server';
import {
  type InferPageType,
  type LoaderConfig,
  type LoaderOutput,
} from '@/source';

interface ImageMeta {
  alt: string;
  url: string;
  width: number;
  height: number;
}

export function createMetadataImage<
  S extends LoaderOutput<LoaderConfig>,
>(options: {
  source: S;

  /**
   * the route of your OG image generator.
   *
   * @example '/docs-og'
   * @defaultValue '/docs-og'
   */
  imageRoute?: string;

  /**
   * The filename of generated OG Image
   *
   * @defaultValue 'image.png'
   */
  filename?: string;
}): {
  getImageMeta: (slugs: string[]) => ImageMeta;

  /**
   * Add image meta tags to metadata
   */
  withImage: (slugs: string[], metadata?: Metadata) => Metadata;

  /**
   * Generate static params for OG Image Generator
   */
  generateParams: () => {
    slug: string[];
    lang?: string;
  }[];

  /**
   * create route handler for OG Image Generator
   */
  createAPI: (
    handler: (
      page: InferPageType<S>,
      request: NextRequest,
      options: {
        params:
          | {
              slug: string[];
              lang?: string;
            }
          | Promise<{
              slug: string[];
              lang?: string;
            }>;
      },
    ) => Response | Promise<Response>,
  ) => (
    request: NextRequest,
    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- ignore Next.js type check
    options: any,
  ) => Response | Promise<Response>;
} {
  const { filename = 'image.png', imageRoute = '/docs-og' } = options;

  function getImageMeta(slugs: string[]): ImageMeta {
    return {
      alt: 'Banner',
      url: `/${[...imageRoute.split('/'), ...slugs, filename].filter((v) => v.length > 0).join('/')}`,
      width: 1200,
      height: 630,
    };
  }

  return {
    getImageMeta,
    withImage(slugs, data) {
      const imageData = getImageMeta(slugs);

      return {
        ...data,
        openGraph: {
          images: imageData,
          ...data?.openGraph,
        },
        twitter: {
          images: imageData,
          card: 'summary_large_image',
          ...data?.twitter,
        },
      };
    },
    generateParams() {
      return options.source.generateParams().map((params) => ({
        ...params,
        slug: [...params.slug, filename],
      }));
    },
    createAPI(handler) {
      return async (req, args) => {
        const params = await (
          args as {
            params?: Promise<Record<string, string | string[] | undefined>>;
          }
        ).params;

        if (!params || !('slug' in params) || params.slug === undefined)
          throw new Error(`Invalid params: ${JSON.stringify(params)}`);

        const lang =
          'lang' in params && typeof params.lang === 'string'
            ? params.lang
            : undefined;
        const input: { slug: string[]; lang?: string } = {
          slug: Array.isArray(params.slug) ? params.slug : [params.slug],
          lang,
        };

        const page = options.source.getPage(
          input.slug.slice(0, -1), //remove filename
          lang,
        );
        if (!page)
          return new Response(null, {
            status: 404,
          });

        return handler(page as InferPageType<S>, req, { params: input });
      };
    },
  };
}



================================================
FILE: packages/core/src/server/page-tree.ts
================================================
import type { ReactElement, ReactNode } from 'react';

export interface Root {
  $id?: string;

  name: ReactNode;
  children: Node[];
}

export type Node = Item | Separator | Folder;

export interface Item {
  $id?: string;
  /**
   * @internal
   */
  $ref?: {
    file: string;
  };

  type: 'page';
  name: ReactNode;
  url: string;
  external?: boolean;

  description?: ReactNode;
  icon?: ReactElement;
}

export interface Separator {
  $id?: string;

  type: 'separator';
  name?: ReactNode;
  icon?: ReactElement;
}

export interface Folder {
  $id?: string;
  /**
   * @internal
   */
  $ref?: {
    metaFile?: string;
  };

  type: 'folder';
  name: ReactNode;
  description?: ReactNode;
  root?: boolean;
  defaultOpen?: boolean;
  index?: Item;
  icon?: ReactElement;
  children: Node[];
}



================================================
FILE: packages/core/src/server/types.ts
================================================
export interface SortedResult {
  id: string;
  url: string;
  type: 'page' | 'heading' | 'text';
  content: string;
}



================================================
FILE: packages/core/src/source/file-system.ts
================================================
import { dirname } from './path';
import { splitPath } from '@/utils/path';

/**
 * In memory file system.
 */
export class FileSystem<File> {
  files = new Map<string, File>();
  folders = new Map<string, string[]>();

  constructor() {
    this.folders.set('', []);
  }

  read(path: string): File | undefined {
    return this.files.get(path);
  }

  /**
   * get the direct children of folder (in virtual file path)
   */
  readDir(path: string): string[] | undefined {
    return this.folders.get(path);
  }

  write(path: string, file: File): void {
    const dir = dirname(path);

    this.makeDir(dir);
    this.readDir(dir)?.push(path);
    this.files.set(path, file);
  }

  getFiles(): string[] {
    return Array.from(this.files.keys());
  }

  makeDir(path: string): void {
    const segments = splitPath(path);

    for (let i = 0; i < segments.length; i++) {
      const segment = segments.slice(0, i + 1).join('/');
      if (this.folders.has(segment)) continue;

      this.folders.set(segment, []);
      this.folders.get(dirname(segment))!.push(segment);
    }
  }
}



================================================
FILE: packages/core/src/source/index.ts
================================================
export * from './page-tree-builder';
export * from './loader';
export { FileSystem } from './file-system';

export {
  loadFiles,
  type PageFile,
  type MetaFile,
  type LoadOptions,
  type ContentStorage,
  type Transformer,
} from './load-files';
export type * from './types';
export {
  type FileInfo,
  type FolderInfo,
  parseFilePath,
  parseFolderPath,
} from './path';



================================================
FILE: packages/core/src/source/load-files.ts
================================================
import { type MetaData, type PageData } from '@/source/types';
import { FileSystem } from './file-system';
import { slash, splitPath } from '@/utils/path';
import { VirtualFile } from '@/source/loader';

export interface LoadOptions {
  transformers?: Transformer[];
  buildFiles: (files: VirtualFile[]) => (MetaFile | PageFile)[];
}

export type ContentStorage = FileSystem<MetaFile | PageFile>;

export interface MetaFile<Data extends MetaData = MetaData> {
  path: string;
  absolutePath: string;

  format: 'meta';
  data: Data;
}

export interface PageFile<Data extends PageData = PageData> {
  path: string;
  absolutePath: string;

  format: 'page';
  slugs: string[];
  data: Data;
}

export type Transformer = (context: {
  storage: ContentStorage;
  options: LoadOptions;
}) => void;

// Virtual files -> Virtual Storage -> Transformers -> Result
export function loadFiles(
  files: VirtualFile[],
  options: LoadOptions,
): ContentStorage {
  const { transformers = [] } = options;
  const storage: ContentStorage = new FileSystem();
  const normalized: VirtualFile[] = files.map((file) => ({
    ...file,
    path: normalizePath(file.path),
  }));

  for (const item of options.buildFiles(normalized)) {
    storage.write(item.path, item);
  }

  for (const transformer of transformers) {
    transformer({
      storage,
      options,
    });
  }

  return storage;
}

export function loadFilesI18n(
  files: VirtualFile[],
  options: LoadOptions,
  i18n: {
    parser: 'dot' | 'dir';
    languages: string[];
    defaultLanguage: string;
  },
): Record<string, ContentStorage> {
  const parser = i18n.parser === 'dir' ? dirParser : dotParser;
  const storages: Record<string, ContentStorage> = {};

  for (const lang of i18n.languages) {
    storages[lang] = loadFiles(
      files.flatMap((file) => {
        const [path, locale] = parser(normalizePath(file.path));

        if ((locale ?? i18n.defaultLanguage) === lang) {
          return {
            ...file,
            path,
          };
        }

        return [];
      }),
      options,
    );
  }

  return storages;
}

function dirParser(path: string): [string, string?] {
  const parsed = path.split('/');
  if (parsed.length >= 2) return [parsed.slice(1).join('/'), parsed[0]];

  return [path];
}

function dotParser(path: string): [string, string?] {
  const segs = path.split('/');
  if (segs.length === 0) return [path];

  const name = segs[segs.length - 1].split('.');
  if (name.length >= 3) {
    const locale = name.splice(name.length - 2, 1)[0];

    if (locale.length > 0 && !/\d+/.test(locale)) {
      segs[segs.length - 1] = name.join('.');

      return [segs.join('/'), locale];
    }
  }

  return [path];
}

/**
 * @param path - Relative path
 * @returns Normalized path, with no trailing/leading slashes
 * @throws Throws error if path starts with `./` or `../`
 */
function normalizePath(path: string): string {
  const segments = splitPath(slash(path));
  if (segments[0] === '.' || segments[0] === '..')
    throw new Error("It must not start with './' or '../'");
  return segments.join('/');
}



================================================
FILE: packages/core/src/source/loader.ts
================================================
import type * as PageTree from '@/server/page-tree';
import type { I18nConfig } from '@/i18n';
import {
  type ContentStorage,
  loadFiles,
  loadFilesI18n,
  type MetaFile,
  type PageFile,
  type Transformer,
} from './load-files';
import type { MetaData, PageData, UrlFn } from './types';
import {
  type BuildPageTreeOptions,
  createPageTreeBuilder,
} from './page-tree-builder';
import {
  basename,
  dirname,
  extname,
  type FileInfo,
  parseFilePath,
} from './path';
import { joinPath } from '@/utils/path';

export interface LoaderConfig {
  source: SourceConfig;
  i18n: boolean;
}

export interface SourceConfig {
  pageData: PageData;
  metaData: MetaData;
}

export interface LoaderOptions<
  T extends SourceConfig = SourceConfig,
  I18n extends I18nConfig | undefined = I18nConfig | undefined,
> {
  baseUrl: string;

  icon?: NonNullable<BuildPageTreeOptions['resolveIcon']>;
  slugs?: (info: FileInfo) => string[];
  url?: UrlFn;

  source: Source<T>;
  transformers?: Transformer[];

  /**
   * Additional options for page tree builder
   */
  pageTree?: Partial<
    Omit<BuildPageTreeOptions<T['pageData'], T['metaData']>, 'storage'>
  >;

  /**
   * Configure i18n
   */
  i18n?: I18n;
}

export interface Source<Config extends SourceConfig> {
  /**
   * @internal
   */
  _config?: Config;
  files: VirtualFile[] | (() => VirtualFile[]);
}

interface SharedFileInfo {
  /**
   * Virtualized file path (parsed)
   *
   * @deprecated Use `path` instead.
   */
  file: FileInfo;

  /**
   * Virtualized file path (relative to content directory)
   *
   * @example `docs/page.mdx`
   */
  path: string;

  /**
   * Absolute path of the file
   */
  absolutePath: string;
}

export interface VirtualFile {
  /**
   * Virtualized path (relative to content directory)
   *
   * @example `docs/page.mdx`
   */
  path: string;

  /**
   * Absolute path of the file
   */
  absolutePath?: string;

  type: 'page' | 'meta';

  /**
   * Specified Slugs for page
   */
  slugs?: string[];
  data: unknown;
}

export interface Page<Data = PageData> extends SharedFileInfo {
  slugs: string[];
  url: string;
  data: Data;

  locale?: string | undefined;
}

export interface Meta<Data = MetaData> extends SharedFileInfo {
  data: Data;
}

export interface LanguageEntry<Data = PageData> {
  language: string;
  pages: Page<Data>[];
}

export interface LoaderOutput<Config extends LoaderConfig> {
  pageTree: Config['i18n'] extends true
    ? Record<string, PageTree.Root>
    : PageTree.Root;

  getPageTree: (locale?: string) => PageTree.Root;
  getPageByHref: (
    href: string,
    options?: {
      language?: string;

      /**
       * resolve relative file paths in `href` from specified dirname, must be a virtual path.
       */
      dir?: string;
    },
  ) =>
    | {
        page: Page<Config['source']['pageData']>;
        hash?: string;
      }
    | undefined;

  _i18n?: I18nConfig;

  /**
   * Get list of pages from language
   *
   * @param language - If empty, the default language will be used
   */
  getPages: (language?: string) => Page<Config['source']['pageData']>[];

  getLanguages: () => LanguageEntry<Config['source']['pageData']>[];

  /**
   * Get page with slugs
   *
   * @param language - If empty, the default language will be used
   */
  getPage: (
    slugs: string[] | undefined,
    language?: string,
  ) => Page<Config['source']['pageData']> | undefined;

  getNodePage: (
    node: PageTree.Item,
    language?: string,
  ) => Page<Config['source']['pageData']> | undefined;

  getNodeMeta: (
    node: PageTree.Folder,
    language?: string,
  ) => Meta<Config['source']['metaData']> | undefined;

  /**
   * generate static params for Next.js SSG
   *
   * @param slug - customise parameter name for slugs
   * @param lang - customise parameter name for lang
   */
  generateParams: <
    TSlug extends string = 'slug',
    TLang extends string = 'lang',
  >(
    slug?: TSlug,
    lang?: TLang,
  ) => (Record<TSlug, string[]> & Record<TLang, string>)[];
}

function indexPages(
  storages: Record<string, ContentStorage>,
  getUrl: UrlFn,
  i18n?: I18nConfig,
) {
  const result = {
    // (locale.slugs -> page)
    pages: new Map<string, Page>(),
    // (locale.path -> page)
    pathToMeta: new Map<string, Meta>(),
    // (locale.path -> meta)
    pathToPage: new Map<string, Page>(),
  };

  const defaultLanguage = i18n?.defaultLanguage ?? '';

  for (const filePath of storages[defaultLanguage].getFiles()) {
    const item = storages[defaultLanguage].read(filePath)!;

    if (item.format === 'meta') {
      result.pathToMeta.set(
        `${defaultLanguage}.${item.path}`,
        fileToMeta(item),
      );
    }

    if (item.format === 'page') {
      const page = fileToPage(item, getUrl, defaultLanguage);
      result.pathToPage.set(`${defaultLanguage}.${item.path}`, page);
      result.pages.set(`${defaultLanguage}.${page.slugs.join('/')}`, page);

      if (!i18n) continue;

      for (const lang of i18n.languages) {
        if (lang === defaultLanguage) continue;
        const localizedItem = storages[lang].read(filePath);
        const localizedPage = fileToPage(
          localizedItem?.format === 'page' ? localizedItem : item,
          getUrl,
          lang,
        );

        if (localizedItem) {
          result.pathToPage.set(`${lang}.${item.path}`, localizedPage);
        }

        result.pages.set(
          `${lang}.${localizedPage.slugs.join('/')}`,
          localizedPage,
        );
      }
    }
  }

  return result;
}

export function createGetUrl(baseUrl: string, i18n?: I18nConfig): UrlFn {
  const baseSlugs = baseUrl.split('/');

  return (slugs, locale) => {
    const hideLocale = i18n?.hideLocale ?? 'never';
    let urlLocale: string | undefined;

    if (hideLocale === 'never') {
      urlLocale = locale;
    } else if (
      hideLocale === 'default-locale' &&
      locale !== i18n?.defaultLanguage
    ) {
      urlLocale = locale;
    }

    const paths = [...baseSlugs, ...slugs];
    if (urlLocale) paths.unshift(urlLocale);

    return `/${paths.filter((v) => v.length > 0).join('/')}`;
  };
}

export function loader<
  Config extends SourceConfig,
  I18n extends I18nConfig | undefined = undefined,
>(
  options: LoaderOptions<Config, I18n>,
): LoaderOutput<{
  source: Config;
  i18n: I18n extends I18nConfig ? true : false;
}> {
  // @ts-expect-error -- forced type cast
  return createOutput(options);
}

function createOutput(options: LoaderOptions): LoaderOutput<LoaderConfig> {
  if (!options.url && !options.baseUrl) {
    console.warn('`loader()` now requires a `baseUrl` option to be defined.');
  }

  const {
    source,
    baseUrl = '/',
    i18n,
    slugs: slugsFn,
    url: getUrl = createGetUrl(baseUrl ?? '/', i18n),
    transformers,
  } = options;
  const defaultLanguage = i18n?.defaultLanguage ?? '';
  const files =
    typeof source.files === 'function' ? source.files() : source.files;

  function buildFiles(files: VirtualFile[]) {
    const indexFiles: VirtualFile[] = [];
    const taken = new Set<string>();

    for (const file of files) {
      if (file.type !== 'page' || file.slugs) continue;

      // for custom slugs function, don't handle conflicting cases like `dir/index.mdx` vs `dir.mdx`
      if (isIndex(file.path) && !slugsFn) {
        indexFiles.push(file);
        continue;
      }

      file.slugs = slugsFn
        ? slugsFn(parseFilePath(file.path))
        : getSlugs(file.path);

      const key = file.slugs.join('/');
      if (taken.has(key)) throw new Error('Duplicated slugs');
      taken.add(key);
    }

    for (const file of indexFiles) {
      file.slugs = getSlugs(file.path);

      if (taken.has(file.slugs.join('/'))) file.slugs.push('index');
    }

    return files.map((file) => {
      if (file.type === 'page') {
        return {
          format: 'page',
          path: file.path,
          slugs: file.slugs!,
          data: file.data,
          absolutePath: file.absolutePath ?? '',
        } as PageFile;
      }

      return {
        format: 'meta',
        path: file.path,
        absolutePath: file.absolutePath ?? '',
        data: file.data,
      } as MetaFile;
    });
  }

  const storages = i18n
    ? loadFilesI18n(
        files,
        {
          buildFiles,
          transformers,
        },
        {
          ...i18n,
          parser: i18n.parser ?? 'dot',
        },
      )
    : {
        '': loadFiles(files, {
          transformers,
          buildFiles,
        }),
      };

  const walker = indexPages(storages, getUrl, i18n);
  const builder = createPageTreeBuilder(getUrl);
  let pageTree: LoaderOutput<LoaderConfig>['pageTree'] | undefined;

  return {
    _i18n: i18n,
    get pageTree() {
      if (i18n) {
        pageTree ??= builder.buildI18n({
          storages,
          resolveIcon: options.icon,
          i18n: i18n,
          ...options.pageTree,
        }) as unknown as LoaderOutput<LoaderConfig>['pageTree'];
      } else {
        pageTree ??= builder.build({
          storage: storages[''],
          resolveIcon: options.icon,
          ...options.pageTree,
        });
      }

      return pageTree;
    },
    set pageTree(v) {
      pageTree = v;
    },
    getPageByHref(href, { dir = '', language } = {}) {
      const [value, hash] = href.split('#', 2);
      let target;

      if (
        value.startsWith('.') &&
        (value.endsWith('.md') || value.endsWith('.mdx'))
      ) {
        const path = joinPath(dir, value);

        target = walker.pathToPage.get(`${language}.${path}`);
      } else {
        target = this.getPages(language).find((item) => item.url === value);
      }

      if (target)
        return {
          page: target,
          hash,
        };
    },
    getPages(language = defaultLanguage) {
      const pages: Page[] = [];

      for (const [key, value] of walker.pages.entries()) {
        if (key.startsWith(`${language}.`)) pages.push(value);
      }

      return pages;
    },
    getLanguages() {
      const list: LanguageEntry[] = [];
      if (!options.i18n) return list;

      for (const language of options.i18n.languages) {
        list.push({
          language,
          pages: this.getPages(language),
        });
      }

      return list;
    },
    getPage(slugs = [], language = defaultLanguage) {
      return walker.pages.get(`${language}.${slugs.join('/')}`);
    },
    getNodeMeta(node, language = defaultLanguage) {
      const ref = node.$ref?.metaFile;
      if (!ref) return;

      return walker.pathToMeta.get(`${language}.${ref}`);
    },
    getNodePage(node, language = defaultLanguage) {
      const ref = node.$ref?.file;
      if (!ref) return;

      return walker.pathToPage.get(`${language}.${ref}`);
    },
    getPageTree(locale) {
      if (options.i18n) {
        return this.pageTree[
          (locale ?? defaultLanguage) as keyof typeof pageTree
        ];
      }

      return this.pageTree;
    },
    // @ts-expect-error -- ignore this
    generateParams(slug, lang) {
      if (options.i18n) {
        return this.getLanguages().flatMap((entry) =>
          entry.pages.map((page) => ({
            [slug ?? 'slug']: page.slugs,
            [lang ?? 'lang']: entry.language,
          })),
        );
      }

      return this.getPages().map((page) => ({
        [slug ?? 'slug']: page.slugs,
      }));
    },
  };
}

function fileToMeta<Data = MetaData>(file: MetaFile): Meta<Data> {
  return {
    path: file.path,
    absolutePath: file.absolutePath,
    get file() {
      return parseFilePath(this.path);
    },
    data: file.data as Data,
  };
}

function fileToPage<Data = PageData>(
  file: PageFile,
  getUrl: UrlFn,
  locale?: string,
): Page<Data> {
  return {
    get file() {
      return parseFilePath(this.path);
    },
    absolutePath: file.absolutePath,
    path: file.path,
    url: getUrl(file.slugs, locale),
    slugs: file.slugs,
    data: file.data as Data,
    locale,
  };
}

const GroupRegex = /^\(.+\)$/;

function isIndex(file: string) {
  return basename(file, extname(file)) === 'index';
}

/**
 * Convert file path into slugs, also encode non-ASCII characters, so they can work in pathname
 */
export function getSlugs(file: string | FileInfo): string[] {
  if (typeof file !== 'string') return getSlugs(file.path);

  const dir = dirname(file);
  const name = basename(file, extname(file));
  const slugs: string[] = [];

  for (const seg of dir.split('/')) {
    // filter empty names and file groups like (group_name)
    if (seg.length > 0 && !GroupRegex.test(seg)) slugs.push(encodeURI(seg));
  }

  if (GroupRegex.test(name))
    throw new Error(`Cannot use folder group in file names: ${file}`);

  if (name !== 'index') {
    slugs.push(encodeURI(name));
  }

  return slugs;
}



================================================
FILE: packages/core/src/source/page-tree-builder.ts
================================================
import type { ReactElement } from 'react';
import type { I18nConfig } from '@/i18n';
import type * as PageTree from '../server/page-tree';
import { joinPath } from '@/utils/path';
import type { MetaData, PageData, UrlFn } from './types';
import type { ContentStorage, MetaFile, PageFile } from '@/source/load-files';
import { basename, extname } from '@/source/path';

interface PageTreeBuilderContext {
  storage: ContentStorage;
  resolveName: (name: string, format: 'meta' | 'page') => string;

  locale?: string;
  localeStorage?: ContentStorage;

  builder: PageTreeBuilder;
  options: BaseOptions;
  getUrl: UrlFn;
}

interface BaseOptions<
  Page extends PageData = PageData,
  Meta extends MetaData = MetaData,
> {
  /**
   * Remove references to the file path of original nodes (`$ref`)
   *
   * @defaultValue false
   */
  noRef?: boolean;

  attachFile?: (node: PageTree.Item, file?: PageFile<Page>) => PageTree.Item;
  attachFolder?: (
    node: PageTree.Folder,
    folder: {
      children: (PageFile<Page> | MetaFile<Meta>)[];
    },
    meta?: MetaFile<Meta>,
  ) => PageTree.Folder;
  attachSeparator?: (node: PageTree.Separator) => PageTree.Separator;

  resolveIcon?: (icon: string | undefined) => ReactElement | undefined;
}

export interface BuildPageTreeOptions<
  Page extends PageData = PageData,
  Meta extends MetaData = MetaData,
> extends BaseOptions<Page, Meta> {
  storage: ContentStorage;
}

export interface BuildPageTreeOptionsWithI18n<
  Page extends PageData = PageData,
  Meta extends MetaData = MetaData,
> extends BaseOptions<Page, Meta> {
  storages: Record<string, ContentStorage>;
  i18n: I18nConfig;
}

export interface PageTreeBuilder {
  build: (options: BuildPageTreeOptions) => PageTree.Root;

  /**
   * Build page tree and fallback to the default language if the localized page doesn't exist
   */
  buildI18n: (
    options: BuildPageTreeOptionsWithI18n,
  ) => Record<string, PageTree.Root>;
}

const group = /^\((?<name>.+)\)$/;
const link = /^(?:\[(?<icon>[^\]]+)])?\[(?<name>[^\]]+)]\((?<url>[^)]+)\)$/;
const separator = /^---(?:\[(?<icon>[^\]]+)])?(?<name>.+)---|^---$/;
const rest = '...' as const;
const restReversed = 'z...a' as const;
const extractPrefix = '...';
const excludePrefix = '!';

function buildAll(
  paths: string[],
  ctx: PageTreeBuilderContext,
  filter?: (path: string) => boolean,
  reversed = false,
): PageTree.Node[] {
  const output: PageTree.Node[] = [];
  const sortedPaths = (filter ? paths.filter(filter) : [...paths]).sort(
    (a, b) => a.localeCompare(b) * (reversed ? -1 : 1),
  );

  for (const path of sortedPaths) {
    const fileNode = buildFileNode(path, ctx);
    if (!fileNode) continue;

    if (basename(path, extname(path)) === 'index') output.unshift(fileNode);
    else output.push(fileNode);
  }

  for (const dir of sortedPaths) {
    const dirNode = buildFolderNode(dir, false, ctx);
    if (dirNode) output.push(dirNode);
  }

  return output;
}

function resolveFolderItem(
  folderPath: string,
  item: string,
  ctx: PageTreeBuilderContext,
  idx: number,
  restNodePaths: Set<string>,
): PageTree.Node[] | typeof rest | typeof restReversed {
  if (item === rest || item === restReversed) return item;
  const { options, resolveName } = ctx;

  let match = separator.exec(item);
  if (match?.groups) {
    const node: PageTree.Separator = {
      $id: `${folderPath}#${idx}`,
      type: 'separator',
      icon: options.resolveIcon?.(match.groups.icon),
      name: match.groups.name,
    };

    return [options.attachSeparator?.(node) ?? node];
  }

  match = link.exec(item);
  if (match?.groups) {
    const { icon, url, name } = match.groups;
    const isRelative =
      url.startsWith('/') || url.startsWith('#') || url.startsWith('.');

    const node: PageTree.Item = {
      type: 'page',
      icon: options.resolveIcon?.(icon),
      name,
      url,
      external: !isRelative,
    };

    return [options.attachFile?.(node) ?? node];
  }

  const isExcept = item.startsWith(excludePrefix);
  const isExtract = !isExcept && item.startsWith(extractPrefix);

  let filename = item;
  if (isExcept) {
    filename = item.slice(excludePrefix.length);
  } else if (isExtract) {
    filename = item.slice(extractPrefix.length);
  }

  const path = resolveName(joinPath(folderPath, filename), 'page');
  restNodePaths.delete(path);

  if (isExcept) return [];

  const dirNode = buildFolderNode(path, false, ctx);
  if (dirNode) {
    return isExtract ? dirNode.children : [dirNode];
  }

  const fileNode = buildFileNode(path, ctx);
  return fileNode ? [fileNode] : [];
}

function buildFolderNode(
  folderPath: string,
  isGlobalRoot: boolean,
  ctx: PageTreeBuilderContext,
): PageTree.Folder | undefined {
  const { storage, localeStorage, options, resolveName } = ctx;
  const files = storage.readDir(folderPath);
  if (!files) return;

  const metaPath = resolveName(joinPath(folderPath, 'meta'), 'meta');
  const indexPath = resolveName(joinPath(folderPath, 'index'), 'page');

  let meta = localeStorage?.read(metaPath) ?? storage.read(metaPath);
  if (meta?.format !== 'meta') {
    meta = undefined;
  }

  const isRoot = meta?.data.root ?? isGlobalRoot;
  let indexDisabled = false;
  let children: PageTree.Node[];

  if (!meta?.data.pages) {
    children = buildAll(files, ctx, (file) => isRoot || file !== indexPath);
  } else {
    const restItems = new Set<string>(files);
    const resolved = meta.data.pages.flatMap<
      PageTree.Node | typeof rest | typeof restReversed
    >((item, i) => resolveFolderItem(folderPath, item, ctx, i, restItems));

    // disable folder index if it is used in `pages`
    if (!isRoot && !restItems.has(indexPath)) {
      indexDisabled = true;
    }

    for (let i = 0; i < resolved.length; i++) {
      const item = resolved[i];
      if (item !== rest && item !== restReversed) continue;

      const items = buildAll(
        files,
        ctx,
        // index files are not included in ... unless it's a root folder
        (file) => (file !== indexPath || isRoot) && restItems.has(file),
        item === restReversed,
      );

      resolved.splice(i, 1, ...items);
      break;
    }

    children = resolved as PageTree.Node[];
  }

  const index = !indexDisabled ? buildFileNode(indexPath, ctx) : undefined;

  let name = meta?.data.title ?? index?.name;
  if (!name) {
    const folderName = basename(folderPath);
    name = pathToName(group.exec(folderName)?.[1] ?? folderName);
  }

  const node: PageTree.Folder = {
    type: 'folder',
    name,
    icon: options.resolveIcon?.(meta?.data.icon) ?? index?.icon,
    root: meta?.data.root,
    defaultOpen: meta?.data.defaultOpen,
    description: meta?.data.description,
    index,
    children,
    $id: folderPath,
    $ref:
      !options.noRef && meta
        ? {
            metaFile: metaPath,
          }
        : undefined,
  };

  return (
    options.attachFolder?.(
      node,
      {
        get children() {
          return files.flatMap((file) => storage.read(file) ?? []);
        },
      },
      meta,
    ) ?? node
  );
}

function buildFileNode(
  path: string,
  { options, getUrl, storage, localeStorage, locale }: PageTreeBuilderContext,
): PageTree.Item | undefined {
  const page = localeStorage?.read(path) ?? storage.read(path);
  if (page?.format !== 'page') return;

  const { title, description, icon } = page.data;
  const item: PageTree.Item = {
    $id: path,
    type: 'page',
    name: title ?? pathToName(basename(path, extname(path))),
    description,
    icon: options.resolveIcon?.(icon),
    url: getUrl(page.slugs, locale),
    $ref: !options.noRef
      ? {
          file: path,
        }
      : undefined,
  };

  return options.attachFile?.(item, page) ?? item;
}

function build(ctx: PageTreeBuilderContext): PageTree.Root {
  const folder = buildFolderNode('', true, ctx)!;

  return {
    $id: ctx.locale ?? 'root',
    name: folder.name,
    children: folder.children,
  };
}

export function createPageTreeBuilder(getUrl: UrlFn): PageTreeBuilder {
  function createFlattenPathResolver(storage: ContentStorage) {
    const map = new Map<string, string>();
    const files = storage.getFiles();
    for (const file of files) {
      const content = storage.read(file)!;
      const flattenPath = file.substring(0, file.length - extname(file).length);

      map.set(flattenPath + '.' + content.format, file);
    }

    return (name: string, format: string) => {
      return map.get(name + '.' + format);
    };
  }

  return {
    build(options) {
      const resolve = createFlattenPathResolver(options.storage);

      return build({
        options,
        builder: this,
        storage: options.storage,
        getUrl,
        resolveName(name, format) {
          return resolve(name, format) ?? name;
        },
      });
    },
    buildI18n({ i18n, ...options }) {
      const storage = options.storages[i18n.defaultLanguage];
      const resolve = createFlattenPathResolver(storage);

      const entries = i18n.languages.map<[string, PageTree.Root]>((lang) => {
        const tree = build({
          options,
          getUrl,
          builder: this,
          locale: lang,
          storage,
          localeStorage: options.storages[lang],
          resolveName(name, format) {
            return resolve(name, format) ?? name;
          },
        });

        return [lang, tree];
      });

      return Object.fromEntries(entries);
    },
  };
}

/**
 * Get item name from file name
 *
 * @param name - file name
 */
function pathToName(name: string): string {
  const result = [];
  for (const c of name) {
    if (result.length === 0) result.push(c.toLocaleUpperCase());
    else if (c === '-') result.push(' ');
    else result.push(c);
  }

  return result.join('');
}



================================================
FILE: packages/core/src/source/path.ts
================================================
export interface FileInfo {
  /**
   * File path without extension
   *
   * @deprecated obtain it with `join(dirname, name)`
   */
  flattenedPath: string;

  /**
   * path of file (unparsed)
   */
  path: string;

  /**
   * File name without extension
   */
  name: string;

  /**
   * file extension from the last `.`, like `.md`
   *
   * empty string if no file extension
   */
  ext: string;

  dirname: string;
}

export interface FolderInfo {
  /**
   * Original path of folder
   */
  path: string;

  /**
   * folder name
   */
  name: string;

  dirname: string;
}

export function basename(path: string, ext?: string): string {
  const idx = path.lastIndexOf('/');

  return path.substring(
    idx === -1 ? 0 : idx + 1,
    ext ? path.length - ext.length : path.length,
  );
}

export function extname(path: string): string {
  const dotIdx = path.lastIndexOf('.');

  if (dotIdx !== -1) {
    return path.substring(dotIdx);
  }

  return '';
}

export function dirname(path: string): string {
  return path.split('/').slice(0, -1).join('/');
}

export function parseFilePath(path: string): FileInfo {
  const ext = extname(path);
  const name = basename(path, ext);
  const dir = dirname(path);

  return {
    dirname: dir,
    name,
    ext,
    path,
    get flattenedPath() {
      return [dir, name].filter((p) => p.length > 0).join('/');
    },
  };
}

/**
 * @deprecated use `dirname` and `basename` directly.
 */
export function parseFolderPath(path: string): FolderInfo {
  return {
    dirname: dirname(path),
    name: basename(path),
    path,
  };
}



================================================
FILE: packages/core/src/source/types.ts
================================================
import type { LoaderOutput, Meta, Page } from './loader';

export interface MetaData {
  icon?: string | undefined;
  title?: string | undefined;
  root?: boolean | undefined;
  pages?: string[] | undefined;
  defaultOpen?: boolean | undefined;

  description?: string | undefined;
}

export interface PageData {
  icon?: string | undefined;
  title?: string;
  description?: string | undefined;
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any -- infer types
export type InferPageType<Utils extends LoaderOutput<any>> =
  Utils extends LoaderOutput<infer Config>
    ? Page<Config['source']['pageData']>
    : never;

// eslint-disable-next-line @typescript-eslint/no-explicit-any -- infer types
export type InferMetaType<Utils extends LoaderOutput<any>> =
  Utils extends LoaderOutput<infer Config>
    ? Meta<Config['source']['metaData']>
    : never;

/**
 * @internal
 */
export type UrlFn = (slugs: string[], locale?: string) => string;



================================================
FILE: packages/core/src/utils/merge-refs.ts
================================================
import type * as React from 'react';

export function mergeRefs<T>(...refs: React.Ref<T>[]): React.RefCallback<T> {
  return (value) => {
    refs.forEach((ref) => {
      if (typeof ref === 'function') {
        ref(value);
      } else if (ref !== null) {
        ref.current = value;
      }
    });
  };
}



================================================
FILE: packages/core/src/utils/page-tree.tsx
================================================
import type * as PageTree from '@/server/page-tree';

/**
 * Flatten tree to an array of page nodes
 */
export function flattenTree(tree: PageTree.Node[]): PageTree.Item[] {
  return tree.flatMap((node) => {
    if (node.type === 'separator') return [];
    if (node.type === 'folder') {
      const child = flattenTree(node.children);

      if (node.index) return [node.index, ...child];

      return child;
    }

    return [node];
  });
}

/**
 * Get neighbours of a page, useful for implementing "previous & next" buttons
 */
export function findNeighbour(
  tree: PageTree.Root,
  url: string,
  options?: {
    separateRoot?: boolean;
  },
): {
  previous?: PageTree.Item;
  next?: PageTree.Item;
} {
  const { separateRoot = true } = options ?? {};
  const roots = separateRoot ? getPageTreeRoots(tree) : [tree];

  for (const root of roots) {
    const list = flattenTree(root.children);

    for (let i = 0; i < list.length; i++) {
      if (list[i].url === url) {
        return {
          next: list[i + 1],
          previous: list[i - 1],
        };
      }
    }
  }

  return {};
}

export function getPageTreeRoots(
  pageTree: PageTree.Root | PageTree.Folder,
): (PageTree.Root | PageTree.Folder)[] {
  const result = pageTree.children.flatMap((child) => {
    if (child.type !== 'folder') return [];
    const roots = getPageTreeRoots(child);

    if (child.root) {
      roots.push(child);
    }

    return roots;
  });

  if (!('type' in pageTree)) result.push(pageTree);
  return result;
}

/**
 * Separate the folder nodes of a root into multiple roots
 */
export function separatePageTree(pageTree: PageTree.Root): PageTree.Root[] {
  return pageTree.children.flatMap((child) => {
    if (child.type !== 'folder') return [];

    return {
      name: child.name,
      url: child.index?.url,
      children: child.children,
    };
  });
}

/**
 * Get other page tree nodes that lives under the same parent
 */
export function getPageTreePeers(
  tree: PageTree.Root,
  url: string,
): PageTree.Item[] {
  const parent = findParentFromTree(tree, url);
  if (!parent) return [];

  return parent.children.filter(
    (item) => item.type === 'page' && item.url !== url,
  ) as PageTree.Item[];
}

function findParentFromTree(
  node: PageTree.Root | PageTree.Folder,
  url: string,
): PageTree.Root | PageTree.Folder | undefined {
  if ('index' in node && node.index?.url === url) {
    return node;
  }

  for (const child of node.children) {
    if (child.type === 'folder') {
      const parent = findParentFromTree(child, url);
      if (parent) return parent;
    }

    if (child.type === 'page' && child.url === url) {
      return node;
    }
  }
}



================================================
FILE: packages/core/src/utils/path.ts
================================================
/**
 * Split path into segments, trailing/leading slashes are removed
 */
export function splitPath(path: string): string[] {
  return path.split('/').filter((p) => p.length > 0);
}

/**
 * Resolve paths, slashes within the path will be ignored
 * @param paths - Paths to join
 * @example
 * ```
 * ['a','b'] // 'a/b'
 * ['/a'] // 'a'
 * ['a', '/b'] // 'a/b'
 * ['a', '../b/c'] // 'b/c'
 * ```
 */
export function joinPath(...paths: string[]): string {
  const out = [];
  const parsed = paths.flatMap(splitPath);

  for (const seg of parsed) {
    switch (seg) {
      case '..':
        out.pop();
        break;
      case '.':
        break;
      default:
        out.push(seg);
    }
  }

  return out.join('/');
}

export function slash(path: string): string {
  const isExtendedLengthPath = path.startsWith('\\\\?\\');

  if (isExtendedLengthPath) {
    return path;
  }

  return path.replaceAll('\\', '/');
}



================================================
FILE: packages/core/src/utils/remove-undefined.ts
================================================
export function removeUndefined<T extends object>(value: T, deep = false): T {
  const obj = value as Record<string, unknown>;

  for (const key of Object.keys(obj)) {
    if (obj[key] === undefined) delete obj[key];

    if (deep && typeof obj[key] === 'object' && obj[key] !== null) {
      removeUndefined(obj[key], deep);
    } else if (deep && Array.isArray(obj[key])) {
      obj[key].forEach((v) => removeUndefined(v, deep));
    }
  }

  return value;
}



================================================
FILE: packages/core/src/utils/use-anchor-observer.ts
================================================
import { useEffect, useState } from 'react';

/**
 * Find the active heading of page
 *
 * It selects the top heading by default, and the last item when reached the bottom of page.
 *
 * @param watch - An array of element ids to watch
 * @param single - only one active item at most
 * @returns Active anchor
 */
export function useAnchorObserver(watch: string[], single: boolean): string[] {
  const [activeAnchor, setActiveAnchor] = useState<string[]>([]);

  useEffect(() => {
    let visible: string[] = [];
    const observer = new IntersectionObserver(
      (entries) => {
        for (const entry of entries) {
          if (entry.isIntersecting && !visible.includes(entry.target.id)) {
            visible = [...visible, entry.target.id];
          } else if (
            !entry.isIntersecting &&
            visible.includes(entry.target.id)
          ) {
            visible = visible.filter((v) => v !== entry.target.id);
          }
        }

        if (visible.length > 0) setActiveAnchor(visible);
      },
      {
        rootMargin: single ? '-80px 0% -70% 0%' : `-20px 0% -40% 0%`,
        threshold: 1,
      },
    );

    function onScroll(): void {
      const element = document.scrollingElement;
      if (!element) return;
      const top = element.scrollTop;

      if (top <= 0 && single) setActiveAnchor(watch.slice(0, 1));
      else if (top + element.clientHeight >= element.scrollHeight - 6) {
        setActiveAnchor((active) => {
          return active.length > 0 && !single
            ? watch.slice(watch.indexOf(active[0]))
            : watch.slice(-1);
        });
      }
    }

    for (const heading of watch) {
      const element = document.getElementById(heading);

      if (element) observer.observe(element);
    }

    onScroll();
    window.addEventListener('scroll', onScroll);
    return () => {
      window.removeEventListener('scroll', onScroll);
      observer.disconnect();
    };
  }, [single, watch]);

  return single ? activeAnchor.slice(0, 1) : activeAnchor;
}



================================================
FILE: packages/core/src/utils/use-debounce.ts
================================================
import { useRef, useState } from 'react';

export function useDebounce<T>(value: T, delayMs = 1000): T {
  const [debouncedValue, setDebouncedValue] = useState(value);
  const timer = useRef<{ value: T; handler: number } | undefined>(undefined);

  if (delayMs === 0) return value;

  if (value !== debouncedValue && timer.current?.value !== value) {
    if (timer.current) clearTimeout(timer.current.handler);

    const handler = window.setTimeout(() => {
      setDebouncedValue(value);
    }, delayMs);
    timer.current = { value, handler };
  }

  return debouncedValue;
}



================================================
FILE: packages/core/src/utils/use-effect-event.ts
================================================
'use client';
import { useCallback, useRef } from 'react';

/**
 * Don't use this, could be deleted anytime.
 *
 * @internal
 */
export function useEffectEvent<F extends (...params: never[]) => unknown>(
  callback: F,
): F {
  const ref = useRef(callback);
  ref.current = callback;

  return useCallback(((...params) => ref.current(...params)) as F, []);
}



================================================
FILE: packages/core/src/utils/use-media-query.ts
================================================
import { useEffect, useState } from 'react';

export function useMediaQuery(query: string, disabled = false): boolean | null {
  const [isMatch, setMatch] = useState<boolean | null>(null);

  useEffect(() => {
    if (disabled) return;
    const mediaQueryList = window.matchMedia(query);

    const handleChange = () => {
      setMatch(mediaQueryList.matches);
    };
    handleChange();
    mediaQueryList.addEventListener('change', handleChange);
    return () => {
      mediaQueryList.removeEventListener('change', handleChange);
    };
  }, [disabled, query]);

  return isMatch;
}



================================================
FILE: packages/core/src/utils/use-on-change.ts
================================================
import { useState } from 'react';

function isDifferent(a: unknown, b: unknown): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    return b.length !== a.length || a.some((v, i) => isDifferent(v, b[i]));
  }

  return a !== b;
}

/**
 * @param value - state to watch
 * @param onChange - when the state changed
 * @param isUpdated - a function that determines if the state is updated
 */
export function useOnChange<T>(
  value: T,
  onChange: (current: T, previous: T) => void,
  isUpdated: (prev: T, current: T) => boolean = isDifferent,
): void {
  const [prev, setPrev] = useState<T>(value);

  if (isUpdated(prev, value)) {
    onChange(value, prev);
    setPrev(value);
  }
}



================================================
FILE: packages/core/test/index.test.ts
================================================
import { parseFilePath, parseFolderPath } from '@/source/path';
import { describe, expect, test } from 'vitest';
import type { Root } from '@/server/page-tree';
import { findNeighbour } from '@/utils/page-tree';
import { PageTree } from '../dist/server';
import { getBreadcrumbItems } from '@/breadcrumb';
import { joinPath, splitPath } from '@/utils/path';

test('Find Neighbours', () => {
  const tree: Root = {
    name: 'Docs',
    children: [
      {
        type: 'folder',
        name: 'Custom',
        children: [{ type: 'page', name: 'hello', url: '/hello' }],
      },
      { type: 'page', name: 'world', url: '/world' },
      { type: 'page', name: 'user', url: '/user' },
    ],
  };

  expect(findNeighbour(tree, '/hello')).toStrictEqual({
    previous: undefined,
    next: { type: 'page', name: 'world', url: '/world' },
  });

  expect(findNeighbour(tree, '/world')).toStrictEqual({
    previous: { type: 'page', name: 'hello', url: '/hello' },
    next: { type: 'page', name: 'user', url: '/user' },
  });

  expect(findNeighbour(tree, '/user')).toStrictEqual({
    previous: { type: 'page', name: 'world', url: '/world' },
    next: undefined,
  });
});

describe('Path utilities', () => {
  test('parse file path', () => {
    expect(parseFilePath('test.mdx')).toMatchInlineSnapshot(`
      {
        "dirname": "",
        "ext": ".mdx",
        "flattenedPath": "test",
        "name": "test",
        "path": "test.mdx",
      }
    `);

    expect(parseFilePath('nested/test.mdx')).toMatchInlineSnapshot(`
      {
        "dirname": "nested",
        "ext": ".mdx",
        "flattenedPath": "nested/test",
        "name": "test",
        "path": "nested/test.mdx",
      }
    `);

    expect(parseFilePath('nested/test.cn.mdx')).toMatchInlineSnapshot(`
      {
        "dirname": "nested",
        "ext": ".mdx",
        "flattenedPath": "nested/test.cn",
        "name": "test.cn",
        "path": "nested/test.cn.mdx",
      }
    `);

    expect(parseFilePath('nested/test.01.mdx')).toMatchInlineSnapshot(`
      {
        "dirname": "nested",
        "ext": ".mdx",
        "flattenedPath": "nested/test.01",
        "name": "test.01",
        "path": "nested/test.01.mdx",
      }
    `);
  });

  test('parse folder path', () => {
    expect(parseFolderPath('')).toMatchInlineSnapshot(`
      {
        "dirname": "",
        "name": "",
        "path": "",
      }
    `);

    expect(parseFolderPath('nested/nested')).toMatchInlineSnapshot(`
      {
        "dirname": "nested",
        "name": "nested",
        "path": "nested/nested",
      }
    `);
  });

  test('resolve paths', () => {
    expect(joinPath('a', 'b')).toBe('a/b');
    expect(joinPath('/a', '')).toBe('a');
    expect(joinPath('a/', '/b')).toBe('a/b');

    expect(joinPath('a/', '../b/c')).toBe('b/c');
    expect(joinPath('a/', './b/c')).toBe('a/b/c');
  });

  test('split paths', () => {
    expect(splitPath('a/b/c')).toEqual(['a', 'b', 'c']);
    expect(splitPath('a//c')).toEqual(['a', 'c']);
    expect(splitPath('/a/c')).toEqual(['a', 'c']);
  });
});

test('Breadcrumbs', () => {
  const tree: PageTree.Root = {
    name: 'Hello World',
    children: [
      {
        type: 'page',
        name: 'Hello World',
        url: '/docs',
      },
      {
        type: 'page',
        name: 'Hello World',
        url: '/docs/test',
      },
      {
        type: 'page',
        name: 'Fumadocs',
        url: '/docs/test2',
      },
      {
        type: 'folder',
        name: 'Hello World',
        index: {
          type: 'page',
          name: 'World',
          url: '/docs/folder',
        },
        children: [],
      },
    ],
  };

  expect(getBreadcrumbItems('/docs/folder', tree)).toStrictEqual([
    { name: 'World', url: '/docs/folder' },
  ]);
});



================================================
FILE: packages/core/test/loader.test.ts
================================================
import { expect, test } from 'vitest';
import { createGetUrl, getSlugs, loader } from '@/source/loader';
import { parseFilePath } from '@/source';
import type { ReactElement } from 'react';
import { removeUndefined } from '@/utils/remove-undefined';

test('get slugs', () => {
  expect(getSlugs(parseFilePath('index.mdx'))).toStrictEqual([]);
  expect(getSlugs(parseFilePath('page.mdx'))).toStrictEqual(['page']);

  expect(getSlugs(parseFilePath('nested/index.mdx'))).toStrictEqual(['nested']);
  expect(getSlugs(parseFilePath('nested/page.mdx'))).toStrictEqual([
    'nested',
    'page',
  ]);
});

test('get slugs: folder groups', () => {
  expect(getSlugs(parseFilePath('(nested)/index.mdx'))).toStrictEqual([]);
  expect(getSlugs(parseFilePath('folder/(nested)/page.mdx'))).toStrictEqual([
    'folder',
    'page',
  ]);

  expect(() => getSlugs(parseFilePath('nested/(page).mdx'))).toThrowError();
});

test('Get URL: Empty', () => {
  const getUrl = createGetUrl('');
  expect(getUrl(['docs', 'hello'])).toBe('/docs/hello');
  expect(getUrl([''])).toBe('/');
  expect(getUrl([])).toBe('/');
});

test('Get URL: Base', () => {
  const getUrl = createGetUrl('/docs');
  expect(getUrl(['docs', 'hello'])).toBe('/docs/docs/hello');
  expect(getUrl([''])).toBe('/docs');
});

test('Loader: Simple', async () => {
  const result = loader({
    baseUrl: '/',
    pageTree: {
      noRef: true,
    },
    source: (await import('./fixtures/page-trees/basic')).source,
  });

  await expect(removeUndefined(result.pageTree, true)).toMatchFileSnapshot(
    './fixtures/page-trees/basic.tree.json',
  );

  expect(result.getPages().length).toBe(1);
  expect(result.getPage(['test'])).toBeDefined();
});

test('Nested Directories', async () => {
  const result = loader({
    baseUrl: '/',
    icon: (v) => v as unknown as ReactElement,
    pageTree: {
      noRef: true,
    },
    source: (await import('./fixtures/page-trees/nested')).source,
  });

  await expect(removeUndefined(result.pageTree, true)).toMatchFileSnapshot(
    './fixtures/page-trees/nested.tree.json',
  );

  expect(result.getPages().map((page) => page.slugs.join('/')))
    .toMatchInlineSnapshot(`
      [
        "test",
        "hidden",
        "hello/index",
        "nested/test",
        "hello",
      ]
    `);
  // page in folder
  expect(result.getPage(['nested', 'test'])).toBeDefined();

  // page in folder group
  expect(result.getPage(['hello'])).toBeDefined();
});

test('Internationalized Routing', async () => {
  const result = loader({
    baseUrl: '/',
    i18n: {
      languages: ['cn', 'en'],
      defaultLanguage: 'en',
    },
    source: (await import('./fixtures/page-trees/i18n')).source,
  });

  await expect(removeUndefined(result.pageTree, true)).toMatchFileSnapshot(
    './fixtures/page-trees/i18n.tree.json',
  );
  await expect(
    removeUndefined(result.getLanguages(), true),
  ).toMatchFileSnapshot('./fixtures/page-trees/i18n.entries.json');
});

test('Internationalized Routing: Hide Prefix', async () => {
  const result = loader({
    baseUrl: '/',
    i18n: {
      languages: ['cn', 'en'],
      defaultLanguage: 'en',
      hideLocale: 'default-locale',
    },
    pageTree: {
      noRef: true,
    },
    source: (await import('./fixtures/page-trees/i18n')).source,
  });

  await expect(removeUndefined(result.pageTree, true)).toMatchFileSnapshot(
    './fixtures/page-trees/i18n-no-prefix.tree.json',
  );
  expect(result.getPages().length).toBe(2);
  expect(result.getPage(['test'])?.url).toBe('/test');
  expect(result.getPage(['test'], 'cn')?.url).toBe('/cn/test');
});

test('Internationalized Routing: dir', async () => {
  const result = loader({
    baseUrl: '/',
    i18n: {
      parser: 'dir',
      languages: ['cn', 'en'],
      defaultLanguage: 'en',
    },
    source: (await import('./fixtures/page-trees/i18n-dir')).source,
  });

  await expect(removeUndefined(result.pageTree, true)).toMatchFileSnapshot(
    './fixtures/page-trees/i18n-dir.tree.json',
  );
});

test('Loader: Without meta.json', () => {
  const result = loader({
    baseUrl: '/',
    pageTree: {
      noRef: true,
    },
    source: {
      files: [
        {
          type: 'page',
          path: 'test.mdx',
          data: {
            title: 'Hello',
          },
        },
        {
          type: 'page',
          path: 'hello/index.mdx',
          data: {
            title: 'Hello',
          },
        },
      ],
    },
  });

  expect(removeUndefined(result.pageTree, true), 'Page Tree')
    .toMatchInlineSnapshot(`
      {
        "$id": "root",
        "children": [
          {
            "$id": "test.mdx",
            "name": "Hello",
            "type": "page",
            "url": "/test",
          },
          {
            "$id": "hello",
            "children": [],
            "index": {
              "$id": "hello/index.mdx",
              "name": "Hello",
              "type": "page",
              "url": "/hello",
            },
            "name": "Hello",
            "type": "folder",
          },
        ],
        "name": "",
      }
    `);
});

test('Loader: Rest operator', () => {
  const result = loader({
    baseUrl: '/',
    pageTree: {
      noRef: true,
    },
    source: {
      files: [
        {
          type: 'meta',
          path: 'meta.json',
          data: {
            pages: ['z...a'],
          },
        },
        {
          type: 'page',
          path: '1-2.mdx',
          data: {
            title: '1.2',
          },
        },
        {
          type: 'page',
          path: '2-2.mdx',
          data: {
            title: '2.2',
          },
        },
      ],
    },
  });

  expect(removeUndefined(result.pageTree, true), 'Page Tree')
    .toMatchInlineSnapshot(`
      {
        "$id": "root",
        "children": [
          {
            "$id": "2-2.mdx",
            "name": "2.2",
            "type": "page",
            "url": "/2-2",
          },
          {
            "$id": "1-2.mdx",
            "name": "1.2",
            "type": "page",
            "url": "/1-2",
          },
        ],
        "name": "",
      }
    `);
});



================================================
FILE: packages/core/test/mdx-plugins.test.ts
================================================
import { expect, test } from 'vitest';
import { readFileSync } from 'node:fs';
import path from 'node:path';
import { remark } from 'remark';
import {
  rehypeToc,
  remarkAdmonition,
  remarkHeading,
  remarkImage,
  remarkStructure,
} from '@/mdx-plugins';
import { fileURLToPath } from 'node:url';
import remarkMdx from 'remark-mdx';
import remarkGfm from 'remark-gfm';
import { createProcessor } from '@mdx-js/mdx';
import * as fs from 'node:fs/promises';
import { remarkSteps } from '@/mdx-plugins/remark-steps';

const cwd = path.dirname(fileURLToPath(import.meta.url));

test('Remark Heading', async () => {
  const file = path.resolve(cwd, './fixtures/remark-heading.md');
  const content = readFileSync(file);

  const result = await remark().use(remarkHeading).process(content);

  await expect(result.data.toc).toMatchFileSnapshot(
    path.resolve(cwd, './fixtures/remark-heading.output.json'),
  );
});

test('Remark Structure', async () => {
  const content = readFileSync(
    path.resolve(cwd, './fixtures/remark-structure.md'),
  );
  const result = await remark()
    .use(remarkGfm)
    .use(remarkStructure)
    .process(content);

  await expect(result.data.structuredData).toMatchFileSnapshot(
    path.resolve(cwd, './fixtures/remark-structure.output.json'),
  );
});

test('Remark Admonition', async () => {
  const content = readFileSync(
    path.resolve(cwd, './fixtures/remark-admonition.md'),
  );
  const result = await remark()
    .use(remarkAdmonition)
    .use(remarkMdx)
    .process(content);

  await expect(result.value).toMatchFileSnapshot(
    path.resolve(cwd, './fixtures/remark-admonition.output.mdx'),
  );
});

test('Remark Image', async () => {
  const content = readFileSync(path.resolve(cwd, './fixtures/remark-image.md'));
  const processor = remark()
    .use(remarkImage, { publicDir: path.resolve(cwd, './fixtures') })
    .use(remarkMdx);

  const result = await processor.run(processor.parse(content));

  await expect(result).toMatchFileSnapshot(
    path.resolve(cwd, './fixtures/remark-image.output.json'),
  );
});

test('Remark Steps', async () => {
  const content = await fs.readFile(
    path.resolve(cwd, './fixtures/remark-steps.md'),
  );
  const processor = remark().use(remarkSteps).use(remarkMdx);
  const result = await processor.process(content);

  await expect(result.value).toMatchFileSnapshot(
    path.resolve(cwd, './fixtures/remark-steps.output.md'),
  );
});

test('Remark Image: With Path', async () => {
  const file = path.resolve(cwd, './fixtures/remark-image.md');
  const content = readFileSync(file);
  const processor = remark()
    .use(remarkImage, { publicDir: path.resolve(cwd, './fixtures') })
    .use(remarkMdx);

  const result = await processor.run(processor.parse(content), {
    path: file,
  });

  await expect(result).toMatchFileSnapshot(
    path.resolve(cwd, './fixtures/remark-image.output.json'),
  );
});

test('Remark Image: Without Import', async () => {
  const content = readFileSync(path.resolve(cwd, './fixtures/remark-image.md'));
  const result = await remark()
    .use(remarkImage, {
      publicDir: path.resolve(cwd, './fixtures'),
      useImport: false,
    })
    .use(remarkMdx)
    .process(content);

  await expect(result.value).toMatchFileSnapshot(
    path.resolve(cwd, './fixtures/remark-image-without-import.output.mdx'),
  );
});

test('Remark Image: `publicDir` with URL', async () => {
  const content = readFileSync(
    path.resolve(cwd, './fixtures/remark-image-public-dir.md'),
  );
  const result = await remark()
    .use(remarkImage, {
      publicDir: 'https://picsum.photos/id',
      useImport: false,
    })
    .use(remarkMdx)
    .process(content);

  await expect(result.value).toMatchFileSnapshot(
    path.resolve(cwd, './fixtures/remark-image-public-dir.output.mdx'),
  );
});

test('Rehype Toc', async () => {
  const content = readFileSync(path.resolve(cwd, './fixtures/rehype-toc.md'));

  const processor = createProcessor({
    remarkPlugins: [remarkHeading],
    rehypePlugins: [rehypeToc],
  });
  const result = await processor.process({ value: content });

  await expect(result.value).toMatchFileSnapshot(
    path.resolve(cwd, './fixtures/rehype-toc.output.js'),
  );
});



================================================
FILE: packages/core/test/search.test.ts
================================================
import { createI18nSearchAPI, createSearchAPI } from '@/search/server';
import { expect, test } from 'vitest';
import { structure } from '@/mdx-plugins';

test('Search API', async () => {
  const api = createSearchAPI('simple', {
    indexes: [
      {
        title: 'Hello World',
        content: 'Hello World',
        url: '/hello-world',
      },
      {
        title: 'Nothing',
        content: 'Nothing',
        url: '/nothing',
      },
    ],
  });

  expect(await api.search('Hello')).toHaveLength(1);
  expect(await api.search('pterodactyl')).toHaveLength(0);
});

test('Search API Advanced', async () => {
  const api = createSearchAPI('advanced', {
    indexes: [
      {
        id: '1',
        title: 'Index',
        structuredData: structure(
          `## Hello World

something`,
        ),
        url: '/',
        tag: 'my-tag',
      },
      {
        id: '2',
        title: 'Page',
        structuredData: structure(
          `## My Page

something`,
        ),
        url: '/page',
        tag: 'test',
      },
    ],
  });

  expect(await api.search('Page')).toHaveLength(2);
  expect(await api.search('something')).toHaveLength(4);
  expect(await api.search('', { tag: 'my-tag' })).toHaveLength(3);

  expect(await api.search('Hello')).toMatchInlineSnapshot(`
    [
      {
        "content": "Index",
        "id": "1",
        "type": "page",
        "url": "/",
      },
      {
        "content": "Hello World",
        "id": "1-0",
        "type": "heading",
        "url": "/#hello-world",
      },
    ]
  `);
});

test('Search API I18n', async () => {
  const api = createI18nSearchAPI('simple', {
    i18n: {
      languages: ['italian', 'en'],
      defaultLanguage: 'en',
    },
    indexes: [
      {
        title: 'ciao mondo amico italian',
        content: 'ciao mondo amico',
        url: '/hello-world',
        locale: 'italian',
      },
      {
        title: 'Hello World English',
        content: 'Hello World',
        url: '/hello-world',
        locale: 'en',
      },
    ],
  });

  expect(await api.search('English', { locale: 'en' })).toHaveLength(1);
  expect(await api.search('amico', { locale: 'italian' })).toHaveLength(1);
  expect(await api.search('italian', { locale: 'en' })).toHaveLength(0);
  const exported = await api.export();
  expect(exported.type).toBe('i18n');

  if (exported.type === 'i18n')
    expect(Object.keys(exported.data)).toMatchInlineSnapshot(`
    [
      "italian",
      "en",
    ]
  `);
});



================================================
FILE: packages/core/test/fixtures/rehype-toc.md
================================================
# Heading 1

Some text here

## Heading 2

Some text here

### Heading 3

Some text here

### Custom heading id [#hello-world]

Some text here

### math $$C_L$$

Some text here

### Custom heading id hello-world]

Some text here

### `code` here



================================================
FILE: packages/core/test/fixtures/rehype-toc.output.js
================================================
import {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from "react/jsx-runtime";
export const toc = [{
  depth: 1,
  url: "#heading-1",
  title: _jsx(_Fragment, {
    children: "Heading 1"
  })
}, {
  depth: 2,
  url: "#heading-2",
  title: _jsx(_Fragment, {
    children: "Heading 2"
  })
}, {
  depth: 3,
  url: "#heading-3",
  title: _jsx(_Fragment, {
    children: "Heading 3"
  })
}, {
  depth: 3,
  url: "#hello-world",
  title: _jsx(_Fragment, {
    children: "Custom heading id"
  })
}, {
  depth: 3,
  url: "#math-c_l",
  title: _jsx(_Fragment, {
    children: "math $$C_L$$"
  })
}, {
  depth: 3,
  url: "#custom-heading-id-hello-world",
  title: _jsx(_Fragment, {
    children: "Custom heading id hello-world]"
  })
}, {
  depth: 3,
  url: "#code-here",
  title: _jsxs(_Fragment, {
    children: [_jsx("code", {
      children: "code"
    }), " here"]
  })
}];
function _createMdxContent(props) {
  const _components = {
    code: "code",
    h1: "h1",
    h2: "h2",
    h3: "h3",
    p: "p",
    ...props.components
  };
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h1, {
      id: "heading-1",
      children: "Heading 1"
    }), "\n", _jsx(_components.p, {
      children: "Some text here"
    }), "\n", _jsx(_components.h2, {
      id: "heading-2",
      children: "Heading 2"
    }), "\n", _jsx(_components.p, {
      children: "Some text here"
    }), "\n", _jsx(_components.h3, {
      id: "heading-3",
      children: "Heading 3"
    }), "\n", _jsx(_components.p, {
      children: "Some text here"
    }), "\n", _jsx(_components.h3, {
      id: "hello-world",
      children: "Custom heading id"
    }), "\n", _jsx(_components.p, {
      children: "Some text here"
    }), "\n", _jsx(_components.h3, {
      id: "math-c_l",
      children: "math $$C_L$$"
    }), "\n", _jsx(_components.p, {
      children: "Some text here"
    }), "\n", _jsx(_components.h3, {
      id: "custom-heading-id-hello-world",
      children: "Custom heading id hello-world]"
    }), "\n", _jsx(_components.p, {
      children: "Some text here"
    }), "\n", _jsxs(_components.h3, {
      id: "code-here",
      children: [_jsx(_components.code, {
        children: "code"
      }), " here"]
    })]
  });
}
export default function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = props.components || ({});
  return MDXLayout ? _jsx(MDXLayout, {
    ...props,
    children: _jsx(_createMdxContent, {
      ...props
    })
  }) : _createMdxContent(props);
}



================================================
FILE: packages/core/test/fixtures/remark-admonition.md
================================================
:::tip

Hello World

:::

:::warn[This is Title]

Warning **this**

:::



================================================
FILE: packages/core/test/fixtures/remark-admonition.output.mdx
================================================
<Callout type="info">
  Hello World
</Callout>

<Callout type="warn" title="This is Title">
  Warning **this**
</Callout>



================================================
FILE: packages/core/test/fixtures/remark-heading.md
================================================
# Heading 1

Some text here

## Heading 2

Some text here

### Heading 3

Some text here

### Custom heading id [#hello-world]

Some text here

### Custom heading id [#hello-2]

Some text here

### Custom heading id hello-world]

Some text here

### `code` here

hi



================================================
FILE: packages/core/test/fixtures/remark-heading.output.json
================================================
[
  {
    "depth": 1,
    "title": "Heading 1",
    "url": "#heading-1",
  },
  {
    "depth": 2,
    "title": "Heading 2",
    "url": "#heading-2",
  },
  {
    "depth": 3,
    "title": "Heading 3",
    "url": "#heading-3",
  },
  {
    "depth": 3,
    "title": "Custom heading id",
    "url": "#hello-world",
  },
  {
    "depth": 3,
    "title": "Custom heading id",
    "url": "#hello-2",
  },
  {
    "depth": 3,
    "title": "Custom heading id hello-world]",
    "url": "#custom-heading-id-hello-world",
  },
  {
    "depth": 3,
    "title": "code here",
    "url": "#code-here",
  },
]


================================================
FILE: packages/core/test/fixtures/remark-image-public-dir.md
================================================
![External](/237/200/300)



================================================
FILE: packages/core/test/fixtures/remark-image-public-dir.output.mdx
================================================
<img alt="External" src="/237/200/300" width="200" height="300" />



================================================
FILE: packages/core/test/fixtures/remark-image-without-import.output.mdx
================================================
<img alt="Test" src="./test.png" width="1299" height="731" />

<img alt="External" src="https://fumadocs.dev/banner.png" width="1200" height="630" />



================================================
FILE: packages/core/test/fixtures/remark-image.md
================================================
![Test](./test.png)

![External](https://fumadocs.dev/banner.png)



================================================
FILE: packages/core/test/fixtures/remark-image.output.json
================================================
{
  "children": [
    {
      "data": {
        "estree": {
          "body": [
            {
              "source": {
                "type": "Literal",
                "value": "./test.png",
              },
              "specifiers": [
                {
                  "local": {
                    "name": "__img0",
                    "type": "Identifier",
                  },
                  "type": "ImportDefaultSpecifier",
                },
              ],
              "type": "ImportDeclaration",
            },
          ],
        },
      },
      "type": "mdxjsEsm",
    },
    {
      "children": [
        {
          "alt": "Test",
          "attributes": [
            {
              "name": "alt",
              "type": "mdxJsxAttribute",
              "value": "Test",
            },
            {
              "name": "placeholder",
              "type": "mdxJsxAttribute",
              "value": "blur",
            },
            {
              "name": "src",
              "type": "mdxJsxAttribute",
              "value": {
                "data": {
                  "estree": {
                    "body": [
                      {
                        "expression": {
                          "name": "__img0",
                          "type": "Identifier",
                        },
                        "type": "ExpressionStatement",
                      },
                    ],
                  },
                },
                "type": "mdxJsxAttributeValueExpression",
                "value": "__img0",
              },
            },
          ],
          "name": "img",
          "position": {
            "end": {
              "column": 20,
              "line": 1,
              "offset": 19,
            },
            "start": {
              "column": 1,
              "line": 1,
              "offset": 0,
            },
          },
          "title": null,
          "type": "mdxJsxFlowElement",
          "url": "./test.png",
        },
      ],
      "position": {
        "end": {
          "column": 20,
          "line": 1,
          "offset": 19,
        },
        "start": {
          "column": 1,
          "line": 1,
          "offset": 0,
        },
      },
      "type": "paragraph",
    },
    {
      "children": [
        {
          "alt": "External",
          "attributes": [
            {
              "name": "alt",
              "type": "mdxJsxAttribute",
              "value": "External",
            },
            {
              "name": "src",
              "type": "mdxJsxAttribute",
              "value": "https://fumadocs.dev/banner.png",
            },
            {
              "name": "width",
              "type": "mdxJsxAttribute",
              "value": "1200",
            },
            {
              "name": "height",
              "type": "mdxJsxAttribute",
              "value": "630",
            },
          ],
          "name": "img",
          "position": {
            "end": {
              "column": 45,
              "line": 3,
              "offset": 65,
            },
            "start": {
              "column": 1,
              "line": 3,
              "offset": 21,
            },
          },
          "title": null,
          "type": "mdxJsxFlowElement",
          "url": "https://fumadocs.dev/banner.png",
        },
      ],
      "position": {
        "end": {
          "column": 45,
          "line": 3,
          "offset": 65,
        },
        "start": {
          "column": 1,
          "line": 3,
          "offset": 21,
        },
      },
      "type": "paragraph",
    },
  ],
  "position": {
    "end": {
      "column": 1,
      "line": 4,
      "offset": 66,
    },
    "start": {
      "column": 1,
      "line": 1,
      "offset": 0,
    },
  },
  "type": "root",
}


================================================
FILE: packages/core/test/fixtures/remark-steps.md
================================================
# Hello

## 1. First

content

### Little Tip

content

## 2. Second

content

## 1. Third

content

## Ended

content

# 1. Big: First

content

# 2. Big: Second

content



================================================
FILE: packages/core/test/fixtures/remark-steps.output.md
================================================
# Hello

<div className="fd-steps">
  <div className="fd-step">
    ## First

    content

    ### Little Tip

    content
  </div>

  <div className="fd-step">
    ## Second

    content
  </div>

  <div className="fd-step">
    ## Third

    content
  </div>
</div>

## Ended

content

<div className="fd-steps">
  <div className="fd-step">
    # Big: First

    content
  </div>

  <div className="fd-step">
    # Big: Second

    content
  </div>
</div>



================================================
FILE: packages/core/test/fixtures/remark-structure.md
================================================
# Heading 1

Some text here

## Heading 2

Some text here

### Heading 3

| Name        | Description |
| ----------- | ----------- |
| Hello World | Goodbye     |

```ts
console.log('Not indexed');
```



================================================
FILE: packages/core/test/fixtures/remark-structure.output.json
================================================
{
  "contents": [
    {
      "content": "Some text here",
      "heading": "heading-1",
    },
    {
      "content": "Some text here",
      "heading": "heading-2",
    },
    {
      "content": "Name",
      "heading": "heading-3",
    },
    {
      "content": "Description",
      "heading": "heading-3",
    },
    {
      "content": "Hello World",
      "heading": "heading-3",
    },
    {
      "content": "Goodbye",
      "heading": "heading-3",
    },
  ],
  "headings": [
    {
      "content": "Heading 1",
      "id": "heading-1",
    },
    {
      "content": "Heading 2",
      "id": "heading-2",
    },
    {
      "content": "Heading 3",
      "id": "heading-3",
    },
  ],
}


================================================
FILE: packages/core/test/fixtures/page-trees/basic.tree.json
================================================
{
  "$id": "root",
  "children": [
    {
      "$id": "test.mdx",
      "name": "Hello",
      "type": "page",
      "url": "/test",
    },
  ],
  "name": "",
}


================================================
FILE: packages/core/test/fixtures/page-trees/basic.ts
================================================
import { Source, SourceConfig } from '@/source';

export const source: Source<SourceConfig> = {
  files: [
    {
      type: 'page',
      path: 'test.mdx',
      data: {
        title: 'Hello',
      },
    },
    {
      type: 'meta',
      path: 'meta.json',
      data: {
        pages: ['test'],
      },
    },
  ],
};



================================================
FILE: packages/core/test/fixtures/page-trees/i18n-dir.tree.json
================================================
{
  "cn": {
    "$id": "cn",
    "children": [
      {
        "$id": "test.mdx",
        "$ref": {
          "file": "test.mdx",
        },
        "name": "Hello Chinese",
        "type": "page",
        "url": "/cn/test",
      },
      {
        "$id": "nested",
        "children": [
          {
            "$id": "nested/test.mdx",
            "$ref": {
              "file": "nested/test.mdx",
            },
            "name": "Nested Page Chinese",
            "type": "page",
            "url": "/cn/nested/test",
          },
        ],
        "name": "Nested",
        "type": "folder",
      },
    ],
    "name": "Docs Chinese",
  },
  "en": {
    "$id": "en",
    "children": [
      {
        "$id": "test.mdx",
        "$ref": {
          "file": "test.mdx",
        },
        "name": "Hello",
        "type": "page",
        "url": "/en/test",
      },
      {
        "$id": "nested",
        "children": [
          {
            "$id": "nested/test.mdx",
            "$ref": {
              "file": "nested/test.mdx",
            },
            "name": "Nested Page",
            "type": "page",
            "url": "/en/nested/test",
          },
        ],
        "name": "Nested",
        "type": "folder",
      },
    ],
    "name": "Docs English",
  },
}


================================================
FILE: packages/core/test/fixtures/page-trees/i18n-dir.ts
================================================
import type { Source, SourceConfig } from '@/source';

export const source: Source<SourceConfig> = {
  files: [
    {
      type: 'page',
      path: 'en/test.mdx',
      data: {
        title: 'Hello',
      },
    },
    {
      type: 'page',
      path: 'cn/test.mdx',
      data: {
        title: 'Hello Chinese',
      },
    },
    {
      type: 'meta',
      path: 'en/meta.json',
      data: {
        title: 'Docs English',
        pages: ['test', 'nested'],
      },
    },
    {
      type: 'meta',
      path: 'cn/meta.json',
      data: {
        title: 'Docs Chinese',
        pages: ['test', 'nested'],
      },
    },
    {
      type: 'page',
      path: 'en/nested/test.mdx',
      data: {
        title: 'Nested Page',
      },
    },
    {
      type: 'page',
      path: 'cn/nested/test.mdx',
      data: {
        title: 'Nested Page Chinese',
      },
    },
    {
      type: 'meta',
      path: 'cn/nested/meta.json',
      data: {
        title: 'Nested Chinese',
      },
    },
  ],
};



================================================
FILE: packages/core/test/fixtures/page-trees/i18n-no-prefix.tree.json
================================================
{
  "cn": {
    "$id": "cn",
    "children": [
      {
        "$id": "test.mdx",
        "name": "Hello Chinese",
        "type": "page",
        "url": "/cn/test",
      },
      {
        "$id": "nested",
        "children": [
          {
            "$id": "nested/test.mdx",
            "name": "Nested Page Chinese",
            "type": "page",
            "url": "/cn/nested/test",
          },
        ],
        "name": "Nested",
        "type": "folder",
      },
    ],
    "name": "Docs Chinese",
  },
  "en": {
    "$id": "en",
    "children": [
      {
        "$id": "test.mdx",
        "name": "Hello",
        "type": "page",
        "url": "/test",
      },
      {
        "$id": "nested",
        "children": [
          {
            "$id": "nested/test.mdx",
            "name": "Nested Page",
            "type": "page",
            "url": "/nested/test",
          },
        ],
        "name": "Nested",
        "type": "folder",
      },
    ],
    "name": "Docs English",
  },
}


================================================
FILE: packages/core/test/fixtures/page-trees/i18n.entries.json
================================================
[
  {
    "language": "cn",
    "pages": [
      {
        "absolutePath": "",
        "data": {
          "title": "Hello Chinese",
        },
        "file": {
          "dirname": "",
          "ext": ".mdx",
          "flattenedPath": "test",
          "name": "test",
          "path": "test.mdx",
        },
        "locale": "cn",
        "path": "test.mdx",
        "slugs": [
          "test",
        ],
        "url": "/cn/test",
      },
      {
        "absolutePath": "",
        "data": {
          "title": "Nested Page Chinese",
        },
        "file": {
          "dirname": "nested",
          "ext": ".mdx",
          "flattenedPath": "nested/test",
          "name": "test",
          "path": "nested/test.mdx",
        },
        "locale": "cn",
        "path": "nested/test.mdx",
        "slugs": [
          "nested",
          "test",
        ],
        "url": "/cn/nested/test",
      },
    ],
  },
  {
    "language": "en",
    "pages": [
      {
        "absolutePath": "",
        "data": {
          "title": "Hello",
        },
        "file": {
          "dirname": "",
          "ext": ".mdx",
          "flattenedPath": "test",
          "name": "test",
          "path": "test.mdx",
        },
        "locale": "en",
        "path": "test.mdx",
        "slugs": [
          "test",
        ],
        "url": "/en/test",
      },
      {
        "absolutePath": "",
        "data": {
          "title": "Nested Page",
        },
        "file": {
          "dirname": "nested",
          "ext": ".mdx",
          "flattenedPath": "nested/test",
          "name": "test",
          "path": "nested/test.mdx",
        },
        "locale": "en",
        "path": "nested/test.mdx",
        "slugs": [
          "nested",
          "test",
        ],
        "url": "/en/nested/test",
      },
    ],
  },
]


================================================
FILE: packages/core/test/fixtures/page-trees/i18n.tree.json
================================================
{
  "cn": {
    "$id": "cn",
    "children": [
      {
        "$id": "test.mdx",
        "$ref": {
          "file": "test.mdx",
        },
        "name": "Hello Chinese",
        "type": "page",
        "url": "/cn/test",
      },
      {
        "$id": "nested",
        "children": [
          {
            "$id": "nested/test.mdx",
            "$ref": {
              "file": "nested/test.mdx",
            },
            "name": "Nested Page Chinese",
            "type": "page",
            "url": "/cn/nested/test",
          },
        ],
        "name": "Nested",
        "type": "folder",
      },
    ],
    "name": "Docs Chinese",
  },
  "en": {
    "$id": "en",
    "children": [
      {
        "$id": "test.mdx",
        "$ref": {
          "file": "test.mdx",
        },
        "name": "Hello",
        "type": "page",
        "url": "/en/test",
      },
      {
        "$id": "nested",
        "children": [
          {
            "$id": "nested/test.mdx",
            "$ref": {
              "file": "nested/test.mdx",
            },
            "name": "Nested Page",
            "type": "page",
            "url": "/en/nested/test",
          },
        ],
        "name": "Nested",
        "type": "folder",
      },
    ],
    "name": "Docs English",
  },
}


================================================
FILE: packages/core/test/fixtures/page-trees/i18n.ts
================================================
import type { Source, SourceConfig } from '@/source';

export const source: Source<SourceConfig> = {
  files: [
    {
      type: 'page',
      path: 'test.mdx',
      data: {
        title: 'Hello',
      },
    },
    {
      type: 'page',
      path: 'test.cn.mdx',
      data: {
        title: 'Hello Chinese',
      },
    },
    {
      type: 'meta',
      path: 'meta.en.json',
      data: {
        title: 'Docs English',
        pages: ['test', 'nested'],
      },
    },
    {
      type: 'meta',
      path: 'meta.cn.json',
      data: {
        title: 'Docs Chinese',
        pages: ['test', 'nested'],
      },
    },
    {
      type: 'page',
      path: '/nested/test.en.mdx',
      data: {
        title: 'Nested Page',
      },
    },
    {
      type: 'page',
      path: '/nested/test.cn.mdx',
      data: {
        title: 'Nested Page Chinese',
      },
    },
    {
      type: 'meta',
      path: '/nested/meta.cn.json',
      data: {
        title: 'Nested Chinese',
      },
    },
  ],
};



================================================
FILE: packages/core/test/fixtures/page-trees/nested.tree.json
================================================
{
  "$id": "root",
  "children": [
    {
      "$id": "test.mdx",
      "name": "Hello",
      "type": "page",
      "url": "/test",
    },
    {
      "$id": "(nested)",
      "children": [
        {
          "$id": "(nested)/hello.mdx",
          "name": "Route Group Page",
          "type": "page",
          "url": "/hello",
        },
      ],
      "name": "Nested",
      "type": "folder",
    },
    {
      "$id": "hello",
      "children": [],
      "index": {
        "$id": "hello/index.mdx",
        "name": "Another hello page",
        "type": "page",
        "url": "/hello/index",
      },
      "name": "Another hello page",
      "type": "folder",
    },
    {
      "$id": "nested",
      "children": [
        {
          "$id": "nested/test.mdx",
          "name": "Nested Page",
          "type": "page",
          "url": "/nested/test",
        },
      ],
      "name": "Nested",
      "type": "folder",
    },
    {
      "external": true,
      "name": "Text",
      "type": "page",
      "url": "https://google.com",
    },
    {
      "external": true,
      "icon": "Icon",
      "name": "Text",
      "type": "page",
      "url": "https://google.com",
    },
  ],
  "name": "",
}


================================================
FILE: packages/core/test/fixtures/page-trees/nested.ts
================================================
import type { Source, SourceConfig } from '@/source';

export const source: Source<SourceConfig> = {
  files: [
    {
      type: 'page',
      path: 'test.mdx',
      data: {
        title: 'Hello',
      },
    },
    {
      type: 'page',
      path: 'hidden.mdx',
      data: {
        title: 'Hidden',
      },
    },
    {
      type: 'meta',
      path: 'meta.json',
      data: {
        pages: [
          '...',
          '!hidden',
          'nested',
          '[Text](https://google.com)',
          '[Icon][Text](https://google.com)',
        ],
      },
    },
    {
      type: 'page',
      path: '/hello/index.mdx',
      data: {
        title: 'Another hello page',
      },
    },
    {
      type: 'page',
      path: '/nested/test.mdx',
      data: {
        title: 'Nested Page',
      },
    },
    {
      type: 'page',
      path: '/(nested)/hello.mdx',
      data: {
        title: 'Route Group Page',
      },
    },
  ],
};



================================================
FILE: packages/create-app/README.md
================================================
# Create Fumadocs App

A CLI tool to create new Next.js documentation sites with Fumadocs.

```bash
npx create-fumadocs-app
#or
pnpm create fumadocs-app
#or
yarn create fumadocs-app
```



================================================
FILE: packages/create-app/CHANGELOG.md
================================================
# create-next-docs-app

## 15.6.3

## 15.6.2

## 15.6.1

## 15.6.0

## 15.5.5

## 15.5.4

## 15.5.3

## 15.5.2

## 15.5.1

## 15.5.0

## 15.4.2

## 15.4.1

## 15.4.0

## 15.3.4

### Patch Changes

- a6c909b: Removed unused devDependencies and migrated from `fast-glob` to `tinyglobby`

## 15.3.3

## 15.3.2

## 15.3.1

## 15.3.0

## 15.2.15

## 15.2.14

## 15.2.13

## 15.2.12

## 15.2.11

## 15.2.10

## 15.2.9

## 15.2.8

## 15.2.7

### Patch Changes

- b8485e1: Enable TypeScript declaration generation in tsup config

## 15.2.6

### Patch Changes

- e9f2b70: Allow code usage of `create()`

## 15.2.5

### Patch Changes

- 74c4bb1: enable turbopack by default
- 3aac8e0: Include `mdx-components.tsx` by default

## 15.2.4

## 15.2.3

## 15.2.2

## 15.2.1

## 15.2.0

### Patch Changes

- 372843d: Add React Router example
- d5193e7: improve install experience
- 372843d: Remove Tailwind CSS option, enable by default

## 15.1.3

## 15.1.2

## 15.1.1

## 15.1.0

## 15.0.18

## 15.0.17

## 15.0.16

### Patch Changes

- 91c8568: add comments to generated template

## 15.0.15

## 15.0.14

## 15.0.13

## 15.0.12

## 15.0.11

## 15.0.10

## 15.0.9

## 15.0.8

## 15.0.7

### Patch Changes

- b3c0ee8: Fix windows problems

## 15.0.6

### Patch Changes

- e9225e1: Support src directory config

## 15.0.5

## 15.0.4

### Patch Changes

- 4be74f6: Improve CLI

## 15.0.3

## 15.0.2

## 15.0.1

## 15.0.0

### Patch Changes

- a89d6e0: Support Fumadocs v15

## 14.7.7

## 14.7.6

## 14.7.5

## 14.7.4

## 14.7.3

## 14.7.2

## 14.7.1

## 14.7.0

## 14.6.8

## 14.6.7

## 14.6.6

## 14.6.5

## 14.6.4

## 14.6.3

## 14.6.2

## 14.6.1

## 14.6.0

## 14.5.6

## 14.5.5

## 14.5.4

## 14.5.3

## 14.5.2

## 14.5.1

## 14.5.0

## 14.4.2

## 14.4.1

## 14.4.0

## 14.3.1

## 14.3.0

### Patch Changes

- 46d9208: Add option for ESLint

## 14.2.1

## 14.2.0

## 14.1.1

## 14.1.0

## 14.0.2

## 14.0.1

## 14.0.0

## 13.4.10

## 13.4.9

## 13.4.8

## 13.4.7

### Patch Changes

- 6e1923e: Fix typos

## 13.4.6

### Patch Changes

- 9c2095e: Add home layout by default

## 13.4.5

## 13.4.4

## 13.4.3

### Patch Changes

- e409799: Fix typos

## 13.4.2

### Patch Changes

- 0c251e5: Bump deps

## 13.4.1

## 13.4.0

## 13.3.3

## 13.3.2

## 13.3.1

## 13.3.0

### Patch Changes

- 5ed3e08: Install the @types/node package

## 13.2.2

## 13.2.1

## 13.2.0

### Patch Changes

- 70f15af: Support to initialize git repo

## 13.1.0

## 13.0.7

## 13.0.6

## 13.0.5

## 13.0.4

## 13.0.3

## 13.0.2

## 13.0.1

### Patch Changes

- 1f1989e: Update versions

## 13.0.0

## 12.5.6

## 12.5.5

## 12.5.4

## 12.5.3

## 12.5.2

## 12.5.1

## 12.5.0

## 12.4.2

## 12.4.1

### Patch Changes

- dd1e4f3: Change type definitions of built-in schemas

## 12.4.0

### Patch Changes

- 8efc775: Fix Content Collections compatibility

## 12.3.6

## 12.3.5

### Patch Changes

- ff7bcc4: Replace `contentlayer` with `content-collections`

## 12.3.4

## 12.3.3

## 12.3.2

## 12.3.1

## 12.3.0

## 12.2.5

## 12.2.4

### Patch Changes

- 7a326d3: Fix missing imports from template

## 12.2.3

## 12.2.2

## 12.2.1

## 12.2.0

### Patch Changes

- 7601b35: Move DocsLayout options to layout.config.tsx

## 12.1.3

## 12.1.2

## 12.1.1

## 12.1.0

## 12.0.7

## 12.0.6

## 12.0.5

## 12.0.4

## 12.0.3

## 12.0.2

## 12.0.1

## 12.0.0

### Patch Changes

- c7b0e23: Add `layout.config.tsx` for sharing layout options

## 11.3.2

## 11.3.1

## 11.3.0

## 11.2.2

## 11.2.1

## 11.2.0

## 11.1.3

## 11.1.2

## 11.1.1

### Patch Changes

- 8ef2b68: Bump deps

## 11.1.0

## 11.0.8

## 11.0.7

## 11.0.6

## 11.0.5

## 11.0.4

## 11.0.3

## 11.0.2

## 11.0.1

## 11.0.0

## 10.1.3

## 10.1.2

## 10.1.1

## 10.1.0

## 10.0.5

## 10.0.4

### Patch Changes

- c28c80f: Bump dependencies in templates

## 10.0.3

## 10.0.2

## 10.0.1

## 10.0.0

## 9.1.0

## 9.0.0

### Patch Changes

- c1e65b72: Fix typos

## 8.3.0

## 8.2.0

## 8.1.1

## 8.1.0

### Patch Changes

- 6c5a39a: Rename Git repository to `fumadocs`

## 8.0.0

### Major Changes

- 2b11c20: **Rename to Fumadocs**

  `next-docs-zeta` -> `fumadocs-core`

  `next-docs-ui` -> `fumadocs-ui`

  `next-docs-mdx` -> `fumadocs-mdx`

  `@fuma-docs/openapi` -> `fumadocs-openapi`

  `create-next-docs-app` -> `create-fumadocs-app`

## 7.1.2

### Patch Changes

- b836055: Remove deprecated usage from templates

## 7.1.1

### Patch Changes

- 65f71d4: Fix picocolors import errors

## 7.1.0

## 7.0.0

### Major Changes

- 579ecaa: **Support template for Tailwind CSS + Next Docs MDX**

## 6.1.0

### Patch Changes

- 65b7f30: Update examples
- 3e34d14: Sync version with next-docs

## 1.7.4

### Patch Changes

- 3840ad6: Update to 6.0.0

## 1.7.3

### Patch Changes

- b9af5ed: Update tsup & dependencies

## 1.7.2

### Patch Changes

- 0686061: Restrict node.js environment

## 1.7.1

### Patch Changes

- 955a575: Fix CLI errors

## 1.7.0

### Minor Changes

- 334a960: Support installing packages automatically

### Patch Changes

- 334a960: Support relative paths as project name (e.g. ".")

## 1.6.2

### Patch Changes

- 94075b8: Fix type errors in examples

## 1.6.1

### Patch Changes

- 01b23e2: Support Next.js 14

## 1.6.0

### Minor Changes

- c36c395: Support Next Docs MDX example

## 1.5.28

### Patch Changes

- 33914b0: Update Examples

## 1.5.27

### Patch Changes

- 45a4571: Update Examples

## 1.5.26

### Patch Changes

- 65eee50: Use async fs APIs
- eac081c: Update github urls & author name

## 1.5.25

### Patch Changes

- cbea678: Update Examples

## 1.5.24

### Patch Changes

- cd5fb12: Update Examples

## 1.5.23

### Patch Changes

- 379033d: Update Examples

## 1.5.22

### Patch Changes

- 7560a42: Update Examples

## 1.5.21

### Patch Changes

- d70fb5b: Update Examples

## 1.5.20

### Patch Changes

- Update Examples

## 1.5.18

### Patch Changes

- Update examples

## 1.5.17

### Patch Changes

- Update examples

## 1.5.16

### Patch Changes

- Update examples

## 1.5.15

### Patch Changes

- Update examples

## 1.5.14

### Patch Changes

- Update examples

## 1.5.13

### Patch Changes

- Update example

## 1.5.12

### Patch Changes

- Update examples

## 1.5.11

### Patch Changes

- Update examples

## 1.5.10

### Patch Changes

- Update examples

## 1.5.9

### Patch Changes

- Update dependencies

## 1.5.8

### Patch Changes

- 8f6f3c6: Update examples

## 1.5.7

### Patch Changes

- Update examples

## 1.5.6

### Patch Changes

- ebfdb88: Fix default warnings

## 1.5.5

### Patch Changes

- 3b0f469: Generate .gitignore file by default
- fa8d4cf: Update dependencies

## 1.5.4

### Patch Changes

- Update next docs

## 1.5.3

### Patch Changes

- Update next docs

## 1.5.2

### Patch Changes

- 9abd9de: Fix create-next-docs-app version conflicts

## 1.5.0

### Minor Changes

- Create create-next-docs-app CLI



================================================
FILE: packages/create-app/eslint.config.mjs
================================================
import library from 'eslint-config-custom/next.js';

export default [
  {
    ignores: ['dist/', 'scripts/', 'node_modules/', 'template/'],
  },
  ...library,
  {
    rules: {
      'import/no-relative-packages': 'off',
    },
  },
];



================================================
FILE: packages/create-app/package.json
================================================
{
  "name": "create-fumadocs-app",
  "version": "15.6.3",
  "description": "Create a new documentation site with Fumadocs",
  "keywords": [
    "NextJs",
    "next",
    "react",
    "Docs"
  ],
  "homepage": "https://fumadocs.vercel.app",
  "repository": "github:fuma-nama/fumadocs",
  "license": "MIT",
  "author": "Fuma Nama",
  "type": "module",
  "bin": "./dist/index.js",
  "module": "./dist/create-app.js",
  "types": "./dist/create-app.d.ts",
  "files": [
    "template/*",
    "dist/*"
  ],
  "scripts": {
    "build": "tsup",
    "clean": "rimraf dist",
    "dev": "tsup --watch",
    "lint": "eslint .",
    "postpublish": "echo \"Updating template repo\" && bash ./scripts/update-git-repo.sh",
    "types:check": "tsc --noEmit"
  },
  "dependencies": {
    "@clack/prompts": "^0.11.0",
    "cross-spawn": "^7.0.6",
    "picocolors": "^1.1.1"
  },
  "devDependencies": {
    "@types/cross-spawn": "^6.0.6",
    "@types/node": "24.0.12",
    "eslint-config-custom": "workspace:*",
    "tinyglobby": "^0.2.14",
    "tsconfig": "workspace:*"
  },
  "engines": {
    "node": ">=18.17.0"
  },
  "publishConfig": {
    "access": "public"
  }
}



================================================
FILE: packages/create-app/tsconfig.json
================================================
{
  "extends": "tsconfig/base.json",
  "compilerOptions": {
    "module": "ESNext",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "exclude": [
    "node_modules",
    "template",
    "dist",
    "scripts",
    "eslint.config.mjs"
  ]
}



================================================
FILE: packages/create-app/tsup.config.ts
================================================
import { writeFileSync } from 'node:fs';
import { defineConfig } from 'tsup';
import contentCollectionsPkg from '../content-collections/package.json';
import corePkg from '../core/package.json';
import mdxRemotePkg from '../mdx-remote/package.json';
import mdxPkg from '../mdx/package.json';
import uiPkg from '../ui/package.json';

const versions = {
  'fumadocs-core': corePkg.version,
  'fumadocs-ui': uiPkg.version,
  'fumadocs-mdx': mdxPkg.version,
  '@fumadocs/mdx-remote': mdxRemotePkg.version,
  '@fumadocs/content-collections': contentCollectionsPkg.version,
};

writeFileSync(
  './src/versions.js',
  `export const versions = ${JSON.stringify(versions)}`,
);

console.log('Create-Fumadocs-App: versions.json updated');

export default defineConfig({
  entry: ['./src/index.ts', './src/create-app.ts'],
  format: 'esm',
  target: 'node18',
  dts: true,
});



================================================
FILE: packages/create-app/scripts/update-git-repo.js
================================================
import fs from 'node:fs';
import path from 'node:path';
import { create } from '../dist/create-app.js';

const repo = process.argv[2] ?? './fumadocs-ui-template';

fs.readdirSync(repo).forEach((file) => {
  if (file !== '.git') {
    fs.rmSync(path.join(repo, file), {
      recursive: true,
      force: true,
    });
  }
});

await create({
  outputDir: repo,
  template: '+next+fuma-docs-mdx',
  tailwindcss: false,
  installDeps: false,
  packageManager: 'npm',
});



================================================
FILE: packages/create-app/scripts/update-git-repo.sh
================================================
#!/bin/bash
# Inspired by Svelte Kit

get_abs_filename() {
  # $1 : relative filename
  echo "$(cd "$(dirname "$1")" && pwd)/$(basename "$1")"
}

DIR=$(get_abs_filename $(dirname "$0"))
TMP=$(get_abs_filename "$DIR/../node_modules/.tmp")

mkdir -p $TMP
cd $TMP

# Set git info
git config --global user.email "fuma-nama@noreply.com"
git config --global user.name "Fuma Nama"

# clone the template repo
rm -rf fumadocs-ui-template
git clone --depth 1 --single-branch --branch main https://github.com/fuma-nama/fumadocs-ui-template.git

# empty out the repo
cd fumadocs-ui-template
node $DIR/update-git-repo.js $TMP/fumadocs-ui-template

# commit the new files
git add -A
git commit -m "version $npm_package_version"

git push https://github.com/fuma-nama/fumadocs-ui-template.git main -f


================================================
FILE: packages/create-app/src/auto-install.ts
================================================
import { spawn } from 'cross-spawn';

export type PackageManager = 'npm' | 'pnpm' | 'yarn' | 'bun';

export function getPackageManager(): PackageManager {
  const userAgent = process.env.npm_config_user_agent ?? '';

  if (userAgent.startsWith('yarn')) {
    return 'yarn';
  }

  if (userAgent.startsWith('pnpm')) {
    return 'pnpm';
  }

  if (userAgent.startsWith('bun')) {
    return 'bun';
  }

  return 'npm';
}

export function autoInstall(
  manager: PackageManager,
  dest: string,
): Promise<void> {
  return new Promise((res, reject) => {
    const installProcess = spawn(manager, ['install'], {
      stdio: 'ignore',
      env: {
        ...process.env,
        NODE_ENV: 'development',
        DISABLE_OPENCOLLECTIVE: '1',
      },
      cwd: dest,
    });

    installProcess.on('close', (code) => {
      if (code !== 0) {
        reject(new Error('Install failed'));
      } else {
        res();
      }
    });
  });
}



================================================
FILE: packages/create-app/src/constants.ts
================================================
import { fileURLToPath } from 'node:url';

export const sourceDir = fileURLToPath(new URL(`../`, import.meta.url).href);
export const cwd = process.cwd();



================================================
FILE: packages/create-app/src/create-app.ts
================================================
import path from 'node:path';
import fs from 'node:fs/promises';
import { tryGitInit } from '@/git';
import { versions as localVersions } from '@/versions';
import versionPkg from '../../create-app-versions/package.json';
import type { PackageManager } from './auto-install';
import { autoInstall } from './auto-install';
import { cwd, sourceDir } from './constants';

export type Template =
  | '+next+content-collections'
  | '+next+fuma-docs-mdx'
  | 'react-router'
  | 'tanstack-start';

export interface Options {
  outputDir: string;
  template: Template;

  /**
   * the package manager to use
   */
  packageManager: PackageManager;

  /**
   * Create files inside `src`
   *
   * (Next.js only)
   */
  useSrcDir?: boolean;

  /**
   * Configure Tailwind CSS
   *
   * (Next.js only)
   */
  tailwindcss: boolean;

  /**
   * Configure Next.js ESLint plugin
   *
   * (Next.js only)
   */
  eslint?: boolean;

  installDeps?: boolean;
  initializeGit?: boolean;
  log?: (message: string) => void;
}

export async function create(options: Options): Promise<void> {
  const {
    installDeps = true,
    initializeGit = true,
    log = console.log,
  } = options;
  const projectName = path.basename(options.outputDir);
  const dest = path.resolve(cwd, options.outputDir);
  const isNext = options.template.startsWith('+next');

  function isRelative(dir: string, file: string) {
    return !path
      .relative(path.join(dest, dir), file)
      .startsWith(`..${path.sep}`);
  }

  function defaultRename(file: string): string {
    file = file.replace('example.gitignore', '.gitignore');

    if (!options.useSrcDir || !isNext) {
      return file;
    }

    if (
      path.basename(file) === 'mdx-components.tsx' ||
      isRelative('app', file) ||
      isRelative('lib', file)
    ) {
      return path.join(dest, 'src', path.relative(dest, file));
    }

    return file;
  }

  if (isNext) {
    await copy(path.join(sourceDir, `template/+next`), dest, defaultRename);
  }

  await copy(
    path.join(sourceDir, `template/${options.template}`),
    dest,
    defaultRename,
  );

  if (isNext && options.tailwindcss) {
    await copy(
      path.join(sourceDir, `template/+next+tailwindcss`),
      dest,
      defaultRename,
    );

    log('Configured Tailwind CSS');
  }

  if (isNext && options.eslint) {
    await copy(
      path.join(sourceDir, `template/+next+eslint`),
      dest,
      defaultRename,
    );
    log('Configured ESLint');
  }

  // update tsconfig.json for src dir
  if (isNext && options.useSrcDir) {
    const tsconfigPath = path.join(dest, 'tsconfig.json');
    const content = (await fs.readFile(tsconfigPath)).toString();

    const config = JSON.parse(content);

    if (config.compilerOptions?.paths) {
      Object.assign(config.compilerOptions.paths, {
        '@/*': ['./src/*'],
      });
    }

    await fs.writeFile(tsconfigPath, JSON.stringify(config, null, 2));
  }

  const packageJson = createPackageJson(projectName, options);
  await fs.writeFile(
    path.join(dest, 'package.json'),
    JSON.stringify(packageJson, null, 2),
  );

  const readMe = await getReadme(dest, projectName);
  await fs.writeFile(path.join(dest, 'README.md'), readMe);

  if (installDeps) {
    await autoInstall(options.packageManager, dest);
    log('Installed dependencies');
  }

  if (initializeGit && tryGitInit(dest)) {
    log('Initialized Git repository');
  }
}

async function getReadme(dest: string, projectName: string): Promise<string> {
  const template = await fs
    .readFile(path.join(dest, 'README.md'))
    .then((res) => res.toString());

  return `# ${projectName}\n\n${template}`;
}

async function copy(
  from: string,
  to: string,
  rename: (s: string) => string = (s) => s,
): Promise<void> {
  const stats = await fs.stat(from);

  if (stats.isDirectory()) {
    const files = await fs.readdir(from);

    await Promise.all(
      files.map((file) =>
        copy(path.join(from, file), rename(path.join(to, file))),
      ),
    );
  } else {
    await fs.mkdir(path.dirname(to), { recursive: true });
    await fs.copyFile(from, to);
  }
}

function createPackageJson(projectName: string, options: Options): object {
  if (options.template === 'react-router') {
    return {
      name: projectName,
      private: true,
      type: 'module',
      scripts: {
        build: 'react-router build',
        dev: 'react-router dev',
        start: 'react-router-serve ./build/server/index.js',
        typecheck: 'react-router typegen && tsc',
      },
      dependencies: {
        ...pick(localVersions, [
          '@fumadocs/mdx-remote',
          'fumadocs-core',
          'fumadocs-ui',
        ]),
        ...pick(versionPkg.dependencies, [
          '@react-router/node',
          '@react-router/serve',
          'gray-matter',
          'isbot',
          'react',
          'react-dom',
          'react-router',
          'shiki',
        ]),
      },
      devDependencies: pick(versionPkg.dependencies, [
        '@react-router/dev',
        '@tailwindcss/vite',
        '@types/node',
        '@types/react',
        '@types/react-dom',
        'react-router-devtools',
        'tailwindcss',
        'typescript',
        'vite',
        'vite-tsconfig-paths',
      ]),
    };
  }

  if (options.template === 'tanstack-start') {
    return {
      name: projectName,
      type: 'module',
      scripts: {
        dev: 'vinxi dev',
        build: 'NODE_ENV=production vinxi build',
        start: 'vinxi start',
      },
      private: true,
      dependencies: {
        ...pick(localVersions, [
          '@fumadocs/mdx-remote',
          'fumadocs-ui',
          'fumadocs-core',
        ]),
        ...pick(versionPkg.dependencies, [
          '@tanstack/react-router',
          '@tanstack/react-start',
          'tinyglobby',
          'gray-matter',
          'react',
          'react-dom',
          'vinxi',
        ]),
      },
      devDependencies: pick(versionPkg.dependencies, [
        '@tailwindcss/vite',
        '@types/react',
        '@types/react-dom',
        '@vitejs/plugin-react',
        'tailwindcss',
        'typescript',
        'vite',
        'vite-tsconfig-paths',
      ]),
    };
  }

  return {
    name: projectName,
    version: '0.0.0',
    private: true,
    scripts: {
      build: 'next build',
      dev: 'next dev --turbo',
      start: 'next start',
      ...(options.template === '+next+fuma-docs-mdx'
        ? {
            postinstall: 'fumadocs-mdx',
          }
        : null),
    },
    dependencies: {
      ...pick(versionPkg.dependencies, ['next', 'react', 'react-dom']),
      ...pick(localVersions, ['fumadocs-ui', 'fumadocs-core']),
      ...(options.template === '+next+content-collections'
        ? {
            ...pick(versionPkg.dependencies, [
              '@content-collections/mdx',
              '@content-collections/core',
              '@content-collections/next',
            ]),
            ...pick(localVersions, ['@fumadocs/content-collections']),
          }
        : null),
      ...(options.template === '+next+fuma-docs-mdx'
        ? pick(localVersions, ['fumadocs-mdx'])
        : null),
    },
    devDependencies: {
      ...pick(versionPkg.dependencies, [
        '@types/node',
        '@types/react',
        '@types/react-dom',
        'typescript',
        '@types/mdx',
      ]),
      ...(options.tailwindcss
        ? pick(versionPkg.dependencies, [
            '@tailwindcss/postcss',
            'tailwindcss',
            'postcss',
          ])
        : null),
      ...(options.eslint
        ? {
            eslint: '^8',
            'eslint-config-next': versionPkg.dependencies.next,
          }
        : null),
    },
  };
}

function pick<T extends object, K extends keyof T>(
  obj: T,
  keys: K[],
): Pick<T, K> {
  const result: Partial<T> = {};

  for (const key of keys) {
    if (key in obj) {
      result[key] = obj[key];
    }
  }

  return result as Pick<T, K>;
}



================================================
FILE: packages/create-app/src/git.ts
================================================
import { execSync } from 'node:child_process';
import { rmSync } from 'node:fs';
import { join } from 'node:path';

/*
Initialize a Git repo on the project.

Based on https://github.com/vercel/next.js/blob/canary/packages/create-next-app/helpers/git.ts
*/

function isInGitRepository(cwd: string): boolean {
  try {
    execSync('git rev-parse --is-inside-work-tree', { stdio: 'ignore', cwd });
    return true;
  } catch {
    return false;
  }
}

function isInMercurialRepository(cwd: string): boolean {
  try {
    execSync('hg --cwd . root', { stdio: 'ignore', cwd });
    return true;
  } catch {
    return false;
  }
}

function isDefaultBranchSet(cwd: string): boolean {
  try {
    execSync('git config init.defaultBranch', { stdio: 'ignore', cwd });
    return true;
  } catch {
    return false;
  }
}

export function tryGitInit(root: string): boolean {
  let didInit = false;

  try {
    execSync('git --version', { stdio: 'ignore' });
    if (isInGitRepository(root) || isInMercurialRepository(root)) {
      return false;
    }

    execSync('git init', { stdio: 'ignore', cwd: root });
    didInit = true;

    if (!isDefaultBranchSet(root)) {
      execSync('git checkout -b main', { stdio: 'ignore', cwd: root });
    }

    execSync('git add -A', { stdio: 'ignore', cwd: root });
    execSync('git commit -m "Initial commit from Create Fumadocs App"', {
      stdio: 'ignore',
      cwd: root,
    });
    return true;
  } catch {
    if (didInit) {
      try {
        rmSync(join(root, '.git'), { recursive: true, force: true });
      } catch {
        // do nothing
      }
    }

    return false;
  }
}



================================================
FILE: packages/create-app/src/index.ts
================================================
#!/usr/bin/env node
import fs from 'node:fs/promises';
import path from 'node:path';
import {
  cancel,
  confirm,
  group,
  intro,
  isCancel,
  outro,
  select,
  spinner,
  text,
} from '@clack/prompts';
import pc from 'picocolors';
import { getPackageManager } from './auto-install';
import { type Template, create } from './create-app';
import { cwd } from './constants';

const manager = getPackageManager();

async function main(): Promise<void> {
  intro(pc.bgCyan(pc.bold('Create Fumadocs App')));

  const options = await group(
    {
      name: () =>
        text({
          message: 'Project name',
          placeholder: 'my-app',
          defaultValue: 'my-app',
        }),
      template: () =>
        select({
          message: 'Choose a template',
          initialValue: '+next+fuma-docs-mdx' as Template,
          options: [
            {
              value: '+next+fuma-docs-mdx',
              label: 'Next.js: Fumadocs MDX',
              hint: 'recommended',
            },
            {
              value: '+next+content-collections',
              label: 'Next.js: Content Collections',
            },
            {
              value: 'react-router',
              label: 'React Router: MDX Remote',
            },
            {
              value: 'tanstack-start',
              label: 'Tanstack Start: MDX Remote',
              hint: 'Experimental',
            },
          ],
        }),
      src: (v) => {
        if (!v.results.template?.startsWith('+next')) return;

        return confirm({
          message: 'Use `/src` directory?',
          initialValue: false,
        });
      },
      eslint: (v) => {
        if (!v.results.template?.startsWith('+next')) return;

        return confirm({
          message: 'Add default ESLint configuration?',
          initialValue: false,
        });
      },
      installDeps: () =>
        confirm({
          message: `Do you want to install packages automatically? (detected as ${manager})`,
        }),
    },
    {
      onCancel: () => {
        cancel('Installation Stopped.');
        process.exit(0);
      },
    },
  );

  const projectName = options.name.toLowerCase().replace(/\s/, '-');
  const dest = path.resolve(cwd, projectName);

  const destDir = await fs.readdir(dest).catch(() => null);
  if (destDir && destDir.length > 0) {
    const del = await confirm({
      message: `directory ${projectName} already exists, do you want to delete its files?`,
    });

    if (isCancel(del)) {
      cancel();
      return;
    }

    if (del) {
      const info = spinner();
      info.start(`Deleting files in ${projectName}`);

      await Promise.all(
        destDir.map((item) => {
          return fs.rm(path.join(dest, item), {
            recursive: true,
            force: true,
          });
        }),
      );

      info.stop(`Deleted files in ${projectName}`);
    }
  }

  const info = spinner();
  info.start(`Generating Project`);

  await create({
    packageManager: manager,
    tailwindcss: true,
    template: options.template,
    outputDir: dest,
    installDeps: options.installDeps,
    eslint: options.eslint === true,
    useSrcDir: options.src === true,

    log: (message) => {
      info.message(message);
    },
  });

  info.stop('Project Generated');

  outro(pc.bgGreen(pc.bold('Done')));

  console.log(pc.bold('\nOpen the project'));
  console.log(pc.cyan(`cd ${projectName}`));

  console.log(pc.bold('\nRun Development Server'));
  console.log(pc.cyan('npm run dev | pnpm run dev | yarn dev'));

  console.log(
    pc.bold('\nYou can now open the project and start writing documents'),
  );

  process.exit(0);
}

main().catch((e: unknown) => {
  console.error(e);
  throw e;
});



================================================
FILE: packages/create-app/src/versions.d.ts
================================================
export const versions: {
  'fumadocs-core': string;
  'fumadocs-ui': string;
  'fumadocs-mdx': string;
  '@fumadocs/mdx-remote': string;
  '@fumadocs/content-collections': string;
};



================================================
FILE: packages/create-app/template/+next/README.md
================================================
This is a Next.js application generated with
[Create Fumadocs](https://github.com/fuma-nama/fumadocs).

Run development server:

```bash
npm run dev
# or
pnpm dev
# or
yarn dev
```

Open http://localhost:3000 with your browser to see the result.

## Explore

In the project, you can see:

- `lib/source.ts`: Code for content source adapter, [`loader()`](https://fumadocs.dev/docs/headless/source-api) provides the interface to access your content.
- `app/layout.config.tsx`: Shared options for layouts, optional but preferred to keep.

| Route                     | Description                                            |
| ------------------------- | ------------------------------------------------------ |
| `app/(home)`              | The route group for your landing page and other pages. |
| `app/docs`                | The documentation layout and pages.                    |
| `app/api/search/route.ts` | The Route Handler for search.                          |

## Learn More

To learn more about Next.js and Fumadocs, take a look at the following
resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js
  features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.
- [Fumadocs](https://fumadocs.vercel.app) - learn about Fumadocs



================================================
FILE: packages/create-app/template/+next/example.gitignore
================================================
# deps
/node_modules

# generated content
.contentlayer
.content-collections
.source

# test & build
/coverage
/.next/
/out/
/build
*.tsbuildinfo

# misc
.DS_Store
*.pem
/.pnp
.pnp.js
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# others
.env*.local
.vercel
next-env.d.ts


================================================
FILE: packages/create-app/template/+next/mdx-components.tsx
================================================
import defaultMdxComponents from 'fumadocs-ui/mdx';
import type { MDXComponents } from 'mdx/types';

// use this function to get MDX components, you will need it for rendering MDX
export function getMDXComponents(components?: MDXComponents): MDXComponents {
  return {
    ...defaultMdxComponents,
    ...components,
  };
}



================================================
FILE: packages/create-app/template/+next/app/layout.config.tsx
================================================
import type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';

/**
 * Shared layout configurations
 *
 * you can customise layouts individually from:
 * Home Layout: app/(home)/layout.tsx
 * Docs Layout: app/docs/layout.tsx
 */
export const baseOptions: BaseLayoutProps = {
  nav: {
    title: (
      <>
        <svg
          width="24"
          height="24"
          xmlns="http://www.w3.org/2000/svg"
          aria-label="Logo"
        >
          <circle cx={12} cy={12} r={12} fill="currentColor" />
        </svg>
        My App
      </>
    ),
  },
  // see https://fumadocs.dev/docs/ui/navigation/links
  links: [],
};



================================================
FILE: packages/create-app/template/+next/app/layout.tsx
================================================
import { RootProvider } from 'fumadocs-ui/provider';
import 'fumadocs-ui/style.css';
import { Inter } from 'next/font/google';
import type { ReactNode } from 'react';

const inter = Inter({
  subsets: ['latin'],
});

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <html lang="en" className={inter.className} suppressHydrationWarning>
      <body
        style={{
          display: 'flex',
          flexDirection: 'column',
          minHeight: '100vh',
        }}
      >
        <RootProvider>{children}</RootProvider>
      </body>
    </html>
  );
}



================================================
FILE: packages/create-app/template/+next/app/(home)/layout.tsx
================================================
import type { ReactNode } from 'react';
import { HomeLayout } from 'fumadocs-ui/layouts/home';
import { baseOptions } from '@/app/layout.config';

export default function Layout({ children }: { children: ReactNode }) {
  return <HomeLayout {...baseOptions}>{children}</HomeLayout>;
}



================================================
FILE: packages/create-app/template/+next/app/(home)/page.tsx
================================================
import Link from 'next/link';

export const metadata = {
  title: 'My App',
};

export default function HomePage() {
  return (
    <main
      style={{
        flex: 1,
        display: 'flex',
        flexDirection: 'column',
        textAlign: 'center',
        justifyContent: 'center',
      }}
    >
      <h1
        style={{
          fontSize: '2rem',
          fontWeight: 'bold',
          marginBottom: '1rem',
        }}
      >
        Hello World
      </h1>
      <p>
        You can open{' '}
        <Link
          href="/docs"
          style={{
            fontWeight: '600',
            textDecoration: 'underline',
          }}
        >
          /docs
        </Link>{' '}
        and see the documentation.
      </p>
    </main>
  );
}



================================================
FILE: packages/create-app/template/+next/app/api/search/route.ts
================================================
import { source } from '@/lib/source';
import { createFromSource } from 'fumadocs-core/search/server';

export const { GET } = createFromSource(source, {
  // https://docs.orama.com/open-source/supported-languages
  language: 'english',
});



================================================
FILE: packages/create-app/template/+next/app/docs/layout.tsx
================================================
import { DocsLayout } from 'fumadocs-ui/layouts/docs';
import type { ReactNode } from 'react';
import { baseOptions } from '@/app/layout.config';
import { source } from '@/lib/source';

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <DocsLayout tree={source.pageTree} {...baseOptions}>
      {children}
    </DocsLayout>
  );
}



================================================
FILE: packages/create-app/template/+next/content/docs/index.mdx
================================================
---
title: Hello World
description: Your first document
---

Welcome to the docs! You can start writing documents in `/content/docs`.

## What is Next?

<Cards>
  <Card title="Learn more about Next.js" href="https://nextjs.org/docs" />
  <Card title="Learn more about Fumadocs" href="https://fumadocs.vercel.app" />
</Cards>



================================================
FILE: packages/create-app/template/+next/content/docs/test.mdx
================================================
---
title: Components
description: Components
---

## Code Block

```js
console.log('Hello World');
```

## Cards

<Cards>
  <Card title="Learn more about Next.js" href="https://nextjs.org/docs" />
  <Card title="Learn more about Fumadocs" href="https://fumadocs.vercel.app" />
</Cards>



================================================
FILE: packages/create-app/template/+next+content-collections/content-collections.ts
================================================
import { defineCollection, defineConfig } from '@content-collections/core';
import {
  createMetaSchema,
  createDocSchema,
  transformMDX,
} from '@fumadocs/content-collections/configuration';

const docs = defineCollection({
  name: 'docs',
  directory: 'content/docs',
  include: '**/*.mdx',
  schema: createDocSchema,
  transform: transformMDX,
});

const metas = defineCollection({
  name: 'meta',
  directory: 'content/docs',
  include: '**/meta.json',
  parser: 'json',
  schema: createMetaSchema,
});

export default defineConfig({
  collections: [docs, metas],
});



================================================
FILE: packages/create-app/template/+next+content-collections/next.config.mjs
================================================
import { withContentCollections } from '@content-collections/next';

/** @type {import('next').NextConfig} */
const config = {
  reactStrictMode: true,
};

export default withContentCollections(config);



================================================
FILE: packages/create-app/template/+next+content-collections/tsconfig.json
================================================
{
  "compilerOptions": {
    "baseUrl": ".",
    "target": "ESNext",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "paths": {
      "@/*": ["./*"],
      "content-collections": ["./.content-collections/generated"]
    },
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    ".contentlayer/generated"
  ],
  "exclude": ["node_modules"]
}



================================================
FILE: packages/create-app/template/+next+content-collections/app/docs/[[...slug]]/page.tsx
================================================
import { source } from '@/lib/source';
import {
  DocsPage,
  DocsBody,
  DocsTitle,
  DocsDescription,
} from 'fumadocs-ui/page';
import { notFound } from 'next/navigation';
import { MDXContent } from '@content-collections/mdx/react';
import { createRelativeLink } from 'fumadocs-ui/mdx';
import { getMDXComponents } from '@/mdx-components';

export default async function Page(props: {
  params: Promise<{ slug?: string[] }>;
}) {
  const params = await props.params;
  const page = source.getPage(params.slug);
  if (!page) notFound();

  return (
    <DocsPage toc={page.data.toc} full={page.data.full}>
      <DocsTitle>{page.data.title}</DocsTitle>
      <DocsDescription>{page.data.description}</DocsDescription>
      <DocsBody>
        <MDXContent
          code={page.data.body}
          components={getMDXComponents({
            // this allows you to link to other pages with relative file paths
            a: createRelativeLink(source, page),
          })}
        />
      </DocsBody>
    </DocsPage>
  );
}

export function generateStaticParams() {
  return source.generateParams();
}

export async function generateMetadata(props: {
  params: Promise<{ slug?: string[] }>;
}) {
  const params = await props.params;
  const page = source.getPage(params.slug);
  if (!page) notFound();

  return {
    title: page.data.title,
    description: page.data.description,
  };
}



================================================
FILE: packages/create-app/template/+next+content-collections/lib/source.ts
================================================
import { allDocs, allMetas } from 'content-collections';
import { loader } from 'fumadocs-core/source';
import { createMDXSource } from '@fumadocs/content-collections';

export const source = loader({
  baseUrl: '/docs',
  source: createMDXSource(allDocs, allMetas),
});



================================================
FILE: packages/create-app/template/+next+eslint/.eslintrc.json
================================================
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}



================================================
FILE: packages/create-app/template/+next+fuma-docs-mdx/README.md
================================================
This is a Next.js application generated with
[Create Fumadocs](https://github.com/fuma-nama/fumadocs).

Run development server:

```bash
npm run dev
# or
pnpm dev
# or
yarn dev
```

Open http://localhost:3000 with your browser to see the result.

## Explore

In the project, you can see:

- `lib/source.ts`: Code for content source adapter, [`loader()`](https://fumadocs.dev/docs/headless/source-api) provides the interface to access your content.
- `app/layout.config.tsx`: Shared options for layouts, optional but preferred to keep.

| Route                     | Description                                            |
| ------------------------- | ------------------------------------------------------ |
| `app/(home)`              | The route group for your landing page and other pages. |
| `app/docs`                | The documentation layout and pages.                    |
| `app/api/search/route.ts` | The Route Handler for search.                          |

### Fumadocs MDX

A `source.config.ts` config file has been included, you can customise different options like frontmatter schema.

Read the [Introduction](https://fumadocs.dev/docs/mdx) for further details.

## Learn More

To learn more about Next.js and Fumadocs, take a look at the following
resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js
  features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.
- [Fumadocs](https://fumadocs.vercel.app) - learn about Fumadocs



================================================
FILE: packages/create-app/template/+next+fuma-docs-mdx/next.config.mjs
================================================
import { createMDX } from 'fumadocs-mdx/next';

const withMDX = createMDX();

/** @type {import('next').NextConfig} */
const config = {
  reactStrictMode: true,
};

export default withMDX(config);



================================================
FILE: packages/create-app/template/+next+fuma-docs-mdx/source.config.ts
================================================
import {
  defineConfig,
  defineDocs,
  frontmatterSchema,
  metaSchema,
} from 'fumadocs-mdx/config';

// You can customise Zod schemas for frontmatter and `meta.json` here
// see https://fumadocs.vercel.app/docs/mdx/collections#define-docs
export const docs = defineDocs({
  docs: {
    schema: frontmatterSchema,
  },
  meta: {
    schema: metaSchema,
  },
});

export default defineConfig({
  mdxOptions: {
    // MDX options
  },
});



================================================
FILE: packages/create-app/template/+next+fuma-docs-mdx/tsconfig.json
================================================
{
  "compilerOptions": {
    "baseUrl": ".",
    "target": "ESNext",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "paths": {
      "@/.source": ["./.source/index.ts"],
      "@/*": ["./*"]
    },
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
FILE: packages/create-app/template/+next+fuma-docs-mdx/app/docs/[[...slug]]/page.tsx
================================================
import { source } from '@/lib/source';
import {
  DocsPage,
  DocsBody,
  DocsDescription,
  DocsTitle,
} from 'fumadocs-ui/page';
import { notFound } from 'next/navigation';
import { createRelativeLink } from 'fumadocs-ui/mdx';
import { getMDXComponents } from '@/mdx-components';

export default async function Page(props: {
  params: Promise<{ slug?: string[] }>;
}) {
  const params = await props.params;
  const page = source.getPage(params.slug);
  if (!page) notFound();

  const MDXContent = page.data.body;

  return (
    <DocsPage toc={page.data.toc} full={page.data.full}>
      <DocsTitle>{page.data.title}</DocsTitle>
      <DocsDescription>{page.data.description}</DocsDescription>
      <DocsBody>
        <MDXContent
          components={getMDXComponents({
            // this allows you to link to other pages with relative file paths
            a: createRelativeLink(source, page),
          })}
        />
      </DocsBody>
    </DocsPage>
  );
}

export async function generateStaticParams() {
  return source.generateParams();
}

export async function generateMetadata(props: {
  params: Promise<{ slug?: string[] }>;
}) {
  const params = await props.params;
  const page = source.getPage(params.slug);
  if (!page) notFound();

  return {
    title: page.data.title,
    description: page.data.description,
  };
}



================================================
FILE: packages/create-app/template/+next+fuma-docs-mdx/lib/source.ts
================================================
import { docs } from '@/.source';
import { loader } from 'fumadocs-core/source';

// See https://fumadocs.vercel.app/docs/headless/source-api for more info
export const source = loader({
  // it assigns a URL to your pages
  baseUrl: '/docs',
  source: docs.toFumadocsSource(),
});



================================================
FILE: packages/create-app/template/+next+tailwindcss/postcss.config.mjs
================================================
export default {
  plugins: {
    '@tailwindcss/postcss': {},
  },
};



================================================
FILE: packages/create-app/template/+next+tailwindcss/app/global.css
================================================
@import 'tailwindcss';
@import 'fumadocs-ui/css/neutral.css';
@import 'fumadocs-ui/css/preset.css';



================================================
FILE: packages/create-app/template/+next+tailwindcss/app/layout.tsx
================================================
import '@/app/global.css';
import { RootProvider } from 'fumadocs-ui/provider';
import { Inter } from 'next/font/google';
import type { ReactNode } from 'react';

const inter = Inter({
  subsets: ['latin'],
});

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <html lang="en" className={inter.className} suppressHydrationWarning>
      <body className="flex flex-col min-h-screen">
        <RootProvider>{children}</RootProvider>
      </body>
    </html>
  );
}



================================================
FILE: packages/create-app/template/+next+tailwindcss/app/(home)/page.tsx
================================================
import Link from 'next/link';

export default function HomePage() {
  return (
    <main className="flex flex-1 flex-col justify-center text-center">
      <h1 className="mb-4 text-2xl font-bold">Hello World</h1>
      <p className="text-fd-muted-foreground">
        You can open{' '}
        <Link
          href="/docs"
          className="text-fd-foreground font-semibold underline"
        >
          /docs
        </Link>{' '}
        and see the documentation.
      </p>
    </main>
  );
}



================================================
FILE: packages/create-app/template/react-router/README.md
================================================
This is a React Router application generated with
[Create Fumadocs](https://github.com/fuma-nama/fumadocs).

Run development server:

```bash
npm run dev
# or
pnpm dev
# or
yarn dev
```



================================================
FILE: packages/create-app/template/react-router/example.gitignore
================================================
.DS_Store
/node_modules/

# React Router
/.react-router/
/build/



================================================
FILE: packages/create-app/template/react-router/react-router.config.ts
================================================
import type { Config } from '@react-router/dev/config';
import { source } from './app/source';

export default {
  ssr: true,
  async prerender({ getStaticPaths }) {
    return [...getStaticPaths(), ...source.getPages().map((page) => page.url)];
  },
} satisfies Config;



================================================
FILE: packages/create-app/template/react-router/tsconfig.json
================================================
{
  "include": [
    "**/*",
    "**/.server/**/*",
    "**/.client/**/*",
    ".react-router/types/**/*"
  ],
  "compilerOptions": {
    "lib": ["DOM", "DOM.Iterable", "ES2022"],
    "types": ["node", "vite/client"],
    "target": "esnext",
    "module": "esnext",
    "moduleResolution": "bundler",
    "jsx": "react-jsx",
    "rootDirs": [".", "./.react-router/types"],
    "baseUrl": ".",
    "paths": {
      "@/*": ["./app/*"]
    },
    "esModuleInterop": true,
    "verbatimModuleSyntax": true,
    "noEmit": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "strict": true
  }
}



================================================
FILE: packages/create-app/template/react-router/vite.config.ts
================================================
import { reactRouter } from '@react-router/dev/vite';
import tailwindcss from '@tailwindcss/vite';
import { defineConfig } from 'vite';
import tsconfigPaths from 'vite-tsconfig-paths';

export default defineConfig({
  build: {
    rollupOptions: {
      external: ['shiki'],
    },
  },
  plugins: [tailwindcss(), reactRouter(), tsconfigPaths()],
});



================================================
FILE: packages/create-app/template/react-router/app/app.css
================================================
@import 'tailwindcss';
@import 'fumadocs-ui/css/neutral.css';
@import 'fumadocs-ui/css/preset.css';



================================================
FILE: packages/create-app/template/react-router/app/root.tsx
================================================
import {
  isRouteErrorResponse,
  Links,
  Meta,
  Outlet,
  Scripts,
  ScrollRestoration,
} from 'react-router';
import { RootProvider } from 'fumadocs-ui/provider/base';
import { ReactRouterProvider } from 'fumadocs-core/framework/react-router';
import type { Route } from './+types/root';
import './app.css';

export const links: Route.LinksFunction = () => [
  { rel: 'preconnect', href: 'https://fonts.googleapis.com' },
  {
    rel: 'preconnect',
    href: 'https://fonts.gstatic.com',
    crossOrigin: 'anonymous',
  },
  {
    rel: 'stylesheet',
    href: 'https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap',
  },
];

export function Layout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <Meta />
        <Links />
      </head>
      <body className="flex flex-col min-h-screen">
        <ReactRouterProvider>
          <RootProvider>{children}</RootProvider>
        </ReactRouterProvider>
        <ScrollRestoration />
        <Scripts />
      </body>
    </html>
  );
}

export default function App() {
  return <Outlet />;
}

export function ErrorBoundary({ error }: Route.ErrorBoundaryProps) {
  let message = 'Oops!';
  let details = 'An unexpected error occurred.';
  let stack: string | undefined;

  if (isRouteErrorResponse(error)) {
    message = error.status === 404 ? '404' : 'Error';
    details =
      error.status === 404
        ? 'The requested page could not be found.'
        : error.statusText || details;
  } else if (import.meta.env.DEV && error && error instanceof Error) {
    details = error.message;
    stack = error.stack;
  }

  return (
    <main className="pt-16 p-4 container mx-auto">
      <h1>{message}</h1>
      <p>{details}</p>
      {stack && (
        <pre className="w-full p-4 overflow-x-auto">
          <code>{stack}</code>
        </pre>
      )}
    </main>
  );
}



================================================
FILE: packages/create-app/template/react-router/app/routes.ts
================================================
import { type RouteConfig, index, route } from '@react-router/dev/routes';

export default [
  index('routes/home.tsx'),
  route('docs/*', 'docs/page.tsx'),
  route('api/search', 'docs/search.ts'),
] satisfies RouteConfig;



================================================
FILE: packages/create-app/template/react-router/app/source.ts
================================================
import {
  loader,
  type MetaData,
  type PageData,
  type Source,
  type VirtualFile,
} from 'fumadocs-core/source';
import matter from 'gray-matter';
import * as path from 'node:path';

const files = Object.entries(
  import.meta.glob<true, 'raw'>('/content/docs/**/*', {
    eager: true,
    query: '?raw',
    import: 'default',
  }),
);

const virtualFiles: VirtualFile[] = files.flatMap(([file, content]) => {
  const ext = path.extname(file);
  const virtualPath = path.relative(
    'content/docs',
    path.join(process.cwd(), file),
  );

  if (ext === '.mdx' || ext === '.md') {
    const parsed = matter(content);

    return {
      type: 'page',
      path: virtualPath,
      data: {
        ...parsed.data,
        content: parsed.content,
      },
    };
  }

  if (ext === '.json') {
    return {
      type: 'meta',
      path: virtualPath,
      data: JSON.parse(content),
    };
  }

  return [];
});

export const source = loader({
  source: {
    files: virtualFiles,
  } as Source<{
    pageData: PageData & {
      content: string;
    };
    metaData: MetaData;
  }>,
  baseUrl: '/docs',
});



================================================
FILE: packages/create-app/template/react-router/app/docs/page.tsx
================================================
import type { Route } from './+types/page';
import { DocsLayout } from 'fumadocs-ui/layouts/docs';
import {
  DocsBody,
  DocsDescription,
  DocsPage,
  DocsTitle,
} from 'fumadocs-ui/page';
import { source } from '@/source';
import defaultMdxComponents from 'fumadocs-ui/mdx';
import { executeMdxSync } from '@fumadocs/mdx-remote/client';
import type { PageTree } from 'fumadocs-core/server';
import { createCompiler } from '@fumadocs/mdx-remote';
import * as path from 'node:path';

export function meta({}: Route.MetaArgs) {
  return [
    { title: 'New React Router App' },
    { name: 'description', content: 'Welcome to React Router!' },
  ];
}
const compiler = createCompiler({
  development: false,
});

export async function loader({ params }: Route.LoaderArgs) {
  const slugs = params['*'].split('/').filter((v) => v.length > 0);
  const page = source.getPage(slugs);
  if (!page) throw new Error('Not found');

  const compiled = await compiler.compileFile({
    path: path.resolve('content/docs', page.file.path),
    value: page.data.content,
  });

  return {
    page,
    compiled: compiled.toString(),
    tree: source.pageTree,
  };
}

export default function Page(props: Route.ComponentProps) {
  const { page, compiled, tree } = props.loaderData;
  const { default: Mdx, toc } = executeMdxSync(compiled);

  return (
    <DocsLayout
      nav={{
        title: 'React Router',
      }}
      tree={tree as PageTree.Root}
    >
      <DocsPage toc={toc}>
        <DocsTitle>{page.data.title}</DocsTitle>
        <DocsDescription>{page.data.description}</DocsDescription>
        <DocsBody>
          <Mdx components={defaultMdxComponents} />
        </DocsBody>
      </DocsPage>
    </DocsLayout>
  );
}



================================================
FILE: packages/create-app/template/react-router/app/docs/search.ts
================================================
import type { Route } from './+types/search';
import { createSearchAPI } from 'fumadocs-core/search/server';
import { source } from '@/source';
import { structure } from 'fumadocs-core/mdx-plugins';

const server = createSearchAPI('advanced', {
  indexes: source.getPages().map((page) => ({
    id: page.url,
    url: page.url,
    title: page.data.title ?? '',
    description: page.data.description,
    structuredData: structure(page.data.content),
  })),
});

export async function loader({ request }: Route.LoaderArgs) {
  return server.GET(request);
}



================================================
FILE: packages/create-app/template/react-router/app/routes/home.tsx
================================================
import type { Route } from './+types/home';
import { HomeLayout } from 'fumadocs-ui/layouts/home';
import { Link } from 'react-router';

export function meta({}: Route.MetaArgs) {
  return [
    { title: 'New React Router App' },
    { name: 'description', content: 'Welcome to React Router!' },
  ];
}

export default function Home() {
  return (
    <HomeLayout
      className="text-center"
      nav={{
        title: 'React Router',
      }}
    >
      <div className="py-12">
        <h1 className="text-xl font-bold mb-2">Fumadocs on React Router.</h1>
        <p className="text-fd-muted-foreground mb-8">
          The truly flexible docs framework on React.js.
        </p>
        <Link
          className="text-sm bg-fd-primary text-fd-primary-foreground rounded-full font-medium px-4 py-2.5"
          to="/docs"
        >
          Open Docs
        </Link>
      </div>
    </HomeLayout>
  );
}



================================================
FILE: packages/create-app/template/react-router/content/docs/index.mdx
================================================
---
title: Hello World
description: |
  Your first `document`
  You'll love it!
---

Hey there! Fumadocs is the docs framework that also works on React Router!

## Heading

Hello World

<Cards>
  <Card title="Learn more about React Router" href="https://reactrouter.com" />
  <Card title="Learn more about Fumadocs" href="https://fumadocs.vercel.app" />
</Cards>

```ts
console.log('I love React!');
```

### Heading

#### Heading

| Head                            | Description                         |
| ------------------------------- | ----------------------------------- |
| `hello`                         | Hello World                         |
| very **important**              | Hey                                 |
| _Surprisingly_                  | Fumadocs                            |
| very long text that looks weird | hello world hello world hello world |



================================================
FILE: packages/create-app/template/react-router/content/docs/test.mdx
================================================
---
title: Fumadocs
description: You can just be minimal.
---

## Overview

Fumadocs is a docs framework.



================================================
FILE: packages/create-app/template/tanstack-start/README.md
================================================
This is a Tanstack Start application generated with
[Create Fumadocs](https://github.com/fuma-nama/fumadocs).

Run development server:

```bash
npm run dev
# or
pnpm dev
# or
yarn dev
```



================================================
FILE: packages/create-app/template/tanstack-start/app.config.ts
================================================
import { defineConfig } from '@tanstack/react-start/config';
import tsConfigPaths from 'vite-tsconfig-paths';
import tailwindcss from '@tailwindcss/vite';

export default defineConfig({
  server: {
    hooks: {
      'prerender:routes': async (routes) => {
        const { source } = await import('./lib/source');
        const pages = source.getPages();

        for (const page of pages) {
          routes.add(page.url);
        }
      },
    },
    prerender: {
      routes: ['/'],
      crawlLinks: true,
    },
  },
  vite: {
    build: {
      rollupOptions: {
        // Shiki results in a huge bundle because Rollup tries to bundle every language/theme
        external: ['shiki'],
        // most React.js libraries now include 'use client'
        onwarn(warning, warn) {
          if (warning.code === 'MODULE_LEVEL_DIRECTIVE') {
            return;
          }
          warn(warning);
        },
      },
    },
    plugins: [
      tsConfigPaths({
        projects: ['./tsconfig.json'],
      }),
      tailwindcss(),
    ],
  },
});



================================================
FILE: packages/create-app/template/tanstack-start/example.gitignore
================================================
routeTree.gen.ts
node_modules
.output
.vinxi


================================================
FILE: packages/create-app/template/tanstack-start/tsconfig.json
================================================
{
  "compilerOptions": {
    "jsx": "react-jsx",
    "moduleResolution": "Bundler",
    "lib": ["DOM", "DOM.Iterable", "ESNext"],
    "types": ["node", "vite/client"],
    "module": "ESNext",
    "target": "ESNext",
    "skipLibCheck": true,
    "strictNullChecks": true,
    "paths": {
      "@/*": ["./*"]
    }
  }
}



================================================
FILE: packages/create-app/template/tanstack-start/app/api.ts
================================================
import {
  createStartAPIHandler,
  defaultAPIFileRouteHandler,
} from '@tanstack/react-start/api';

export default createStartAPIHandler(defaultAPIFileRouteHandler);



================================================
FILE: packages/create-app/template/tanstack-start/app/app.css
================================================
@import 'tailwindcss';
@import 'fumadocs-ui/css/neutral.css';
@import 'fumadocs-ui/css/preset.css';



================================================
FILE: packages/create-app/template/tanstack-start/app/client.tsx
================================================
import { hydrateRoot } from 'react-dom/client';
import { StartClient } from '@tanstack/react-start';
import { createRouter } from './router';

const router = createRouter();

hydrateRoot(document, <StartClient router={router} />);



================================================
FILE: packages/create-app/template/tanstack-start/app/router.tsx
================================================
import { createRouter as createTanStackRouter } from '@tanstack/react-router';
import { routeTree } from './routeTree.gen';

export function createRouter() {
  return createTanStackRouter({
    routeTree,
    scrollRestoration: true,
  });
}

declare module '@tanstack/react-router' {
  interface Register {
    router: ReturnType<typeof createRouter>;
  }
}



================================================
FILE: packages/create-app/template/tanstack-start/app/ssr.tsx
================================================
// app/ssr.tsx
import {
  createStartHandler,
  defaultStreamHandler,
} from '@tanstack/react-start/server';
import { getRouterManifest } from '@tanstack/react-start/router-manifest';

import { createRouter } from './router';

export default createStartHandler({
  createRouter,
  getRouterManifest,
})(defaultStreamHandler);



================================================
FILE: packages/create-app/template/tanstack-start/app/routes/__root.tsx
================================================
import { type ReactNode } from 'react';
import {
  createRootRoute,
  HeadContent,
  Outlet,
  Scripts,
} from '@tanstack/react-router';
import { RootProvider } from 'fumadocs-ui/provider/base';
import appCss from '../app.css?url';
import { TanstackProvider } from 'fumadocs-core/framework/tanstack';

export const Route = createRootRoute({
  head: () => ({
    meta: [
      {
        charSet: 'utf-8',
      },
      {
        name: 'viewport',
        content: 'width=device-width, initial-scale=1',
      },
      {
        title: 'Fumadocs on TanStack Start',
      },
    ],
    links: [{ rel: 'stylesheet', href: appCss }],
  }),
  component: RootComponent,
});

function RootComponent() {
  return (
    <RootDocument>
      <Outlet />
    </RootDocument>
  );
}

function RootDocument({ children }: Readonly<{ children: ReactNode }>) {
  return (
    <html suppressHydrationWarning>
      <head>
        <HeadContent />
      </head>
      <body className="flex flex-col min-h-screen">
        <TanstackProvider>
          <RootProvider>{children}</RootProvider>
        </TanstackProvider>
        <Scripts />
      </body>
    </html>
  );
}



================================================
FILE: packages/create-app/template/tanstack-start/app/routes/index.tsx
================================================
import { createFileRoute, Link } from '@tanstack/react-router';
import { HomeLayout } from 'fumadocs-ui/layouts/home';

export const Route = createFileRoute('/')({
  component: Home,
});

function Home() {
  return (
    <HomeLayout
      nav={{
        title: 'Tanstack Start',
      }}
      className="text-center py-32"
    >
      <h1 className="font-medium text-xl mb-4">Fumadocs on Tanstack Start.</h1>
      <Link
        to="/docs/$"
        className="px-3 py-2 rounded-lg bg-fd-primary text-fd-primary-foreground font-medium text-sm mx-auto"
      >
        Open Docs
      </Link>
    </HomeLayout>
  );
}



================================================
FILE: packages/create-app/template/tanstack-start/app/routes/api/search.ts
================================================
import { createAPIFileRoute } from '@tanstack/react-start/api';
import { createSearchAPI } from 'fumadocs-core/search/server';
import { source } from '@/lib/source';
import { structure } from 'fumadocs-core/mdx-plugins';

const server = createSearchAPI('advanced', {
  indexes: source.getPages().map((page) => ({
    id: page.url,
    url: page.url,
    title: page.data.title ?? '',
    description: page.data.description,
    structuredData: structure(page.data.content),
  })),
});

export const APIRoute = createAPIFileRoute('/api/search')({
  GET: ({ request }) => {
    return server.GET(request);
  },
});



================================================
FILE: packages/create-app/template/tanstack-start/app/routes/docs/$.tsx
================================================
import { createFileRoute, notFound } from '@tanstack/react-router';
import { DocsLayout } from 'fumadocs-ui/layouts/docs';
import { source } from '@/lib/source';
import {
  DocsBody,
  DocsDescription,
  DocsPage,
  DocsTitle,
} from 'fumadocs-ui/page';
import { executeMdxSync } from '@fumadocs/mdx-remote/client';
import defaultMdxComponents from 'fumadocs-ui/mdx';
import { createServerFn } from '@tanstack/react-start';
import type { PageTree } from 'fumadocs-core/server';
import { createCompiler } from '@fumadocs/mdx-remote';
import * as path from 'node:path';

export const Route = createFileRoute('/docs/$')({
  component: Page,
  async loader({ params }) {
    const slugs = (params._splat ?? '').split('/');

    return loader({ data: slugs });
  },
});

const compiler = createCompiler({
  development: false,
});

const loader = createServerFn({
  method: 'GET',
})
  .validator((slugs: string[]) => slugs)
  .handler(async ({ data: slugs }) => {
    const page = source.getPage(slugs);
    if (!page) throw notFound();

    const { content, ...rest } = page.data;
    const compiled = await compiler.compileFile({
      path: path.resolve('content/docs', page.file.path),
      value: content,
    });

    return {
      tree: source.pageTree as object,
      ...rest,
      compiled: compiled.toString(),
    };
  });

function Page() {
  const { tree, compiled, ...data } = Route.useLoaderData();
  const { toc, default: MdxContent } = executeMdxSync(compiled);

  return (
    <DocsLayout
      nav={{
        title: 'Tanstack Start',
      }}
      tree={tree as PageTree.Root}
    >
      <DocsPage toc={toc}>
        <DocsTitle>{data.title}</DocsTitle>
        <DocsDescription>{data.title}</DocsDescription>
        <DocsBody>
          <MdxContent components={defaultMdxComponents} />
        </DocsBody>
      </DocsPage>
    </DocsLayout>
  );
}



================================================
FILE: packages/create-app/template/tanstack-start/content/docs/index.mdx
================================================
---
title: Hello World
description: |
  Your first `document`
  You'll love it!
---

Hey there! Fumadocs is a docs framework built for Next.js, but do you know it also works on Tanstack Start?

## Heading

Hello World!

<Cards>
  <Card
    title="Learn more about Tanstack Start"
    href="https://tanstack.com/start"
  />
  <Card title="Learn more about Fumadocs" href="https://fumadocs.vercel.app" />
</Cards>

### CodeBlock

```ts
console.log('Hello World');
```

#### Table

| Head                            | Description                         |
| ------------------------------- | ----------------------------------- |
| `hello`                         | Hello World                         |
| very **important**              | Hey                                 |
| _Surprisingly_                  | Fumadocs                            |
| very long text that looks weird | hello world hello world hello world |



================================================
FILE: packages/create-app/template/tanstack-start/lib/source.ts
================================================
import {
  loader,
  type MetaData,
  type PageData,
  type Source,
  type VirtualFile,
} from 'fumadocs-core/source';
import matter from 'gray-matter';
import * as path from 'node:path';
import { globSync } from 'tinyglobby';
import * as fs from 'node:fs';

let files: [string, string][];

if (typeof import.meta.glob === 'function') {
  files = Object.entries(
    import.meta.glob<true, 'raw'>('/content/docs/**/*', {
      eager: true,
      query: '?raw',
      import: 'default',
    }),
  );
} else {
  files = globSync('content/docs/**/*').map((file) => {
    return [file, fs.readFileSync(file).toString()];
  });
}

const virtualFiles: VirtualFile[] = files.flatMap(([file, content]) => {
  const ext = path.extname(file);
  const virtualPath = path.relative(
    'content/docs',
    path.join(process.cwd(), file),
  );

  if (ext === '.mdx' || ext === '.md') {
    const parsed = matter(content);

    return {
      type: 'page',
      path: virtualPath,
      data: {
        ...parsed.data,
        content: parsed.content,
      },
    };
  }

  if (ext === '.json') {
    return {
      type: 'meta',
      path: virtualPath,
      data: JSON.parse(content),
    };
  }

  return [];
});

export const source = loader({
  source: {
    files: virtualFiles,
  } as Source<{
    pageData: PageData & {
      content: string;
    };
    metaData: MetaData;
  }>,
  baseUrl: '/docs',
});



================================================
FILE: packages/create-app-versions/package.json
================================================
{
  "name": "example-versions",
  "version": "0.0.0",
  "private": true,
  "description": "Used to track dependency versions in create-fumadocs-app",
  "license": "MIT",
  "dependencies": {
    "@content-collections/core": "^0.10.0",
    "@content-collections/mdx": "^0.2.2",
    "@content-collections/next": "^0.2.6",
    "@react-router/dev": "^7.6.3",
    "@react-router/node": "^7.6.3",
    "@react-router/serve": "^7.6.3",
    "@tailwindcss/postcss": "^4.1.11",
    "@tailwindcss/vite": "^4.1.11",
    "@tanstack/react-router": "^1.125.6",
    "@tanstack/react-start": "^1.126.1",
    "@types/mdx": "^2.0.13",
    "@types/node": "24.0.12",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@vitejs/plugin-react": "^4.6.0",
    "gray-matter": "^4.0.3",
    "isbot": "^5.1.28",
    "next": "15.3.5",
    "postcss": "^8.5.6",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-router": "^7.6.3",
    "react-router-devtools": "^5.0.6",
    "shiki": "^3.7.0",
    "tailwindcss": "^4.1.11",
    "tinyglobby": "^0.2.14",
    "typescript": "^5.8.3",
    "vinxi": "^0.5.8",
    "vite": "^7.0.3",
    "vite-tsconfig-paths": "^5.1.4"
  }
}



================================================
FILE: packages/doc-gen/README.md
================================================
# Fumadocs Doc Gen

Remark plugins & Docs Generator utilities.



================================================
FILE: packages/doc-gen/CHANGELOG.md
================================================
# fumadocs-docgen

## 2.1.0

### Minor Changes

- d0f8a15: Enable `remarkNpm` by default, replace `remarkInstall` with it.
- f8d1709: **Redesigned Codeblock Tabs**

  Instead of relying on `Tabs` component, it supports a dedicated tabs component for codeblocks:

  ```tsx
  <CodeBlockTabs>
    <CodeBlockTabsList>
      <CodeBlockTabsTrigger value="value">Name</CodeBlockTabsTrigger>
    </CodeBlockTabsList>
    <CodeBlockTab value="value" asChild>
      <CodeBlock>...</CodeBlock>
    </CodeBlockTab>
  </CodeBlockTabs>
  ```

  The old usage is not deprecated, you can still use them while Fumadocs' remark plugins will generate codeblock tabs using the new way.

## 2.0.1

### Patch Changes

- 1b7bc4b: Add `@types/react` to optional peer dependency to avoid version conflict in monorepos

## 2.0.0

### Major Changes

- 4642a86: **Remove `typescriptGenerator` from `fumadocs-docgen`**

  **why:** Move dedicated parts to `fumadocs-typescript`, so all docs generation features for TypeScript can be put together in a single module.

  **migrate:** Use `fumadocs-typescript` We made a new `remarkAutoTypeTable` remark plugin generating the type table but with a different syntax:

  ```mdx
  <auto-type-table path="./my-file.ts" name="MyInterface" />
  ```

  Instead of:

  ````mdx
  ```json doc-gen:typescript
  {
    "file": "./my-file.ts",
    "name": "MyInterface"
  }
  ```
  ````

- 4642a86: **Move `remarkTypeScriptToJavaScript` plugin to `fumadocs-docgen/remark-ts2js`.**

  **why:** Fix existing problems with `oxc-transform`.

  **migrate:**

  Import it like:

  ```ts
  import { remarkTypeScriptToJavaScript } from 'fumadocs-docgen/remark-ts2js';
  ```

  instead of importing from `fumadocs-docgen`.

## 1.3.8

### Patch Changes

- Updated dependencies [7608f4e]
  - fumadocs-typescript@3.0.4

## 1.3.7

### Patch Changes

- 260128f: Add `remarkShow` plugin
  - fumadocs-typescript@3.0.3

## 1.3.6

### Patch Changes

- a8e9e1f: Bump deps
  - fumadocs-typescript@3.0.3

## 1.3.5

### Patch Changes

- b9601fb: Update Shiki
- Updated dependencies [b9601fb]
  - fumadocs-typescript@3.0.3

## 1.3.4

### Patch Changes

- 6d3c7d2: Use `oxc` for `ts2js` remark plugins
  - fumadocs-typescript@3.0.2

## 1.3.3

### Patch Changes

- 4ab0de6: Support TS2JS remark plugin [experimental]
  - fumadocs-typescript@3.0.2

## 1.3.2

### Patch Changes

- Updated dependencies [c042eb7]
  - fumadocs-typescript@3.0.2

## 1.3.1

### Patch Changes

- Updated dependencies [d6d290c]
  - fumadocs-typescript@3.0.1

## 1.3.0

### Minor Changes

- f9adba6: Support inline type syntax in `AutoTypeTable` `type` prop

### Patch Changes

- be820c4: Bump deps
- Updated dependencies [f9adba6]
- Updated dependencies [f9adba6]
- Updated dependencies [f9adba6]
- Updated dependencies [be820c4]
  - fumadocs-typescript@3.0.0

## 1.2.0

### Minor Changes

- 3a2c837: Improve caching

### Patch Changes

- 0c251e5: Bump deps
- Updated dependencies [0c251e5]
- Updated dependencies [3a2c837]
  - fumadocs-typescript@2.1.0

## 1.1.0

### Minor Changes

- 979896f: Support generating Tabs with `persist` enabled (Fumadocs UI only)

### Patch Changes

- fumadocs-typescript@2.0.1

## 1.0.2

### Patch Changes

- 8ef2b68: Bump deps
- Updated dependencies [8ef2b68]
  - fumadocs-typescript@2.0.1

## 1.0.1

### Patch Changes

- Updated dependencies [f75287d]
  - fumadocs-typescript@2.0.0



================================================
FILE: packages/doc-gen/eslint.config.mjs
================================================
import library from 'eslint-config-custom/library.js';

export default [
  ...library,
  {
    ignores: ['dist/', 'node_modules/', '*.test.ts', '**/test/fixtures/'],
  },
];



================================================
FILE: packages/doc-gen/package.json
================================================
{
  "name": "fumadocs-docgen",
  "version": "2.1.0",
  "description": "Useful remark utilities and plugins",
  "keywords": [
    "NextJs",
    "fumadocs",
    "remark",
    "mdx",
    "Docs"
  ],
  "homepage": "https://fumadocs.vercel.app",
  "repository": "github:fuma-nama/fumadocs",
  "license": "MIT",
  "author": "Fuma Nama",
  "type": "module",
  "main": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "files": [
    "dist/*"
  ],
  "exports": {
    ".": {
      "import": "./dist/index.js",
      "types": "./dist/index.d.ts"
    },
    "./remark-ts2js": {
      "import": "./dist/remark-ts2js.js",
      "types": "./dist/remark-ts2js.d.ts"
    }
  },
  "scripts": {
    "build": "tsup",
    "clean": "rimraf dist",
    "dev": "tsup --watch",
    "lint": "eslint .",
    "types:check": "tsc --noEmit"
  },
  "dependencies": {
    "estree-util-to-js": "^2.0.0",
    "estree-util-value-to-estree": "^3.4.0",
    "npm-to-yarn": "^3.0.1",
    "oxc-transform": "^0.76.0",
    "unist-util-visit": "^5.0.0",
    "zod": "^4.0.2"
  },
  "devDependencies": {
    "@mdx-js/mdx": "^3.1.0",
    "@types/estree": "^1.0.8",
    "@types/hast": "^3.0.4",
    "@types/mdast": "^4.0.3",
    "@types/node": "24.0.12",
    "eslint-config-custom": "workspace:*",
    "mdast-util-mdx-jsx": "^3.2.0",
    "remark": "^15.0.0",
    "tsconfig": "workspace:*",
    "typescript": "^5.8.3",
    "unified": "^11.0.5",
    "vfile": "^6.0.3"
  },
  "publishConfig": {
    "access": "public"
  }
}



================================================
FILE: packages/doc-gen/tsconfig.json
================================================
{
  "extends": "tsconfig/base.json",
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    },
    "noEmit": true,
    "lib": ["ESNext"],
    "module": "ESNext",
    "target": "ES2020"
  },
  "exclude": ["node_modules", "dist", "eslint.config.mjs"]
}



================================================
FILE: packages/doc-gen/tsup.config.ts
================================================
import { defineConfig } from 'tsup';

export default defineConfig({
  external: [],
  dts: true,
  target: 'es6',
  format: 'esm',
  entry: ['src/index.ts', 'src/remark-ts2js.ts'],
});



================================================
FILE: packages/doc-gen/vitest.config.ts
================================================
import { defineProject } from 'vitest/config';

export default defineProject({
  resolve: {
    alias: {
      '@/': new URL('./src/', import.meta.url).pathname,
    },
  },
});



================================================
FILE: packages/doc-gen/src/file-generator.ts
================================================
import * as fs from 'node:fs/promises';
import * as path from 'node:path';
import type { Code, Paragraph } from 'mdast';
import { z } from 'zod';
import type { DocGenerator } from './remark-docgen';

export interface FileGeneratorOptions {
  /** @defaultValue true */
  trim?: boolean;

  /**
   * Resolve reference files relative to `vfile.path`
   *
   * @defaultValue false
   */
  relative?: boolean;
}

export type FileGeneratorInput = z.output<typeof fileGeneratorSchema>;

export const fileGeneratorSchema = z.object({
  file: z.string(),

  /**
   * Turn file content into a code block
   *
   * @defaultValue false
   */
  codeblock: z
    .union([
      z.object({
        lang: z.string().optional(),
        meta: z.string().optional(),
      }),
      z.boolean(),
    ])
    .default(false),
});

export function fileGenerator({
  relative = false,
  trim = true,
}: FileGeneratorOptions = {}): DocGenerator {
  return {
    name: 'file',
    async run(input, ctx) {
      const { file, codeblock = false } = fileGeneratorSchema.parse(input);

      const dest = relative
        ? path.resolve(ctx.cwd, path.dirname(ctx.path), file)
        : path.resolve(ctx.cwd, file);
      let value = await fs.readFile(dest).then((res) => res.toString());
      if (trim) value = value.trim();

      if (codeblock === false) {
        return {
          type: 'paragraph',
          children: [{ type: 'text', value }],
        } as Paragraph;
      }

      const codeOptions = codeblock === true ? {} : codeblock;

      return {
        type: 'code',
        lang: codeOptions.lang ?? path.extname(dest).slice(1),
        meta: codeOptions.meta,
        value,
      } as Code;
    },
  };
}



================================================
FILE: packages/doc-gen/src/index.ts
================================================
export * from './remark-docgen';
export * from './utils';
export * from './file-generator';
export * from './remark-install';
export * from './remark-show';



================================================
FILE: packages/doc-gen/src/remark-docgen.ts
================================================
import { type BlockContent, type Code, type Root } from 'mdast';
import { type Transformer } from 'unified';
import { visit } from 'unist-util-visit';
import type { VFile } from 'vfile';

type Awaitable<T> = T | Promise<T>;

export interface DocGenerator {
  name: string;

  /**
   * Transform codeblocks to another mdast element
   */
  run: (
    input: unknown,
    context: Context,
  ) => Awaitable<object | object[] | undefined>;

  onFile?: (tree: Root, file: VFile) => void;
}

interface Context {
  node: Code;
  path: string;
  cwd: string;
}

export interface RemarkDocGenOptions {
  generators?: DocGenerator[];
}

const metaRegex = /doc-gen:(?<name>.+)/;

export function remarkDocGen({
  generators = [],
}: RemarkDocGenOptions): Transformer<Root, Root> {
  return async (tree, file) => {
    generators.forEach((gen) => gen.onFile?.(tree, file));
    const queue: Promise<void>[] = [];

    visit(tree, 'code', (code, _, parent) => {
      if (code.lang !== 'json' || !code.meta || !parent) return;

      const matches = metaRegex.exec(code.meta);
      if (!matches) return;

      const name = matches[1];
      const gen = generators.find((g) => g.name === name);

      const run = async (): Promise<void> => {
        const result = await gen?.run(JSON.parse(code.value), {
          cwd: file.cwd,
          path: file.path,
          node: code,
        });
        const index = parent.children.findIndex((c) => c === code);

        if (result && index !== -1) {
          const items = Array.isArray(result)
            ? (result as BlockContent[])
            : [result as BlockContent];

          parent.children.splice(index, 1, ...items);
        }
      };

      queue.push(run());
    });

    await Promise.all(queue);
  };
}



================================================
FILE: packages/doc-gen/src/remark-install.ts
================================================
import type { Code, Root } from 'mdast';
import type { Transformer } from 'unified';
import { visit } from 'unist-util-visit';
import convert from 'npm-to-yarn';
import { createElement, expressionToAttribute } from './utils';

interface PackageManager {
  name: string;

  /**
   * Convert from npm to another package manager
   */
  command: (command: string) => string;
}

export type RemarkInstallOptions = {
  Tabs?: string;
  Tab?: string;

  /**
   * Persist Tab value (Fumadocs UI only)
   *
   * @defaultValue false
   */
  persist?:
    | {
        id: string;
      }
    | false;

  packageManagers?: PackageManager[];
};

/**
 * It generates the following structure from a code block with `package-install` as language
 *
 * @example
 * ```tsx
 * <Tabs items={["npm", "pnpm", "yarn", "bun"]}>
 *  <Tab value="pnpm">...</Tab>
 *  ...
 * </Tabs>
 * ```
 *
 * @deprecated Use `remarkNpm` from `fumadocs-core/mdx-plugins` instead, it's a drop-in replacement.
 */
export function remarkInstall({
  Tab = 'Tab',
  Tabs = 'Tabs',
  persist = false,
  packageManagers = [
    { command: (cmd) => convert(cmd, 'npm'), name: 'npm' },
    { command: (cmd) => convert(cmd, 'pnpm'), name: 'pnpm' },
    { command: (cmd) => convert(cmd, 'yarn'), name: 'yarn' },
    { command: (cmd) => convert(cmd, 'bun'), name: 'bun' },
  ],
}: RemarkInstallOptions = {}): Transformer<Root, Root> {
  return (tree) => {
    visit(tree, 'code', (node) => {
      if (node.lang !== 'package-install') return 'skip';

      const value =
        node.value.startsWith('npm') || node.value.startsWith('npx')
          ? node.value
          : `npm install ${node.value}`;

      const insert = createElement(
        Tabs,
        [
          ...(typeof persist === 'object'
            ? [
                {
                  type: 'mdxJsxAttribute',
                  name: 'groupId',
                  value: persist.id,
                },
                {
                  type: 'mdxJsxAttribute',
                  name: 'persist',
                  value: null,
                },
              ]
            : []),
          expressionToAttribute('items', {
            type: 'ArrayExpression',
            elements: packageManagers.map(({ name }) => ({
              type: 'Literal',
              value: name,
            })),
          }),
        ],
        packageManagers.map(({ command, name }) => ({
          type: 'mdxJsxFlowElement',
          name: Tab,
          attributes: [{ type: 'mdxJsxAttribute', name: 'value', value: name }],
          children: [
            {
              type: 'code',
              lang: 'bash',
              meta: node.meta,
              value: command(value),
            } satisfies Code,
          ],
        })),
      );

      Object.assign(node, insert);
    });
  };
}



================================================
FILE: packages/doc-gen/src/remark-show.ts
================================================
/// <reference types="mdast-util-mdx-jsx" />
import type { Transformer } from 'unified';
import type { Root, RootContent } from 'mdast';
import { visit } from 'unist-util-visit';

export function remarkShow(options?: {
  variables?: Record<string, unknown>;
}): Transformer<Root, Root> {
  const variables = options?.variables ?? {};

  return async (tree, file) => {
    const { toJs } = await import('estree-util-to-js');
    const tasks: Promise<void>[] = [];

    visit(tree, 'mdxJsxFlowElement', (node) => {
      if (node.name !== 'show') return;

      for (const attr of node.attributes) {
        if (attr.type !== 'mdxJsxAttribute' || attr.name !== 'on') continue;

        if (
          !attr.value ||
          typeof attr.value !== 'object' ||
          !attr.value.data?.estree
        )
          // skip invalid <show> components and its children
          return 'skip';

        const js = toJs(attr.value.data.estree);

        const callback = new Function(
          ...Object.keys(variables),
          `return ${js.value}`,
        )(...Object.values(variables));

        tasks.push(
          (async () => {
            const value =
              typeof callback === 'function' ? await callback(file) : callback;

            Object.assign(node, {
              type: 'mdxJsxFlowElement',
              name: null,
              attributes: [],
              children: value === true ? node.children : [],
            } satisfies RootContent);
          })(),
        );

        return 'skip';
      }
    });

    await Promise.all(tasks);
  };
}



================================================
FILE: packages/doc-gen/src/remark-ts2js.ts
================================================
import { type Transformer } from 'unified';
import { type Code, Root } from 'mdast';
import { visit } from 'unist-util-visit';
import { createElement, expressionToAttribute } from '@/utils';

export interface TypeScriptToJavaScriptOptions {
  /**
   * Persist Tab value (Fumadocs UI only)
   *
   * @defaultValue false
   */
  persist?:
    | {
        id: string;
      }
    | false;

  /**
   * Transform all TypeScript codeblocks by default, without a trigger
   */
  disableTrigger?: boolean;

  Tabs?: string;
  Tab?: string;
}

/**
 * A remark plugin to transform TypeScript codeblocks into two tabs of codeblocks with its JS variant.
 *
 * Add `ts2js` to enable transformation:
 * ````md
 * ```tsx ts2js
 * import { ReactNode } from "react";
 *
 * export default function Layout({ children }: { children: ReactNode }) {
 *     return <div>{children}</div>
 * }
 * ```
 * ````
 */
export function remarkTypeScriptToJavaScript({
  persist = false,
  disableTrigger = false,
  Tab = 'Tab',
  Tabs = 'Tabs',
}: TypeScriptToJavaScriptOptions = {}): Transformer<Root> {
  return async (tree, file) => {
    const oxc = await import('oxc-transform');

    visit(tree, 'code', (node) => {
      if (node.lang !== 'ts' && node.lang !== 'tsx') return;
      if (!disableTrigger && !node.meta?.includes('ts2js')) return;

      const result = oxc.transform(
        `${file.path ?? 'test'}.${node.lang}`,
        node.value,
        {
          sourcemap: false,
          jsx: 'preserve',
        },
      );

      const insert = createElement(
        Tabs,
        [
          ...(typeof persist === 'object'
            ? [
                {
                  type: 'mdxJsxAttribute',
                  name: 'groupId',
                  value: persist.id,
                },
                {
                  type: 'mdxJsxAttribute',
                  name: 'persist',
                  value: null,
                },
              ]
            : []),
          expressionToAttribute('items', {
            type: 'ArrayExpression',
            elements: ['TypeScript', 'JavaScript'].map((name) => ({
              type: 'Literal',
              value: name,
            })),
          }),
        ],
        [
          {
            type: 'mdxJsxFlowElement',
            name: Tab,
            attributes: [
              {
                type: 'mdxJsxAttribute',
                name: 'value',
                value: 'TypeScript',
              },
            ],
            children: [
              {
                type: 'code',
                lang: node.lang,
                meta: node.meta,
                value: node.value,
              } satisfies Code,
            ],
          },
          {
            type: 'mdxJsxFlowElement',
            name: Tab,
            attributes: [
              {
                type: 'mdxJsxAttribute',
                name: 'value',
                value: 'JavaScript',
              },
            ],
            children: [
              {
                type: 'code',
                lang: 'jsx',
                meta: node.meta,
                value: result.code,
              } satisfies Code,
            ],
          },
        ],
      );

      Object.assign(node, insert);
      return 'skip';
    });
  };
}



================================================
FILE: packages/doc-gen/src/utils.ts
================================================
import type { Expression, Program } from 'estree';
import type { MdxJsxAttribute } from 'mdast-util-mdx-jsx';

export function createElement(
  name: string,
  attributes: object[],
  children?: unknown,
): object {
  const element: Record<string, unknown> = {
    type: 'mdxJsxFlowElement',
    name,
    attributes,
  };

  if (children) element.children = children;

  return element;
}

export function expressionToAttribute(
  key: string,
  value: Expression,
): MdxJsxAttribute {
  return {
    type: 'mdxJsxAttribute',
    name: key,
    value: {
      type: 'mdxJsxAttributeValueExpression',
      value: '',
      data: {
        estree: {
          type: 'Program',
          body: [
            {
              type: 'ExpressionStatement',
              expression: value,
            },
          ],
        } as Program,
      },
    },
  };
}



================================================
FILE: packages/doc-gen/test/index.test.ts
================================================
import { expect, test } from 'vitest';
import { remarkDocGen } from '@/remark-docgen';
import { createProcessor } from '@mdx-js/mdx';
import { fileGenerator } from '@/file-generator';
import * as path from 'node:path';
import { fileURLToPath } from 'node:url';
import { remarkInstall } from '@/remark-install';
import { remark } from 'remark';
import { remarkTypeScriptToJavaScript } from '@/remark-ts2js';
import { readFile } from 'node:fs/promises';
import { remarkShow } from '@/remark-show';

const cwd = path.dirname(fileURLToPath(import.meta.url));

test('File Generator', async () => {
  const content = await readFile(path.resolve(cwd, './fixtures/file-gen.md'));

  const processor = remark().use(remarkDocGen, {
    generators: [fileGenerator()],
  });

  const result = await processor.process({ cwd, value: content });

  await expect(result.toString()).toMatchFileSnapshot(
    path.resolve(cwd, './fixtures/file-gen.output.md'),
  );
});

test('File Generator - Relative', async () => {
  const file = path.resolve(cwd, './fixtures/file-gen.relative.md');
  const content = await readFile(file);

  const result = await remark()
    .use(remarkDocGen, {
      generators: [fileGenerator({ relative: true })],
    })
    .process({ path: file, value: content, cwd });

  await expect(result.toString()).toMatchFileSnapshot(
    path.resolve(cwd, './fixtures/file-gen.relative.output.md'),
  );
});

test('Remark Install', async () => {
  const file = path.resolve(cwd, './fixtures/remark-install.md');
  const content = await readFile(file);

  const result = await createProcessor({
    remarkPlugins: [remarkInstall],
    jsx: true,
  }).process(content);

  await expect(result.toString()).toMatchFileSnapshot(
    path.resolve(cwd, './fixtures/remark-install.output.jsx'),
  );
});

test('Remark Install', async () => {
  const file = path.resolve(cwd, './fixtures/remark-install-persist.md');
  const content = await readFile(file);

  const result = await createProcessor({
    jsx: true,
    remarkPlugins: [
      [
        remarkInstall,
        {
          persist: {
            id: 'package_install',
          },
        },
      ],
    ],
  }).process(content);

  await expect(result.toString()).toMatchFileSnapshot(
    path.resolve(cwd, './fixtures/remark-install-persist.output.jsx'),
  );
});

test('TS to JS', async () => {
  const file = path.resolve(cwd, './fixtures/ts2js.md');
  const content = await readFile(file);

  const result = await createProcessor({
    remarkPlugins: [remarkTypeScriptToJavaScript],
    jsx: true,
  }).process(content);

  await expect(result.toString()).toMatchFileSnapshot(
    path.resolve(cwd, './fixtures/ts2js.output.jsx'),
  );
});

test('Remark Show', async () => {
  const file = path.resolve(cwd, './fixtures/remark-show.mdx');
  const content = await readFile(file);

  const result = await createProcessor({
    remarkPlugins: [
      [
        remarkShow,
        {
          variables: {
            async test() {
              return false;
            },
          },
        },
      ],
    ],
    jsx: true,
  }).process(content);

  await expect(result.toString()).toMatchFileSnapshot(
    path.resolve(cwd, './fixtures/remark-show.output.jsx'),
  );
});



================================================
FILE: packages/doc-gen/test/fixtures/file-gen.md
================================================
## Hello World

```json doc-gen:file
{
  "file": "./fixtures/sample.txt"
}
```

## Code Block

```json doc-gen:file
{
  "file": "./fixtures/sample.ts",
  "codeblock": true
}
```

## Code Block with config

```json doc-gen:file
{
  "file": "./fixtures/sample.txt",
  "codeblock": {
    "lang": "md",
    "meta": "title=\"Hello World\""
  }
}
```



================================================
FILE: packages/doc-gen/test/fixtures/file-gen.output.md
================================================
## Hello World

Hello World

This is some text

## Code Block

```ts
export interface Test1 {
  name: string;
  description: string;
  isGood: boolean;
}
```

## Code Block with config

```md title="Hello World"
Hello World

This is some text
```



================================================
FILE: packages/doc-gen/test/fixtures/file-gen.relative.md
================================================
## Hello World

```json doc-gen:file
{
  "file": "./sample.txt",
  "codeblock": true
}
```



================================================
FILE: packages/doc-gen/test/fixtures/file-gen.relative.output.md
================================================
## Hello World

```txt
Hello World

This is some text
```



================================================
FILE: packages/doc-gen/test/fixtures/remark-install-persist.md
================================================
```package-install
npm i next -D
```



================================================
FILE: packages/doc-gen/test/fixtures/remark-install-persist.output.jsx
================================================
/*@jsxRuntime automatic*/
/*@jsxImportSource react*/
function _createMdxContent(props) {
  const _components = {
    code: "code",
    pre: "pre",
    ...props.components
  }, {Tab, Tabs} = _components;
  if (!Tab) _missingMdxReference("Tab", true);
  if (!Tabs) _missingMdxReference("Tabs", true);
  return <Tabs groupId="package_install" persist items={["npm", "pnpm", "yarn", "bun"]}><Tab value="npm"><_components.pre><_components.code className="language-bash">{"npm i next -D\n"}</_components.code></_components.pre></Tab><Tab value="pnpm"><_components.pre><_components.code className="language-bash">{"pnpm add next -D\n"}</_components.code></_components.pre></Tab><Tab value="yarn"><_components.pre><_components.code className="language-bash">{"yarn add next --dev\n"}</_components.code></_components.pre></Tab><Tab value="bun"><_components.pre><_components.code className="language-bash">{"bun add next --dev\n"}</_components.code></_components.pre></Tab></Tabs>;
}
export default function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = props.components || ({});
  return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props} /></MDXLayout> : _createMdxContent(props);
}
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}



================================================
FILE: packages/doc-gen/test/fixtures/remark-install.md
================================================
```package-install
next
```



================================================
FILE: packages/doc-gen/test/fixtures/remark-install.output.jsx
================================================
/*@jsxRuntime automatic*/
/*@jsxImportSource react*/
function _createMdxContent(props) {
  const _components = {
    code: "code",
    pre: "pre",
    ...props.components
  }, {Tab, Tabs} = _components;
  if (!Tab) _missingMdxReference("Tab", true);
  if (!Tabs) _missingMdxReference("Tabs", true);
  return <Tabs items={["npm", "pnpm", "yarn", "bun"]}><Tab value="npm"><_components.pre><_components.code className="language-bash">{"npm install next\n"}</_components.code></_components.pre></Tab><Tab value="pnpm"><_components.pre><_components.code className="language-bash">{"pnpm add next\n"}</_components.code></_components.pre></Tab><Tab value="yarn"><_components.pre><_components.code className="language-bash">{"yarn add next\n"}</_components.code></_components.pre></Tab><Tab value="bun"><_components.pre><_components.code className="language-bash">{"bun add next\n"}</_components.code></_components.pre></Tab></Tabs>;
}
export default function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = props.components || ({});
  return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props} /></MDXLayout> : _createMdxContent(props);
}
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}



================================================
FILE: packages/doc-gen/test/fixtures/remark-show.mdx
================================================
<show on={true}>

    ## Hello World

    ```ts
    console.log("Goodbye")
    ```

</show>

<show on={() => test()}>

    ## Test

    ```ts
    console.log("Test")
    ```

</show>



================================================
FILE: packages/doc-gen/test/fixtures/remark-show.output.jsx
================================================
/*@jsxRuntime automatic*/
/*@jsxImportSource react*/
function _createMdxContent(props) {
  const _components = {
    code: "code",
    h2: "h2",
    pre: "pre",
    ...props.components
  };
  return <><><_components.h2>{"Hello World"}</_components.h2><_components.pre><_components.code className="language-ts">{"console.log(\"Goodbye\")\n"}</_components.code></_components.pre></>{"\n"}<></></>;
}
export default function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = props.components || ({});
  return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props} /></MDXLayout> : _createMdxContent(props);
}



================================================
FILE: packages/doc-gen/test/fixtures/sample.ts
================================================
export interface Test1 {
  name: string;
  description: string;
  isGood: boolean;
}



================================================
FILE: packages/doc-gen/test/fixtures/sample.txt
================================================
Hello World

This is some text


================================================
FILE: packages/doc-gen/test/fixtures/ts2js.md
================================================
```tsx ts2js
import { ReactNode } from 'react';

export default function Layout({ children }: { children: ReactNode }) {
  const v: string = 'hello world' as any;

  return (
    <div>
      {children} {v}
    </div>
  );
}
```



================================================
FILE: packages/doc-gen/test/fixtures/ts2js.output.jsx
================================================
/*@jsxRuntime automatic*/
/*@jsxImportSource react*/
function _createMdxContent(props) {
  const _components = {
    code: "code",
    pre: "pre",
    ...props.components
  }, {Tab, Tabs} = _components;
  if (!Tab) _missingMdxReference("Tab", true);
  if (!Tabs) _missingMdxReference("Tabs", true);
  return <Tabs items={["TypeScript", "JavaScript"]}><Tab value="TypeScript"><_components.pre><_components.code className="language-tsx">{"import { ReactNode } from 'react';\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  const v: string = 'hello world' as any;\n\n  return (\n    <div>\n      {children} {v}\n    </div>\n  );\n}\n"}</_components.code></_components.pre></Tab><Tab value="JavaScript"><_components.pre><_components.code className="language-jsx">{"export default function Layout({ children }) {\n\tconst v = \"hello world\";\n\treturn <div>\n      {children} {v}\n    </div>;\n}\n\n"}</_components.code></_components.pre></Tab></Tabs>;
}
export default function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = props.components || ({});
  return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props} /></MDXLayout> : _createMdxContent(props);
}
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}



================================================
FILE: packages/eslint-config-custom/library.js
================================================
import js from '@eslint/js';
import tseslint from 'typescript-eslint';

export default [
  {
    ignores: ['node_modules/', 'dist/'],
  },
  js.configs.recommended,
  ...tseslint.configs.recommended,
  {
    rules: {
      'no-console': 'off',

      'import/no-extraneous-dependencies': 'off',
      'import/no-default-export': 'off',

      // handled by typescript eslint
      'import/default': 'off',
      'import/export': 'off',
      'import/namespace': 'off',
      'import/no-unresolved': 'off',
      '@typescript-eslint/no-unused-vars': [
        'error',
        {
          argsIgnorePattern: '^_',
          varsIgnorePattern: '^_',
          caughtErrorsIgnorePattern: '^_',
        },
      ],
    },
  },
];



================================================
FILE: packages/eslint-config-custom/next.js
================================================
import js from '@eslint/js';
import ts from 'typescript-eslint';
import reactPlugin from 'eslint-plugin-react';
import hooksPlugin from 'eslint-plugin-react-hooks';

export default [
  {
    ignores: ['node_modules/', 'dist/'],
  },
  js.configs.recommended,
  ...ts.configs.recommended,
  reactPlugin.configs.flat.recommended,
  reactPlugin.configs.flat['jsx-runtime'],
  {
    plugins: {
      'react-hooks': hooksPlugin,
    },
    settings: {
      react: {
        version: '18.3.1',
      },
      tailwindcss: {
        config: './tailwind.config.js',
        callees: ['clsx', 'cva', 'cn'],
      },
    },
    rules: {
      ...hooksPlugin.configs.recommended.rules,
      'import/no-extraneous-dependencies': 'off',
      // Next.js routes
      'import/no-default-export': 'off',

      // handled by typescript eslint
      'react/prop-types': 'off',
      'import/default': 'off',
      'import/export': 'off',
      'import/namespace': 'off',
      'import/no-unresolved': 'off',

      '@next/next/no-html-link-for-pages': 'off',
      '@typescript-eslint/no-unused-vars': [
        'error',
        {
          argsIgnorePattern: '^_',
          varsIgnorePattern: '^_',
          caughtErrorsIgnorePattern: '^_',
        },
      ],
    },
  },
];



================================================
FILE: packages/eslint-config-custom/package.json
================================================
{
  "name": "eslint-config-custom",
  "version": "0.0.0",
  "type": "module",
  "private": true,
  "license": "MIT"
}



================================================
FILE: packages/mdx/bin.js
================================================
#!/usr/bin/env node

import { postInstall } from './dist/next/index.js';

void postInstall(process.argv[2], process.argv[3]);



================================================
FILE: packages/mdx/CHANGELOG.md
================================================
# next-docs-mdx

## 11.6.10

### Patch Changes

- d0f8a15: Enable `remarkNpm` by default, replace `remarkInstall` with it.
- Updated dependencies [d0f8a15]
- Updated dependencies [84918b8]
- Updated dependencies [f8d1709]
  - fumadocs-core@15.6.0
  - @fumadocs/mdx-remote@1.3.4

## 11.6.9

### Patch Changes

- cd86f58: Hotfix Windows EOL being ignored
- Updated dependencies [7d1ac21]
  - fumadocs-core@15.5.3

## 11.6.8

### Patch Changes

- 7a45921: Add `absolutePath` and `path` properties to pages, mark `file` as deprecated
- 1b7bc4b: Add `@types/react` to optional peer dependency to avoid version conflict in monorepos
- 14e267b: Use custom util to parse frontmatter
- Updated dependencies [7a45921]
- Updated dependencies [1b7bc4b]
  - fumadocs-core@15.5.2
  - @fumadocs/mdx-remote@1.3.3

## 11.6.7

### Patch Changes

- a5c283f: Support `outDir` option on `createMDX()`
- Updated dependencies [b4916d2]
- Updated dependencies [8738b9c]
- Updated dependencies [a66886b]
  - fumadocs-core@15.5.1

## 11.6.6

### Patch Changes

- cd42e78: Support last modified time on Async Mode
- Updated dependencies [1b999eb]
- Updated dependencies [961b67e]
- Updated dependencies [7d78bc5]
  - fumadocs-core@15.4.0

## 11.6.5

### Patch Changes

- a6c909b: Removed unused devDependencies and migrated from `fast-glob` to `tinyglobby`
- Updated dependencies [a6c909b]
  - @fumadocs/mdx-remote@1.3.2
  - fumadocs-core@15.3.4

## 11.6.4

### Patch Changes

- 4ae7b4a: Support MDX in codeblock tab value
- Updated dependencies [4ae7b4a]
  - @fumadocs/mdx-remote@1.3.1
  - fumadocs-core@15.3.3

## 11.6.3

### Patch Changes

- 4de7fe7: Fix `meta.{locale}` file being excluded from `defineDocs`
- Updated dependencies [c05dc03]
  - fumadocs-core@15.3.0

## 11.6.2

### Patch Changes

- 16c7566: Improve error handling logic on parsing meta entries
- 7b89faa: Add `page.data.content` to sync mode
  - fumadocs-core@15.2.13

## 11.6.1

### Patch Changes

- 434ccb2: Improve performance
  - fumadocs-core@15.2.9

## 11.6.0

### Minor Changes

- 7fcf612: Require Next.js 15.3.0 or above

### Patch Changes

- Updated dependencies [ec85a6c]
- Updated dependencies [e1a61bf]
  - fumadocs-core@15.2.7

## 11.5.8

### Patch Changes

- 6c5e47a: add default types for collection without schema
- Updated dependencies [1057957]
  - fumadocs-core@15.2.4

## 11.5.7

### Patch Changes

- 5163e92: Support reusing codeblocks in `<include>`
- Updated dependencies [c5add28]
- Updated dependencies [6493817]
- Updated dependencies [f3cde4f]
- Updated dependencies [7c8a690]
- Updated dependencies [b812457]
  - fumadocs-core@15.1.1
  - @fumadocs/mdx-remote@1.2.1

## 11.5.6

### Patch Changes

- 927ee8b: Fix hot reload
  - fumadocs-core@15.0.9

## 11.5.5

### Patch Changes

- e6df8aa: Improve performance
  - fumadocs-core@15.0.8

## 11.5.4

### Patch Changes

- fc5d7c0: Compile Meta files into inline JSON objects
- Updated dependencies [5deaf40]
  - fumadocs-core@15.0.7

## 11.5.3

### Patch Changes

- 65ae933: Fix dependencies

## 11.5.2

### Patch Changes

- c571417: Improve performance
- be3acf4: Improve types
  - fumadocs-core@15.0.5

## 11.5.1

### Patch Changes

- 3730739: Fix types errors

## 11.5.0

### Minor Changes

- 233a2d1: Support Standard Schema for collection `schema`
- 432c7bd: Support `defineDocs` without re-exporting `docs` and `meta` collections

### Patch Changes

- Updated dependencies [69f20cb]
  - @fumadocs/mdx-remote@1.2.0
  - fumadocs-core@15.0.3

## 11.4.1

### Patch Changes

- a8e9e1f: Bump deps
  - fumadocs-core@15.0.2

## 11.4.0

### Minor Changes

- 421166a: Improve performance, remove unused imports

### Patch Changes

- 421166a: Fix Fumadocs 14 compatibility issues
  - fumadocs-core@15.0.1

## 11.3.2

### Patch Changes

- a89d6e0: Support Fumadocs v15
- d6781cc: Fix incorrect line number with frontmatter on dev mode
- Updated dependencies [5b8cca8]
- Updated dependencies [a763058]
- Updated dependencies [581f4a5]
  - fumadocs-core@15.0.0

## 11.3.1

### Patch Changes

- 69bd4fe: Fix nested references for `<include />`
- Updated dependencies [bb73a72]
- Updated dependencies [69bd4fe]
  - fumadocs-core@14.7.4

## 11.3.0

### Minor Changes

- a4eb326: Deprecate `generateManifest` option: use a route handler to export build time information

### Patch Changes

- 7cc9f1f: Support CommonJs usage temporarily

## 11.2.3

### Patch Changes

- 0a5b08c: Fix alias imports
- Updated dependencies [72dc093]
  - fumadocs-core@14.7.1

## 11.2.2

### Patch Changes

- 97ed36c: Improve default settings
- Updated dependencies [97ed36c]
  - fumadocs-core@14.7.0

## 11.2.1

### Patch Changes

- 3445182: Fix `include` hot-reload issues
- Updated dependencies [b71064a]
  - fumadocs-core@14.6.4

## 11.2.0

### Minor Changes

- bd0a140: Support reusing content with `include` tag

### Patch Changes

- fumadocs-core@14.6.3

## 11.1.2

### Patch Changes

- fe36593: Fix global config types

## 11.1.1

### Patch Changes

- 164b9e6: Fix non-absolute `dir` option
- Updated dependencies [1573d63]
  - fumadocs-core@14.1.1

## 11.1.0

### Minor Changes

- 28a9c3c: Migrate loaders to ESM only

## 11.0.0

### Major Changes

- e094284: **Require Fumadocs v14**

### Patch Changes

- fumadocs-core@14.0.1

## 10.1.0

### Minor Changes

- 5cef1f1: Move `dir` option from `defineDocs`
- e1ee822: Support hast nodes in `toc` variable
- df9e0e1: Support `async` output mode

### Patch Changes

- 9a964ca: expose `start` function from loader
- e612f2a: Make compatible with Next.js 15
- be820c4: Bump deps
- Updated dependencies [e45bc67]
- Updated dependencies [d9e908e]
- Updated dependencies [d9e908e]
- Updated dependencies [f949520]
- Updated dependencies [9a0b09f]
- Updated dependencies [9a0b09f]
- Updated dependencies [367f4c3]
- Updated dependencies [e1ee822]
- Updated dependencies [e612f2a]
- Updated dependencies [9a0b09f]
- Updated dependencies [d9e908e]
- Updated dependencies [8ef00dc]
- Updated dependencies [979e301]
- Updated dependencies [d9e908e]
- Updated dependencies [979e301]
- Updated dependencies [15781f0]
- Updated dependencies [be820c4]
- Updated dependencies [d9e908e]
  - fumadocs-core@14.0.0

## 10.0.2

### Patch Changes

- f21c871: Change cache path of manifest files
- Updated dependencies [78e59e7]
  - fumadocs-core@13.4.8

## 10.0.1

### Patch Changes

- 7e23388: Fix windows compatibility
  - fumadocs-core@13.4.5

## 10.0.0

### Major Changes

- ed83d01: **Support declarative collections**

  **why:** This allows Fumadocs MDX to be more flexible.

  **migrate:**

  You don't need `exports` anymore, properties are merged into one object by default.

  ```diff
  - page.data.exports.toc
  + page.data.toc

  - page.data.exports.default
  + page.data.body
  ```

  A `source.config.ts` is now required.

  ```ts
  import { defineDocs, defineConfig } from 'fumadocs-mdx/config';

  export const { docs, meta } = defineDocs();

  export default defineConfig();
  ```

  The `mdx-components.tsx` file is no longer used, pass MDX components to body instead.

  Search indexes API is now replaced by Manifest API.

  Please refer to the docs for further details.

### Patch Changes

- 0c251e5: Bump deps
- Updated dependencies [7dabbc1]
- Updated dependencies [0c251e5]
- Updated dependencies [3b56170]
  - fumadocs-core@13.4.2

## 9.0.4

### Patch Changes

- 95dbba1: Support passing remark structure options
- Updated dependencies [95dbba1]
  - fumadocs-core@13.4.1

## 9.0.3

### Patch Changes

- c0d1faf: Store additional `_data` to search indexes
  - fumadocs-core@13.4.0

## 9.0.2

### Patch Changes

- 61b91fa: Improve Fumadocs OpenAPI support
- Updated dependencies [36b771b]
- Updated dependencies [61b91fa]
  - fumadocs-core@13.2.2

## 9.0.1

### Patch Changes

- c7aa090: Improve Fumadocs OpenAPI support
- Updated dependencies [17fa173]
  - fumadocs-core@13.2.1

## 9.0.0

### Major Changes

- 1f1989e: Support Fumadocs v13

### Patch Changes

- fumadocs-core@13.0.1

## 8.2.34

### Patch Changes

- c2d956b: Support mirror pages for symlinks of MDX file
  - fumadocs-core@12.5.3

## 8.2.33

### Patch Changes

- 78acd55: Use full mode on docs pages by default on OpenAPI generated pages
  - fumadocs-core@12.2.1

## 8.2.32

### Patch Changes

- 2eb68c8: Force a release of content sources
  - fumadocs-core@12.0.7

## 8.2.31

### Patch Changes

- 310e0ab: Move `fumadocs-core` to peer dependency
- Updated dependencies [053609d]
  - fumadocs-core@12.0.3

## 8.2.30

### Patch Changes

- fumadocs-core@12.0.2

## 8.2.29

### Patch Changes

- fumadocs-core@12.0.1

## 8.2.28

### Patch Changes

- Updated dependencies [98430e9]
- Updated dependencies [d88dfa6]
- Updated dependencies [ba20694]
- Updated dependencies [57eb762]
  - fumadocs-core@12.0.0

## 8.2.27

### Patch Changes

- Updated dependencies [1b8e12b]
  - fumadocs-core@11.3.2

## 8.2.26

### Patch Changes

- fumadocs-core@11.3.1

## 8.2.25

### Patch Changes

- 17e162e: Add `mdx` to page extensions by default
- Updated dependencies [917d87f]
  - fumadocs-core@11.3.0

## 8.2.24

### Patch Changes

- fumadocs-core@11.2.2

## 8.2.23

### Patch Changes

- fumadocs-core@11.2.1

## 8.2.22

### Patch Changes

- fumadocs-core@11.2.0

## 8.2.21

### Patch Changes

- 66a100d: Improve error messages
- Updated dependencies [88008b1]
- Updated dependencies [944541a]
- Updated dependencies [07a9312]
  - fumadocs-core@11.1.3

## 8.2.20

### Patch Changes

- fumadocs-core@11.1.2

## 8.2.19

### Patch Changes

- 8ef2b68: Bump deps
- Updated dependencies [8ef2b68]
- Updated dependencies [26f464d]
- Updated dependencies [26f464d]
  - fumadocs-core@11.1.1

## 8.2.18

### Patch Changes

- fumadocs-core@11.1.0

## 8.2.17

### Patch Changes

- Updated dependencies [98258b5]
  - fumadocs-core@11.0.8

## 8.2.16

### Patch Changes

- Updated dependencies [f7c2c5c]
  - fumadocs-core@11.0.7

## 8.2.15

### Patch Changes

- 5653d5d: Support customising heading id in headings
- 5653d5d: Support custom heading slugger
- Updated dependencies [5653d5d]
- Updated dependencies [5653d5d]
  - fumadocs-core@11.0.6

## 8.2.14

### Patch Changes

- fumadocs-core@11.0.5

## 8.2.13

### Patch Changes

- 7b61b2f: Migrate `fumadocs-ui` to fully ESM, adding support for ESM `tailwind.config` file
- Updated dependencies [7b61b2f]
  - fumadocs-core@11.0.4

## 8.2.12

### Patch Changes

- fumadocs-core@11.0.3

## 8.2.11

### Patch Changes

- fumadocs-core@11.0.2

## 8.2.10

### Patch Changes

- fumadocs-core@11.0.1

## 8.2.9

### Patch Changes

- Updated dependencies [2d8df75]
- Updated dependencies [92cb12f]
- Updated dependencies [f75287d]
- Updated dependencies [2d8df75]
  - fumadocs-core@11.0.0

## 8.2.8

### Patch Changes

- Updated dependencies [bbad52f]
  - fumadocs-core@10.1.3

## 8.2.7

### Patch Changes

- fumadocs-core@10.1.2

## 8.2.6

### Patch Changes

- Updated dependencies [779c599]
- Updated dependencies [0c01300]
- Updated dependencies [779c599]
  - fumadocs-core@10.1.1

## 8.2.5

### Patch Changes

- fumadocs-core@10.1.0

## 8.2.4

### Patch Changes

- e47c62f: Support customising included files in the map file
- Updated dependencies [e47c62f]
  - fumadocs-core@10.0.5

## 8.2.3

### Patch Changes

- fumadocs-core@10.0.4

## 8.2.2

### Patch Changes

- Updated dependencies [6f321e5]
  - fumadocs-core@10.0.3

## 8.2.1

### Patch Changes

- Updated dependencies [10e099a]
  - fumadocs-core@10.0.2

## 8.2.0

### Minor Changes

- 01155f5: Support generate search indexes in build time

### Patch Changes

- Updated dependencies [c9b7763]
- Updated dependencies [0e78dc8]
- Updated dependencies [d8483a8]
  - fumadocs-core@10.0.1

## 8.1.1

### Patch Changes

- Updated dependencies [b5d16938]
- Updated dependencies [321d1e1f]
  - fumadocs-core@10.0.0

## 8.1.0

### Minor Changes

- 1c388ca5: Support `defaultOpen` for folder nodes

### Patch Changes

- Updated dependencies [909b0e35]
- Updated dependencies [691f12aa]
- Updated dependencies [1c388ca5]
  - fumadocs-core@9.1.0

## 8.0.5

### Patch Changes

- fumadocs-core@9.0.0

## 8.0.4

### Patch Changes

- fumadocs-core@8.3.0

## 8.0.3

### Patch Changes

- 9bf5adb: Replace await imports with normal imports
- Updated dependencies [5c24659]
  - fumadocs-core@8.2.0

## 8.0.2

### Patch Changes

- fumadocs-core@8.1.1

## 8.0.1

### Patch Changes

- 6c5a39a: Rename Git repository to `fumadocs`
- Updated dependencies [6c5a39a]
- Updated dependencies [eb028b4]
- Updated dependencies [054ec60]
  - fumadocs-core@8.1.0

## 8.0.0

### Major Changes

- 1a346a1: **Enable `remark-image` plugin by default**

  You can add image embeds easily. They will be converted to static image imports.

  ```mdx
  ![banner](/image.png)
  ```

  Become:

  ```mdx
  import img_banner from '../../public/image.png';

  <img alt="banner" src={img_banner} />
  ```

- 2b11c20: **Rename to Fumadocs**

  `next-docs-zeta` -> `fumadocs-core`

  `next-docs-ui` -> `fumadocs-ui`

  `next-docs-mdx` -> `fumadocs-mdx`

  `@fuma-docs/openapi` -> `fumadocs-openapi`

  `create-next-docs-app` -> `create-fumadocs-app`

### Patch Changes

- Updated dependencies [2ea9437]
- Updated dependencies [cdff313]
- Updated dependencies [1a346a1]
- Updated dependencies [2b11c20]
  - fumadocs-core@8.0.0

## 7.1.2

### Patch Changes

- next-docs-zeta@7.1.2

## 7.1.1

### Patch Changes

- next-docs-zeta@7.1.1

## 7.1.0

### Patch Changes

- next-docs-zeta@7.1.0

## 7.0.0

### Major Changes

- 9929c5b: **Prefer `.map.ts` instead of `_map.ts`**

  Unless you have especially configured, now it uses `.map.ts` by default.

  ```diff
  - import map from "@/_map"
  + import map from "@/.map"
  ```

- 9929c5b: **Migrate to Source API**

  `fromMap` has been removed. Please use `createMDXSource` instead.

  ```ts
  import { map } from '@/.map';
  import { createMDXSource } from 'next-docs-mdx';
  import { loader } from 'next-docs-zeta/source';

  export const { getPage, getPages, pageTree } = loader({
    baseUrl: '/docs',
    rootDir: 'docs',
    source: createMDXSource(map),
  });
  ```

### Minor Changes

- 8fd769f: **Support last modified timestamp for Git**

  Enable this in `next.config.mjs`:

  ```js
  const withNextDocs = createNextDocs({
    mdxOptions: {
      lastModifiedTime: 'git',
    },
  });
  ```

  Access it via `page.data.exports.lastModified`.

### Patch Changes

- Updated dependencies [9929c5b]
- Updated dependencies [9929c5b]
- Updated dependencies [49201be]
- Updated dependencies [338ea98]
- Updated dependencies [4c1334e]
- Updated dependencies [9929c5b]
  - next-docs-zeta@7.0.0

## 6.1.0

### Patch Changes

- Updated dependencies [f39ae40]
  - next-docs-zeta@6.1.0

## 6.0.2

### Patch Changes

- 1845bf5: Fixes import path for next-docs-mdx/loader-mdx
  - next-docs-zeta@6.0.2

## 6.0.1

### Patch Changes

- next-docs-zeta@6.0.1

## 6.0.0

### Major Changes

- 69f8abf: **Make file paths relative to `rootDir` when resolving files**

  For a more simplified usage, the resolved file paths will be relative to `rootDir`.

  You can now generate slugs automatically depending on the root directory you have configured.

  ```ts
  const utils = fromMap(map, {
    rootDir: 'ui',
    schema: {
      frontmatter: frontmatterSchema,
    },
  });
  ```

  The configuration above will generate `/hello` slugs for a file named `/content/ui/hello.mdx`, while the previous one generates `/ui/hello`.

- 9ef047d: **Pre-bundle page urls into raw pages.**

  This means you don't need `getPageUrl` anymore for built-in adapters, including `next-docs-mdx` and Contentlayer. It is now replaced by the `url` property from the pages array provided by your adapter.

  Due to this change, your old configuration might not continues to work.

  ```diff
  import { fromMap } from 'next-docs-mdx/map'

  fromMap({
  -  slugs: ...
  +  getSlugs: ...
  })
  ```

  For Contentlayer, the `getUrl` option is now moved to `createConfig`.

- 1c187b9: **Support intelligent schema types**

  The `validate` options is now renamed to `schema`.

  ```ts
  import { defaultSchemas, fromMap } from 'next-docs-mdx/map';

  const utils = fromMap(map, {
    rootDir: 'docs/ui',
    baseUrl: '/docs/ui',
    schema: {
      frontmatter: defaultSchemas.frontmatter.extend({
        preview: z.string().optional(),
      }),
    },
  });
  ```

  The `frontmatter` field on pages should be automatically inferred to your Zod schema type.

- 52b24a6: **Remove `/docs` from default root content path**

  Previously, the default root content path is `./content/docs`. All your documents must be placed under the root directory.

  Since this update, it is now `./content` by default. To keep the old behaviours, you may manually specify `rootContentPath`.

  ```js
  const withNextDocs = createNextDocs({
    rootContentPath: './content/docs',
  });
  ```

  **Notice that due to this change, your `baseUrl` property will be `/` by default**

  ```diff
  const withNextDocs = createNextDocs({
  +  baseUrl: "/docs"
  })
  ```

- 2ff7581: **Rename configuration options**

  The options of `createNextDocs` is now renamed to be more flexible and straightforward.

  | Old             | New                                |
  | --------------- | ---------------------------------- |
  | `dataExports`   | `mdxOptions.valueToExport`         |
  | `pluginOptions` | `mdxOptions.rehypeNextDocsOptions` |

  `rehypePlugins` and `remarkPlugins` can also be a function that accepts and returns plugins.

### Minor Changes

- 55a2321: **Use `@mdx-js/mdx` to process MDX/markdown files.**

  You no longer need `@next/loader` and `@mdx-js/loader` to be installed on your project, `next-docs-mdx` will process files with `@mdx-js/mdx` directly.

  _This change will not break most of the projects_

### Patch Changes

- Updated dependencies [9ef047d]
  - next-docs-zeta@6.0.0

## 5.0.0

### Minor Changes

- de44efe: Migrate to Shikiji
- de44efe: Support code highlighting options

### Patch Changes

- Updated dependencies [de44efe]
- Updated dependencies [de44efe]
  - next-docs-zeta@5.0.0

## 4.0.9

### Patch Changes

- Updated dependencies [a883009]
  - next-docs-zeta@4.0.9

## 4.0.8

### Patch Changes

- Updated dependencies [e0c5c96]
  - next-docs-zeta@4.0.8

## 4.0.7

### Patch Changes

- b9af5ed: Update tsup & dependencies
- Updated dependencies [b9af5ed]
  - next-docs-zeta@4.0.7

## 4.0.6

### Patch Changes

- Updated dependencies [ff38f6e]
  - next-docs-zeta@4.0.6

## 4.0.5

### Patch Changes

- next-docs-zeta@4.0.5

## 4.0.4

### Patch Changes

- next-docs-zeta@4.0.4

## 4.0.3

### Patch Changes

- ba51a9f: Support custom slugs function
- 0cc10cb: Support custom build page tree options
- Updated dependencies [0cc10cb]
  - next-docs-zeta@4.0.3

## 4.0.2

### Patch Changes

- 347df32: Fix empty `baseUrl` unexpected behaviours
- ad7b8a8: Fully support custom root content directory paths
- 73f985a: Support `rootDir` API
  - next-docs-zeta@4.0.2

## 4.0.1

### Patch Changes

- 01b23e2: Support Next.js 14
- Updated dependencies [2da93d8]
- Updated dependencies [01b23e2]
  - next-docs-zeta@4.0.1

## 4.0.0

### Patch Changes

- Updated dependencies [6c4a782]
- Updated dependencies [6c4a782]
  - next-docs-zeta@4.0.0

## 4.0.0

### Patch Changes

- Updated dependencies [678cd3d]
- Updated dependencies [24245a3]
  - next-docs-zeta@4.0.0

## 3.0.0

### Patch Changes

- Updated dependencies [1043532]
- Updated dependencies [7a0690b]
- Updated dependencies [a4a8120]
  - next-docs-zeta@3.0.0



================================================
FILE: packages/mdx/eslint.config.mjs
================================================
import library from 'eslint-config-custom/library.js';

export default [
  {
    ignores: [
      'dist/',
      'node_modules/',
      'test/**/*.output.js',
      'bin.js',
      'loader-mdx.cjs',
    ],
  },
  ...library,
  {
    rules: {
      'import/no-named-as-default': 'off',
      'import/no-named-as-default-member': 'off',
      '@typescript-eslint/no-explicit-any': 'off',
    },
  },
];



================================================
FILE: packages/mdx/loader-mdx.cjs
================================================
module.exports = function loader(code) {
  const callback = this.async();

  import('./dist/loader-mdx.js').then((mod) =>
    mod.default.call(this, code, callback),
  );
};



================================================
FILE: packages/mdx/package.json
================================================
{
  "name": "fumadocs-mdx",
  "version": "11.6.10",
  "description": "The built-in source for Fumadocs",
  "keywords": [
    "NextJs",
    "Docs"
  ],
  "homepage": "https://fumadocs.vercel.app",
  "repository": "github:fuma-nama/fumadocs",
  "license": "MIT",
  "author": "Fuma Nama",
  "type": "module",
  "exports": {
    "./loader-mdx": "./loader-mdx.cjs",
    "./config": {
      "import": "./dist/config/index.js",
      "types": "./dist/config/index.d.ts",
      "require": "./dist/config/index.cjs"
    },
    "./next": {
      "import": "./dist/next/index.js",
      "types": "./dist/next/index.d.ts",
      "require": "./dist/next/index.cjs"
    },
    "./vite": {
      "import": "./dist/vite/index.js",
      "types": "./dist/vite/index.d.ts",
      "require": "./dist/vite/index.cjs"
    },
    "./runtime/async": {
      "import": "./dist/runtime/async.js",
      "types": "./dist/runtime/async.d.ts"
    },
    ".": {
      "import": "./dist/index.js",
      "types": "./dist/index.d.ts",
      "require": "./dist/index.cjs"
    }
  },
  "main": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "bin": "./bin.js",
  "files": [
    "dist/*",
    "loader-mdx.cjs",
    "bin.js"
  ],
  "scripts": {
    "build": "tsup",
    "clean": "rimraf dist",
    "dev": "tsup --watch",
    "lint": "eslint .",
    "types:check": "tsc --noEmit"
  },
  "dependencies": {
    "@mdx-js/mdx": "^3.1.0",
    "@standard-schema/spec": "^1.0.0",
    "chokidar": "^4.0.3",
    "esbuild": "^0.25.6",
    "estree-util-value-to-estree": "^3.4.0",
    "js-yaml": "^4.1.0",
    "lru-cache": "^11.1.0",
    "picocolors": "^1.1.1",
    "tinyexec": "^1.0.1",
    "tinyglobby": "^0.2.14",
    "unist-util-visit": "^5.0.0",
    "zod": "^4.0.2"
  },
  "devDependencies": {
    "@fumadocs/mdx-remote": "workspace:*",
    "@types/js-yaml": "^4.0.9",
    "@types/mdast": "^4.0.3",
    "@types/mdx": "^2.0.13",
    "@types/react": "^19.1.8",
    "eslint-config-custom": "workspace:*",
    "fumadocs-core": "workspace:*",
    "mdast-util-mdx-jsx": "^3.2.0",
    "next": "^15.3.5",
    "tsconfig": "workspace:*",
    "unified": "^11.0.5",
    "vfile": "^6.0.3",
    "vite": "^7.0.3",
    "webpack": "^5.100.0"
  },
  "peerDependencies": {
    "@fumadocs/mdx-remote": "^1.2.0",
    "fumadocs-core": "^14.0.0 || ^15.0.0",
    "next": "^15.3.0",
    "vite": "6.x.x"
  },
  "peerDependenciesMeta": {
    "next": {
      "optional": true
    },
    "vite": {
      "optional": true
    },
    "@fumadocs/mdx-remote": {
      "optional": true
    }
  },
  "publishConfig": {
    "access": "public"
  }
}



================================================
FILE: packages/mdx/tsconfig.json
================================================
{
  "extends": "tsconfig/base.json",
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    },
    "noEmit": true,
    "lib": ["ESNext"],
    "module": "ESNext",
    "target": "ES2020"
  },
  "exclude": ["node_modules", "eslint.config.mjs"]
}



================================================
FILE: packages/mdx/tsup.config.ts
================================================
import { defineConfig } from 'tsup';

export default defineConfig({
  entry: [
    './src/{index,loader-mdx}.ts',
    './src/{config,next,vite}/index.ts',
    './src/runtime/async.ts',
  ],
  format: ['esm', 'cjs'],
  external: ['next', 'typescript'],
  dts: true,
  target: 'node18',
});



================================================
FILE: packages/mdx/vitest.config.ts
================================================
import { defineProject } from 'vitest/config';

export default defineProject({
  resolve: {
    alias: {
      '@/': new URL('./src/', import.meta.url).pathname,
    },
  },
});



================================================
FILE: packages/mdx/src/index.ts
================================================
export * from './runtime';



================================================
FILE: packages/mdx/src/loader-mdx.ts
================================================
import * as path from 'node:path';
import { parse } from 'node:querystring';
import { type LoaderContext } from 'webpack';
import { getConfigHash, loadConfig } from '@/utils/config';
import { buildMDX } from '@/utils/build-mdx';
import { getGitTimestamp } from './utils/git-timestamp';
import { validate, ValidationError } from '@/utils/schema';
import { fumaMatter } from '@/utils/fuma-matter';
import { countLines } from '@/utils/count-lines';
import { loadDefaultOptions } from '@/utils/mdx-options';

export interface Options {
  configPath: string;
  outDir: string;
}

/**
 * Load MDX/markdown files
 *
 * it supports frontmatter by parsing and injecting the data in `vfile.data.frontmatter`
 */
export default async function loader(
  this: LoaderContext<Options>,
  source: string,
  callback: LoaderContext<Options>['callback'],
): Promise<void> {
  this.cacheable(true);
  const context = this.context;
  const filePath = this.resourcePath;
  const { configPath, outDir } = this.getOptions();
  const matter = fumaMatter(source);

  // notice that `resourceQuery` can be missing (e.g. `page.mdx`)
  const {
    hash: configHash = await getConfigHash(configPath),
    collection: collectionId,
  } = parse(this.resourceQuery.slice(1)) as {
    hash?: string;
    collection?: string;
  };
  const config = await loadConfig(configPath, outDir, configHash);

  let collection =
    collectionId !== undefined
      ? config.collections.get(collectionId)
      : undefined;

  if (collection && collection.type === 'docs') collection = collection.docs;
  if (collection && collection.type !== 'doc') {
    collection = undefined;
  }

  let data = matter.data;
  const mdxOptions =
    collection?.mdxOptions ?? (await loadDefaultOptions(config));

  if (collection?.schema) {
    try {
      data = await validate(
        collection.schema,
        matter.data,
        {
          source,
          path: filePath,
        },
        `invalid frontmatter in ${filePath}`,
      );
    } catch (e) {
      if (e instanceof ValidationError) {
        return callback(new Error(e.toStringFormatted()));
      }

      return callback(e as Error);
    }
  }

  let timestamp: number | undefined;
  if (config.global?.lastModifiedTime === 'git') {
    timestamp = (await getGitTimestamp(filePath))?.getTime();
  }

  try {
    // ensure the line number is correct in dev mode
    const lineOffset = '\n'.repeat(
      this.mode === 'development' ? countLines(matter.matter) : 0,
    );

    const file = await buildMDX(
      `${configHash}:${collectionId ?? 'global'}`,
      lineOffset + matter.content,
      {
        development: this.mode === 'development',
        ...mdxOptions,
        filePath,
        frontmatter: data as Record<string, unknown>,
        data: {
          lastModified: timestamp,
        },
        _compiler: this,
      },
    );

    callback(undefined, String(file.value), file.map ?? undefined);
  } catch (error) {
    if (!(error instanceof Error)) throw error;

    const fpath = path.relative(context, filePath);
    error.message = `${fpath}:${error.name}: ${error.message}`;
    callback(error);
  }
}



================================================
FILE: packages/mdx/src/postinstall.ts
================================================
import * as path from 'node:path';
import * as fs from 'node:fs/promises';
import { findConfigFile, getConfigHash, loadConfig } from '@/utils/config';
import { generateJS } from '@/map/generate';

export async function postInstall(
  configPath = findConfigFile(),
  outDir = '.source',
): Promise<void> {
  const jsOut = path.resolve(outDir, 'index.ts');
  const hash = await getConfigHash(configPath);
  const config = await loadConfig(configPath, outDir, hash, true);

  // clean past results
  await fs.rm(path.dirname(jsOut), { recursive: true });

  await fs.mkdir(path.dirname(jsOut), { recursive: true });
  await fs.writeFile(
    jsOut,
    await generateJS(configPath, config, { relativeTo: outDir }, hash),
  );
  console.log('[MDX] types generated');
}



================================================
FILE: packages/mdx/src/config/build.ts
================================================
import type { GlobalConfig } from '@/config/types';
import type { LoadedConfig } from '@/utils/config';
import type {
  DocsCollection,
  DocCollection,
  MetaCollection,
} from '@/config/define';

export function buildConfig(
  config: Record<string, unknown>,
): [err: string, value: null] | [err: null, value: LoadedConfig] {
  const collections: LoadedConfig['collections'] = new Map();
  let globalConfig: LoadedConfig['global'];

  for (const [k, v] of Object.entries(config)) {
    if (!v) {
      continue;
    }

    if (typeof v === 'object' && 'type' in v) {
      if (v.type === 'docs') {
        collections.set(k, v as DocsCollection);
        continue;
      }

      if (v.type === 'doc' || v.type === 'meta') {
        collections.set(k, v as unknown as MetaCollection | DocCollection);
        continue;
      }
    }

    if (k === 'default') {
      globalConfig = v as GlobalConfig;
      continue;
    }

    return [
      `Unknown export "${k}", you can only export collections from source configuration file.`,
      null,
    ];
  }

  return [
    null,
    {
      global: globalConfig,
      collections,
    },
  ];
}



================================================
FILE: packages/mdx/src/config/define.ts
================================================
import { type MDXOptions } from '@/utils/build-mdx';
import { type GlobalConfig } from '@/config/types';
import { frontmatterSchema, metaSchema } from '@/utils/schema';
import type { StandardSchemaV1 } from '@standard-schema/spec';

export type CollectionSchema<Schema extends StandardSchemaV1, Context> =
  | Schema
  | ((ctx: Context) => Schema);

export interface BaseCollection {
  /**
   * Directories to scan
   */
  dir: string | string[];

  /**
   * what files to include/exclude (glob patterns)
   *
   * Include all files if not specified
   */
  files?: string[];
}

export interface MetaCollection<
  Schema extends StandardSchemaV1 = StandardSchemaV1,
> extends BaseCollection {
  type: 'meta';

  schema?: CollectionSchema<Schema, { path: string; source: string }>;
}

export interface DocCollection<
  Schema extends StandardSchemaV1 = StandardSchemaV1,
  Async extends boolean = boolean,
> extends BaseCollection {
  type: 'doc';

  mdxOptions?: MDXOptions;

  /**
   * Load files with async
   */
  async?: Async;

  schema?: CollectionSchema<Schema, { path: string; source: string }>;
}

export interface DocsCollection<
  DocSchema extends StandardSchemaV1 = StandardSchemaV1,
  MetaSchema extends StandardSchemaV1 = StandardSchemaV1,
  Async extends boolean = boolean,
> {
  type: 'docs';
  dir: string | string[];

  docs: DocCollection<DocSchema, Async>;
  meta: MetaCollection<MetaSchema>;
}

export function defineCollections<
  T extends 'doc' | 'meta',
  Schema extends StandardSchemaV1 = StandardSchemaV1<unknown, any>,
  Async extends boolean = false,
>(
  options: { type: T } & (T extends 'doc'
    ? DocCollection<Schema, Async>
    : MetaCollection<Schema>),
): {
  type: T;

  _type: {
    async: Async;
    schema: Schema;
  };
} {
  return {
    // @ts-expect-error -- internal type inferring
    _type: undefined,
    ...options,
  };
}

export function defineDocs<
  DocSchema extends StandardSchemaV1 = typeof frontmatterSchema,
  MetaSchema extends StandardSchemaV1 = typeof metaSchema,
  Async extends boolean = false,
>(options?: {
  /**
   * The directory to scan files
   *
   *  @defaultValue 'content/docs'
   */
  dir?: string | string[];

  docs?: Omit<DocCollection<DocSchema, Async>, 'dir' | 'type'>;
  meta?: Omit<MetaCollection<MetaSchema>, 'dir' | 'type'>;
}): {
  type: 'docs';

  docs: {
    type: 'doc';
    _type: {
      schema: DocSchema;
      async: Async;
    };
  };

  meta: {
    type: 'meta';
    _type: {
      schema: MetaSchema;
      async: false;
    };
  };
} {
  if (!options)
    console.warn(
      '[`source.config.ts`] Deprecated: please pass options to `defineDocs()` and specify a `dir`.',
    );
  const dir = options?.dir ?? 'content/docs';

  return {
    type: 'docs',
    // @ts-expect-error -- internal type inferring
    docs: defineCollections({
      type: 'doc',
      dir,
      schema: frontmatterSchema,
      ...options?.docs,
    }),
    // @ts-expect-error -- internal type inferring
    meta: defineCollections({
      type: 'meta',
      files: ['**/*.{json,yaml}'],
      dir,
      schema: metaSchema,
      ...options?.meta,
    }),
  };
}

export function defineConfig(config: GlobalConfig = {}): GlobalConfig {
  return config;
}



================================================
FILE: packages/mdx/src/config/index.ts
================================================
export * from './types';
export * from './define';
export {
  loadDefaultOptions,
  type DefaultMDXOptions,
} from '../utils/mdx-options';
export { frontmatterSchema, metaSchema } from '../utils/schema';
export * from '../mdx-plugins/remark-include';



================================================
FILE: packages/mdx/src/config/types.ts
================================================
import type { MDXProps } from 'mdx/types';
import type { StructuredData } from 'fumadocs-core/mdx-plugins';
import type { TableOfContents } from 'fumadocs-core/server';
import { type DefaultMDXOptions } from '@/utils/mdx-options';
import type { FC } from 'react';

export interface GlobalConfig {
  /**
   * Configure global MDX options
   */
  mdxOptions?:
    | DefaultMDXOptions
    | (() => DefaultMDXOptions | Promise<DefaultMDXOptions>);

  /**
   * Fetch last modified time with specified version control
   * @defaultValue 'none'
   */
  lastModifiedTime?: 'git' | 'none';
}

export interface FileInfo {
  path: string;
  absolutePath: string;
}

export interface MarkdownProps {
  body: FC<MDXProps>;
  structuredData: StructuredData;
  toc: TableOfContents;
  _exports: Record<string, unknown>;

  /**
   * Only available when `lastModifiedTime` is enabled on MDX loader
   */
  lastModified?: Date;
}

export interface BaseCollectionEntry {
  /**
   * Raw file path of collection entry, including absolute path (not normalized).
   */
  _file: FileInfo;
}



================================================
FILE: packages/mdx/src/map/file-cache.ts
================================================
import { LRUCache } from 'lru-cache';

const map = new LRUCache<string, string | object>({
  max: 200,
});

export const fileCache = {
  read<Data>(namespace: string, path: string) {
    return map.get(`${namespace}.${path}`) as Data;
  },
  write(namespace: string, path: string, data: unknown) {
    map.set(`${namespace}.${path}`, data as object);
  },
  removeCache(path: string) {
    for (const key of map.keys()) {
      const keyPath = key.slice(key.indexOf('.') + 1);

      if (keyPath === path) map.delete(key);
    }
  },
};



================================================
FILE: packages/mdx/src/map/generate.ts
================================================
import * as path from 'node:path';
import * as fs from 'node:fs/promises';
import { glob } from 'tinyglobby';
import { getTypeFromPath } from '@/utils/get-type-from-path';
import type { FileInfo } from '@/config/types';
import type { LoadedConfig } from '@/utils/config';
import type { DocCollection, MetaCollection } from '@/config';
import { validate } from '@/utils/schema';
import { fileCache } from '@/map/file-cache';
import type { AsyncRuntimeFile } from '@/runtime/types';
import { load } from 'js-yaml';
import { getGitTimestamp } from '@/utils/git-timestamp';
import { fumaMatter } from '@/utils/fuma-matter';

async function readFileWithCache(file: string): Promise<string> {
  const cached = fileCache.read<string>('read-file', file);
  if (cached) return cached;

  return (await fs.readFile(file)).toString();
}

type ImportPathConfig = { relativeTo: string } | { absolute: true };

export async function generateJS(
  configPath: string,
  config: LoadedConfig,
  importPath: ImportPathConfig,
  configHash: string | false = false,
): Promise<string> {
  let asyncInit = false;
  const lines: string[] = [
    getImportCode({
      type: 'named',
      names: ['_runtime'],
      specifier: 'fumadocs-mdx',
    }),
    getImportCode({
      type: 'namespace',
      specifier: toImportPath(configPath, importPath),
      name: '_source',
    }),
  ];

  const entries = Array.from(config.collections.entries());

  async function getDocEntries(collectionName: string, files: FileInfo[]) {
    const items = files.map(async (file, i) => {
      const importId = `${collectionName}_${i}`;
      const params = [`collection=${collectionName}`];
      if (configHash) {
        params.push(`hash=${configHash}`);
      }

      lines.unshift(
        getImportCode({
          type: 'namespace',
          name: importId,
          specifier: `${toImportPath(file.absolutePath, importPath)}?${params.join('&')}`,
        }),
      );

      return `{ info: ${JSON.stringify(file)}, data: ${importId} }`;
    });

    return Promise.all(items);
  }

  async function getMetaEntries(collection: MetaCollection, files: FileInfo[]) {
    const items = files.map(async (file) => {
      const source = await readFileWithCache(file.absolutePath).catch(() => '');
      let data =
        source.length === 0 ? {} : parseMetaEntry(file.absolutePath, source);

      if (collection?.schema) {
        data = await validate(
          collection.schema,
          data,
          {
            source,
            path: file.absolutePath,
          },
          `invalid data in ${file.absolutePath}`,
        );
      }

      return JSON.stringify({
        info: file,
        data,
      });
    });

    return Promise.all(items);
  }

  async function getAsyncEntries(collection: DocCollection, files: FileInfo[]) {
    if (!asyncInit) {
      lines.unshift(
        getImportCode({
          type: 'named',
          specifier: 'fumadocs-mdx/runtime/async',
          names: ['_runtimeAsync', 'buildConfig'],
        }),
        'const [err, _sourceConfig] = buildConfig(_source)',
        'if (!_sourceConfig) throw new Error(err)',
      );

      asyncInit = true;
    }

    const entries = files.map(async (file) => {
      const parsed = fumaMatter(
        await readFileWithCache(file.absolutePath).catch(() => ''),
      );
      let data = parsed.data;

      if (collection.schema) {
        data = await validate(
          collection.schema,
          parsed.data,
          { path: file.absolutePath, source: parsed.content },
          `invalid frontmatter in ${file.absolutePath}`,
        );
      }

      let lastModified: Date | undefined;
      if (config.global?.lastModifiedTime === 'git') {
        lastModified = await getGitTimestamp(file.absolutePath);
      }

      return JSON.stringify({
        info: file,
        lastModified,
        data: data as Record<string, unknown>,
        content: parsed.content,
      } satisfies AsyncRuntimeFile);
    });

    return Promise.all(entries);
  }

  const declares = entries.map(async ([k, collection]) => {
    if (collection.type === 'docs') {
      const docs = await getCollectionFiles(collection.docs);
      const metas = await getCollectionFiles(collection.meta);
      const metaEntries = (await getMetaEntries(collection.meta, metas)).join(
        ', ',
      );

      if (collection.docs.async) {
        const docsEntries = (await getAsyncEntries(collection.docs, docs)).join(
          ', ',
        );

        return `export const ${k} = _runtimeAsync.docs<typeof _source.${k}>([${docsEntries}], [${metaEntries}], "${k}", _sourceConfig)`;
      }

      const docsEntries = (await getDocEntries(k, docs)).join(', ');

      return `export const ${k} = _runtime.docs<typeof _source.${k}>([${docsEntries}], [${metaEntries}])`;
    }

    const files = await getCollectionFiles(collection);

    if (collection.type === 'doc' && collection.async) {
      return `export const ${k} = _runtimeAsync.doc<typeof _source.${k}>([${(await getAsyncEntries(collection, files)).join(', ')}], "${k}", _sourceConfig)`;
    }

    return `export const ${k} = _runtime.${collection.type}<typeof _source.${k}>([${(await getDocEntries(k, files)).join(', ')}]);`;
  });

  const resolvedDeclares = await Promise.all(declares);

  return [
    `// @ts-nocheck -- skip type checking`,
    ...lines,
    ...resolvedDeclares,
  ].join('\n');
}

async function getCollectionFiles(
  collection: DocCollection | MetaCollection,
): Promise<FileInfo[]> {
  const files = new Map<string, FileInfo>();
  const dirs = Array.isArray(collection.dir)
    ? collection.dir
    : [collection.dir];

  await Promise.all(
    dirs.map(async (dir) => {
      const result = await glob(collection.files ?? '**/*', {
        cwd: path.resolve(dir),
        absolute: true,
      });

      for (const item of result) {
        if (getTypeFromPath(item) !== collection.type) continue;

        files.set(item, {
          path: path.relative(dir, item),
          absolutePath: item,
        });
      }
    }),
  );

  return Array.from(files.values());
}

type ImportInfo =
  | { name: string; type: 'default'; specifier: string }
  | {
      type: 'named';
      names: ([string, string] | string)[];
      specifier: string;
    }
  | {
      type: 'namespace';
      name: string;
      specifier: string;
    }
  | {
      type: 'side-effect';
      specifier: string;
    };

export function getImportCode(info: ImportInfo): string {
  const specifier = JSON.stringify(info.specifier);

  if (info.type === 'default') return `import ${info.name} from ${specifier}`;
  if (info.type === 'namespace')
    return `import * as ${info.name} from ${specifier}`;
  if (info.type === 'named') {
    const names = info.names.map((name) =>
      Array.isArray(name) ? `${name[0]} as ${name[1]}` : name,
    );

    return `import { ${names.join(', ')} } from ${specifier}`;
  }

  return `import ${specifier}`;
}

export function toImportPath(file: string, config: ImportPathConfig): string {
  const ext = path.extname(file);
  const filename =
    ext === '.ts' ? file.substring(0, file.length - ext.length) : file;
  let importPath;

  if ('relativeTo' in config) {
    importPath = path.relative(config.relativeTo, filename);

    if (!path.isAbsolute(importPath) && !importPath.startsWith('.')) {
      importPath = `./${importPath}`;
    }
  } else {
    importPath = path.resolve(filename);
  }

  return importPath.replaceAll(path.sep, '/');
}

function parseMetaEntry(file: string, content: string) {
  const extname = path.extname(file);
  try {
    if (extname === '.json') return JSON.parse(content);
    if (extname === '.yaml') return load(content);
  } catch (e) {
    throw new Error(`Failed to parse meta file: ${file}.`, {
      cause: e,
    });
  }

  throw new Error(`Unknown meta file format: ${extname}, in ${file}.`);
}



================================================
FILE: packages/mdx/src/map/index.ts
================================================
import * as path from 'node:path';
import * as fs from 'node:fs/promises';
import { getConfigHash, loadConfig } from '@/utils/config';
import { generateJS } from '@/map/generate';
import { fileCache } from '@/map/file-cache';
import { ValidationError } from '@/utils/schema';

/**
 * Start a MDX server that builds index and manifest files.
 *
 * In development mode, it starts a file watcher to auto-update output as your input changes.
 */
export async function start(
  dev: boolean,
  configPath: string,
  outDir: string,
): Promise<void> {
  // init
  let configHash = await getConfigHash(configPath);
  let config = await loadConfig(configPath, outDir, configHash, true);
  const outPath = path.resolve(outDir, `index.ts`);

  async function updateMapFile() {
    const start = performance.now();

    try {
      await fs.writeFile(
        outPath,
        await generateJS(
          configPath,
          config,
          { relativeTo: outDir },
          configHash,
        ),
      );
    } catch (err) {
      if (err instanceof ValidationError) {
        console.error(err.toStringFormatted());
      } else {
        console.error(err);
      }
    }

    console.log(`[MDX] updated map file in ${performance.now() - start}ms`);
  }

  await updateMapFile();

  if (dev) {
    const { watcher } = await import('@/map/watcher');
    const instance = watcher(configPath, config, [outPath]);

    instance.on('ready', () => {
      console.log('[MDX] started dev server');
    });

    instance.on('all', (event, file) => {
      if (typeof file !== 'string') return;
      const absolutePath = path.resolve(file);

      const onUpdate = async () => {
        const isConfigFile = absolutePath === configPath;

        if (isConfigFile) {
          configHash = await getConfigHash(configPath);
          config = await loadConfig(configPath, outDir, configHash, true);
        }

        if (event === 'change') fileCache.removeCache(absolutePath);

        await updateMapFile();
      };

      void onUpdate();
    });

    process.on('exit', () => {
      console.log('[MDX] closing dev server');
      void instance.close();
    });
  }
}



================================================
FILE: packages/mdx/src/map/watcher.ts
================================================
import { FSWatcher } from 'chokidar';
import { type LoadedConfig } from '@/utils/config';

export function watcher(
  configPath: string,
  config: LoadedConfig,
  ignored: string[],
): FSWatcher {
  const watcher = new FSWatcher({
    ignoreInitial: true,
    persistent: true,
    ignored,
  });

  watcher.add(configPath);

  for (const collection of config.collections.values()) {
    if (collection.type === 'docs') {
      watcher.add(collection.docs.dir);
      watcher.add(collection.meta.dir);
    } else {
      watcher.add(collection.dir);
    }
  }

  return watcher;
}



================================================
FILE: packages/mdx/src/mdx-plugins/remark-exports.ts
================================================
import type { Root } from 'mdast';
import type { Transformer } from 'unified';
import { valueToEstree } from 'estree-util-value-to-estree';

interface Options {
  /**
   * Values to export from `vfile.data`
   */
  values: string[];
}

/**
 * Export properties from `vfile.data`
 */
function remarkMdxExport({ values }: Options): Transformer<Root, Root> {
  return (tree, vfile) => {
    for (const name of values) {
      if (!(name in vfile.data)) return;

      // @ts-expect-error -- It is a node
      tree.children.unshift(getMdastExport(name, vfile.data[name]));
    }
  };
}

export { remarkMdxExport as default, type Options };

/**
 * MDX.js first converts javascript (with esm support) into mdast nodes with remark-mdx, then handle the other remark plugins
 *
 * Therefore, if we want to inject an export, we must convert the object into AST, then add the mdast node
 */
export function getMdastExport(name: string, value: unknown): object {
  return {
    type: 'mdxjsEsm',
    value: '',
    data: {
      estree: {
        type: 'Program',
        sourceType: 'module',
        body: [
          {
            type: 'ExportNamedDeclaration',
            specifiers: [],
            source: null,
            declaration: {
              type: 'VariableDeclaration',
              kind: 'let',
              declarations: [
                {
                  type: 'VariableDeclarator',
                  id: {
                    type: 'Identifier',
                    name,
                  },
                  init: valueToEstree(value),
                },
              ],
            },
          },
        ],
      },
    },
  };
}



================================================
FILE: packages/mdx/src/mdx-plugins/remark-include.ts
================================================
import type { Processor, Transformer } from 'unified';
import { visit } from 'unist-util-visit';
import type { Code, Root, RootContent } from 'mdast';
import * as path from 'node:path';
import * as fs from 'node:fs/promises';
import type { CompilerOptions } from '@/utils/build-mdx';
import { fumaMatter } from '@/utils/fuma-matter';

function flattenNode(node: RootContent): string {
  if ('children' in node)
    return node.children.map((child) => flattenNode(child)).join('');

  if ('value' in node) return node.value;

  return '';
}

export function remarkInclude(this: Processor): Transformer<Root, Root> {
  const TagName = 'include';

  async function update(
    tree: Root,
    file: string,
    processor: Processor,
    compiler?: CompilerOptions,
  ) {
    const queue: Promise<void>[] = [];

    visit(
      tree,
      ['mdxJsxFlowElement', 'mdxJsxTextElement'],
      (node, _, parent) => {
        let specifier: string | undefined;
        const params: Record<string, string | null> = {};

        if (
          (node.type === 'mdxJsxFlowElement' ||
            node.type === 'mdxJsxTextElement') &&
          node.name === TagName
        ) {
          const value = flattenNode(node);

          if (value.length > 0) {
            for (const attr of node.attributes) {
              if (
                attr.type === 'mdxJsxAttribute' &&
                (typeof attr.value === 'string' || attr.value === null)
              ) {
                params[attr.name] = attr.value;
              }
            }

            specifier = value;
          }
        }

        if (!specifier) return;

        const targetPath = path.resolve(
          'cwd' in params ? process.cwd() : path.dirname(file),
          specifier,
        );
        const asCode =
          params.lang ||
          (!specifier.endsWith('.md') && !specifier.endsWith('.mdx'));

        queue.push(
          fs
            .readFile(targetPath)
            .then((buffer) => buffer.toString())
            .then(async (content) => {
              compiler?.addDependency(targetPath);

              if (asCode) {
                const lang = params.lang ?? path.extname(specifier).slice(1);

                Object.assign(node, {
                  type: 'code',
                  lang,
                  meta: params.meta,
                  value: content.toString(),
                  data: {},
                } satisfies Code);
                return;
              }

              const parsed = processor.parse(fumaMatter(content).content);

              await update(parsed as Root, targetPath, processor, compiler);
              Object.assign(
                parent && parent.type === 'paragraph' ? parent : node,
                parsed,
              );
            })
            .catch((e) => {
              throw new Error(
                `failed to read file ${targetPath}\n${e instanceof Error ? e.message : String(e)}`,
              );
            }),
        );

        return 'skip';
      },
    );

    await Promise.all(queue);
  }

  return async (tree, file) => {
    await update(tree, file.path, this, file.data._compiler);
  };
}



================================================
FILE: packages/mdx/src/next/create.ts
================================================
import type { NextConfig } from 'next';
import type { Configuration } from 'webpack';
import { findConfigFile } from '@/utils/config';
import { start } from '@/map';
import { type Options as MDXLoaderOptions } from '../loader-mdx';

export interface CreateMDXOptions {
  /**
   * Path to source configuration file
   */
  configPath?: string;

  /**
   * Directory for output files
   *
   * @defaultValue '.source'
   */
  outDir?: string;
}

const defaultPageExtensions = ['mdx', 'md', 'jsx', 'js', 'tsx', 'ts'];

export { start };

export function createMDX({
  configPath = findConfigFile(),
  outDir = '.source',
}: CreateMDXOptions = {}) {
  // Next.js performs multiple iteration on the `next.config.js` file
  // the first time contains the original arguments of `next dev`
  // we only execute on the first iteration
  const isDev = process.argv.includes('dev');
  const isBuild = process.argv.includes('build');

  if ((isDev || isBuild) && process.env._FUMADOCS_MDX !== '1') {
    process.env._FUMADOCS_MDX = '1';

    void start(isDev, configPath, outDir);
  }

  return (nextConfig: NextConfig = {}): NextConfig => {
    const mdxLoaderOptions: MDXLoaderOptions = {
      configPath,
      outDir,
    };

    return {
      ...nextConfig,
      turbopack: {
        ...nextConfig?.turbopack,
        rules: {
          ...nextConfig?.turbopack?.rules,
          // @ts-expect-error -- safe
          '*.{md,mdx}': {
            loaders: [
              {
                loader: 'fumadocs-mdx/loader-mdx',
                options: mdxLoaderOptions,
              },
            ],
            as: '*.js',
          },
        },
      },
      pageExtensions: nextConfig.pageExtensions ?? defaultPageExtensions,
      webpack: (config: Configuration, options) => {
        config.resolve ||= {};

        config.module ||= {};
        config.module.rules ||= [];

        config.module.rules.push({
          test: /\.mdx?$/,
          use: [
            options.defaultLoaders.babel,
            {
              loader: 'fumadocs-mdx/loader-mdx',
              options: mdxLoaderOptions,
            },
          ],
        });

        config.plugins ||= [];

        return nextConfig.webpack?.(config, options) ?? config;
      },
    };
  };
}



================================================
FILE: packages/mdx/src/next/index.ts
================================================
export * from './create';
export * from '../postinstall';



================================================
FILE: packages/mdx/src/runtime/async.ts
================================================
import { createCompiler, type MDXOptions } from '@fumadocs/mdx-remote';
import type { LoadedConfig } from '@/utils/config';
import { remarkInclude } from '@/mdx-plugins/remark-include';
import {
  remarkStructure,
  type StructuredData,
} from 'fumadocs-core/mdx-plugins';
import { _runtime, createMDXSource } from '@/runtime/index';
import type { RuntimeAsync } from '@/runtime/types';

async function initCompiler(config: LoadedConfig, collection: string) {
  let mdxOptions: MDXOptions | undefined;

  const col = config.collections.get(collection);
  if (col?.type === 'doc') mdxOptions = col.mdxOptions as MDXOptions;
  else if (col?.type === 'docs')
    mdxOptions = col.docs?.mdxOptions as MDXOptions;

  if (!mdxOptions) {
    config._mdx_async ??= {};
    const async = config._mdx_async;
    const globalConfig = config.global;

    if (globalConfig && !async.cachedMdxOptions) {
      async.cachedMdxOptions =
        typeof globalConfig.mdxOptions === 'function'
          ? await globalConfig.mdxOptions()
          : globalConfig.mdxOptions;
    }

    mdxOptions = async.cachedMdxOptions;
  }

  const remarkPlugins = mdxOptions?.remarkPlugins ?? [];

  return createCompiler({
    ...mdxOptions,
    remarkPlugins: (v) =>
      typeof remarkPlugins === 'function'
        ? [remarkInclude, ...remarkPlugins(v), remarkStructure]
        : [remarkInclude, ...v, ...remarkPlugins, remarkStructure],
  });
}

export const _runtimeAsync: RuntimeAsync = {
  doc(files, collection, config) {
    const init = initCompiler(config, collection);

    return files.map(({ info: file, data, content, lastModified }) => {
      return {
        ...data,
        _file: file,
        content,
        async load() {
          const compiler = await init;
          const out = await compiler.compile({
            source: content,
            filePath: file.absolutePath,
          });

          return {
            body: out.body,
            toc: out.toc,
            lastModified,
            structuredData: out.vfile.data.structuredData as StructuredData,
            _exports: out.exports ?? {},
          };
        },
      };
    }) as any;
  },
  docs(docs, metas, collection, config) {
    const parsedDocs = this.doc(docs, collection, config);
    const parsedMetas = _runtime.meta(metas);

    return {
      docs: parsedDocs,
      meta: parsedMetas,
      toFumadocsSource() {
        return createMDXSource(parsedDocs, parsedMetas);
      },
    } as any;
  },
};

export { buildConfig } from '@/config/build';



================================================
FILE: packages/mdx/src/runtime/index.ts
================================================
import type { VirtualFile } from 'fumadocs-core/source';
import {
  type MetaData,
  type PageData,
  type Source,
} from 'fumadocs-core/source';
import { type BaseCollectionEntry, type FileInfo } from '@/config';
import type { Runtime } from '@/runtime/types';
import fs from 'node:fs';

const cache = new Map<string, string>();

export const _runtime: Runtime = {
  doc(files) {
    return files.map((file) => {
      const { default: body, frontmatter, ...exports } = file.data;

      return {
        body,
        ...exports,
        ...(frontmatter as object),
        _file: file.info,
        _exports: file.data,
        get content() {
          const path = (this as { _file: FileInfo })._file.absolutePath;
          const cached = cache.get(path);
          if (cached) return cached;

          const content = fs.readFileSync(path).toString();
          cache.set(path, content);
          return content;
        },
      };
    }) as any;
  },
  meta(files) {
    return files.map((file) => {
      return {
        ...file.data,
        _file: file.info,
      };
    }) as any;
  },
  docs(docs, metas) {
    const parsedDocs = this.doc(docs);
    const parsedMetas = this.meta(metas);

    return {
      docs: parsedDocs,
      meta: parsedMetas,
      toFumadocsSource() {
        return createMDXSource(parsedDocs, parsedMetas);
      },
    } as any;
  },
};

export function createMDXSource<
  Doc extends PageData & BaseCollectionEntry,
  Meta extends MetaData & BaseCollectionEntry,
>(
  docs: Doc[],
  meta: Meta[] = [],
): Source<{
  pageData: Doc;
  metaData: Meta;
}> {
  return {
    files: () =>
      resolveFiles({
        docs,
        meta,
      }),
  };
}

interface ResolveOptions {
  docs: BaseCollectionEntry[];
  meta: BaseCollectionEntry[];

  rootDir?: string;
}

export function resolveFiles({ docs, meta }: ResolveOptions): VirtualFile[] {
  const outputs: VirtualFile[] = [];

  for (const entry of docs) {
    outputs.push({
      type: 'page',
      absolutePath: entry._file.absolutePath,
      path: entry._file.path,
      data: entry,
    });
  }

  for (const entry of meta) {
    outputs.push({
      type: 'meta',
      absolutePath: entry._file.absolutePath,
      path: entry._file.path,
      data: entry,
    });
  }

  return outputs;
}



================================================
FILE: packages/mdx/src/runtime/types.ts
================================================
import type { BaseCollectionEntry, FileInfo, MarkdownProps } from '@/config';
import type { StandardSchemaV1 } from '@standard-schema/spec';
import type { MetaData, PageData, Source } from 'fumadocs-core/source';
import type { LoadedConfig } from '@/utils/config';

export interface RuntimeFile {
  info: FileInfo;
  data: Record<string, unknown>;
}

export interface AsyncRuntimeFile {
  info: FileInfo;
  data: Record<string, unknown>;
  content: string;
  lastModified?: Date;
}

type DocOut<Schema extends StandardSchemaV1> = Override<
  MarkdownProps & {
    /**
     * Read the original content of file from file system.
     */
    get content(): string;
  },
  StandardSchemaV1.InferOutput<Schema> & BaseCollectionEntry
>;

type Override<A, B> = Omit<A, keyof B> & B;

type MetaOut<Schema extends StandardSchemaV1> =
  StandardSchemaV1.InferOutput<Schema> & BaseCollectionEntry;

export interface Runtime {
  doc: <C>(files: RuntimeFile[]) => C extends {
    type: 'doc';
    _type: {
      schema: infer Schema extends StandardSchemaV1;
    };
  }
    ? DocOut<Schema>[]
    : never;
  meta: <C>(files: RuntimeFile[]) => C extends {
    type: 'meta';

    _type: {
      schema: infer Schema extends StandardSchemaV1;
    };
  }
    ? MetaOut<Schema>[]
    : never;
  docs: <C>(
    docs: RuntimeFile[],
    metas: RuntimeFile[],
  ) => C extends {
    type: 'docs';

    docs: {
      type: 'doc';
      _type: {
        schema: infer DocSchema extends StandardSchemaV1;
      };
    };

    meta: {
      type: 'meta';
      _type: {
        schema: infer MetaSchema extends StandardSchemaV1;
      };
    };
  }
    ? {
        docs: DocOut<DocSchema>[];
        meta: MetaOut<MetaSchema>[];

        toFumadocsSource: () => Source<{
          pageData: DocOut<DocSchema> extends PageData
            ? DocOut<DocSchema>
            : never;
          metaData: MetaOut<MetaSchema> extends MetaData
            ? MetaOut<MetaSchema>
            : never;
        }>;
      }
    : never;
}

type AsyncDocOut<Schema extends StandardSchemaV1> =
  StandardSchemaV1.InferOutput<Schema> &
    BaseCollectionEntry & {
      content: string;
      load: () => Promise<MarkdownProps>;
    };

export interface RuntimeAsync {
  doc: <C>(
    files: AsyncRuntimeFile[],
    collection: string,
    config: LoadedConfig,
  ) => C extends {
    type: 'doc';
    _type: {
      schema: infer Schema extends StandardSchemaV1;
    };
  }
    ? AsyncDocOut<Schema>[]
    : never;
  docs: <C>(
    docs: AsyncRuntimeFile[],
    metas: RuntimeFile[],
    collection: string,
    config: LoadedConfig,
  ) => C extends {
    type: 'docs';

    docs: {
      type: 'doc';
      _type: {
        schema: infer DocSchema extends StandardSchemaV1;
      };
    };

    meta: {
      type: 'meta';
      _type: {
        schema: infer MetaSchema extends StandardSchemaV1;
      };
    };
  }
    ? {
        docs: AsyncDocOut<DocSchema>[];
        meta: MetaOut<MetaSchema>[];
        toFumadocsSource: () => Source<{
          pageData: AsyncDocOut<DocSchema> extends PageData
            ? AsyncDocOut<DocSchema>
            : never;
          metaData: MetaOut<MetaSchema> extends MetaData
            ? MetaOut<MetaSchema>
            : never;
        }>;
      }
    : never;
}



================================================
FILE: packages/mdx/src/utils/build-mdx.ts
================================================
import { createProcessor, type ProcessorOptions } from '@mdx-js/mdx';
import type { VFile } from 'vfile';
import { remarkInclude } from '@/mdx-plugins/remark-include';

type Processor = ReturnType<typeof createProcessor>;

const cache = new Map<string, Processor>();

export interface MDXOptions extends ProcessorOptions {
  /**
   * Name of collection
   */
  collection?: string;

  /**
   * Specify a file path for source
   */
  filePath?: string;

  frontmatter?: Record<string, unknown>;

  /**
   * Custom Vfile data
   */
  data?: Record<string, unknown>;

  _compiler?: CompilerOptions;
}

export interface CompilerOptions {
  addDependency: (file: string) => void;
}

declare module 'vfile' {
  interface DataMap {
    /**
     * The compiler object from loader
     */
    _compiler?: CompilerOptions;
  }
}

/**
 * @param cacheKey -- key to cache processor
 * @param source - mdx content
 * @param options - MDX options
 */
export async function buildMDX(
  cacheKey: string,
  source: string,
  options: MDXOptions,
): Promise<VFile> {
  const { filePath, frontmatter, data, ...rest } = options;

  let format = options.format;
  if (!format && filePath) {
    format = filePath.endsWith('.mdx') ? 'mdx' : 'md';
  }
  format ??= 'mdx';
  const key = `${cacheKey}:${format}`;
  let cached = cache.get(key);

  if (!cached) {
    cached = createProcessor({
      outputFormat: 'program',
      ...rest,
      remarkPlugins: [remarkInclude, ...(rest.remarkPlugins ?? [])],
      format,
    });

    cache.set(key, cached);
  }

  return cached.process({
    value: source,
    path: filePath,
    data: {
      ...data,
      frontmatter,
      _compiler: options._compiler,
    },
  });
}



================================================
FILE: packages/mdx/src/utils/config.ts
================================================
import * as fs from 'node:fs/promises';
import * as path from 'node:path';
import type {
  DocCollection,
  DocsCollection,
  MetaCollection,
} from '@/config/define';
import { type GlobalConfig } from '@/config/types';
import type { ProcessorOptions } from '@mdx-js/mdx';
import { pathToFileURL } from 'node:url';
import { buildConfig } from '@/config/build';
import type { MDXOptions as RemoteMdxOptions } from '@fumadocs/mdx-remote';

export function findConfigFile(): string {
  return path.resolve('source.config.ts');
}

export interface LoadedConfig {
  collections: Map<string, DocCollection | MetaCollection | DocsCollection>;

  global?: GlobalConfig;

  _mdx_loader?: {
    cachedOptions?: ProcessorOptions;
  };

  _mdx_async?: {
    cachedMdxOptions?: RemoteMdxOptions;
  };
}

let cache: {
  hash: string;
  config: Promise<LoadedConfig>;
} | null = null;

async function compileConfig(configPath: string, outDir: string) {
  const { build } = await import('esbuild');

  const transformed = await build({
    entryPoints: [{ in: configPath, out: 'source.config' }],
    bundle: true,
    outdir: outDir,
    target: 'node18',
    write: true,
    platform: 'node',
    format: 'esm',
    packages: 'external',
    outExtension: {
      '.js': '.mjs',
    },
    allowOverwrite: true,
  });

  if (transformed.errors.length > 0) {
    throw new Error('failed to compile configuration file');
  }
}

/**
 * Load config
 *
 * @param configPath - config path
 * @param outDir - output directory
 * @param hash - hash of config content
 * @param build - By default, it assumes the TypeScript config has been compiled to `.source/source.config.mjs`. Set this `true` to compile the config first.
 */
export async function loadConfig(
  configPath: string,
  outDir: string,
  hash: string,
  build = false,
): Promise<LoadedConfig> {
  if (cache && cache.hash === hash) {
    return await cache.config;
  }

  if (build) await compileConfig(configPath, outDir);

  const url = pathToFileURL(path.resolve(outDir, 'source.config.mjs'));

  const config = import(`${url.href}?hash=${hash}`).then((loaded) => {
    const [err, config] = buildConfig(
      // every call to `loadConfig` will cause the previous cache to be ignored
      loaded as Record<string, unknown>,
    );

    if (err !== null) throw new Error(err);
    return config;
  });

  cache = { config, hash };
  return await config;
}

/**
 * Generate hash based on the content of config
 */
export async function getConfigHash(configPath: string): Promise<string> {
  const stats = await fs.stat(configPath).catch(() => undefined);

  if (stats) {
    return stats.mtime.getTime().toString();
  }

  throw new Error('Cannot find config file');
}



================================================
FILE: packages/mdx/src/utils/count-lines.ts
================================================
export function countLines(s: string) {
  let num = 0;

  for (const c of s) {
    if (c === '\n') num++;
  }

  return num;
}



================================================
FILE: packages/mdx/src/utils/fuma-matter.ts
================================================
/**
 * Inspired by https://github.com/jonschlinkert/gray-matter
 */
import { load } from 'js-yaml';

interface Output {
  matter: string;
  content: string;
  data: unknown;
}

const regex = /^---\r?\n(.+?)\r?\n---\r?\n/s;

/**
 * parse frontmatter, it supports only yaml format
 */
export function fumaMatter(input: string): Output {
  const output: Output = { matter: '', data: {}, content: input };
  const match = regex.exec(input);
  if (!match) {
    return output;
  }

  // get the raw front-matter block
  output.matter = match[1];
  output.content = input.slice(match[0].length);

  const loaded = load(output.matter);
  output.data = loaded ?? {};

  return output;
}



================================================
FILE: packages/mdx/src/utils/get-type-from-path.ts
================================================
import { extname } from 'node:path';

const docTypes = ['.mdx', '.md'];
const metaTypes = ['.json', '.yaml'];

export function getTypeFromPath(path: string): 'doc' | 'meta' | undefined {
  const ext = extname(path);

  if (docTypes.includes(ext)) return 'doc';
  if (metaTypes.includes(ext)) return 'meta';
}



================================================
FILE: packages/mdx/src/utils/git-timestamp.ts
================================================
import path from 'node:path';
import { x } from 'tinyexec';

const cache = new Map<string, Date>();

/**
 * Requires `git` to be installed
 *
 * if you are using Vercel, please set `VERCEL_DEEP_CLONE` environment variable to `true`
 */
export async function getGitTimestamp(file: string): Promise<Date | undefined> {
  const cached = cache.get(file);
  if (cached) return cached;

  try {
    const out = await x(
      'git',
      ['log', '-1', '--pretty="%ai"', path.relative(process.cwd(), file)],
      {
        throwOnError: true,
      },
    );

    const time = new Date(out.stdout);
    cache.set(file, time);
    return time;
  } catch {
    return;
  }
}



================================================
FILE: packages/mdx/src/utils/mdx-options.ts
================================================
import * as plugins from 'fumadocs-core/mdx-plugins';
import type { ProcessorOptions } from '@mdx-js/mdx';
import type { Pluggable } from 'unified';
import remarkMdxExport from '@/mdx-plugins/remark-exports';
import type { LoadedConfig } from '@/utils/config';

type ResolvePlugins = Pluggable[] | ((v: Pluggable[]) => Pluggable[]);

export type DefaultMDXOptions = Omit<
  NonNullable<ProcessorOptions>,
  'rehypePlugins' | 'remarkPlugins' | '_ctx'
> & {
  rehypePlugins?: ResolvePlugins;
  remarkPlugins?: ResolvePlugins;

  /**
   * Properties to export from `vfile.data`
   */
  valueToExport?: string[];

  remarkStructureOptions?: plugins.StructureOptions | false;
  remarkHeadingOptions?: plugins.RemarkHeadingOptions;
  remarkImageOptions?: plugins.RemarkImageOptions | false;
  remarkCodeTabOptions?: plugins.RemarkCodeTabOptions | false;
  remarkNpmOptions?: plugins.RemarkNpmOptions | false;
  rehypeCodeOptions?: plugins.RehypeCodeOptions | false;
};

function pluginOption(
  def: (v: Pluggable[]) => (Pluggable | false)[],
  options: ResolvePlugins = [],
): Pluggable[] {
  const list = def(Array.isArray(options) ? options : []).filter(
    Boolean,
  ) as Pluggable[];

  if (typeof options === 'function') {
    return options(list);
  }

  return list;
}

export function getDefaultMDXOptions({
  valueToExport = [],
  rehypeCodeOptions,
  remarkImageOptions,
  remarkHeadingOptions,
  remarkStructureOptions,
  remarkCodeTabOptions,
  remarkNpmOptions,
  ...mdxOptions
}: DefaultMDXOptions): ProcessorOptions {
  const mdxExports = [
    'structuredData',
    'frontmatter',
    'lastModified',
    ...valueToExport,
  ];

  const remarkPlugins = pluginOption(
    (v) => [
      plugins.remarkGfm,
      [
        plugins.remarkHeading,
        {
          generateToc: false,
          ...remarkHeadingOptions,
        },
      ],
      remarkImageOptions !== false && [plugins.remarkImage, remarkImageOptions],
      'remarkCodeTab' in plugins &&
        remarkCodeTabOptions !== false && [
          plugins.remarkCodeTab,
          remarkCodeTabOptions,
        ],
      'remarkNpm' in plugins &&
        remarkNpmOptions !== false && [plugins.remarkNpm, remarkNpmOptions],
      ...v,
      remarkStructureOptions !== false && [
        plugins.remarkStructure,
        remarkStructureOptions,
      ],
      [remarkMdxExport, { values: mdxExports }],
    ],
    mdxOptions.remarkPlugins,
  );

  const rehypePlugins = pluginOption(
    (v) => [
      rehypeCodeOptions !== false && [plugins.rehypeCode, rehypeCodeOptions],
      ...v,
      plugins.rehypeToc,
    ],
    mdxOptions.rehypePlugins,
  );

  return {
    ...mdxOptions,
    remarkPlugins,
    rehypePlugins,
  };
}

export async function loadDefaultOptions(
  config: LoadedConfig,
): Promise<ProcessorOptions> {
  const input = config.global?.mdxOptions;
  config._mdx_loader ??= {};

  const mdxLoader = config._mdx_loader;
  if (!mdxLoader.cachedOptions) {
    mdxLoader.cachedOptions =
      typeof input === 'function'
        ? getDefaultMDXOptions(await input())
        : getDefaultMDXOptions(input ?? {});
  }

  return mdxLoader.cachedOptions;
}



================================================
FILE: packages/mdx/src/utils/schema.ts
================================================
import { z } from 'zod';
import type { CollectionSchema } from '@/config';
import type { StandardSchemaV1 } from '@standard-schema/spec';
import picocolors from 'picocolors';

export const metaSchema = z.object({
  title: z.string().optional(),
  pages: z.array(z.string()).optional(),
  description: z.string().optional(),
  root: z.boolean().optional(),
  defaultOpen: z.boolean().optional(),
  icon: z.string().optional(),
});

export const frontmatterSchema = z.object({
  title: z.string(),
  description: z.string().optional(),
  icon: z.string().optional(),
  full: z.boolean().optional(),

  // Fumadocs OpenAPI generated
  _openapi: z.looseObject({}).optional(),
});

export class ValidationError extends Error {
  issues: readonly StandardSchemaV1.Issue[];

  constructor(message: string, issues: readonly StandardSchemaV1.Issue[]) {
    super(message);
    this.issues = issues;
  }

  toString() {
    return `${this.message}:\n${this.issues.map((issue) => `  ${issue.path}: ${issue.message}`).join('\n')}`;
  }

  toStringFormatted() {
    return [
      picocolors.bold(`[MDX] ${this.message}:`),
      ...this.issues.map((issue) =>
        picocolors.redBright(
          `- ${picocolors.bold(issue.path?.join('.') ?? '*')}: ${issue.message}`,
        ),
      ),
    ].join('\n');
  }
}

export async function validate<Schema extends StandardSchemaV1, Context>(
  schema: CollectionSchema<Schema, Context>,
  data: unknown,
  context: Context,
  errorMessage: string,
): Promise<StandardSchemaV1.InferOutput<Schema>> {
  if (typeof schema === 'function' && !('~standard' in schema)) {
    schema = schema(context);
  }

  if ('~standard' in schema) {
    const result = await (schema as StandardSchemaV1)['~standard'].validate(
      data,
    );

    if (result.issues) {
      throw new ValidationError(errorMessage, result.issues);
    }

    return result.value;
  }

  return data;
}



================================================
FILE: packages/mdx/src/vite/index.ts
================================================
import type { Plugin } from 'vite';
import { buildConfig } from '@/config/build';
import { buildMDX } from '@/utils/build-mdx';
import { parse } from 'node:querystring';
import { countLines } from '@/utils/count-lines';
import { fumaMatter } from '@/utils/fuma-matter';
import { loadDefaultOptions } from '@/utils/mdx-options';

export interface CreateMDXOptions {
  configPath?: string;
}

const fileRegex = /\.(md|mdx)$/;

export default function unstable_mdx(
  config: Record<string, unknown>,
  _options: CreateMDXOptions = {},
): Plugin {
  const [err, loaded] = buildConfig(config);
  if (err || !loaded) {
    throw new Error(err);
  }

  return {
    name: 'fumadocs-mdx',
    // TODO: need a way to generate .source folder that works for non-RSC based frameworks, currently, we need to dynamic import MDX files using `import.meta.glob`.
    // at the moment, RR and Tanstack Start has no stable support for RSC yet.

    async transform(value, id) {
      const [path, query = ''] = id.split('?');
      if (!fileRegex.test(path)) return;

      const matter = fumaMatter(value);
      const isDevelopment = this.environment.mode === 'dev';
      const { collection: collectionId, raw } = parse(query) as {
        collection?: string;
        raw?: string;
      };

      const collection = collectionId
        ? loaded.collections.get(collectionId)
        : undefined;

      // ensure the line number is correct in dev mode
      const lineOffset = '\n'.repeat(
        isDevelopment ? countLines(matter.matter) : 0,
      );

      let mdxOptions;
      switch (collection?.type) {
        case 'doc':
          mdxOptions = collection.mdxOptions;
          break;
        case 'docs':
          mdxOptions = collection.docs.mdxOptions;
          break;
      }

      mdxOptions ??= await loadDefaultOptions(loaded);

      const file = await buildMDX(
        collectionId ?? 'global',
        lineOffset + matter.content,
        {
          development: isDevelopment,
          ...mdxOptions,
          filePath: path,
          frontmatter: matter.data as Record<string, unknown>,
          _compiler: {
            addDependency: (file) => {
              this.addWatchFile(file);
            },
          },
        },
      );

      return {
        code:
          typeof raw === 'string'
            ? `export default ${JSON.stringify(file.value)}`
            : String(file.value),
      };
    },
  };
}



================================================
FILE: packages/mdx/test/index.test.ts
================================================
import { fileURLToPath } from 'node:url';
import * as path from 'node:path';
import { expect, test } from 'vitest';
import { z } from 'zod';
import { ValidationError } from '@/utils/schema';
import { generateJS } from '@/map/generate';
import { defineCollections } from '@/config';
import { fumaMatter } from '@/utils/fuma-matter';

test('format errors', async () => {
  const schema = z.object({
    text: z.string(),
    obj: z.object({
      key: z.number(),
      value: z.number(),
    }),
    value: z.string().max(4),
  });

  const result = await schema['~standard'].validate({
    text: 4,
    obj: {
      value: 'string',
    },
    value: 'asfdfsdfsdfsd',
  });

  if (result.issues) {
    const error = new ValidationError('in index.mdx:', result.issues);

    expect(error.toString()).toMatchInlineSnapshot(`
      "in index.mdx::
        text: Invalid input: expected string, received number
        obj,key: Invalid input: expected number, received undefined
        obj,value: Invalid input: expected number, received string
        value: Too big: expected string to have <=4 characters"
    `);
  }
});

const file = path.dirname(fileURLToPath(import.meta.url));

const cases = [
  {
    name: 'sync',
    collection: defineCollections({
      type: 'doc',
      dir: path.join(file, './fixtures'),
    }),
  },
  {
    name: 'async',
    collection: defineCollections({
      type: 'doc',
      dir: path.join(file, './fixtures'),
      async: true,
    }),
  },
];

for (const { name, collection } of cases) {
  test(`generate JS index file: ${name}`, async () => {
    const out = await generateJS(
      path.join(file, './fixtures/config.ts'),
      {
        _runtime: {
          files: new Map(),
        },
        // @ts-expect-error -- test file
        collections: new Map([['docs', collection]]),
      },
      {
        relativeTo: path.join(file, './fixtures'),
      },
      'hash',
    );

    await expect(out.replaceAll(process.cwd(), '$cwd')).toMatchFileSnapshot(
      `./fixtures/index-${name}.output.js`,
    );
  });
}

test('parse frontmatter', () => {
  expect(
    fumaMatter(
      '---\ntitle: hello world\ndescription: I love Fumadocs\n---\nwow looks cool.',
    ),
  ).toMatchInlineSnapshot(`
    {
      "content": "wow looks cool.",
      "data": {
        "description": "I love Fumadocs",
        "title": "hello world",
      },
      "matter": "title: hello world
    description: I love Fumadocs",
    }
  `);

  expect(
    fumaMatter(
      '---\r\ntitle: hello world\r\ndescription: I love Fumadocs\r\n---\r\nwow looks cool.',
    ),
  ).toMatchInlineSnapshot(`
    {
      "content": "wow looks cool.",
      "data": {
        "description": "I love Fumadocs",
        "title": "hello world",
      },
      "matter": "title: hello world
    description: I love Fumadocs",
    }
  `);

  expect(fumaMatter('--- \ntitle: hello world\r\n---\r\nwow looks cool.'))
    .toMatchInlineSnapshot(`
    {
      "content": "--- 
    title: hello world
    ---
    wow looks cool.",
      "data": {},
      "matter": "",
    }
  `);
});



================================================
FILE: packages/mdx/test/fixtures/index-async.output.js
================================================
// @ts-nocheck -- skip type checking
import { _runtimeAsync, buildConfig } from "fumadocs-mdx/runtime/async"
const [err, _sourceConfig] = buildConfig(_source)
if (!_sourceConfig) throw new Error(err)
import { _runtime } from "fumadocs-mdx"
import * as _source from "./config"
export const docs = _runtimeAsync.doc<typeof _source.docs>([{"info":{"path":"index.mdx","absolutePath":"$cwd/packages/mdx/test/fixtures/index.mdx"},"data":{},"content":"# Hello World\n"}, {"info":{"path":"folder/test.mdx","absolutePath":"$cwd/packages/mdx/test/fixtures/folder/test.mdx"},"data":{},"content":""}], "docs", _sourceConfig)


================================================
FILE: packages/mdx/test/fixtures/index-sync.output.js
================================================
// @ts-nocheck -- skip type checking
import * as docs_1 from "./folder/test.mdx?collection=docs&hash=hash"
import * as docs_0 from "./index.mdx?collection=docs&hash=hash"
import { _runtime } from "fumadocs-mdx"
import * as _source from "./config"
export const docs = _runtime.doc<typeof _source.docs>([{ info: {"path":"index.mdx","absolutePath":"$cwd/packages/mdx/test/fixtures/index.mdx"}, data: docs_0 }, { info: {"path":"folder/test.mdx","absolutePath":"$cwd/packages/mdx/test/fixtures/folder/test.mdx"}, data: docs_1 }]);


================================================
FILE: packages/mdx/test/fixtures/index.mdx
================================================
# Hello World



================================================
FILE: packages/mdx/test/fixtures/folder/test.mdx
================================================
[Empty file]


================================================
FILE: packages/mdx-remote/CHANGELOG.md
================================================
# @fumadocs/mdx-remote

## 1.3.4

### Patch Changes

- d0f8a15: Enable `remarkNpm` by default, replace `remarkInstall` with it.
- Updated dependencies [d0f8a15]
- Updated dependencies [84918b8]
- Updated dependencies [f8d1709]
  - fumadocs-core@15.6.0

## 1.3.3

### Patch Changes

- 1b7bc4b: Add `@types/react` to optional peer dependency to avoid version conflict in monorepos
- Updated dependencies [7a45921]
- Updated dependencies [1b7bc4b]
  - fumadocs-core@15.5.2

## 1.3.2

### Patch Changes

- a6c909b: Removed unused devDependencies and migrated from `fast-glob` to `tinyglobby`
  - fumadocs-core@15.3.4

## 1.3.1

### Patch Changes

- 4ae7b4a: Support MDX in codeblock tab value
- Updated dependencies [4ae7b4a]
  - fumadocs-core@15.3.3

## 1.3.0

### Minor Changes

- 363055d: Support `/client` API for browser usage
- cf87f9d: Support `compiler.compileFile`, deprecate `skipRender` option in favour of this
- cf87f9d: Deprecate `executeMdx` in favour of `compiler.render`

### Patch Changes

- Updated dependencies [2fd325c]
- Updated dependencies [a7cf4fa]
  - fumadocs-core@15.2.0

## 1.2.1

### Patch Changes

- 6493817: Load plugins conditionally for current Fumadocs version
- Updated dependencies [c5add28]
- Updated dependencies [f3cde4f]
- Updated dependencies [7c8a690]
- Updated dependencies [b812457]
  - fumadocs-core@15.1.1

## 1.2.0

### Minor Changes

- 69f20cb: Remove `content` property from the output of `compile`

### Patch Changes

- fumadocs-core@15.0.3

## 1.1.3

### Patch Changes

- a89d6e0: Support Fumadocs v15
- Updated dependencies [5b8cca8]
- Updated dependencies [a763058]
- Updated dependencies [581f4a5]
  - fumadocs-core@15.0.0

## 1.1.2

### Patch Changes

- 3bde5cc: Support JSX nodes in TOC
  - fumadocs-core@14.7.7

## 1.1.1

### Patch Changes

- b9601fb: Update Shiki
- 1142b8c: Support `createCompiler` API
- Updated dependencies [b9601fb]
  - fumadocs-core@14.7.6

## 1.1.0

### Minor Changes

- f2e880f: Deprecate `content`, prefer `body` instead

### Patch Changes

- f2e880f: Support more options for `compile()`
- Updated dependencies [777188b]
  - fumadocs-core@14.7.5

## 1.0.0

### Major Changes

- 82ff9ec: **Remove GitHub remote integration**

  **why:** It should be equivalent to `next-mdx-remote` but include extra functionalities by Fumadocs, like built-in MDX plugins, table of contents and frontmatter parsing.

  **migrate:** Implement your own content source, or see our Sanity/BaseHub examples for CMS usages.

## 0.2.4

### Patch Changes

- 4766292: Support React 19
- Updated dependencies [4dfde6b]
- Updated dependencies [bebb16b]
- Updated dependencies [4766292]
- Updated dependencies [050b326]
  - fumadocs-core@14.6.0

## 0.2.3

### Patch Changes

- e612f2a: Make compatible with Next.js 15
- be820c4: Bump deps
- Updated dependencies [e45bc67]
- Updated dependencies [d9e908e]
- Updated dependencies [d9e908e]
- Updated dependencies [f949520]
- Updated dependencies [9a0b09f]
- Updated dependencies [9a0b09f]
- Updated dependencies [367f4c3]
- Updated dependencies [e1ee822]
- Updated dependencies [e612f2a]
- Updated dependencies [9a0b09f]
- Updated dependencies [d9e908e]
- Updated dependencies [8ef00dc]
- Updated dependencies [979e301]
- Updated dependencies [d9e908e]
- Updated dependencies [979e301]
- Updated dependencies [15781f0]
- Updated dependencies [be820c4]
- Updated dependencies [d9e908e]
  - fumadocs-core@14.0.0

## 0.2.2

### Patch Changes

- 0c251e5: Bump deps
- Updated dependencies [7dabbc1]
- Updated dependencies [0c251e5]
- Updated dependencies [3b56170]
  - fumadocs-core@13.4.2

## 0.2.1

### Patch Changes

- 758013f: Use Fumadocs Remark Image instead of `rehype-img-size`
- Updated dependencies [36b771b]
- Updated dependencies [61b91fa]
  - fumadocs-core@13.2.2

## 0.2.0

### Minor Changes

- e6e1d9f: Improve Hot Reload

### Patch Changes

- fumadocs-core@12.4.1

## 0.1.0

### Minor Changes

- ca7d0f4: Support built-in search index build utility

### Patch Changes

- Updated dependencies [ca7d0f4]
  - fumadocs-core@12.3.2

## 0.0.2

### Patch Changes

- a39dbcb: Support Github Integration
- Updated dependencies [a39dbcb]
  - fumadocs-core@12.1.1

## 0.0.1

### Patch Changes

- e7f4edf: Support remote MDX files with `@fumadocs/remote-mdx`
  - fumadocs-core@12.0.7



================================================
FILE: packages/mdx-remote/eslint.config.mjs
================================================
import library from 'eslint-config-custom/library.js';

export default [
  {
    ignores: ['dist/', 'node_modules/', 'test/**/*'],
  },
  ...library,
  {
    rules: {
      'import/no-named-as-default': 'off',
      'import/no-named-as-default-member': 'off',
    },
  },
];



================================================
FILE: packages/mdx-remote/package.json
================================================
{
  "name": "@fumadocs/mdx-remote",
  "version": "1.3.4",
  "description": "The remote MDX files adapter for Fumadocs",
  "keywords": [
    "NextJs",
    "Docs",
    "fumadocs",
    "next-mdx-remote"
  ],
  "homepage": "https://fumadocs.vercel.app",
  "repository": "github:fuma-nama/fumadocs",
  "license": "MIT",
  "author": "Fuma Nama",
  "type": "module",
  "exports": {
    ".": {
      "import": "./dist/index.js",
      "types": "./dist/index.d.ts"
    },
    "./client": {
      "import": "./dist/client/index.js",
      "types": "./dist/client/index.d.ts"
    }
  },
  "module": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "files": [
    "dist/*"
  ],
  "scripts": {
    "build": "tsup",
    "clean": "rimraf dist",
    "dev": "tsup --watch",
    "lint": "eslint .",
    "types:check": "tsc --noEmit"
  },
  "dependencies": {
    "@mdx-js/mdx": "^3.1.0",
    "gray-matter": "^4.0.3",
    "zod": "^4.0.2"
  },
  "devDependencies": {
    "@types/mdx": "^2.0.13",
    "@types/node": "24.0.12",
    "@types/react": "^19.1.8",
    "eslint-config-custom": "workspace:*",
    "fumadocs-core": "workspace:*",
    "react": "^19.1.0",
    "tinyglobby": "^0.2.14",
    "tsconfig": "workspace:*",
    "unified": "^11.0.5",
    "vfile": "^6.0.3"
  },
  "peerDependencies": {
    "@types/react": "*",
    "fumadocs-core": "^14.0.0 || ^15.0.0",
    "react": "18.x.x || 19.x.x"
  },
  "peerDependenciesMeta": {
    "@types/react": {
      "optional": true
    }
  },
  "publishConfig": {
    "access": "public"
  }
}



================================================
FILE: packages/mdx-remote/tsconfig.json
================================================
{
  "extends": "tsconfig/base.json",
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    },
    "noEmit": true,
    "lib": ["ESNext", "DOM"],
    "module": "ESNext",
    "target": "ES2020"
  },
  "exclude": ["node_modules", "eslint.config.mjs"]
}



================================================
FILE: packages/mdx-remote/tsup.config.ts
================================================
import { defineConfig } from 'tsup';

export default defineConfig({
  external: ['fumadocs-core', 'next', 'react'],
  dts: true,
  target: 'es2021',
  entry: ['./src/index.ts', './src/client/index.ts'],
  format: 'esm',
});



================================================
FILE: packages/mdx-remote/vitest.config.ts
================================================
import { defineProject } from 'vitest/config';

export default defineProject({
  resolve: {
    alias: {
      '@/': new URL('./src/', import.meta.url).pathname,
    },
  },
});



================================================
FILE: packages/mdx-remote/src/compile.ts
================================================
import * as Plugins from 'fumadocs-core/mdx-plugins';
import { type CompileOptions, createProcessor } from '@mdx-js/mdx';
import type { MDXComponents } from 'mdx/types';
import { parseFrontmatter, pluginOption, type ResolvePlugins } from './utils';
import type { Compatible, VFile } from 'vfile';
import type { TableOfContents } from 'fumadocs-core/server';
import { executeMdx, type MdxContent } from '@/render';
import { pathToFileURL } from 'node:url';

export type MDXOptions = Omit<
  CompileOptions,
  'remarkPlugins' | 'rehypePlugins'
> & {
  remarkPlugins?: ResolvePlugins;
  rehypePlugins?: ResolvePlugins;

  remarkHeadingOptions?: Plugins.RemarkHeadingOptions | false;
  rehypeCodeOptions?: Plugins.RehypeCodeOptions | false;
  rehypeTocOptions?: Plugins.RehypeTocOptions | false;
  remarkCodeTabOptions?: Plugins.RemarkCodeTabOptions | false;
  remarkNpmOptions?: Plugins.RemarkNpmOptions | false;

  /**
   * The directory to find image sizes
   *
   * @defaultValue './public'
   * @deprecated Use `remarkImageOptions.publicDir` instead
   */
  imageDir?: string;

  remarkImageOptions?: Plugins.RemarkImageOptions | false;
};

export interface CompileMDXOptions {
  source: string;
  /**
   * File path of source content
   */
  filePath?: string;

  mdxOptions?: MDXOptions;
  components?: MDXComponents;
  scope?: Record<string, unknown>;

  /**
   * @deprecated Use `compiler.compileFile` instead if you doesn't need to execute output JavaScript code.
   */
  skipRender?: boolean;
}

export interface CompileMDXResult<TFrontmatter = Record<string, unknown>> {
  body: MdxContent;
  frontmatter: TFrontmatter;
  toc: TableOfContents;
  vfile: VFile;

  compiled: string;
  exports: Record<string, unknown> | null;
}

export function createCompiler(mdxOptions?: MDXOptions) {
  let instance: ReturnType<typeof createProcessor> | undefined;

  function getProcessor() {
    if (instance) return instance;

    let format = mdxOptions?.format;
    if (!format || format === 'detect') format = 'mdx';

    return (instance = createProcessor({
      ...getCompileOptions(mdxOptions),
      format,
    }));
  }

  return {
    async render(
      compiled: string,
      scope?: Record<string, unknown>,
      filePath?: string,
    ) {
      return executeMdx(compiled, {
        scope,
        baseUrl: filePath ? pathToFileURL(filePath) : undefined,
        jsxRuntime: mdxOptions?.development
          ? await import('react/jsx-dev-runtime')
          : undefined,
      });
    },
    /**
     * Compile VFile
     */
    async compileFile(from: Compatible): Promise<VFile> {
      return getProcessor().process(from);
    },
    async compile<Frontmatter extends object = Record<string, unknown>>(
      options: Omit<CompileMDXOptions, 'mdxOptions'>,
    ): Promise<CompileMDXResult<Frontmatter>> {
      const { scope = {}, skipRender } = options;
      const { frontmatter, content } = parseFrontmatter(options.source);

      const file = await this.compileFile({
        value: content,
        path: options.filePath,
      });
      const compiled = String(file);
      const exports = !skipRender
        ? await this.render(compiled, scope, options.filePath)
        : null;

      return {
        vfile: file,
        compiled,
        frontmatter: frontmatter as Frontmatter,
        async body(props) {
          if (!exports)
            throw new Error(
              'Body cannot be rendered when `skipRender` is set to true',
            );

          return exports.default({
            components: { ...options.components, ...props.components },
          });
        },
        toc: exports?.toc ?? (file.data.toc as TableOfContents),
        exports,
      };
    },
  };
}

export async function compileMDX<
  Frontmatter extends object = Record<string, unknown>,
>(options: CompileMDXOptions): Promise<CompileMDXResult<Frontmatter>> {
  const compiler = createCompiler(options.mdxOptions);

  return compiler.compile(options);
}

function getCompileOptions({
  rehypeCodeOptions,
  remarkImageOptions,
  rehypeTocOptions,
  remarkHeadingOptions,
  remarkCodeTabOptions,
  remarkNpmOptions,
  imageDir = './public',
  ...options
}: MDXOptions = {}): CompileOptions {
  function getPlugin<K extends keyof typeof Plugins>(
    name: K,
  ): (typeof Plugins)[K] | null {
    return name in Plugins ? Plugins[name] : null;
  }
  const remarkGfm = getPlugin('remarkGfm');
  const remarkHeading = getPlugin('remarkHeading');
  const remarkCodeTab = getPlugin('remarkCodeTab');
  const remarkNpm = getPlugin('remarkNpm');
  const remarkImage = getPlugin('remarkImage');
  const rehypeCode = getPlugin('rehypeCode');
  const rehypeToc = getPlugin('rehypeToc');

  return {
    ...options,
    outputFormat: 'function-body',
    remarkPlugins: pluginOption(
      (v) => [
        remarkGfm,
        remarkHeading && remarkHeadingOptions !== false
          ? [remarkHeading, remarkHeadingOptions]
          : null,
        remarkImage && remarkImageOptions !== false
          ? [
              remarkImage,
              {
                useImport: false,
                publicDir: imageDir,
                ...remarkImageOptions,
              } satisfies Plugins.RemarkImageOptions,
            ]
          : null,
        remarkCodeTab && remarkCodeTabOptions !== false
          ? [remarkCodeTab, remarkCodeTabOptions]
          : null,
        remarkNpm && remarkNpmOptions !== false
          ? [remarkNpm, remarkNpmOptions]
          : null,
        ...v,
      ],
      options.remarkPlugins,
    ),
    rehypePlugins: pluginOption(
      (v) => [
        rehypeCode && rehypeCodeOptions !== false
          ? [rehypeCode, rehypeCodeOptions]
          : null,
        rehypeToc && rehypeTocOptions !== false
          ? [rehypeToc, rehypeTocOptions]
          : null,
        ...v,
      ],
      options.rehypePlugins,
    ),
  };
}



================================================
FILE: packages/mdx-remote/src/index.ts
================================================
import type { TableOfContents } from 'fumadocs-core/server';
import type { MdxContent } from '@/render';

export * from './compile';
export { parseFrontmatter } from './utils';

/**
 * @deprecated Use `compiler.render` instead
 */
export async function executeMdx(
  compiled: string,
  scope: object,
  baseUrl?: string | URL,
) {
  let jsxRuntime;

  if (process.env.NODE_ENV === 'production') {
    jsxRuntime = await import('react/jsx-runtime');
  } else {
    jsxRuntime = await import('react/jsx-dev-runtime');
  }

  const fullScope = {
    opts: {
      ...jsxRuntime,
      baseUrl,
    },
    ...scope,
  };

  const values = Object.values(fullScope);
  const params = Object.keys(fullScope);
  params.push(`return (async () => { ${compiled} })()`);
  const hydrateFn = new Function(...params);

  return (await hydrateFn.apply(hydrateFn, values)) as {
    default: MdxContent;
    toc?: TableOfContents;
  };
}



================================================
FILE: packages/mdx-remote/src/render.ts
================================================
import { type MDXComponents } from 'mdx/types';
import type { TableOfContents } from 'fumadocs-core/server';
import type { FC } from 'react';
import jsxRuntimeDefault from 'react/jsx-runtime';

export type MdxContent = FC<{ components?: MDXComponents }>;

interface Options {
  scope?: Record<string, unknown>;
  baseUrl?: string | URL;
  jsxRuntime?: unknown;
}

export async function executeMdx(compiled: string, options: Options = {}) {
  const fullScope = {
    ...options.scope,
    opts: {
      ...(options.scope?.opts as object),
      ...(options.jsxRuntime ?? jsxRuntimeDefault),
      baseUrl: options.baseUrl,
    },
  };

  const values = Object.values(fullScope);
  const params = Object.keys(fullScope);
  params.push(`return (async () => { ${compiled} })()`);
  const hydrateFn = new Function(...params);

  return (await hydrateFn.apply(hydrateFn, values)) as {
    default: MdxContent;
    toc?: TableOfContents;
  };
}

export function executeMdxSync(compiled: string, options: Options = {}) {
  const fullScope = {
    ...options.scope,
    opts: {
      ...(options.scope?.opts as object),
      ...(options.jsxRuntime ?? jsxRuntimeDefault),
      baseUrl: options.baseUrl,
    },
  };

  const values = Object.values(fullScope);
  const params = Object.keys(fullScope);
  params.push(`return (() => { ${compiled} })()`);
  const hydrateFn = new Function(...params);

  return hydrateFn.apply(hydrateFn, values) as {
    default: MdxContent;
    toc?: TableOfContents;
  };
}



================================================
FILE: packages/mdx-remote/src/utils.ts
================================================
import type { Pluggable } from 'unified';
import matter from 'gray-matter';

export type ResolvePlugins = Pluggable[] | ((v: Pluggable[]) => Pluggable[]);

export function pluginOption(
  def: (v: Pluggable[]) => (Pluggable | false | null)[],
  options: ResolvePlugins = [],
): Pluggable[] {
  const list = def(Array.isArray(options) ? options : []).filter(
    Boolean,
  ) as Pluggable[];

  if (typeof options === 'function') {
    return options(list);
  }

  return list;
}

/**
 * Parse frontmatter, currently powered by `gray-matter`
 */
export function parseFrontmatter(content: string) {
  const out = matter(content);

  return {
    frontmatter: out.data,
    content: out.content,
  };
}



================================================
FILE: packages/mdx-remote/src/client/index.ts
================================================
export * from '../render';



================================================
FILE: packages/mdx-remote/test/index.test.ts
================================================
import { expect, test } from 'vitest';
import { createCompiler } from '@/compile';
import { glob } from 'tinyglobby';
import fs from 'node:fs/promises';
import { fileURLToPath } from 'node:url';
import path from 'node:path';

const dir = path.dirname(fileURLToPath(import.meta.url));
const files = await glob('./fixtures/*.mdx', {
  cwd: dir,
});

const compiler = createCompiler({
  development: true,
  rehypeCodeOptions: {
    experimentalJSEngine: true,
    lazy: true,
    themes: {
      light: 'github-light',
      dark: 'github-dark',
    },
  },
});

const compilerProduction = createCompiler({
  development: false,
  rehypeCodeOptions: {
    experimentalJSEngine: true,
    lazy: true,
    themes: {
      light: 'github-light',
      dark: 'github-dark',
    },
  },
});

for (const file of files) {
  const content = (await fs.readFile(path.join(dir, file))).toString();

  test(`compile: ${file}`, async () => {
    const out = await compiler.compile({
      skipRender: true,
      source: content,
    });

    await expect(out.compiled).toMatchFileSnapshot(`${file}.js`);
    await expect({
      toc: out.toc,
      frontmatter: out.frontmatter,
    }).toMatchFileSnapshot(`${file}.json`);
  });

  test(`compile: ${file} (production)`, async () => {
    const out = await compilerProduction.compile({
      skipRender: true,
      source: content,
    });

    await expect(out.compiled).toMatchFileSnapshot(`${file}.production.js`);
    await expect({
      toc: out.toc,
      frontmatter: out.frontmatter,
    }).toMatchFileSnapshot(`${file}.json`);
  });
}



================================================
FILE: packages/mdx-remote/test/fixtures/file.mdx
================================================
## You **found** `me`!



================================================
FILE: packages/mdx-remote/test/fixtures/file.mdx.js
================================================
"use strict";
const {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];
const toc = [{
  depth: 2,
  url: "#you-found-me",
  title: _jsxDEV(_Fragment, {
    children: ["You ", _jsxDEV("strong", {
      children: "found"
    }, undefined, false, {
      fileName: "<source.js>",
      lineNumber: 1,
      columnNumber: 8
    }, this), " ", _jsxDEV("code", {
      children: "me"
    }, undefined, false, {
      fileName: "<source.js>",
      lineNumber: 1,
      columnNumber: 18
    }, this), "!"]
  }, undefined, true, {
    fileName: "<source.js>"
  }, this)
}];
function _createMdxContent(props) {
  const _components = {
    code: "code",
    h2: "h2",
    strong: "strong",
    ...props.components
  };
  return _jsxDEV(_components.h2, {
    id: "you-found-me",
    children: ["You ", _jsxDEV(_components.strong, {
      children: "found"
    }, undefined, false, {
      fileName: "<source.js>",
      lineNumber: 1,
      columnNumber: 8
    }, this), " ", _jsxDEV(_components.code, {
      children: "me"
    }, undefined, false, {
      fileName: "<source.js>",
      lineNumber: 1,
      columnNumber: 18
    }, this), "!"]
  }, undefined, true, {
    fileName: "<source.js>",
    lineNumber: 1,
    columnNumber: 1
  }, this);
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = props.components || ({});
  return MDXLayout ? _jsxDEV(MDXLayout, {
    ...props,
    children: _jsxDEV(_createMdxContent, {
      ...props
    }, undefined, false, {
      fileName: "<source.js>"
    }, this)
  }, undefined, false, {
    fileName: "<source.js>"
  }, this) : _createMdxContent(props);
}
return {
  toc,
  default: MDXContent
};



================================================
FILE: packages/mdx-remote/test/fixtures/file.mdx.json
================================================
{
  "frontmatter": {},
  "toc": [
    {
      "depth": 2,
      "title": "You found me!",
      "url": "#you-found-me",
    },
  ],
}


================================================
FILE: packages/mdx-remote/test/fixtures/file.mdx.production.js
================================================
"use strict";
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const toc = [{
  depth: 2,
  url: "#you-found-me",
  title: _jsxs(_Fragment, {
    children: ["You ", _jsx("strong", {
      children: "found"
    }), " ", _jsx("code", {
      children: "me"
    }), "!"]
  })
}];
function _createMdxContent(props) {
  const _components = {
    code: "code",
    h2: "h2",
    strong: "strong",
    ...props.components
  };
  return _jsxs(_components.h2, {
    id: "you-found-me",
    children: ["You ", _jsx(_components.strong, {
      children: "found"
    }), " ", _jsx(_components.code, {
      children: "me"
    }), "!"]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = props.components || ({});
  return MDXLayout ? _jsx(MDXLayout, {
    ...props,
    children: _jsx(_createMdxContent, {
      ...props
    })
  }) : _createMdxContent(props);
}
return {
  toc,
  default: MDXContent
};



================================================
FILE: packages/mdx-remote/test/fixtures/index.mdx
================================================
---
title: Hello World
description: Something
---

Hey!

```tsx
console.log('Hello World');
```

| Name | Description |
| ---- | ----------- |
| Fuma | Love anime  |



================================================
FILE: packages/mdx-remote/test/fixtures/index.mdx.js
================================================
"use strict";
const {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];
const toc = [];
function _createMdxContent(props) {
  const _components = {
    code: "code",
    p: "p",
    pre: "pre",
    span: "span",
    table: "table",
    tbody: "tbody",
    td: "td",
    th: "th",
    thead: "thead",
    tr: "tr",
    ...props.components
  };
  return _jsxDEV(_Fragment, {
    children: [_jsxDEV(_components.p, {
      children: "Hey!"
    }, undefined, false, {
      fileName: "<source.js>",
      lineNumber: 2,
      columnNumber: 1
    }, this), "\n", _jsxDEV(_Fragment, {
      children: _jsxDEV(_components.pre, {
        className: "shiki shiki-themes github-light github-dark",
        style: {
          "--shiki-light": "#24292e",
          "--shiki-dark": "#e1e4e8",
          "--shiki-light-bg": "#fff",
          "--shiki-dark-bg": "#24292e"
        },
        tabIndex: "0",
        icon: "<svg viewBox=\"0 0 24 24\"><path d=\"M14.23 12.004a2.236 2.236 0 0 1-2.235 2.236 2.236 2.236 0 0 1-2.236-2.236 2.236 2.236 0 0 1 2.235-2.236 2.236 2.236 0 0 1 2.236 2.236zm2.648-10.69c-1.346 0-3.107.96-4.888 2.622-1.78-1.653-3.542-2.602-4.887-2.602-.41 0-.783.093-1.106.278-1.375.793-1.683 3.264-.973 6.365C1.98 8.917 0 10.42 0 12.004c0 1.59 1.99 3.097 5.043 4.03-.704 3.113-.39 5.588.988 6.38.32.187.69.275 1.102.275 1.345 0 3.107-.96 4.888-2.624 1.78 1.654 3.542 2.603 4.887 2.603.41 0 .783-.09 1.106-.275 1.374-.792 1.683-3.263.973-6.365C22.02 15.096 24 13.59 24 12.004c0-1.59-1.99-3.097-5.043-4.032.704-3.11.39-5.587-.988-6.38-.318-.184-.688-.277-1.092-.278zm-.005 1.09v.006c.225 0 .406.044.558.127.666.382.955 1.835.73 3.704-.054.46-.142.945-.25 1.44-.96-.236-2.006-.417-3.107-.534-.66-.905-1.345-1.727-2.035-2.447 1.592-1.48 3.087-2.292 4.105-2.295zm-9.77.02c1.012 0 2.514.808 4.11 2.28-.686.72-1.37 1.537-2.02 2.442-1.107.117-2.154.298-3.113.538-.112-.49-.195-.964-.254-1.42-.23-1.868.054-3.32.714-3.707.19-.09.4-.127.563-.132zm4.882 3.05c.455.468.91.992 1.36 1.564-.44-.02-.89-.034-1.345-.034-.46 0-.915.01-1.36.034.44-.572.895-1.096 1.345-1.565zM12 8.1c.74 0 1.477.034 2.202.093.406.582.802 1.203 1.183 1.86.372.64.71 1.29 1.018 1.946-.308.655-.646 1.31-1.013 1.95-.38.66-.773 1.288-1.18 1.87-.728.063-1.466.098-2.21.098-.74 0-1.477-.035-2.202-.093-.406-.582-.802-1.204-1.183-1.86-.372-.64-.71-1.29-1.018-1.946.303-.657.646-1.313 1.013-1.954.38-.66.773-1.286 1.18-1.868.728-.064 1.466-.098 2.21-.098zm-3.635.254c-.24.377-.48.763-.704 1.16-.225.39-.435.782-.635 1.174-.265-.656-.49-1.31-.676-1.947.64-.15 1.315-.283 2.015-.386zm7.26 0c.695.103 1.365.23 2.006.387-.18.632-.405 1.282-.66 1.933-.2-.39-.41-.783-.64-1.174-.225-.392-.465-.774-.705-1.146zm3.063.675c.484.15.944.317 1.375.498 1.732.74 2.852 1.708 2.852 2.476-.005.768-1.125 1.74-2.857 2.475-.42.18-.88.342-1.355.493-.28-.958-.646-1.956-1.1-2.98.45-1.017.81-2.01 1.085-2.964zm-13.395.004c.278.96.645 1.957 1.1 2.98-.45 1.017-.812 2.01-1.086 2.964-.484-.15-.944-.318-1.37-.5-1.732-.737-2.852-1.706-2.852-2.474 0-.768 1.12-1.742 2.852-2.476.42-.18.88-.342 1.356-.494zm11.678 4.28c.265.657.49 1.312.676 1.948-.64.157-1.316.29-2.016.39.24-.375.48-.762.705-1.158.225-.39.435-.788.636-1.18zm-9.945.02c.2.392.41.783.64 1.175.23.39.465.772.705 1.143-.695-.102-1.365-.23-2.006-.386.18-.63.406-1.282.66-1.933zM17.92 16.32c.112.493.2.968.254 1.423.23 1.868-.054 3.32-.714 3.708-.147.09-.338.128-.563.128-1.012 0-2.514-.807-4.11-2.28.686-.72 1.37-1.536 2.02-2.44 1.107-.118 2.154-.3 3.113-.54zm-11.83.01c.96.234 2.006.415 3.107.532.66.905 1.345 1.727 2.035 2.446-1.595 1.483-3.092 2.295-4.11 2.295-.22-.005-.406-.05-.553-.132-.666-.38-.955-1.834-.73-3.703.054-.46.142-.944.25-1.438zm4.56.64c.44.02.89.034 1.345.034.46 0 .915-.01 1.36-.034-.44.572-.895 1.095-1.345 1.565-.455-.47-.91-.993-1.36-1.565z\" fill=\"currentColor\" /></svg>",
        children: _jsxDEV(_components.code, {
          children: _jsxDEV(_components.span, {
            className: "line",
            children: [_jsxDEV(_components.span, {
              style: {
                "--shiki-light": "#24292E",
                "--shiki-dark": "#E1E4E8"
              },
              children: "console."
            }, undefined, false, {
              fileName: "<source.js>"
            }, this), _jsxDEV(_components.span, {
              style: {
                "--shiki-light": "#6F42C1",
                "--shiki-dark": "#B392F0"
              },
              children: "log"
            }, undefined, false, {
              fileName: "<source.js>"
            }, this), _jsxDEV(_components.span, {
              style: {
                "--shiki-light": "#24292E",
                "--shiki-dark": "#E1E4E8"
              },
              children: "("
            }, undefined, false, {
              fileName: "<source.js>"
            }, this), _jsxDEV(_components.span, {
              style: {
                "--shiki-light": "#032F62",
                "--shiki-dark": "#9ECBFF"
              },
              children: "'Hello World'"
            }, undefined, false, {
              fileName: "<source.js>"
            }, this), _jsxDEV(_components.span, {
              style: {
                "--shiki-light": "#24292E",
                "--shiki-dark": "#E1E4E8"
              },
              children: ");"
            }, undefined, false, {
              fileName: "<source.js>"
            }, this)]
          }, undefined, true, {
            fileName: "<source.js>"
          }, this)
        }, undefined, false, {
          fileName: "<source.js>"
        }, this)
      }, undefined, false, {
        fileName: "<source.js>"
      }, this)
    }, undefined, false, {
      fileName: "<source.js>"
    }, this), "\n", _jsxDEV(_components.table, {
      children: [_jsxDEV(_components.thead, {
        children: _jsxDEV(_components.tr, {
          children: [_jsxDEV(_components.th, {
            children: "Name"
          }, undefined, false, {
            fileName: "<source.js>",
            lineNumber: 8,
            columnNumber: 1
          }, this), _jsxDEV(_components.th, {
            children: "Description"
          }, undefined, false, {
            fileName: "<source.js>",
            lineNumber: 8,
            columnNumber: 8
          }, this)]
        }, undefined, true, {
          fileName: "<source.js>",
          lineNumber: 8,
          columnNumber: 1
        }, this)
      }, undefined, false, {
        fileName: "<source.js>",
        lineNumber: 8,
        columnNumber: 1
      }, this), _jsxDEV(_components.tbody, {
        children: _jsxDEV(_components.tr, {
          children: [_jsxDEV(_components.td, {
            children: "Fuma"
          }, undefined, false, {
            fileName: "<source.js>",
            lineNumber: 10,
            columnNumber: 1
          }, this), _jsxDEV(_components.td, {
            children: "Love anime"
          }, undefined, false, {
            fileName: "<source.js>",
            lineNumber: 10,
            columnNumber: 8
          }, this)]
        }, undefined, true, {
          fileName: "<source.js>",
          lineNumber: 10,
          columnNumber: 1
        }, this)
      }, undefined, false, {
        fileName: "<source.js>",
        lineNumber: 10,
        columnNumber: 1
      }, this)]
    }, undefined, true, {
      fileName: "<source.js>",
      lineNumber: 8,
      columnNumber: 1
    }, this)]
  }, undefined, true, {
    fileName: "<source.js>",
    lineNumber: 1,
    columnNumber: 1
  }, this);
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = props.components || ({});
  return MDXLayout ? _jsxDEV(MDXLayout, {
    ...props,
    children: _jsxDEV(_createMdxContent, {
      ...props
    }, undefined, false, {
      fileName: "<source.js>"
    }, this)
  }, undefined, false, {
    fileName: "<source.js>"
  }, this) : _createMdxContent(props);
}
return {
  toc,
  default: MDXContent
};



================================================
FILE: packages/mdx-remote/test/fixtures/index.mdx.json
================================================
{
  "frontmatter": {
    "description": "Something",
    "title": "Hello World",
  },
  "toc": [],
}


================================================
FILE: packages/mdx-remote/test/fixtures/index.mdx.production.js
================================================
"use strict";
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const toc = [];
function _createMdxContent(props) {
  const _components = {
    code: "code",
    p: "p",
    pre: "pre",
    span: "span",
    table: "table",
    tbody: "tbody",
    td: "td",
    th: "th",
    thead: "thead",
    tr: "tr",
    ...props.components
  };
  return _jsxs(_Fragment, {
    children: [_jsx(_components.p, {
      children: "Hey!"
    }), "\n", _jsx(_Fragment, {
      children: _jsx(_components.pre, {
        className: "shiki shiki-themes github-light github-dark",
        style: {
          "--shiki-light": "#24292e",
          "--shiki-dark": "#e1e4e8",
          "--shiki-light-bg": "#fff",
          "--shiki-dark-bg": "#24292e"
        },
        tabIndex: "0",
        icon: "<svg viewBox=\"0 0 24 24\"><path d=\"M14.23 12.004a2.236 2.236 0 0 1-2.235 2.236 2.236 2.236 0 0 1-2.236-2.236 2.236 2.236 0 0 1 2.235-2.236 2.236 2.236 0 0 1 2.236 2.236zm2.648-10.69c-1.346 0-3.107.96-4.888 2.622-1.78-1.653-3.542-2.602-4.887-2.602-.41 0-.783.093-1.106.278-1.375.793-1.683 3.264-.973 6.365C1.98 8.917 0 10.42 0 12.004c0 1.59 1.99 3.097 5.043 4.03-.704 3.113-.39 5.588.988 6.38.32.187.69.275 1.102.275 1.345 0 3.107-.96 4.888-2.624 1.78 1.654 3.542 2.603 4.887 2.603.41 0 .783-.09 1.106-.275 1.374-.792 1.683-3.263.973-6.365C22.02 15.096 24 13.59 24 12.004c0-1.59-1.99-3.097-5.043-4.032.704-3.11.39-5.587-.988-6.38-.318-.184-.688-.277-1.092-.278zm-.005 1.09v.006c.225 0 .406.044.558.127.666.382.955 1.835.73 3.704-.054.46-.142.945-.25 1.44-.96-.236-2.006-.417-3.107-.534-.66-.905-1.345-1.727-2.035-2.447 1.592-1.48 3.087-2.292 4.105-2.295zm-9.77.02c1.012 0 2.514.808 4.11 2.28-.686.72-1.37 1.537-2.02 2.442-1.107.117-2.154.298-3.113.538-.112-.49-.195-.964-.254-1.42-.23-1.868.054-3.32.714-3.707.19-.09.4-.127.563-.132zm4.882 3.05c.455.468.91.992 1.36 1.564-.44-.02-.89-.034-1.345-.034-.46 0-.915.01-1.36.034.44-.572.895-1.096 1.345-1.565zM12 8.1c.74 0 1.477.034 2.202.093.406.582.802 1.203 1.183 1.86.372.64.71 1.29 1.018 1.946-.308.655-.646 1.31-1.013 1.95-.38.66-.773 1.288-1.18 1.87-.728.063-1.466.098-2.21.098-.74 0-1.477-.035-2.202-.093-.406-.582-.802-1.204-1.183-1.86-.372-.64-.71-1.29-1.018-1.946.303-.657.646-1.313 1.013-1.954.38-.66.773-1.286 1.18-1.868.728-.064 1.466-.098 2.21-.098zm-3.635.254c-.24.377-.48.763-.704 1.16-.225.39-.435.782-.635 1.174-.265-.656-.49-1.31-.676-1.947.64-.15 1.315-.283 2.015-.386zm7.26 0c.695.103 1.365.23 2.006.387-.18.632-.405 1.282-.66 1.933-.2-.39-.41-.783-.64-1.174-.225-.392-.465-.774-.705-1.146zm3.063.675c.484.15.944.317 1.375.498 1.732.74 2.852 1.708 2.852 2.476-.005.768-1.125 1.74-2.857 2.475-.42.18-.88.342-1.355.493-.28-.958-.646-1.956-1.1-2.98.45-1.017.81-2.01 1.085-2.964zm-13.395.004c.278.96.645 1.957 1.1 2.98-.45 1.017-.812 2.01-1.086 2.964-.484-.15-.944-.318-1.37-.5-1.732-.737-2.852-1.706-2.852-2.474 0-.768 1.12-1.742 2.852-2.476.42-.18.88-.342 1.356-.494zm11.678 4.28c.265.657.49 1.312.676 1.948-.64.157-1.316.29-2.016.39.24-.375.48-.762.705-1.158.225-.39.435-.788.636-1.18zm-9.945.02c.2.392.41.783.64 1.175.23.39.465.772.705 1.143-.695-.102-1.365-.23-2.006-.386.18-.63.406-1.282.66-1.933zM17.92 16.32c.112.493.2.968.254 1.423.23 1.868-.054 3.32-.714 3.708-.147.09-.338.128-.563.128-1.012 0-2.514-.807-4.11-2.28.686-.72 1.37-1.536 2.02-2.44 1.107-.118 2.154-.3 3.113-.54zm-11.83.01c.96.234 2.006.415 3.107.532.66.905 1.345 1.727 2.035 2.446-1.595 1.483-3.092 2.295-4.11 2.295-.22-.005-.406-.05-.553-.132-.666-.38-.955-1.834-.73-3.703.054-.46.142-.944.25-1.438zm4.56.64c.44.02.89.034 1.345.034.46 0 .915-.01 1.36-.034-.44.572-.895 1.095-1.345 1.565-.455-.47-.91-.993-1.36-1.565z\" fill=\"currentColor\" /></svg>",
        children: _jsx(_components.code, {
          children: _jsxs(_components.span, {
            className: "line",
            children: [_jsx(_components.span, {
              style: {
                "--shiki-light": "#24292E",
                "--shiki-dark": "#E1E4E8"
              },
              children: "console."
            }), _jsx(_components.span, {
              style: {
                "--shiki-light": "#6F42C1",
                "--shiki-dark": "#B392F0"
              },
              children: "log"
            }), _jsx(_components.span, {
              style: {
                "--shiki-light": "#24292E",
                "--shiki-dark": "#E1E4E8"
              },
              children: "("
            }), _jsx(_components.span, {
              style: {
                "--shiki-light": "#032F62",
                "--shiki-dark": "#9ECBFF"
              },
              children: "'Hello World'"
            }), _jsx(_components.span, {
              style: {
                "--shiki-light": "#24292E",
                "--shiki-dark": "#E1E4E8"
              },
              children: ");"
            })]
          })
        })
      })
    }), "\n", _jsxs(_components.table, {
      children: [_jsx(_components.thead, {
        children: _jsxs(_components.tr, {
          children: [_jsx(_components.th, {
            children: "Name"
          }), _jsx(_components.th, {
            children: "Description"
          })]
        })
      }), _jsx(_components.tbody, {
        children: _jsxs(_components.tr, {
          children: [_jsx(_components.td, {
            children: "Fuma"
          }), _jsx(_components.td, {
            children: "Love anime"
          })]
        })
      })]
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = props.components || ({});
  return MDXLayout ? _jsx(MDXLayout, {
    ...props,
    children: _jsx(_createMdxContent, {
      ...props
    })
  }) : _createMdxContent(props);
}
return {
  toc,
  default: MDXContent
};



================================================
FILE: packages/openapi/CHANGELOG.md
================================================
# @fuma-docs/openapi

## 9.1.1

### Patch Changes

- dd94271: Fix handling of primitive types in `anyOf`/`allOf`
- Updated dependencies [a2d7940]
  - fumadocs-ui@15.6.3
  - fumadocs-core@15.6.3

## 9.1.0

### Minor Changes

- b60c8ed: **Support Parameter Serialization**

  Maybe need to update your code if you've added custom media adapters.

### Patch Changes

- Updated dependencies [1e50889]
- Updated dependencies [353c139]
- Updated dependencies [5844c6f]
  - fumadocs-ui@15.6.2
  - fumadocs-core@15.6.2

## 9.0.18

### Patch Changes

- ae38ed0: Fix Scalar `upgrade()` is somehow ignored
- a35597e: Use new codeblock tab style
- 8f69e33: Always display collapsible for array items

## 9.0.17

### Patch Changes

- 7328590: OpenAPI: Fix non-undefined values not rendering
- b606d36: support custom slugify function for generate files

## 9.0.16

### Patch Changes

- Updated dependencies [1a902ff]
  - fumadocs-core@15.6.1
  - fumadocs-ui@15.6.1

## 9.0.15

### Patch Changes

- 504ab2e: Fix minor UI bugs
- Updated dependencies [d0f8a15]
- Updated dependencies [84918b8]
- Updated dependencies [bf15617]
- Updated dependencies [f8d1709]
  - fumadocs-core@15.6.0
  - fumadocs-ui@15.6.0

## 9.0.14

### Patch Changes

- Updated dependencies [e9b1c9c]
- Updated dependencies [d5c9b11]
- Updated dependencies [0d3f76b]
  - fumadocs-ui@15.5.5
  - fumadocs-core@15.5.5

## 9.0.13

### Patch Changes

- Updated dependencies [4a1d3cf]
- Updated dependencies [35c3c0b]
- Updated dependencies [58b7596]
  - fumadocs-ui@15.5.4
  - fumadocs-core@15.5.4

## 9.0.12

### Patch Changes

- b1f805a: Parse body optionally in proxy

## 9.0.11

### Patch Changes

- Updated dependencies [7d1ac21]
  - fumadocs-core@15.5.3
  - fumadocs-ui@15.5.3

## 9.0.10

### Patch Changes

- 7a45921: Add `absolutePath` and `path` properties to pages, mark `file` as deprecated
- 1b7bc4b: Add `@types/react` to optional peer dependency to avoid version conflict in monorepos
- bc7af38: Support C# code example
- 250ab97: Support Java code example
- Updated dependencies [b675728]
- Updated dependencies [7a45921]
- Updated dependencies [1b7bc4b]
- Updated dependencies [82fc4c8]
  - fumadocs-ui@15.5.2
  - fumadocs-core@15.5.2

## 9.0.9

### Patch Changes

- 201235f: Fix trailing slashes being normalized

## 9.0.8

### Patch Changes

- d435088: fix proxy clone request

## 9.0.7

### Patch Changes

- 77461e5: Fix root schema manipulation with TypeScript definition generation

## 9.0.6

### Patch Changes

- 99e3c95: Consistent URL resolution
- Updated dependencies [b4916d2]
- Updated dependencies [8738b9c]
- Updated dependencies [68526ea]
- Updated dependencies [a66886b]
  - fumadocs-core@15.5.1
  - fumadocs-ui@15.5.1

## 9.0.5

### Patch Changes

- 5067efc: Improved support for all OAuth flows
- Updated dependencies [50f8f7f]
- Updated dependencies [589d101]
- Updated dependencies [697d5b4]
  - fumadocs-ui@15.5.0
  - fumadocs-core@15.5.0

## 9.0.4

### Patch Changes

- 9721f6f: Introduce `allowedOrigins` and `filterRequest` options to `createProxy`. Deprecate `allowedUrls` in favour of new APIs.

## 9.0.3

### Patch Changes

- 5770180: Implement multiple security schemes support
- d2a2d47: Skip non-required values when generating code examples
- Updated dependencies [0ab6c7f]
  - fumadocs-core@15.4.2
  - fumadocs-ui@15.4.2

## 9.0.2

### Patch Changes

- 0a90cb9: Improve auth handling
- Updated dependencies [e72b7b4]
  - fumadocs-ui@15.4.1
  - fumadocs-core@15.4.1

## 9.0.1

### Patch Changes

- 2f2ae4d: Disable schema inline on `generateFiles()`
- 951a1a4: Support overriding request/response from `createProxy()`
- 2f2ae4d: Support code samples without `label`
- 2f2ae4d: Hide internal APis since their changes are not documented

## 9.0.0

### Major Changes

- bdef238: **Redesign `generateFiles`**

  This redesign will finalize the behaviour of `generateFiles` to make it simpler, consistent across different versions of Fumadocs OpenAPI.
  - Abandoned `groupByFolder`, it's deprecated long time ago and can be replaced with `groupBy`.
  - Improved type safety, `groupBy` is now only available with `per` set to `operation`.
  - `name` usage changed (see below).

  The `name` option was supposed to designate a output path for generated page. Since `groupBy` was introduced, `name` became somehow useless because its design doesn't work well with `groupBy`.

  **New `name` Design**:

  It now accepts a function:

  ```ts
  generateFiles({
    input: ['./content/docs/openapi/museum.yaml'],
    output: './content/docs/openapi/(generated)',
    per: 'operation',
    name: (output, document) => {
      // page info
      output.item;
      // parsed OpenAPI schema
      document;
      return 'dir/my-file';
    },
  });
  ```

  You can set `algorithm` to `v1` to keep the behaviour of Fumadocs OpenAPI v8:

  ```ts
  generateFiles({
    input: ['./content/docs/openapi/museum.yaml'],
    output: './content/docs/openapi/(generated)',
    per: 'operation',
    name: {
      algorithm: 'v1',
    },
  });
  ```

  `per: operation`:

  File name will be identical with your `operationId` if defined, otherwise fallback to endpoint path or webhook name.

  ```ts
  generateFiles({
    input: ['./content/docs/openapi/museum.yaml'],
    output: './content/docs/openapi/(generated)',
    per: 'operation',
  });
  ```

  With `per: operation`, you can use `groupBy` to group pages:
  - tag: `{tag}/{file}`
  - route: `{endpoint}/{method}` (it will ignore the `name` option)
  - none: `{file}` (default)

  `per: tag | file`:

  They are unchanged.

### Minor Changes

- c945b5f: Mark `mediaAdapters` API stable
- b0c02a0: Redesign schema display UI

### Patch Changes

- 00a81e1: Improve playground body input
- 1bcdc84: Fix recursive reference in `anyOf`/`allOf`/`oneOf`
- Updated dependencies [092fd04]
- Updated dependencies [1b999eb]
- Updated dependencies [961b67e]
- Updated dependencies [7d78bc5]
  - fumadocs-ui@15.4.0
  - fumadocs-core@15.4.0

## 8.1.12

### Patch Changes

- a6c909b: Removed unused devDependencies and migrated from `fast-glob` to `tinyglobby`
- Updated dependencies [e0c2a92]
- Updated dependencies [71fc1a5]
  - fumadocs-ui@15.3.4
  - fumadocs-core@15.3.4

## 8.1.11

### Patch Changes

- Updated dependencies [05b3bd9]
- Updated dependencies [39bf088]
- Updated dependencies [4ae7b4a]
- Updated dependencies [e955a98]
  - fumadocs-ui@15.3.3
  - fumadocs-core@15.3.3

## 8.1.10

### Patch Changes

- 623610a: Improve error message
- Updated dependencies [1753cf1]
- Updated dependencies [9b38baf]
- Updated dependencies [8e862e5]
- Updated dependencies [ac0ab12]
- Updated dependencies [c25d678]
  - fumadocs-ui@15.3.2
  - fumadocs-core@15.3.2

## 8.1.9

### Patch Changes

- Updated dependencies [3372792]
  - fumadocs-core@15.3.1
  - fumadocs-ui@15.3.1

## 8.1.8

### Patch Changes

- Updated dependencies [52b5ad8]
- Updated dependencies [c05dc03]
- Updated dependencies [abce713]
  - fumadocs-ui@15.3.0
  - fumadocs-core@15.3.0

## 8.1.7

### Patch Changes

- 12297de: Lazy load media adapters on client side
- Updated dependencies [50db874]
- Updated dependencies [79e75c3]
  - fumadocs-core@15.2.15
  - fumadocs-ui@15.2.15

## 8.1.6

### Patch Changes

- 3e69302: Support media adapter API
- Updated dependencies [6ea1718]
  - fumadocs-core@15.2.14
  - fumadocs-ui@15.2.14

## 8.1.5

### Patch Changes

- a7ef446: Fix empty directory detection
- Updated dependencies [b433d93]
- Updated dependencies [1e07ed8]
  - fumadocs-ui@15.2.13
  - fumadocs-core@15.2.13

## 8.1.4

### Patch Changes

- 8c67955: Fix duplications with `generateFiles`
- 4b1502e: Improve response type UX
- 47670c8: Support more JSON schema features

## 8.1.3

### Patch Changes

- 67070db: Add missing file
- Updated dependencies [acff667]
- Updated dependencies [b68bb51]
- Updated dependencies [127e681]
  - fumadocs-core@15.2.12
  - fumadocs-ui@15.2.12

## 8.1.2

### Patch Changes

- 2d18405: Support array type in parameters
- 4e62b41: Bundle `lucide-react` as part of library
- Updated dependencies [d4d1ba7]
- Updated dependencies [4e62b41]
- Updated dependencies [07cd690]
  - fumadocs-ui@15.2.11
  - fumadocs-core@15.2.11

## 8.1.1

### Patch Changes

- 4dbb7fb: tolerate array schema without `items` type
- 2625723: Fix infinite rendering on schema
- bd280c8: Change generated file paths for documents

## 8.1.0

### Minor Changes

- bb515b7: Display Response in a separate section

### Patch Changes

- 540027e: **Support `fumadocs-openapi/css/preset.css` for Tailwind CSS**

  We highly recommend to use the following instead:

  ```css
  @import 'tailwindcss';
  @import 'fumadocs-ui/css/neutral.css';
  @import 'fumadocs-ui/css/preset.css';
  /* do this */
  @import 'fumadocs-openapi/css/preset.css';
  ```

- Updated dependencies [3a5595a]
- Updated dependencies [8c9fc1f]
  - fumadocs-ui@15.2.10
  - fumadocs-core@15.2.10

## 8.0.3

### Patch Changes

- Updated dependencies [e72af4b]
- Updated dependencies [ea0f468]
- Updated dependencies [7f3c30e]
  - fumadocs-ui@15.2.9
  - fumadocs-core@15.2.9

## 8.0.2

### Patch Changes

- Updated dependencies [4fad539]
- Updated dependencies [a673ef4]
  - fumadocs-ui@15.2.8
  - fumadocs-core@15.2.8

## 8.0.1

### Patch Changes

- 5a6bf83: fix(#1717): add number type stringify for getPathnameFromInput

## 8.0.0

### Major Changes

- ff12b53: **Move `APIPage` to `fumadocs-openapi/ui`**

  migrate:

  in your `mdx-components.tsx` (or where you pass MDX components):

  ```tsx
  import defaultComponents from 'fumadocs-ui/mdx';
  import { APIPage } from 'fumadocs-openapi/ui';
  import { openapi } from '@/lib/source';
  import type { MDXComponents } from 'mdx/types';

  export function getMDXComponents(components?: MDXComponents): MDXComponents {
    return {
      ...defaultComponents,
      // use this instead
      APIPage: (props) => <APIPage {...openapi.getAPIPageProps(props)} />,
      ...components,
    };
  }
  ```

  why: Next.js compiles the same module in different layers: route handlers, pages (which include browser bundle), and middleware (Edge Runtime). It avoids compiling React components of `fumadocs-openapi` twice when you reference the OpenAPI server in a route handler.

### Patch Changes

- 24ea50d: support JSON mode for body input
- b664784: support `application/x-www-form-urlencoded` content type
- Updated dependencies [eb18da9]
- Updated dependencies [085e39f]
- Updated dependencies [4d50bcf]
- Updated dependencies [ec85a6c]
- Updated dependencies [e1a61bf]
  - fumadocs-ui@15.2.7
  - fumadocs-core@15.2.7

## 7.0.14

### Patch Changes

- Updated dependencies [d49f9ae]
- Updated dependencies [b07e98c]
- Updated dependencies [b07e98c]
- Updated dependencies [3a4bd88]
  - fumadocs-core@15.2.6
  - fumadocs-ui@15.2.6

## 7.0.13

### Patch Changes

- 4d89c13: Improve `generateFiles` warnings
- Updated dependencies [c66ed79]
  - fumadocs-core@15.2.5
  - fumadocs-ui@15.2.5

## 7.0.12

### Patch Changes

- Updated dependencies [1057957]
  - fumadocs-core@15.2.4
  - fumadocs-ui@15.2.4

## 7.0.11

### Patch Changes

- Updated dependencies [5e4e9ec]
- Updated dependencies [293178f]
  - fumadocs-ui@15.2.3
  - fumadocs-core@15.2.3

## 7.0.10

### Patch Changes

- Updated dependencies [0829544]
- Updated dependencies [0829544]
  - fumadocs-ui@15.2.2
  - fumadocs-core@15.2.2

## 7.0.9

### Patch Changes

- 70d7ab0: Change playground `localStorage` key for authorization info
  - fumadocs-ui@15.2.1

## 7.0.8

### Patch Changes

- Updated dependencies [22aeafb]
  - fumadocs-ui@15.2.1
  - fumadocs-core@15.2.1

## 7.0.7

### Patch Changes

- c37b12a: Fix security display issues
- Updated dependencies [c5af09f]
- Updated dependencies [2fd325c]
- Updated dependencies [a7cf4fa]
  - fumadocs-ui@15.2.0
  - fumadocs-core@15.2.0

## 7.0.6

### Patch Changes

- Updated dependencies [b734f92]
  - fumadocs-core@15.1.3
  - fumadocs-ui@15.1.3

## 7.0.5

### Patch Changes

- Updated dependencies [44d5acf]
- Updated dependencies [3f580c4]
  - fumadocs-ui@15.1.2
  - fumadocs-core@15.1.2

## 7.0.4

### Patch Changes

- Updated dependencies [c5add28]
- Updated dependencies [f3cde4f]
- Updated dependencies [7c8a690]
- Updated dependencies [b812457]
  - fumadocs-core@15.1.1
  - fumadocs-ui@15.1.1

## 7.0.3

### Patch Changes

- Updated dependencies [f491f6f]
- Updated dependencies [f491f6f]
- Updated dependencies [f491f6f]
  - fumadocs-core@15.1.0
  - fumadocs-ui@15.1.0

## 7.0.2

### Patch Changes

- 30b7bd4: Fix codeblock highlight options being ignored
- Updated dependencies [e7e2a2a]
  - fumadocs-ui@15.0.18
  - fumadocs-core@15.0.18

## 7.0.1

### Patch Changes

- Updated dependencies [b790699]
- Updated dependencies [72f79cf]
  - fumadocs-ui@15.0.17
  - fumadocs-core@15.0.17

## 7.0.0

### Major Changes

- 190ec35: Auto-update generated API example as user interact with API Playground

### Minor Changes

- 670c179: Support cookie parameters

### Patch Changes

- fumadocs-core@15.0.16
- fumadocs-ui@15.0.16

## 7.0.0-beta.0

### Major Changes

- Auto-update generated API example as user interact with API Playground

## 6.3.0

### Minor Changes

- 70d715d: Added auto-generated comments to top of generated openapi docs files

### Patch Changes

- Updated dependencies [9f6d39a]
- Updated dependencies [0e5e14d]
- Updated dependencies [2035cb1]
  - fumadocs-core@15.0.15
  - fumadocs-ui@15.0.15

## 6.2.1

### Patch Changes

- Updated dependencies [37dc0a6]
- Updated dependencies [796cc5e]
- Updated dependencies [2cc0be5]
- Updated dependencies [6bc033a]
  - fumadocs-core@15.0.14
  - fumadocs-ui@15.0.14

## 6.2.0

### Minor Changes

- ecf7288: Support OAuth 2.0 in-browser authorize dialog

### Patch Changes

- Updated dependencies [7608f4e]
- Updated dependencies [89ff3ae]
- Updated dependencies [16c8944]
  - fumadocs-ui@15.0.13
  - fumadocs-core@15.0.13

## 6.1.1

### Patch Changes

- 3534a10: Move `fumadocs-core` highlighting utils to `fumadocs-core/highlight` and `fumadocs-core/highlight/client`
- Updated dependencies [3534a10]
- Updated dependencies [ecacb53]
- Updated dependencies [93952db]
  - fumadocs-core@15.0.12
  - fumadocs-ui@15.0.12

## 6.1.0

### Minor Changes

- 3d211f3: throw error, when input file is not found

### Patch Changes

- 5730116: Improve experience to customise API Playground
- Updated dependencies [886da49]
- Updated dependencies [04e6c6e]
  - fumadocs-ui@15.0.11
  - fumadocs-core@15.0.11

## 6.0.11

### Patch Changes

- 0a13c45: Support response examples
- Updated dependencies [e8a3ab7]
- Updated dependencies [d95c21f]
  - fumadocs-ui@15.0.10
  - fumadocs-core@15.0.10

## 6.0.10

### Patch Changes

- Updated dependencies [fa5b908]
  - fumadocs-ui@15.0.9
  - fumadocs-core@15.0.9

## 6.0.9

### Patch Changes

- Updated dependencies [8f5993b]
  - fumadocs-ui@15.0.8
  - fumadocs-core@15.0.8

## 6.0.8

### Patch Changes

- f118e24: Fix gaps of property components under parameters section
- Updated dependencies [5deaf40]
- Updated dependencies [f782c2c]
  - fumadocs-core@15.0.7
  - fumadocs-ui@15.0.7

## 6.0.7

### Patch Changes

- e7b6f0a: Support `disablePlayground` option
- Updated dependencies [08236e1]
- Updated dependencies [a06af26]
  - fumadocs-core@15.0.6
  - fumadocs-ui@15.0.6

## 6.0.6

### Patch Changes

- Updated dependencies [14b2f95]
  - fumadocs-ui@15.0.5
  - fumadocs-core@15.0.5

## 6.0.5

### Patch Changes

- c892bd9: fix(packages/openapi): hide AuthSection is security is an empty array
- cd894b1: Feat: support multiple examples in openapi operation #1370

  Adds two new options to the ApiExample renderer "Samples" and "Sample"

- 31e7e3e: Improve sample select UI
- Updated dependencies [c892bd9]
- Updated dependencies [c892bd9]
  - fumadocs-ui@15.0.4
  - fumadocs-core@15.0.4

## 6.0.4

### Patch Changes

- f3ccad2: fix: openapi - preserve <> placeholder marker for params with no example value
- ff9bf0f: Fix: Hide the server select panel, not just the select, if no or only one server is present
- Updated dependencies [47171db]
  - fumadocs-ui@15.0.3
  - fumadocs-core@15.0.3

## 6.0.3

### Patch Changes

- a8e9e1f: Bump deps
- ab44e05: Add file extensions to imports
- Updated dependencies [a8e9e1f]
  - fumadocs-ui@15.0.2
  - fumadocs-core@15.0.2

## 6.0.2

### Patch Changes

- a127dc4: Move to `tsc` for building package
- Updated dependencies [421166a]
  - fumadocs-ui@15.0.1
  - fumadocs-core@15.0.1

## 6.0.1

### Patch Changes

- 127d9df: Fix type errors

## 6.0.0

### Major Changes

- 1286a04: **Change interface for `useScalar`**

  From:

  ```tsx
  import { createOpenAPI } from 'fumadocs-openapi/server';
  import { APIPlayground } from 'fumadocs-openapi/scalar';

  export const openapi = createOpenAPI({
    useScalar: true,
  });
  ```

  To:

  ```tsx
  import { createOpenAPI } from 'fumadocs-openapi/server';
  import { APIPlayground } from 'fumadocs-openapi/scalar';

  export const openapi = createOpenAPI({
    renderer: {
      APIPlayground,
    },
  });
  ```

### Minor Changes

- 9e02460: Add built-in UI to basic auth input (username:password)

## 5.12.0

### Minor Changes

- 471478b: Support `useScalar` option

### Patch Changes

- 983b8a6: Use path of operation when id is not defined
- Updated dependencies [5b8cca8]
- Updated dependencies [a89d6e0]
- Updated dependencies [a84f37a]
- Updated dependencies [f2f9c3d]
- Updated dependencies [a763058]
- Updated dependencies [581f4a5]
  - fumadocs-core@15.0.0
  - fumadocs-ui@15.0.0

## 5.11.8

### Patch Changes

- Updated dependencies [4f2538a]
- Updated dependencies [191012a]
- Updated dependencies [fb6b168]
  - fumadocs-ui@14.7.7
  - fumadocs-core@14.7.7

## 5.11.7

### Patch Changes

- b9601fb: Update Shiki
- Updated dependencies [b9601fb]
  - fumadocs-core@14.7.6
  - fumadocs-ui@14.7.6

## 5.11.6

### Patch Changes

- Updated dependencies [5d41bf1]
- Updated dependencies [777188b]
- Updated dependencies [900eb6c]
- Updated dependencies [a959374]
  - fumadocs-ui@14.7.5
  - fumadocs-core@14.7.5

## 5.11.5

### Patch Changes

- Updated dependencies [26d9ccb]
- Updated dependencies [036f8e1]
- Updated dependencies [bb73a72]
- Updated dependencies [69bd4fe]
  - fumadocs-ui@14.7.4
  - fumadocs-core@14.7.4

## 5.11.4

### Patch Changes

- 056ab2c: Add `showResponseSchema` option to show the full response schema
- Updated dependencies [041f230]
- Updated dependencies [ca1cf19]
  - fumadocs-core@14.7.3
  - fumadocs-ui@14.7.3

## 5.11.3

### Patch Changes

- 35a12cd: Add code sample generation support for variable url

## 5.11.2

### Patch Changes

- 60fe635: Support variable server url
- Updated dependencies [14b280c]
  - fumadocs-core@14.7.2
  - fumadocs-ui@14.7.2

## 5.11.1

### Patch Changes

- Updated dependencies [72dc093]
- Updated dependencies [18b00c1]
  - fumadocs-core@14.7.1
  - fumadocs-ui@14.7.1

## 5.11.0

### Minor Changes

- 0e8be0e: Support XML request body

### Patch Changes

- 698b385: Fix switcher default value being ignored
- Updated dependencies [a557bb4]
- Updated dependencies [97ed36c]
  - fumadocs-ui@14.7.0
  - fumadocs-core@14.7.0

## 5.10.6

### Patch Changes

- Updated dependencies [e95be52]
- Updated dependencies [f3298ea]
  - fumadocs-ui@14.6.8
  - fumadocs-core@14.6.8

## 5.10.5

### Patch Changes

- Updated dependencies [5474343]
  - fumadocs-core@14.6.7
  - fumadocs-ui@14.6.7

## 5.10.4

### Patch Changes

- Updated dependencies [9c930ea]
  - fumadocs-ui@14.6.6
  - fumadocs-core@14.6.6

## 5.10.3

### Patch Changes

- Updated dependencies [969da26]
  - fumadocs-core@14.6.5
  - fumadocs-ui@14.6.5

## 5.10.2

### Patch Changes

- Updated dependencies [b71064a]
- Updated dependencies [67124b1]
- Updated dependencies [1810868]
  - fumadocs-core@14.6.4
  - fumadocs-ui@14.6.4

## 5.10.1

### Patch Changes

- Updated dependencies [abc3677]
  - fumadocs-ui@14.6.3
  - fumadocs-core@14.6.3

## 5.10.0

### Minor Changes

- 8aff7f4: Support Route Handler Proxy

### Patch Changes

- 1a2597a: Expose `--fd-tocnav-height` CSS variable
- Updated dependencies [9908922]
- Updated dependencies [2357d40]
- Updated dependencies [ece734f]
- Updated dependencies [1a2597a]
  - fumadocs-ui@14.6.2
  - fumadocs-core@14.6.2

## 5.9.0

### Minor Changes

- ec5fb2e: Replace `@apidevtools/json-schema-ref-parser` with `@scalar/openapi-parser`

### Patch Changes

- Updated dependencies [9532855]
  - fumadocs-ui@14.6.1
  - fumadocs-core@14.6.1

## 5.8.2

### Patch Changes

- 4766292: Support React 19
- Updated dependencies [010da9e]
- Updated dependencies [bebb16b]
- Updated dependencies [9585561]
- Updated dependencies [4dfde6b]
- Updated dependencies [bebb16b]
- Updated dependencies [4766292]
- Updated dependencies [050b326]
  - fumadocs-ui@14.6.0
  - fumadocs-core@14.6.0

## 5.8.1

### Patch Changes

- Updated dependencies [b7745f4]
- Updated dependencies [9a18c14]
  - fumadocs-ui@14.5.6
  - fumadocs-core@14.5.6

## 5.8.0

### Minor Changes

- 2d0501f: Support webhooks & callbacks
- 2d0501f: Support OpenAPI 3.1

### Patch Changes

- Updated dependencies [06f66d8]
- Updated dependencies [2d0501f]
  - fumadocs-ui@14.5.5
  - fumadocs-core@14.5.5

## 5.7.5

### Patch Changes

- Updated dependencies [8e2cb31]
  - fumadocs-ui@14.5.4
  - fumadocs-core@14.5.4

## 5.7.4

### Patch Changes

- Updated dependencies [c5a5ba0]
- Updated dependencies [f34e895]
- Updated dependencies [4c82a3d]
- Updated dependencies [f8e5157]
- Updated dependencies [ad00dd3]
  - fumadocs-ui@14.5.3
  - fumadocs-core@14.5.3

## 5.7.3

### Patch Changes

- Updated dependencies [072e349]
  - fumadocs-ui@14.5.2
  - fumadocs-core@14.5.2

## 5.7.2

### Patch Changes

- Updated dependencies [6fd480f]
  - fumadocs-ui@14.5.1
  - fumadocs-core@14.5.1

## 5.7.1

### Patch Changes

- Updated dependencies [66c70ec]
- Updated dependencies [05d224c]
  - fumadocs-ui@14.5.0
  - fumadocs-core@14.5.0

## 5.7.0

### Minor Changes

- c66df64: OpenAPI: Display the server selector only when more than one server is defined in the OpenAPI schema
  OpenAPI: Improve APIInfo position for better visibility on smaller screens

## 5.6.2

### Patch Changes

- Updated dependencies [0f1603a]
  - fumadocs-ui@14.4.2
  - fumadocs-core@14.4.2

## 5.6.1

### Patch Changes

- Updated dependencies [07474cb]
- Updated dependencies [48a2c15]
  - fumadocs-ui@14.4.1
  - fumadocs-core@14.4.1

## 5.6.0

### Minor Changes

- 196b78b: OpenAPI: Server selector to allow interacting with different API environments

## 5.5.11

### Patch Changes

- 47fc20e: Fix custom name in `apiKey` type authorization being ignored

## 5.5.10

### Patch Changes

- Updated dependencies [5fd4e2f]
- Updated dependencies [5fd4e2f]
- Updated dependencies [5145123]
- Updated dependencies [64defe0]
- Updated dependencies [8a3f5b0]
  - fumadocs-ui@14.4.0
  - fumadocs-core@14.4.0

## 5.5.9

### Patch Changes

- Updated dependencies [e7443d7]
  - fumadocs-ui@14.3.1
  - fumadocs-core@14.3.1

## 5.5.8

### Patch Changes

- 4e76165: Fix rendering of OpenAPI nullable defined with `allOf`.
- Updated dependencies [80655b3]
- Updated dependencies [b8a12ed]
  - fumadocs-ui@14.3.0
  - fumadocs-core@14.3.0

## 5.5.7

### Patch Changes

- Updated dependencies [ca94bfd]
- Updated dependencies [2949da3]
  - fumadocs-core@14.2.1
  - fumadocs-ui@14.2.1

## 5.5.6

### Patch Changes

- Updated dependencies [e248a0f]
- Updated dependencies [7a5393b]
  - fumadocs-core@14.2.0
  - fumadocs-ui@14.2.0

## 5.5.5

### Patch Changes

- Updated dependencies [1573d63]
  - fumadocs-core@14.1.1
  - fumadocs-ui@14.1.1

## 5.5.4

### Patch Changes

- d6d290c: Upgrade Shiki
- d50750b: Improved UI design
- Updated dependencies [b262d99]
- Updated dependencies [d6d290c]
- Updated dependencies [4a643ff]
- Updated dependencies [b262d99]
- Updated dependencies [90725c1]
  - fumadocs-core@14.1.0
  - fumadocs-ui@14.1.0

## 5.5.3

### Patch Changes

- 35695be: Support multiple tags in OpenAPI `groupBy: tag` file generation

## 5.5.2

### Patch Changes

- Updated dependencies [bfc2bf2]
  - fumadocs-ui@14.0.2
  - fumadocs-core@14.0.2

## 5.5.1

### Patch Changes

- Updated dependencies [1a7d78a]
  - fumadocs-ui@14.0.1
  - fumadocs-core@14.0.1

## 5.5.0

### Minor Changes

- 129923e: Support custom `shiki` options
- 160e52e: Support `disableCache` prop on APIPage

### Patch Changes

- 61a3d14: Support `x-displayName` on tags
- e612f2a: Make compatible with Next.js 15
- 8a32f79: Fix header name in code samples
- be820c4: Bump deps
- 42c9701: Fix TypeScript schema generation
- Updated dependencies [e45bc67]
- Updated dependencies [34cf456]
- Updated dependencies [d9e908e]
- Updated dependencies [d9e908e]
- Updated dependencies [d9e908e]
- Updated dependencies [f949520]
- Updated dependencies [ad47fd8]
- Updated dependencies [9a0b09f]
- Updated dependencies [9a0b09f]
- Updated dependencies [d9e908e]
- Updated dependencies [367f4c3]
- Updated dependencies [87063eb]
- Updated dependencies [367f4c3]
- Updated dependencies [64f0653]
- Updated dependencies [e1ee822]
- Updated dependencies [d9e908e]
- Updated dependencies [d9e908e]
- Updated dependencies [e612f2a]
- Updated dependencies [3d0369a]
- Updated dependencies [9a0b09f]
- Updated dependencies [d9e908e]
- Updated dependencies [9a10262]
- Updated dependencies [d9e908e]
- Updated dependencies [3d054a8]
- Updated dependencies [8ef00dc]
- Updated dependencies [979e301]
- Updated dependencies [d9e908e]
- Updated dependencies [979e301]
- Updated dependencies [15781f0]
- Updated dependencies [be820c4]
- Updated dependencies [be53a0e]
- Updated dependencies [d9e908e]
  - fumadocs-core@14.0.0
  - fumadocs-ui@14.0.0

## 5.4.14

### Patch Changes

- Updated dependencies [6231ad3]
- Updated dependencies [4cb74d5]
  - fumadocs-core@13.4.10
  - fumadocs-ui@13.4.10

## 5.4.13

### Patch Changes

- Updated dependencies [083f04a]
- Updated dependencies [bcf51a6]
  - fumadocs-core@13.4.9
  - fumadocs-ui@13.4.9

## 5.4.12

### Patch Changes

- Updated dependencies [5581733]
- Updated dependencies [78e59e7]
- Updated dependencies [1a327cc]
  - fumadocs-ui@13.4.8
  - fumadocs-core@13.4.8

## 5.4.11

### Patch Changes

- Updated dependencies [6e1923e]
- Updated dependencies [6e1923e]
- Updated dependencies [6e1923e]
  - fumadocs-core@13.4.7
  - fumadocs-ui@13.4.7

## 5.4.10

### Patch Changes

- Updated dependencies [b33aff0]
- Updated dependencies [afb697e]
- Updated dependencies [6bcd263]
- Updated dependencies [daa66d2]
  - fumadocs-ui@13.4.6
  - fumadocs-core@13.4.6

## 5.4.9

### Patch Changes

- 5bca46f: Support removing all code samples
- Updated dependencies [d46a3f1]
  - fumadocs-ui@13.4.5
  - fumadocs-core@13.4.5

## 5.4.8

### Patch Changes

- Updated dependencies [729928e]
  - fumadocs-core@13.4.4
  - fumadocs-ui@13.4.4

## 5.4.7

### Patch Changes

- fumadocs-core@13.4.3
- fumadocs-ui@13.4.3

## 5.4.6

### Patch Changes

- 0cff470: Enable group id on tabs by default
- 0c251e5: Bump deps
- Updated dependencies [7dabbc1]
- Updated dependencies [0c251e5]
- Updated dependencies [3b56170]
- Updated dependencies [0c251e5]
- Updated dependencies [0c251e5]
  - fumadocs-core@13.4.2
  - fumadocs-ui@13.4.2

## 5.4.5

### Patch Changes

- Updated dependencies [95dbba1]
  - fumadocs-core@13.4.1
  - fumadocs-ui@13.4.1

## 5.4.4

### Patch Changes

- Updated dependencies [26f5360]
  - fumadocs-ui@13.4.0
  - fumadocs-core@13.4.0

## 5.4.3

### Patch Changes

- Updated dependencies [f8cc167]
  - fumadocs-core@13.3.3
  - fumadocs-ui@13.3.3

## 5.4.2

### Patch Changes

- 3d1ec96: Improve schema fields margins

## 5.4.1

### Patch Changes

- 029a156: Fix `display` on property components
- eb922e1: Support adding `description` to generated document body

## 5.4.0

### Minor Changes

- 6cf5535: Persist `authorization` field

## 5.3.2

### Patch Changes

- 0b93a31: Support `required` in `allOf` schemas

## 5.3.1

### Patch Changes

- 5660e1e: Fix `allOf` schema display problem
- 28bb673: Fix fields styles

## 5.3.0

### Minor Changes

- 3fa2436: Support Python code sample

### Patch Changes

- 3e4627a: Show required label on body parameters
- 10f6f39: Fix common parameters
- Updated dependencies [17746a6]
- Updated dependencies [0e0ef8c]
  - fumadocs-ui@13.3.2
  - fumadocs-core@13.3.2

## 5.2.2

### Patch Changes

- Updated dependencies [7258c4b]
  - fumadocs-ui@13.3.1
  - fumadocs-core@13.3.1

## 5.2.1

### Patch Changes

- 81d0887: Support disabling code sample with undefined source
- Updated dependencies [8f5b19e]
- Updated dependencies [4916f84]
- Updated dependencies [fd46eb6]
- Updated dependencies [fd46eb6]
- Updated dependencies [fd46eb6]
- Updated dependencies [fd46eb6]
- Updated dependencies [32ca37a]
- Updated dependencies [9aae448]
- Updated dependencies [c542561]
  - fumadocs-ui@13.3.0
  - fumadocs-core@13.3.0

## 5.2.0

### Minor Changes

- 70172f1: Change default value of `per` to `operation`

### Patch Changes

- 61b91fa: Improve Fumadocs OpenAPI support
- Updated dependencies [36b771b]
- Updated dependencies [61b91fa]
  - fumadocs-core@13.2.2
  - fumadocs-ui@13.2.2

## 5.1.0

### Minor Changes

- c7aa090: Generate `document` field on output MDX files

### Patch Changes

- Updated dependencies [17fa173]
  - fumadocs-core@13.2.1
  - fumadocs-ui@13.2.1

## 5.0.3

### Patch Changes

- 96c9dda: Change Heading scroll margins
- c094fef: Fix compatibility issues on other content sources
- Updated dependencies [96c9dda]
- Updated dependencies [ba588a2]
- Updated dependencies [96c9dda]
- Updated dependencies [ec983a3]
  - fumadocs-core@13.2.0
  - fumadocs-ui@13.2.0

## 5.0.2

### Patch Changes

- 22549cd: Add authorization properties to examples

## 5.0.1

### Patch Changes

- 444af27: Fix self-referencing schema types
- 90af678: Reduce initial loaded bundle size

## 5.0.0

### Major Changes

- 971817c: **Migrate to React Server Component**

  The API reference page is now a server component.
  The MDX generator will only generate a small MDX file, and the rest will be handled by our `APIPage` component.

  ```mdx
  ---
  title: Delete Api
  full: true
  method: POST
  route: /v1/apis.deleteApi
  ---

  <APIPage
    operations={[{ path: '/v1/apis.deleteApi', method: 'post' }]}
    hasHead={false}
  />
  ```

  - Markdown/MDX content is still supported, but will be processed in the server component (during runtime) instead.
  - Your Remark/Rehype plugins (e.g. Rehype Code) configured in Fumadocs MDX or other source providers, will **not** be shared. Fumadocs OpenAPI uses a separate MDX processor instance.
  - `APIPage` component will fetch the OpenAPI Schema when being rendered. **On Vercel**, if it relies on the file system, ensure the page **will not** be re-rendered after build.

  Please refer to documentation for the new usage.

### Minor Changes

- 480d211: Change output path logic
- 4bf9851: Support to group pages by tags
- 3874ab5: Support Go Sample Request
- 3874ab5: Replace Response Table of Tabs

### Patch Changes

- 4bf9851: Improve Curl example generator
- Updated dependencies [f280191]
- Updated dependencies [61ef42c]
- Updated dependencies [deae4dd]
- Updated dependencies [c8910c4]
- Updated dependencies [c8910c4]
- Updated dependencies [6c42960]
  - fumadocs-core@13.1.0
  - fumadocs-ui@13.1.0

## 4.4.2

### Patch Changes

- Updated dependencies [37bbfff]
- Updated dependencies [e7c52f2]
  - fumadocs-core@13.0.7
  - fumadocs-ui@13.0.7

## 4.4.1

### Patch Changes

- Updated dependencies [1622e36]
  - fumadocs-ui@13.0.6
  - fumadocs-core@13.0.6

## 4.4.0

### Minor Changes

- b109e44: Improve generated sample requests

### Patch Changes

- Updated dependencies [2cf65f6]
  - fumadocs-core@13.0.5
  - fumadocs-ui@13.0.5

## 4.3.1

### Patch Changes

- d987912: Show current request pathname in Playground
- 0146572: Fix empty params

## 4.3.0

### Minor Changes

- 5acebdd: Support grouping output by folders (per operation)
- 744bd24: Support accessing context information on custom frontmatter
- 6bb9d2d: Support integration with Fumadocs Source API

### Patch Changes

- 744bd24: Fix generate files on `operation` mode
- Updated dependencies [5355391]
  - fumadocs-core@13.0.4
  - fumadocs-ui@13.0.4

## 4.2.2

### Patch Changes

- Updated dependencies [978342f]
  - fumadocs-core@13.0.3
  - fumadocs-ui@13.0.3

## 4.2.1

### Patch Changes

- Updated dependencies [4819820]
  - fumadocs-core@13.0.2
  - fumadocs-ui@13.0.2

## 4.2.0

### Minor Changes

- dfcc61f: Implement multipart form data

### Patch Changes

- f2b540a: Fix `fetch` problems on API Playground

## 4.1.1

### Patch Changes

- fumadocs-core@13.0.1
- fumadocs-ui@13.0.1

## 4.1.0

### Minor Changes

- abf84bb: Support to customise/disable TypeScript Response generation
- 40728a1: Support custom fields (auth, query, header, path and body)

### Patch Changes

- Updated dependencies [89190ae]
- Updated dependencies [b02eebf]
- Updated dependencies [09c3103]
- Updated dependencies [f868018]
- Updated dependencies [8aebeab]
- Updated dependencies [c684c00]
- Updated dependencies [8aebeab]
- Updated dependencies [0377bb4]
- Updated dependencies [e8e6a17]
- Updated dependencies [c8964d3]
- Updated dependencies [c901e6b]
- Updated dependencies [daa7d3c]
- Updated dependencies [c714eaa]
- Updated dependencies [89190ae]
- Updated dependencies [b02eebf]
- Updated dependencies [b02eebf]
- Updated dependencies [4373231]
  - fumadocs-ui@13.0.0
  - fumadocs-core@13.0.0

## 4.0.6

### Patch Changes

- Updated dependencies [a332bee]
  - fumadocs-ui@12.5.6
  - fumadocs-core@12.5.6

## 4.0.5

### Patch Changes

- Updated dependencies [3519e6c]
  - fumadocs-ui@12.5.5
  - fumadocs-core@12.5.5

## 4.0.4

### Patch Changes

- Updated dependencies [fccdfdb]
- Updated dependencies [2ffd5ea]
  - fumadocs-core@12.5.4
  - fumadocs-ui@12.5.4

## 4.0.3

### Patch Changes

- Updated dependencies [5d963f4]
  - fumadocs-ui@12.5.3

## 4.0.2

### Patch Changes

- 0c8eddf: Fix overlap of navbar and api info
- Updated dependencies [a5c34f0]
  - fumadocs-ui@12.5.2

## 4.0.1

### Patch Changes

- Updated dependencies [c5d20d0]
- Updated dependencies [3d8f6cf]
  - fumadocs-ui@12.5.1

## 4.0.0

### Major Changes

- ad143e1: Move UI implementation from `fumadocs-ui` to `fumadocs-openapi`.

  **why:** Allow a better organization of packages.

  **migrate:**

  This package is now Tailwind CSS only, you need to use it in conjunction with the official Tailwind CSS plugin.

  Add the package to `content` under your Tailwind CSS configuration.

  ```js
  import { createPreset, presets } from 'fumadocs-ui/tailwind-plugin';

  /** @type {import('tailwindcss').Config} */
  export default {
    content: [
      './node_modules/fumadocs-ui/dist/**/*.js',
      './node_modules/fumadocs-openapi/dist/**/*.js',
    ],
    presets: [createPreset()],
  };
  ```

  Re-generate MDX files if needed.

### Minor Changes

- ad143e1: Implement OpenAPI playground
- ad143e1: Support passing base url to Root component

### Patch Changes

- ad143e1: Combine `allOf` into one object schema
- Updated dependencies [b9fa99d]
- Updated dependencies [a4bcaa7]
- Updated dependencies [d1c7405]
  - fumadocs-ui@12.5.0

## 3.3.0

### Minor Changes

- b1b154e: Display object types mentioned in schema
- 81fde3f: Support complex types & self-referencing types

## 3.2.0

### Minor Changes

- 0e420cb: Support generating custom code examples

## 3.1.3

### Patch Changes

- 464e44c: Improve example request URL generation

## 3.1.2

### Patch Changes

- 78acd55: Use full mode on docs pages by default on OpenAPI generated pages

## 3.1.1

### Patch Changes

- 318eaf9: Support generating files per operation

## 3.1.0

### Minor Changes

- 3bdc786: Support JavaScript request example
- 3bdc786: Support generating Authorization (`security`) section

## 3.0.0

### Major Changes

- 284a571: **Renew Generate API.**

  **why:** Improve flexibility.

  **migrate:**

  Removed the `render` option from `generate`, `generateFiles` and `generateTags`, use `frontmatter` to customise frontmatter, `imports` to customise imports.

- 284a571: **Support Custom MDX Renderer.**

  **why:** Allow people to customise how the MDX file is generated.

  **migrate:**

  Changed the output of MDX files, the new structure requires components:
  - Root
  - API
  - APIInfo
  - APIExample
  - Responses
  - Response
  - ExampleResponse
  - TypeScriptResponse
  - Property
  - ObjectCollapsible
  - ResponseTypes

  ````mdx
  <API>

  <APIInfo method={"GET"} route={"/pets/{petId}"}>

  ## Info for a specific pet

  ### Path Parameters

  <Property name={"petId"} type={"string"} required={true} deprecated={false}>

  The id of the pet to retrieve

  </Property>

  | Status code | Description                          |
  | ----------- | ------------------------------------ |
  | `200`       | Expected response to a valid request |
  | `default`   | unexpected error                     |

  </APIInfo>

  <APIExample>

  ```bash title="curl"
  curl -X GET "http://petstore.swagger.io/pets/string"
  ```

  <Responses items={["200","default"]}>

  <Response value={"200"}>

  <ResponseTypes>

  <ExampleResponse>

  ```json
  {
    "id": 0,
    "name": "string",
    "tag": "string"
  }
  ```

  </ExampleResponse>

  <TypeScriptResponse>

  ```ts
  export interface Response {
    id: number;
    name: string;
    tag?: string;
  }
  ```

  </TypeScriptResponse>

  </ResponseTypes>

  </Responses>

  </APIExample>

  </API>
  ````

## 2.0.5

### Patch Changes

- bcc05d6: Fix docs typo

## 2.0.4

### Patch Changes

- 310e0ab: Fix multi-line frontmatter

## 2.0.3

### Patch Changes

- 1d3917f: Fix nullable types cannot be detected

## 2.0.2

### Patch Changes

- 9681cc3: Add put method key

## 2.0.1

### Patch Changes

- 8ef2b68: Bump deps

## 2.0.0

### Major Changes

- eacd7b0b: **Remove support for bin usages**

  why: It is more flexible and faster to write a script directly.

  migrate: Create a script named `scripts/generate-docs.mjs`:

  ```js
  import { generateFiles } from 'fumadocs-openapi';

  void generateFiles({
    input: ['./petstore.yaml'],
    output: './content/docs',
  });
  ```

  Execute it with `node ./scripts/generate-docs.mjs`.

## 1.1.0

### Minor Changes

- 8665888: Added patterns support to config Inputs.

## 1.0.1

### Patch Changes

- 6c5a39a: Rename Git repository to `fumadocs`

## 1.0.0

### Major Changes

- 2b11c20: **Rename to Fumadocs**

  `next-docs-zeta` -> `fumadocs-core`

  `next-docs-ui` -> `fumadocs-ui`

  `next-docs-mdx` -> `fumadocs-mdx`

  `@fuma-docs/openapi` -> `fumadocs-openapi`

  `create-next-docs-app` -> `create-fumadocs-app`

## 0.1.0

### Minor Changes

- 45a52ae: **Support generating docs for OpenAPI schema**

  In `openapi.config.js`:

  ```js
  /**
   * @type {import("@fuma-docs/openapi").Config}
   */
  module.exports = {
    input: ['./petstore.yaml'],
    output: './content/docs',
    per: 'tag',
    render: (title, description) => {
      return {
        frontmatter: [
          '---',
          `title: ${title}`,
          `description: ${description}`,
          'toc: false',
          '---',
        ].join('\n'),
      };
    },
  };
  ```

  Run `fuma-docs-openapi` to generate.



================================================
FILE: packages/openapi/eslint.config.mjs
================================================
import next from 'eslint-config-custom/next.js';

export default [
  {
    ignores: ['dist/', 'node_modules/', 'test/out/'],
  },
  ...next,
  {
    rules: {
      // commonjs compatibility
      'import/no-named-as-default-member': 'off',
      'no-console': 'off',
      // some arrays will not be changed
      'react/no-array-index-key': 'off',
    },
  },
];



================================================
FILE: packages/openapi/package.json
================================================
{
  "name": "fumadocs-openapi",
  "version": "9.1.1",
  "description": "Generate MDX docs for your OpenAPI spec",
  "keywords": [
    "NextJs",
    "Docs"
  ],
  "homepage": "https://fumadocs.vercel.app",
  "repository": "github:fuma-nama/fumadocs",
  "license": "MIT",
  "author": "Fuma Nama",
  "type": "module",
  "exports": {
    ".": {
      "import": "./dist/index.js",
      "types": "./dist/index.d.ts"
    },
    "./css/*": "./css/*",
    "./ui": {
      "import": "./dist/ui/index.js",
      "types": "./dist/ui/index.d.ts"
    },
    "./ui/client": {
      "import": "./dist/ui/client.js",
      "types": "./dist/ui/client.d.ts"
    },
    "./playground": {
      "import": "./dist/playground/index.js",
      "types": "./dist/playground/index.d.ts"
    },
    "./scalar": {
      "import": "./dist/scalar/index.js",
      "types": "./dist/scalar/index.d.ts"
    },
    "./server": {
      "import": "./dist/server/index.js",
      "types": "./dist/server/index.d.ts"
    }
  },
  "main": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "files": [
    "dist",
    "css"
  ],
  "scripts": {
    "build": "tsc --project tsconfig.build.json && tsc-alias -p tsconfig.build.json",
    "clean": "rimraf dist",
    "dev": "concurrently \"tsc -w --project tsconfig.build.json\" \"tsc-alias -w -p tsconfig.build.json\"",
    "lint": "eslint .",
    "types:check": "tsc --noEmit"
  },
  "dependencies": {
    "@fumari/json-schema-to-typescript": "^1.1.3",
    "@radix-ui/react-accordion": "^1.2.11",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-slot": "^1.2.3",
    "@scalar/openapi-parser": "0.18.1",
    "ajv": "^8.17.1",
    "class-variance-authority": "^0.7.1",
    "fumadocs-core": "workspace:*",
    "fumadocs-ui": "workspace:*",
    "github-slugger": "^2.0.0",
    "hast-util-to-jsx-runtime": "^2.3.6",
    "js-yaml": "^4.1.0",
    "next-themes": "^0.4.6",
    "openapi-sampler": "^1.6.1",
    "react-hook-form": "^7.60.0",
    "remark": "^15.0.1",
    "remark-rehype": "^11.1.2",
    "shiki": "^3.7.0",
    "tinyglobby": "^0.2.14",
    "xml-js": "^1.6.11"
  },
  "devDependencies": {
    "@scalar/api-client-react": "^1.3.20",
    "@types/js-yaml": "^4.0.9",
    "@types/node": "24.0.12",
    "@types/openapi-sampler": "^1.0.3",
    "@types/react": "^19.1.8",
    "eslint-config-custom": "workspace:*",
    "json-schema-typed": "^8.0.1",
    "next": "15.3.5",
    "openapi-types": "^12.1.3",
    "tailwindcss": "^4.1.11",
    "tsc-alias": "^1.8.16",
    "tsconfig": "workspace:*"
  },
  "peerDependencies": {
    "@scalar/api-client-react": "*",
    "@types/react": "*",
    "next": "14.x.x || 15.x.x",
    "react": "18.x.x || 19.x.x",
    "react-dom": "18.x.x || 19.x.x"
  },
  "peerDependenciesMeta": {
    "@types/react": {
      "optional": true
    },
    "@scalar/api-client-react": {
      "optional": true
    }
  },
  "publishConfig": {
    "access": "public"
  }
}



================================================
FILE: packages/openapi/tsconfig.build.json
================================================
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "noEmit": false,
    "outDir": "dist",
    "rootDir": "src",
    "sourceMap": false
  },
  "include": ["./src/**/*"]
}



================================================
FILE: packages/openapi/tsconfig.json
================================================
{
  "extends": "tsconfig/react-library.json",
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"],
      "lucide-react": ["./src/icons"]
    }
  },
  "tsc-alias": {
    "resolveFullPaths": true
  },
  "exclude": ["node_modules", "dist", "eslint.config.mjs", "tailwind.config.js"]
}



================================================
FILE: packages/openapi/types.d.ts
================================================
import 'react/experimental';



================================================
FILE: packages/openapi/vitest.config.ts
================================================
import { defineProject } from 'vitest/config';

export default defineProject({
  resolve: {
    alias: {
      '@/': new URL('./src/', import.meta.url).pathname,
    },
  },
});



================================================
FILE: packages/openapi/css/preset.css
================================================
@source '../dist/**/*.js';



================================================
FILE: packages/openapi/src/build-routes.ts
================================================
import { type Document } from '@/types';
import type { NoReference } from '@/utils/schema';
import type { OperationItem, WebhookItem } from '@/render/api-page';
import type { OpenAPIV3_1 } from 'openapi-types';

export const methodKeys = [
  'get',
  'post',
  'patch',
  'delete',
  'head',
  'put',
] as const;

type Result = {
  webhooks: (WebhookItem & { tags?: string[] })[];
  operations: (OperationItem & {
    tags?: string[];
  })[];
};

export function getAPIPageItems(document: NoReference<Document>): Result {
  const result: Result = { webhooks: [], operations: [] };

  for (const [path, pathItem] of Object.entries(document.paths ?? {})) {
    if (!pathItem) continue;

    for (const methodKey of methodKeys) {
      if (!pathItem[methodKey]) continue;

      result.operations.push({
        method: methodKey as OpenAPIV3_1.HttpMethods,
        path,
        tags: pathItem[methodKey]?.tags,
      });
    }
  }

  for (const [name, pathItem] of Object.entries(document.webhooks ?? {})) {
    if (!pathItem) continue;

    for (const methodKey of methodKeys) {
      if (!pathItem[methodKey]) continue;

      result.webhooks.push({
        method: methodKey as OpenAPIV3_1.HttpMethods,
        name,
        tags: pathItem[methodKey]?.tags,
      });
    }
  }

  return result;
}



================================================
FILE: packages/openapi/src/generate-file.ts
================================================
import { mkdir, writeFile } from 'node:fs/promises';
import * as path from 'node:path';
import { resolve } from 'node:path';
import { glob } from 'tinyglobby';
import {
  generateAll,
  type GenerateOptions,
  type GeneratePageOutput,
  generatePages,
  type GenerateTagOutput,
  generateTags,
} from './generate';
import {
  type DocumentInput,
  processDocument,
  type ProcessedDocument,
} from '@/utils/process-document';

interface GenerateFileOutput {
  /**
   * The original schema file path/url from `input`
   */
  pathOrUrl: string;

  content: string;
}

interface OperationConfig extends BaseConfig {
  /**
   * Generate a page for each API endpoint/operation (default).
   */
  per?: 'operation';

  /**
   * Group output using folders (Only works on `operation` mode)
   * - tag: `{tag}/{file}`
   * - route: `{endpoint}/{method}` (it will ignore the `name` option)
   * - none: `{file}` (default)
   *
   * @defaultValue 'none'
   */
  groupBy?: 'tag' | 'route' | 'none';

  /**
   * Specify name for output file
   */
  name?:
    | ((
        output: GeneratePageOutput,
        document: ProcessedDocument['document'],
      ) => string)
    | BaseName;
}

interface TagConfig extends BaseConfig {
  /**
   * Generate a page for each tag.
   */
  per: 'tag';

  /**
   * Specify name for output file
   */
  name?:
    | ((
        output: GenerateTagOutput,
        document: ProcessedDocument['document'],
      ) => string)
    | BaseName;
}

interface FileConfig extends BaseConfig {
  /**
   * Generate a page for each schema file.
   */
  per: 'file';

  /**
   * Specify name for output file
   */
  name?:
    | ((
        output: GenerateFileOutput,
        document: ProcessedDocument['document'],
      ) => string)
    | BaseName;
}

export type Config = FileConfig | TagConfig | OperationConfig;

interface BaseName {
  /**
   * The version of algorithm used to generate file paths.
   *
   * v1: Fumadocs OpenAPI v8
   * v2: Fumadocs OpenAPI v9
   *
   * @defaultValue v2
   */
  algorithm?: 'v2' | 'v1';
}

interface BaseConfig extends GenerateOptions {
  /**
   * Schema files
   */
  input: string[] | string;

  /**
   * Output directory
   */
  output: string;

  /**
   * Custom function to convert names into file names.
   *
   * By default, it only escapes whitespaces and upper case (English) characters
   */
  slugify?: (name: string) => string;
}

export async function generateFiles(options: Config): Promise<void> {
  const { input, cwd = process.cwd() } = options;
  const urlInputs: string[] = [];
  const fileInputs: string[] = [];

  for (const v of typeof input === 'string' ? [input] : input) {
    if (isUrl(v)) {
      urlInputs.push(v);
    } else {
      fileInputs.push(v);
    }
  }

  const resolvedInputs = [
    ...(await glob(fileInputs, { cwd, absolute: false })),
    ...urlInputs,
  ];

  if (resolvedInputs.length === 0) {
    throw new Error(
      `No input files found. Tried resolving: ${
        typeof input === 'string' ? input : input.join(', ')
      }`,
    );
  }

  await Promise.all(
    resolvedInputs.map((input) => generateFromDocument(input, options)),
  );
}

async function generateFromDocument(pathOrUrl: string, options: Config) {
  const { output, cwd = process.cwd(), slugify = defaultSlugify } = options;
  let nameFn: (
    output: GeneratePageOutput | GenerateTagOutput | GenerateFileOutput,
    document: ProcessedDocument['document'],
  ) => string;

  if (!options.name || typeof options.name !== 'function') {
    const { algorithm = 'v2' } = options.name ?? {};

    nameFn = (output, document) => {
      if (options.per === 'tag') {
        const result = output as GenerateTagOutput;

        return slugify(result.tag);
      }

      if (options.per === 'file') {
        return isUrl(pathOrUrl)
          ? 'index'
          : path.basename(pathOrUrl, path.extname(pathOrUrl));
      }

      const result = output as GeneratePageOutput;

      if (result.type === 'operation') {
        const operation =
          document.paths![result.item.path]![result.item.method]!;

        if (algorithm === 'v2' && operation.operationId) {
          return operation.operationId;
        }

        return path.join(
          getOutputPathFromRoute(result.item.path),
          result.item.method.toLowerCase(),
        );
      }

      const hook = document.webhooks![result.item.name][result.item.method]!;

      if (algorithm === 'v2' && hook.operationId) {
        return hook.operationId;
      }

      return slugify(result.item.name);
    };
  } else {
    nameFn = options.name as typeof nameFn;
  }

  const document = await dereference(pathOrUrl, options);
  const outputDir = path.join(cwd, output);

  async function write(file: string, content: string) {
    await mkdir(path.dirname(file), { recursive: true });
    await writeFile(file, content);
  }

  function getOutputPaths(
    groupBy: OperationConfig['groupBy'] = 'none',
    result: GeneratePageOutput,
  ): string[] {
    const file = nameFn(result, document.document);

    if (groupBy === 'route') {
      return [
        path.join(
          result.type === 'operation' ? result.item.path : result.item.name,
          result.item.method,
        ) + '.mdx',
      ];
    }

    if (groupBy === 'tag') {
      let tags =
        result.type === 'operation'
          ? document.document.paths![result.item.path]![result.item.method]!
              .tags
          : document.document.webhooks![result.item.name][result.item.method]!
              .tags;

      if (!tags || tags.length === 0) {
        console.warn(
          'When `groupBy` is set to `tag`, make sure a `tags` is defined for every operation schema.',
        );

        tags = ['unknown'];
      }

      return tags.map((tag) => path.join(slugify(tag), `${file}.mdx`));
    }

    return [`${file}.mdx`];
  }

  if (options.per === 'file') {
    const result = await generateAll(pathOrUrl, document, options);
    const filename = nameFn(
      {
        pathOrUrl,
        content: result,
      },
      document.document,
    );

    const outPath = path.join(outputDir, `${filename}.mdx`);

    await write(outPath, result);
    console.log(`Generated: ${outPath}`);
  } else if (options.per === 'tag') {
    const results = await generateTags(pathOrUrl, document, options);

    for (const result of results) {
      const filename = nameFn(result, document.document);
      const outPath = path.join(outputDir, `${filename}.mdx`);
      await write(outPath, result.content);
      console.log(`Generated: ${outPath}`);
    }
  } else {
    const results = await generatePages(pathOrUrl, document, options);
    const mapping = new Map<string, GeneratePageOutput>();

    for (const result of results) {
      for (const outputPath of getOutputPaths(options.groupBy, result)) {
        mapping.set(outputPath, result);
      }
    }

    for (const [key, output] of mapping.entries()) {
      let outputPath = key;

      // v1 will remove nested directories
      if (typeof options.name === 'object' && options.name.algorithm === 'v1') {
        const isSharedDir = Array.from(mapping.keys()).some(
          (item) =>
            item !== outputPath &&
            path.dirname(item) === path.dirname(outputPath),
        );

        if (!isSharedDir && path.dirname(outputPath) !== '.') {
          outputPath = path.join(path.dirname(outputPath) + '.mdx');
        }
      }

      await write(path.join(outputDir, outputPath), output.content);
      console.log(`Generated: ${outputPath}`);
    }
  }
}

function isUrl(input: string): boolean {
  return input.startsWith('https://') || input.startsWith('http://');
}

function getOutputPathFromRoute(path: string): string {
  return (
    path
      .toLowerCase()
      .replaceAll('.', '-')
      .split('/')
      .map((v) => {
        if (v.startsWith('{') && v.endsWith('}')) return v.slice(1, -1);
        return v;
      })
      .join('/') ?? ''
  );
}

function defaultSlugify(s: string): string {
  return s.replace(/\s+/g, '-').toLowerCase();
}

async function dereference(
  pathOrDocument: DocumentInput,
  options: GenerateOptions,
) {
  return processDocument(
    // resolve paths
    typeof pathOrDocument === 'string' &&
      !pathOrDocument.startsWith('http://') &&
      !pathOrDocument.startsWith('https://')
      ? resolve(options.cwd ?? process.cwd(), pathOrDocument)
      : pathOrDocument,
  );
}



================================================
FILE: packages/openapi/src/generate.ts
================================================
import { getAPIPageItems } from '@/build-routes';
import {
  type DocumentContext,
  generateDocument,
} from '@/utils/generate-document';
import { idToTitle } from '@/utils/id-to-title';
import type { OperationItem, WebhookItem } from '@/render/api-page';
import type {
  DocumentInput,
  ProcessedDocument,
} from '@/utils/process-document';

export interface GenerateOptions {
  /**
   * Additional imports of your MDX components.
   */
  imports?: {
    names: string[];
    from: string;
  }[];

  /**
   * Customise frontmatter.
   *
   * A `full: true` property will be added by default.
   */
  frontmatter?: (
    title: string,
    description: string | undefined,
    context: DocumentContext,
  ) => Record<string, unknown>;

  /**
   * Add description to document body.
   *
   * We recommend but don't enable it by default because some OpenAPI schemas have invalid description that breaks MDX syntax.
   *
   * @defaultValue false
   */
  includeDescription?: boolean;

  /**
   * Add a comment to the top of generated files indicating they are auto-generated.
   * - `true`: Adds a standardized comment
   * - `false`: No comment is added
   * - `string`: Adds the provided custom comment
   *
   * @defaultValue true
   */
  addGeneratedComment?: boolean | string;

  cwd?: string;

  /**
   * Inline the entire OpenAPI document into the MDX file.
   *
   * @defaultValue false
   */
  inlineDocument?: boolean;
}

export interface GenerateTagOutput {
  tag: string;
  content: string;
}

export type GeneratePageOutput =
  | {
      type: 'operation';
      item: OperationItem;
      content: string;
    }
  | {
      type: 'webhook';
      item: WebhookItem;
      content: string;
    };

export async function generateAll(
  input: DocumentInput,
  processed: ProcessedDocument,
  options: GenerateOptions = {},
): Promise<string> {
  const { document } = processed;
  const items = getAPIPageItems(document);

  return generateDocument(
    input,
    processed,
    {
      operations: items.operations,
      webhooks: items.webhooks,
      hasHead: true,
    },
    {
      ...options,
      title: document.info.title,
      description: document.info.description,
    },
    {
      type: 'file',
    },
  );
}

export async function generatePages(
  input: DocumentInput,
  processed: ProcessedDocument,
  options: GenerateOptions = {},
): Promise<GeneratePageOutput[]> {
  const { document } = processed;
  const items = getAPIPageItems(document);
  const result: GeneratePageOutput[] = [];

  for (const item of items.operations) {
    const pathItem = document.paths?.[item.path];
    if (!pathItem) continue;
    const operation = pathItem[item.method];
    if (!operation) continue;

    result.push({
      type: 'operation',
      item,
      content: generateDocument(
        input,
        processed,
        {
          operations: [item],
          hasHead: false,
        },
        {
          ...options,
          title:
            operation.summary ??
            pathItem.summary ??
            idToTitle(operation.operationId ?? 'unknown'),
          description: operation.description ?? pathItem.description,
        },
        {
          type: 'operation',
        },
      ),
    });
  }

  for (const item of items.webhooks) {
    const pathItem = document.webhooks?.[item.name];
    if (!pathItem) continue;
    const operation = pathItem[item.method];
    if (!operation) continue;

    result.push({
      type: 'webhook',
      item,
      content: generateDocument(
        input,
        processed,
        {
          webhooks: [item],
          hasHead: false,
        },
        {
          ...options,
          title: operation.summary ?? pathItem.summary ?? idToTitle(item.name),
          description: operation.description ?? pathItem.description,
        },
        {
          type: 'operation',
        },
      ),
    });
  }

  return result;
}

export async function generateTags(
  input: DocumentInput,
  processed: ProcessedDocument,
  options: GenerateOptions = {},
): Promise<GenerateTagOutput[]> {
  const { document } = processed;
  if (!document.tags) return [];
  const items = getAPIPageItems(document);

  return document.tags.map((tag) => {
    const webhooks = items.webhooks.filter(
      (v) => v.tags && v.tags.includes(tag.name),
    );
    const operations = items.operations.filter(
      (v) => v.tags && v.tags.includes(tag.name),
    );

    const displayName =
      tag && 'x-displayName' in tag && typeof tag['x-displayName'] === 'string'
        ? tag['x-displayName']
        : idToTitle(tag.name);

    return {
      tag: tag.name,
      content: generateDocument(
        input,
        processed,
        {
          operations,
          webhooks,
          hasHead: true,
        },
        {
          ...options,
          title: displayName,
          description: tag?.description,
        },
        {
          type: 'tag',
          tag,
        },
      ),
    } satisfies GenerateTagOutput;
  });
}



================================================
FILE: packages/openapi/src/icons.tsx
================================================
export * from 'fumadocs-ui/internal/icons';



================================================
FILE: packages/openapi/src/index.ts
================================================
export * from './generate-file';
export * from './types';
export type { MediaAdapter } from './media/adapter';



================================================
FILE: packages/openapi/src/types.ts
================================================
import type { OpenAPIV3_1 as V3_1 } from 'openapi-types';
import type { default as Slugger } from 'github-slugger';
import { type Renderer } from '@/render/renderer';
import type { CodeSample } from '@/render/operation';
import type {
  BuiltinTheme,
  CodeOptionsThemes,
  CodeToHastOptionsCommon,
} from 'shiki';
import type { NoReference } from '@/utils/schema';
import type { ProcessedDocument } from '@/utils/process-document';
import type { MediaAdapter } from '@/media/adapter';

export type Document = V3_1.Document;
export type OperationObject = V3_1.OperationObject;
export type ParameterObject = V3_1.ParameterObject;
export type SecurityRequirementObject = V3_1.SecurityRequirementObject;
export type SecuritySchemeObject = V3_1.SecuritySchemeObject;
export type ReferenceObject = V3_1.ReferenceObject;
export type PathItemObject = V3_1.PathItemObject;
export type TagObject = V3_1.TagObject;
export type ServerObject = NoReference<V3_1.ServerObject>;
export type CallbackObject = NoReference<V3_1.CallbackObject>;

export type MethodInformation = NoReference<OperationObject> & {
  method: string;
};

type Awaitable<T> = T | Promise<T>;

/**
 * Dereferenced value and its original `$ref` value
 */
export type DereferenceMap = Map<unknown, string>;

export interface RenderContext {
  /**
   * The url of proxy to avoid CORS issues
   */
  proxyUrl?: string;

  renderer: Renderer;

  /**
   * Disable API Playground
   */
  disablePlayground?: boolean;

  servers: ServerObject[];

  slugger: Slugger;

  /**
   * dereferenced schema
   */
  schema: ProcessedDocument;

  /**
   * Generate TypeScript definitions from response schema.
   *
   * Pass `false` to disable it.
   *
   * @param method - the operation object
   * @param statusCode - status code
   */
  generateTypeScriptSchema?:
    | ((
        method: NoReference<MethodInformation>,
        statusCode: string,
      ) => Awaitable<string>)
    | false;

  /**
   * Generate code samples for endpoint.
   */
  generateCodeSamples?: (method: MethodInformation) => Awaitable<CodeSample[]>;

  shikiOptions?: Omit<CodeToHastOptionsCommon, 'lang'> &
    CodeOptionsThemes<BuiltinTheme>;

  /**
   * Show full response schema instead of only example response & Typescript definitions
   *
   * @default true
   */
  showResponseSchema?: boolean;

  mediaAdapters: Record<string, MediaAdapter>;
}



================================================
FILE: packages/openapi/src/media/adapter.ts
================================================
import { escapeString, inputToString } from '@/utils/input-to-string';
// @ts-expect-error -- untyped
import { js2xml } from 'xml-js/lib/js2xml';

interface BaseContext {
  /**
   * Passed by your custom example generator, for your custom media adapter to receive.
   */
  customData?: Record<string, unknown>;
}

interface GoContext extends BaseContext {
  lang: 'go';
  addImport: (name: string) => void;
}

interface JavaScriptContext extends BaseContext {
  lang: 'js';
  addImport: (pkg: string, name: string) => void;
}

interface JavaContext extends BaseContext {
  lang: 'java';
  addImport: (specifier: string) => void;
}

interface CSharpContext extends BaseContext {
  lang: 'csharp';
  addImport: (specifier: string) => void;
}

export type MediaContext =
  | JavaContext
  | GoContext
  | JavaScriptContext
  | CSharpContext
  | (BaseContext & { lang: string });

export interface MediaAdapter {
  /**
   * the same adapter that's passed from a client component.
   *
   * It is needed for client-side serialization of values.
   */
  client?: MediaAdapter;

  /**
   * encode data into specified media type for `fetch()`.
   *
   * Return the encoded form of `data.body` property.
   */
  encode: (data: { body: unknown }) => BodyInit;

  /**
   * generate code example for creating the body in a given programming language.
   *
   * @param data - request data.
   * @param lang - name of programming language.
   * @param ctx - context passed from the generator of programming language.
   *
   * @returns code that inits a `body` variable, or undefined if not supported (skip example for that language).
   */
  generateExample: (
    data: { body: unknown },
    ctx: MediaContext,
  ) => string | undefined;
}

export const defaultAdapters = {
  'application/json': {
    encode(data) {
      return JSON.stringify(data.body);
    },
    generateExample(data, ctx) {
      return str(data.body, 'application/json', ctx);
    },
  },
  'application/xml': {
    encode(data) {
      return js2xml(data.body as Record<string, unknown>, {
        compact: true,
        spaces: 2,
      });
    },
    generateExample(data, ctx) {
      return str(data.body, 'application/xml', ctx);
    },
  },
  'application/x-ndjson': {
    encode(data) {
      if (Array.isArray(data.body)) {
        return data.body.map((v) => JSON.stringify(v)).join('\n');
      }

      return JSON.stringify(data.body);
    },
    generateExample(data, ctx) {
      return str(data.body, 'application/x-ndjson', ctx);
    },
  },
  'application/x-www-form-urlencoded': {
    encode(data) {
      if (typeof data.body !== 'object')
        throw new Error(
          `Input value must be object, received: ${typeof data.body}`,
        );

      const params = new URLSearchParams();
      for (const key in data.body) {
        params.set(key, String(data.body[key as keyof object]));
      }

      return params;
    },
    generateExample(data, ctx) {
      if (ctx.lang === 'js') {
        return `const body = new URLSearchParams(${JSON.stringify(data.body, null, 2)})`;
      }

      return str(data.body, 'application/x-www-form-urlencoded', ctx);
    },
  },
  'multipart/form-data': {
    encode(data) {
      const formData = new FormData();
      const body = data.body as Record<string, unknown>;

      if (typeof body !== 'object' || !body) {
        throw new Error(
          `Unsupported body type: ${typeof body}, expected: object`,
        );
      }

      for (const key in body) {
        const prop = body[key];

        if (typeof prop === 'object' && prop instanceof File) {
          formData.set(key, prop);
        }

        if (Array.isArray(prop) && prop.every((item) => item instanceof File)) {
          for (const item of prop) {
            formData.append(key, item);
          }
        }

        if (prop && !(prop instanceof File)) {
          formData.set(key, JSON.stringify(prop));
        }
      }

      return formData;
    },
    generateExample(data, ctx) {
      if (ctx.lang === 'python') {
        return `body = ${JSON.stringify(data.body, null, 2)}`;
      }

      const s: string[] = [];
      if (ctx.lang === 'js') {
        s.push(`const body = new FormData();`);

        for (const [key, value] of Object.entries(data.body as object)) {
          s.push(`body.set(${key}, ${JSON.stringify(inputToString(value))})`);
        }
      }

      if (ctx.lang === 'go') {
        const { addImport } = ctx as GoContext;
        addImport('mime/multipart');
        addImport('bytes');

        s.push('body := new(bytes.Buffer)');
        s.push('mp := multipart.NewWriter(payload)');

        for (const [key, value] of Object.entries(data.body as object)) {
          if (!value) continue;

          const escaped = escapeString(
            inputToString(value, 'application/json'),
            '`',
          );

          s.push(`mp.WriteField("${key}", ${escaped})`);
        }
      }

      if (ctx.lang === 'java') {
        const { addImport } = ctx as JavaContext;
        addImport('java.net.http.HttpRequest.BodyPublishers');

        s.push(`var body = BodyPublishers.ofByteArray(new byte[] { ... });`);
      }

      if (ctx.lang === 'csharp') {
        s.push(`var body = new MultipartFormDataContent();`);
      }

      if (s.length > 0) return s.join('\n');
    },
  },
  'application/octet-stream': {
    encode(data) {
      return data.body as BodyInit;
    },
    generateExample() {
      // not supported
      return undefined;
    },
  },
} satisfies Record<string, MediaAdapter>;

function str(
  init: unknown,
  mediaType:
    | 'application/x-www-form-urlencoded'
    | 'application/x-ndjson'
    | 'application/json'
    | 'application/xml',
  ctx: MediaContext,
) {
  if (ctx.lang === 'js') {
    if (mediaType === 'application/json') {
      return `const body = JSON.stringify(${JSON.stringify(init, null, 2)})`;
    }
    return `const body = ${escapeString(inputToString(init, mediaType), '`')}`;
  }

  if (ctx.lang === 'python') {
    if (mediaType === 'application/json')
      return `body = ${JSON.stringify(init, null, 2)}`;

    return `body = ${escapeString(inputToString(init, mediaType), '"""')}`;
  }

  if (ctx.lang === 'go') {
    const { addImport } = ctx as GoContext;
    addImport('strings');
    return `body := strings.NewReader(${escapeString(inputToString(init, mediaType), '`')})`;
  }

  if (ctx.lang === 'java') {
    const { addImport } = ctx as JavaContext;
    addImport('java.net.http.HttpRequest.BodyPublishers');
    return `var body = BodyPublishers.ofString(${escapeString(inputToString(init, mediaType), '"""')});`;
  }

  if (ctx.lang === 'csharp') {
    const input = `\n${inputToString(init, mediaType)}\n`;

    return `var body = new StringContent(${escapeString(input, '"""')}, Encoding.UTF8, "${mediaType}");`;
  }
}



================================================
FILE: packages/openapi/src/playground/client.tsx
================================================
'use client';
import {
  type FC,
  Fragment,
  type HTMLAttributes,
  lazy,
  type ReactElement,
  type ReactNode,
  useEffect,
  useMemo,
  useState,
} from 'react';
import type {
  ControllerFieldState,
  ControllerRenderProps,
  FieldPath,
  UseFormStateReturn,
} from 'react-hook-form';
import {
  Controller,
  FormProvider,
  useForm,
  useFormContext,
} from 'react-hook-form';
import { useApiContext, useServerSelectContext } from '@/ui/contexts/api';
import type { FetchResult } from '@/playground/fetcher';
import { FieldInput, FieldSet, JsonInput, ObjectInput } from './inputs';
import type {
  ParameterField,
  RequestSchema,
  SecurityEntry,
} from '@/playground/index';
import { getStatusInfo } from './status-info';
import {
  joinURL,
  resolveRequestData,
  resolveServerUrl,
  withBase,
} from '@/utils/url';
import { DynamicCodeBlock } from 'fumadocs-ui/components/dynamic-codeblock';
import { MethodLabel } from '@/ui/components/method-label';
import { useQuery } from '@/utils/use-query';
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from 'fumadocs-ui/components/ui/collapsible';
import { ChevronDown, LoaderCircle } from 'lucide-react';
import { encodeRequestData, type RequestData } from '@/requests/_shared';
import { buttonVariants } from 'fumadocs-ui/components/ui/button';
import { cn } from 'fumadocs-ui/utils/cn';
import {
  type FieldInfo,
  SchemaProvider,
  useResolvedSchema,
} from '@/playground/schema';
import {
  useRequestDataUpdater,
  useRequestInitialData,
} from '@/ui/contexts/code-example';
import { useEffectEvent } from 'fumadocs-core/utils/use-effect-event';
import { useOnChange } from 'fumadocs-core/utils/use-on-change';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/ui/components/select';
import { labelVariants } from '@/ui/components/input';
import type { ParsedSchema } from '@/utils/schema';

interface FormValues {
  path: Record<string, unknown>;
  query: Record<string, unknown>;
  header: Record<string, unknown>;
  cookie: Record<string, unknown>;
  body: unknown;

  _encoded?: RequestData;
}

export interface CustomField<TName extends FieldPath<FormValues>, Info> {
  render: (props: {
    /**
     * Field Info
     */
    info: Info;
    field: ControllerRenderProps<FormValues, TName>;
    fieldState: ControllerFieldState;
    formState: UseFormStateReturn<FormValues>;
  }) => ReactElement;
}

export interface ClientProps extends HTMLAttributes<HTMLFormElement> {
  route: string;
  method: string;
  parameters?: ParameterField[];
  securities: SecurityEntry[][];
  body?: {
    schema: RequestSchema;
    mediaType: string;
  };
  /**
   * Resolver for $ref schemas you've passed
   */
  references: Record<string, RequestSchema>;
  proxyUrl?: string;

  fields?: {
    parameter?: CustomField<
      `${ParameterField['in']}.${string}`,
      ParameterField
    >;
    auth?: CustomField<FieldPath<FormValues>, RequestSchema>;
    body?: CustomField<'body', RequestSchema>;
  };

  components?: Partial<{
    ResultDisplay: FC<{ data: FetchResult }>;
  }>;
}

const AuthPrefix = '__fumadocs_auth';

const ServerSelect = lazy(() => import('@/ui/server-select'));
const OauthDialog = lazy(() =>
  import('./auth/oauth-dialog').then((mod) => ({
    default: mod.OauthDialog,
  })),
);
const OauthDialogTrigger = lazy(() =>
  import('./auth/oauth-dialog').then((mod) => ({
    default: mod.OauthDialogTrigger,
  })),
);

export default function Client({
  route,
  method = 'GET',
  securities,
  parameters = [],
  body,
  fields,
  references,
  proxyUrl,
  components: { ResultDisplay = DefaultResultDisplay } = {},
  ...rest
}: ClientProps) {
  const { server } = useServerSelectContext();
  const requestData = useRequestInitialData();
  const updater = useRequestDataUpdater();
  const fieldInfoMap = useMemo(() => new Map<string, FieldInfo>(), []);
  const { mediaAdapters } = useApiContext();
  const [securityId, setSecurityId] = useState(0);
  const { inputs, mapInputs } = useAuthInputs(securities[securityId]);

  const defaultValues: FormValues = useMemo(
    () => ({
      path: requestData.path,
      query: requestData.query,
      header: requestData.header,
      body: requestData.body,
      cookie: requestData.cookie,
    }),
    [requestData],
  );

  const form = useForm<FormValues>({
    defaultValues,
  });

  const testQuery = useQuery(async (input: FormValues) => {
    const fetcher = await import('./fetcher').then((mod) =>
      mod.createBrowserFetcher(mediaAdapters),
    );

    input._encoded ??= encodeRequestData(
      { ...mapInputs(input), method, bodyMediaType: body?.mediaType },
      mediaAdapters,
      parameters,
    );

    return fetcher.fetch(
      joinURL(
        withBase(
          server ? resolveServerUrl(server.url, server.variables) : '/',
          window.location.origin,
        ),
        resolveRequestData(route, input._encoded),
      ),
      {
        proxyUrl,
        ...input._encoded,
      },
    );
  });

  function initAuthValues(values: FormValues, inputs: AuthField[]) {
    for (const item of inputs) {
      manipulateValues(values, item.fieldName, () => {
        const stored = localStorage.getItem(AuthPrefix + item.original.id);

        if (stored) {
          const parsed = JSON.parse(stored);
          if (typeof parsed === typeof item.defaultValue) return parsed;
        }

        return item.defaultValue;
      });
    }

    return values;
  }

  useOnChange(defaultValues, () => {
    fieldInfoMap.clear();
    form.reset(initAuthValues(defaultValues, inputs));
  });

  useOnChange(inputs, (current, previous) => {
    form.reset((values) => {
      for (const item of previous) {
        if (current.some(({ original }) => original.id === item.original.id)) {
          continue;
        }

        manipulateValues(values, item.fieldName, () => undefined);
      }

      return initAuthValues(values, current);
    });
  });

  const onUpdateDebounced = useEffectEvent((values: FormValues) => {
    for (const item of inputs) {
      const value = item.fieldName
        .split('.')
        .reduce((v, seg) => v[seg as keyof object], values as object);

      if (value) {
        localStorage.setItem(
          AuthPrefix + item.original.id,
          JSON.stringify(value),
        );
      }
    }

    const data = {
      ...mapInputs(values),
      method,
      bodyMediaType: body?.mediaType,
    };
    values._encoded ??= encodeRequestData(data, mediaAdapters, parameters);
    updater.setData(data, values._encoded);
  });

  useEffect(() => {
    let timer: number | null = null;

    const subscription = form.subscribe({
      formState: {
        values: true,
      },
      callback({ values }) {
        // remove cached encoded request data
        delete values._encoded;

        if (timer) window.clearTimeout(timer);
        timer = window.setTimeout(
          () => onUpdateDebounced(values),
          timer ? 400 : 0,
        );
      },
    });
    form.reset((values) => initAuthValues(values, inputs));

    return () => subscription();
    // eslint-disable-next-line react-hooks/exhaustive-deps -- mounted once only
  }, []);

  const onSubmit = form.handleSubmit((value) => {
    testQuery.start(mapInputs(value));
  });

  return (
    <FormProvider {...form}>
      <SchemaProvider fieldInfoMap={fieldInfoMap} references={references}>
        <form
          {...rest}
          className={cn(
            'not-prose flex flex-col rounded-xl border shadow-md overflow-hidden bg-fd-card text-fd-card-foreground',
            rest.className,
          )}
          onSubmit={onSubmit}
        >
          <ServerSelect />
          <div className="flex flex-row items-center gap-2 text-sm p-3 pb-0">
            <MethodLabel>{method}</MethodLabel>
            <Route route={route} className="flex-1" />
            <button
              type="submit"
              className={cn(
                buttonVariants({ color: 'primary', size: 'sm' }),
                'px-3 py-1.5',
              )}
              disabled={testQuery.isLoading}
            >
              {testQuery.isLoading ? (
                <LoaderCircle className="size-4 animate-spin" />
              ) : (
                'Send'
              )}
            </button>
          </div>

          {securities.length > 0 && (
            <SecurityTabs
              securities={securities}
              securityId={securityId}
              setSecurityId={setSecurityId}
            >
              {inputs.map((input) => (
                <Fragment key={input.fieldName}>{input.children}</Fragment>
              ))}
            </SecurityTabs>
          )}
          <FormBody body={body} fields={fields} parameters={parameters} />
          {testQuery.data ? <ResultDisplay data={testQuery.data} /> : null}
        </form>
      </SchemaProvider>
    </FormProvider>
  );
}

function SecurityTabs({
  securities,
  setSecurityId,
  securityId,
  children,
}: {
  securities: SecurityEntry[][];
  securityId: number;
  setSecurityId: (value: number) => void;
  children: ReactNode;
}) {
  const [open, setOpen] = useState(false);
  const form = useFormContext();

  const result = (
    <CollapsiblePanel title="Authorization">
      <Select
        value={securityId.toString()}
        onValueChange={(v) => setSecurityId(Number(v))}
      >
        <SelectTrigger>
          <SelectValue />
        </SelectTrigger>
        <SelectContent>
          {securities.map((security, i) => (
            <SelectItem key={i} value={i.toString()}>
              {security.map((item) => (
                <div key={item.id} className="max-w-[600px]">
                  <p className="font-mono font-medium">{item.id}</p>
                  <p className="text-fd-muted-foreground whitespace-pre-wrap">
                    {item.description}
                  </p>
                </div>
              ))}
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
      {children}
    </CollapsiblePanel>
  );

  for (let i = 0; i < securities.length; i++) {
    const security = securities[i];

    for (const item of security) {
      if (item.type === 'oauth2') {
        return (
          <OauthDialog
            scheme={item}
            scopes={item.scopes}
            open={open}
            setOpen={(v) => {
              setOpen(v);
              if (v) {
                setSecurityId(i);
              }
            }}
            setToken={(token) => form.setValue('header.Authorization', token)}
          >
            {result}
          </OauthDialog>
        );
      }
    }
  }

  return result;
}

const ParamTypes = ['path', 'header', 'cookie', 'query'] as const;

function FormBody({
  parameters = [],
  fields = {},
  body,
}: Pick<ClientProps, 'parameters' | 'body' | 'fields'>) {
  const panels = useMemo(() => {
    return ParamTypes.map((type) => {
      const items = parameters.filter((v) => v.in === type);
      if (items.length === 0) return;

      return (
        <CollapsiblePanel
          key={type}
          title={
            {
              header: 'Header',
              cookie: 'Cookies',
              query: 'Query',
              path: 'Path',
            }[type]
          }
        >
          {items.map((field) => {
            const fieldName = `${type}.${field.name}` as const;
            const schema = (
              field.content
                ? field.content[Object.keys(field.content)[0]].schema
                : field.schema
            ) as ParsedSchema;

            if (fields?.parameter) {
              return renderCustomField(
                fieldName,
                schema,
                fields.parameter,
                field.name,
              );
            }

            return (
              <FieldSet
                key={fieldName}
                name={field.name}
                fieldName={fieldName}
                field={schema}
              />
            );
          })}
        </CollapsiblePanel>
      );
    });
  }, [fields.parameter, parameters]);

  return (
    <>
      {panels}
      {body && (
        <CollapsiblePanel title="Body">
          {fields.body ? (
            renderCustomField('body', body.schema, fields.body)
          ) : (
            <BodyInput field={body.schema} />
          )}
        </CollapsiblePanel>
      )}
    </>
  );
}

function BodyInput({ field: _field }: { field: RequestSchema }) {
  const field = useResolvedSchema(_field);
  const [isJson, setIsJson] = useState(false);

  if (field.format === 'binary')
    return <FieldSet field={field} fieldName="body" />;

  if (isJson)
    return (
      <>
        <button
          className={cn(
            buttonVariants({
              color: 'secondary',
              size: 'sm',
              className: 'w-fit font-mono p-2',
            }),
          )}
          onClick={() => setIsJson(false)}
          type="button"
        >
          Close JSON Editor
        </button>
        <JsonInput fieldName="body" />
      </>
    );

  return (
    <FieldSet
      field={field}
      fieldName="body"
      collapsible={false}
      name={
        <button
          type="button"
          className={cn(
            buttonVariants({
              color: 'secondary',
              size: 'sm',
              className: 'p-2',
            }),
          )}
          onClick={() => setIsJson(true)}
        >
          Open JSON Editor
        </button>
      }
    />
  );
}

interface AuthField {
  fieldName: string;
  defaultValue: unknown;

  original: SecurityEntry;
  children: ReactNode;

  mapOutput?: (values: unknown) => unknown;
}

/**
 * manipulate values without mutating the original object
 *
 * @returns a new manipulated object
 */
function manipulateValues<T extends object>(
  values: T,
  fieldName: string,
  update: (v: unknown) => unknown,
  clone = false,
): T {
  const root = clone ? { ...values } : values;
  let current = root as Record<string, unknown>;
  const segments = fieldName.split('.');

  for (let i = 0; i < segments.length; i++) {
    const segment = segments[i];

    if (i !== segments.length - 1) {
      let v = current[segment] as Record<string, unknown>;
      if (clone) v = { ...v };

      current[segment] = v;
      current = v;
      continue;
    }

    const updated = update(current[segment]);
    if (updated === undefined) {
      delete current[segment];
    } else {
      current[segment] = updated;
    }
  }

  return root;
}

function useAuthInputs(securities?: SecurityEntry[]) {
  const inputs = useMemo(() => {
    const result: AuthField[] = [];
    if (!securities) return result;

    for (const security of securities) {
      if (security.type === 'http' && security.scheme === 'basic') {
        const fieldName = `header.Authorization`;

        result.push({
          fieldName,
          original: security,
          defaultValue: {
            username: '',
            password: '',
          },
          mapOutput(out) {
            if (out && typeof out === 'object') {
              return `Basic ${btoa(`${'username' in out ? out.username : ''}:${'password' in out ? out.password : ''}`)}`;
            }

            return out;
          },
          children: (
            <ObjectInput
              field={{
                type: 'object',
                properties: {
                  username: {
                    type: 'string',
                  },
                  password: {
                    type: 'string',
                  },
                },
                required: ['username', 'password'],
              }}
              fieldName={fieldName}
            />
          ),
        });
      } else if (security.type === 'oauth2') {
        const fieldName = 'header.Authorization';

        result.push({
          fieldName: fieldName,
          original: security,
          defaultValue: 'Bearer ',
          children: (
            <fieldset className="flex flex-col gap-2">
              <label htmlFor={fieldName} className={cn(labelVariants())}>
                Access Token
              </label>
              <div className="flex gap-2">
                <FieldInput
                  fieldName={fieldName}
                  isRequired
                  field={{
                    type: 'string',
                  }}
                  className="flex-1"
                />

                <OauthDialogTrigger
                  type="button"
                  className={cn(
                    buttonVariants({
                      size: 'sm',
                      color: 'secondary',
                    }),
                  )}
                >
                  Authorize
                </OauthDialogTrigger>
              </div>
            </fieldset>
          ),
        });
      } else if (security.type === 'http') {
        const fieldName = 'header.Authorization';

        result.push({
          fieldName: fieldName,
          original: security,
          defaultValue: 'Bearer ',
          children: (
            <FieldSet
              name="Authorization (header)"
              fieldName={fieldName}
              isRequired
              field={{
                type: 'string',
              }}
            />
          ),
        });
      } else if (security.type === 'apiKey') {
        const fieldName = `${security.in}.${security.name}`;

        result.push({
          fieldName,
          defaultValue: '',
          original: security,
          children: (
            <FieldSet
              fieldName={fieldName}
              name={`${security.name} (${security.in})`}
              isRequired
              field={{
                type: 'string',
              }}
            />
          ),
        });
      } else {
        const fieldName = 'header.Authorization';

        result.push({
          fieldName,
          defaultValue: '',
          original: security,
          children: (
            <>
              <FieldSet
                name="Authorization (header)"
                isRequired
                fieldName={fieldName}
                field={{
                  type: 'string',
                }}
              />
              <p className="text-fd-muted-foreground text-xs">
                OpenID Connect is not supported at the moment, you can still set
                an access token here.
              </p>
            </>
          ),
        });
      }
    }

    return result;
  }, [securities]);

  const mapInputs = useEffectEvent((values: FormValues) => {
    for (const item of inputs) {
      if (!item.mapOutput) continue;

      values = manipulateValues(values, item.fieldName, item.mapOutput, true);
    }

    return values;
  });

  return { inputs, mapInputs };
}

function renderCustomField(
  fieldName: string,
  info: RequestSchema & { name?: string },
  field: CustomField<never, never>,
  key?: string,
) {
  return (
    <Controller
      key={key}
      // @ts-expect-error we use string here
      render={(props) => field.render({ ...props, info })}
      name={fieldName}
    />
  );
}

function Route({
  route,
  ...props
}: HTMLAttributes<HTMLDivElement> & { route: string }) {
  const segments = route.split('/').filter((part) => part.length > 0);

  return (
    <div
      {...props}
      className={cn(
        'flex flex-row items-center gap-0.5 overflow-auto text-nowrap',
        props.className,
      )}
    >
      {segments.map((part, index) => (
        <Fragment key={index}>
          <span className="text-fd-muted-foreground">/</span>
          {part.startsWith('{') && part.endsWith('}') ? (
            <code className="bg-fd-primary/10 text-fd-primary">{part}</code>
          ) : (
            <code className="text-fd-foreground">{part}</code>
          )}
        </Fragment>
      ))}
    </div>
  );
}

function DefaultResultDisplay({ data }: { data: FetchResult }) {
  const statusInfo = useMemo(() => getStatusInfo(data.status), [data.status]);
  const { shikiOptions } = useApiContext();

  return (
    <div className="flex flex-col gap-3 p-3">
      <div className="inline-flex items-center gap-1.5 text-sm font-medium text-fd-foreground">
        <statusInfo.icon className={cn('size-4', statusInfo.color)} />
        {statusInfo.description}
      </div>
      <p className="text-sm text-fd-muted-foreground">{data.status}</p>
      {data.data ? (
        <DynamicCodeBlock
          lang={
            typeof data.data === 'string' && data.data.length > 50000
              ? 'text'
              : data.type
          }
          code={
            typeof data.data === 'string'
              ? data.data
              : JSON.stringify(data.data, null, 2)
          }
          options={shikiOptions}
        />
      ) : null}
    </div>
  );
}

function CollapsiblePanel({
  title,
  children,
  ...props
}: Omit<HTMLAttributes<HTMLDivElement>, 'title'> & {
  title: ReactNode;
}) {
  return (
    <Collapsible {...props} className="border-b last:border-b-0">
      <CollapsibleTrigger className="group w-full flex items-center gap-2 p-3 text-sm font-medium">
        {title}
        <ChevronDown className="ms-auto size-3.5 text-fd-muted-foreground group-data-[state=open]:rotate-180" />
      </CollapsibleTrigger>
      <CollapsibleContent>
        <div className="flex flex-col gap-3 p-3 pt-1">{children}</div>
      </CollapsibleContent>
    </Collapsible>
  );
}



================================================
FILE: packages/openapi/src/playground/fetcher.ts
================================================
import type { RequestData } from '@/requests/_shared';
import type { MediaAdapter } from '@/media/adapter';

export interface FetchOptions extends RequestData {
  proxyUrl?: string;
}

export interface FetchResult {
  status: number;
  type: 'json' | 'html' | 'text';
  data: unknown;
}

export interface Fetcher {
  /**
   * This method will not apply the path & search parameters from `options` to given `url`.
   *
   * @param url - The full URL of request.
   */
  fetch: (url: string, options: FetchOptions) => Promise<FetchResult>;
}

export function createBrowserFetcher(
  adapters: Record<string, MediaAdapter>,
): Fetcher {
  return {
    async fetch(url, options) {
      const headers = new Headers();
      if (options.bodyMediaType)
        headers.append('Content-Type', options.bodyMediaType);

      for (const key in options.header) {
        const param = options.header[key];

        if (!Array.isArray(param.value)) {
          headers.append(key, param.value);
        } else {
          headers.append(key, param.value.join(','));
        }
      }

      const proxyUrl = options.proxyUrl
        ? new URL(options.proxyUrl, document.baseURI)
        : null;

      if (proxyUrl) {
        proxyUrl.searchParams.append('url', url);
        url = proxyUrl.toString();
      }

      let body: BodyInit | undefined = undefined;
      if (options.bodyMediaType && options.body) {
        const adapter = adapters[options.bodyMediaType];
        if (!adapter)
          return {
            status: 400,
            type: 'text',
            data: `[Fumadocs] No adapter for ${options.bodyMediaType}, you need to specify one from 'createOpenAPI()'.`,
          };

        body = adapter.encode(options as { body: unknown });
      }

      // cookies
      for (const key in options.cookie) {
        const param = options.cookie[key];
        const segs: string[] = [`${key}=${param.value}`];

        if (proxyUrl && proxyUrl.origin !== window.location.origin)
          segs.push(`domain=${proxyUrl.host}`);
        segs.push('path=/', 'max-age=30');

        document.cookie = segs.join('; ');
      }

      return fetch(url, {
        method: options.method,
        cache: 'no-cache',
        headers,
        body,
        signal: AbortSignal.timeout(10 * 1000),
      })
        .then(async (res) => {
          const contentType = res.headers.get('Content-Type') ?? '';
          let type: FetchResult['type'];
          let data: unknown;

          if (contentType.startsWith('application/json')) {
            type = 'json';
            data = await res.json();
          } else {
            type = contentType.startsWith('text/html') ? 'html' : 'text';
            data = await res.text();
          }

          return { status: res.status, type, data };
        })
        .catch((e) => {
          const message =
            e instanceof Error ? `[${e.name}] ${e.message}` : e.toString();

          return {
            status: 400,
            type: 'text',
            data: `Client side error: ${message}`,
          };
        });
    },
  };
}



================================================
FILE: packages/openapi/src/playground/get-default-values.ts
================================================
import type { RequestSchema } from '@/playground/index';

export function getDefaultValue(schema: RequestSchema): unknown {
  if (typeof schema === 'boolean') return null;

  const type = schema.type;
  if (Array.isArray(type))
    return getDefaultValue({
      ...schema,
      type: type[0],
    });

  if (type === 'object' && typeof schema === 'object')
    return Object.fromEntries(
      Object.entries(schema.properties ?? {}).map(([key, prop]) => {
        return [key, getDefaultValue(prop)];
      }),
    );

  if (type === 'array') return [];
  if (type === 'null') return null;
  if (type === 'string') {
    if (typeof schema === 'object' && schema.format === 'binary')
      return undefined;

    return '';
  }
  if (type === 'number' || type === 'integer') return 0;
  if (type === 'boolean') return false;
}



================================================
FILE: packages/openapi/src/playground/index.tsx
================================================
import type {
  MethodInformation,
  ParameterObject,
  RenderContext,
  SecuritySchemeObject,
} from '@/types';
import {
  getPreferredType,
  type NoReference,
  type ParsedSchema,
} from '@/utils/schema';
import { type ClientProps } from './client';
import { ClientLazy } from '@/ui/lazy';

export type ParameterField = NoReference<ParameterObject> & {
  schema: ParsedSchema;
  in: 'cookie' | 'header' | 'query' | 'path';
};

export type RequestSchema = ParsedSchema;

interface Context {
  references: Record<string, RequestSchema>;
  registered: WeakMap<Exclude<ParsedSchema, boolean>, string>;
  nextId: () => string;
}

export interface APIPlaygroundProps {
  path: string;
  method: MethodInformation;
  ctx: RenderContext;

  client?: Partial<ClientProps>;
}

export type { ClientProps, CustomField } from './client';

export type SecurityEntry = SecuritySchemeObject & {
  scopes: string[];
  id: string;
};

export async function APIPlayground({
  path,
  method,
  ctx,
  client,
}: APIPlaygroundProps) {
  let currentId = 0;
  const bodyContent = method.requestBody?.content;
  const mediaType = bodyContent ? getPreferredType(bodyContent) : undefined;

  const context: Context = {
    references: {},
    nextId() {
      return String(currentId++);
    },
    registered: new WeakMap(),
  };

  const props: ClientProps = {
    securities: parseSecurities(method, ctx),
    method: method.method,
    route: path,
    parameters: method.parameters as ParameterField[],
    body:
      bodyContent && mediaType
        ? ({
            schema: writeReferences(
              bodyContent[mediaType].schema as ParsedSchema,
              context,
            ),
            mediaType,
          } as ClientProps['body'])
        : undefined,
    references: context.references,
    proxyUrl: ctx.proxyUrl,
    ...client,
  };

  return <ClientLazy {...props} />;
}

function writeReferences(
  schema: ParsedSchema,
  ctx: Context,
  stack: WeakMap<object, object> = new WeakMap(),
): RequestSchema {
  if (typeof schema !== 'object' || !schema) return schema;
  if (stack.has(schema)) {
    const out = stack.get(schema)!;
    const id = ctx.nextId();
    ctx.references[id] = out;

    return {
      $ref: id,
    };
  }

  const output = { ...schema };
  stack.set(schema, output);
  for (const _n in output) {
    const name = _n as keyof typeof output;
    if (!output[name]) continue;

    switch (name) {
      case 'oneOf':
      case 'allOf':
      case 'anyOf':
        output[name] = output[name].map((item) =>
          writeReferences(item, ctx, stack),
        );
        continue;
      case 'items':
      case 'additionalProperties':
      case 'not':
        output[name] = writeReferences(output[name], ctx, stack);
        continue;
      case 'properties':
      case 'patternProperties':
        output[name] = { ...output[name] };

        for (const key in output[name]) {
          output[name][key] = writeReferences(output[name][key], ctx, stack);
        }
    }
  }

  return output;
}

function parseSecurities(
  method: MethodInformation,
  { schema: { document } }: RenderContext,
): ClientProps['securities'] {
  const result: ClientProps['securities'] = [];
  const security = method.security ?? document.security ?? [];
  if (security.length === 0) return result;

  for (const map of security) {
    const list: ClientProps['securities'][number] = [];

    for (const [key, scopes] of Object.entries(map)) {
      const scheme = document.components?.securitySchemes?.[key];
      if (!scheme) continue;

      list.push({
        ...scheme,
        scopes,
        id: key,
      });
    }

    if (list.length > 0) result.push(list);
  }

  return result;
}



================================================
FILE: packages/openapi/src/playground/inputs.tsx
================================================
'use client';
import {
  type ComponentProps,
  type HTMLAttributes,
  type ReactNode,
  useMemo,
  useState,
} from 'react';
import { ChevronDown, Plus, Trash2 } from 'lucide-react';
import {
  Controller,
  useController,
  useFieldArray,
  useFormContext,
} from 'react-hook-form';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/ui/components/select';
import type { RequestSchema } from '@/playground/index';
import { Input, labelVariants } from '@/ui/components/input';
import { getDefaultValue } from './get-default-values';
import { cn } from 'fumadocs-ui/utils/cn';
import { buttonVariants } from 'fumadocs-ui/components/ui/button';
import { combineSchema } from '@/utils/combine-schema';
import { schemaToString } from '@/utils/schema-to-string';
import {
  anyFields,
  useFieldInfo,
  useResolvedSchema,
} from '@/playground/schema';

function FieldLabel(props: ComponentProps<'label'>) {
  return (
    <label
      {...props}
      className={cn('w-full inline-flex items-center gap-0.5', props.className)}
    >
      {props.children}
    </label>
  );
}

function FieldLabelName({
  required = false,
  ...props
}: ComponentProps<'span'> & { required?: boolean }) {
  return (
    <span
      {...props}
      className={cn(labelVariants(), 'font-mono me-auto', props.className)}
    >
      {props.children}
      {required && <span className="text-red-400/80 mx-1">*</span>}
    </span>
  );
}

function FieldLabelType(props: ComponentProps<'code'>) {
  return (
    <code
      {...props}
      className={cn('text-xs text-fd-muted-foreground', props.className)}
    >
      {props.children}
    </code>
  );
}

export function ObjectInput({
  field: _field,
  fieldName,
  ...props
}: {
  field: Exclude<RequestSchema, boolean>;
  fieldName: string;
} & ComponentProps<'div'>) {
  const resolved = useResolvedSchema(_field);
  const field = useMemo(() => combineSchema([resolved]), [resolved]);
  if (typeof field === 'boolean') return;

  return (
    <div
      {...props}
      className={cn('grid grid-cols-1 gap-4 @md:grid-cols-2', props.className)}
    >
      {Object.entries(field.properties ?? {}).map(([key, child]) => (
        <FieldSet
          key={key}
          name={key}
          field={child}
          fieldName={`${fieldName}.${key}`}
          isRequired={field.required?.includes(key)}
        />
      ))}
      {(field.additionalProperties || field.patternProperties) && (
        <DynamicProperties
          fieldName={fieldName}
          filterKey={(v) =>
            !field.properties || !Object.keys(field.properties).includes(v)
          }
          getType={(key) => {
            for (const pattern in field.patternProperties) {
              if (key.match(RegExp(pattern))) {
                return field.patternProperties[pattern];
              }
            }

            if (field.additionalProperties) return field.additionalProperties;

            return anyFields;
          }}
        />
      )}
    </div>
  );
}

export function JsonInput({ fieldName }: { fieldName: string }) {
  const controller = useController({
    name: fieldName,
  });
  const [error, setError] = useState<string | null>(null);
  const [value, setValue] = useState(() =>
    JSON.stringify(controller.field.value, null, 2),
  );

  return (
    <div className="flex flex-col bg-fd-secondary text-fd-secondary-foreground overflow-hidden border rounded-lg">
      <textarea
        {...controller.field}
        value={value}
        className="p-2 h-[240px] text-sm font-mono resize-none focus-visible:outline-none"
        onChange={(v) => {
          setValue(v.target.value);
          try {
            controller.field.onChange(JSON.parse(v.target.value));
            setError(null);
          } catch (e) {
            if (e instanceof Error) setError(e.message);
          }
        }}
      />
      <p className="p-2 text-xs font-mono border-t text-red-400 empty:hidden">
        {error}
      </p>
    </div>
  );
}

function DynamicProperties({
  fieldName,
  filterKey = () => true,
  getType = () => anyFields,
}: {
  fieldName: string;
  filterKey?: (key: string) => boolean;
  getType: (key: string) => RequestSchema;
}) {
  const { control, setValue, getValues } = useFormContext();
  const [nextName, setNextName] = useState('');
  const [properties, setProperties] = useState<string[]>(() => {
    const value = getValues(fieldName);
    if (value) return Object.keys(value).filter(filterKey);

    return [];
  });

  const onAppend = () => {
    const name = nextName.trim();
    if (name.length === 0) return;

    setProperties((p) => {
      if (p.includes(name) || !filterKey(name)) return p;
      const type = getType(name);

      setValue(`${fieldName}.${name}`, getDefaultValue(type));
      setNextName('');
      return [...p, name];
    });
  };

  return (
    <>
      {properties.map((item) => {
        const type = getType(item);

        return (
          <FieldSet
            key={item}
            name={item}
            field={type}
            fieldName={`${fieldName}.${item}`}
            toolbar={
              <button
                type="button"
                aria-label="Remove Item"
                className={cn(
                  buttonVariants({
                    color: 'outline',
                    size: 'icon-xs',
                  }),
                )}
                onClick={() => {
                  setProperties((p) => p.filter((prop) => prop !== item));
                  control.unregister(`${fieldName}.${item}`);
                }}
              >
                <Trash2 />
              </button>
            }
          />
        );
      })}
      <div className="flex gap-2">
        <Input
          value={nextName}
          placeholder="Enter Property Name"
          onChange={(e) => setNextName(e.target.value)}
          onKeyDown={(e) => {
            if (e.key === 'Enter') {
              onAppend();
              e.preventDefault();
            }
          }}
        />
        <button
          type="button"
          className={cn(
            buttonVariants({ color: 'secondary', size: 'sm' }),
            'px-4',
          )}
          onClick={onAppend}
        >
          New
        </button>
      </div>
    </>
  );
}

export function FieldInput({
  field,
  fieldName,
  isRequired,
  ...props
}: HTMLAttributes<HTMLElement> & {
  field: Exclude<RequestSchema, boolean>;
  isRequired?: boolean;
  fieldName: string;
}) {
  const { control, register } = useFormContext();

  if (field.type === 'string' && field.format === 'binary') {
    return (
      <Controller
        control={control}
        name={fieldName}
        render={({ field: { value, onChange, ...restField } }) => (
          <div {...props}>
            <label
              htmlFor={fieldName}
              className={cn(
                buttonVariants({
                  color: 'secondary',
                  className: 'w-full h-9 gap-2 truncate',
                }),
              )}
            >
              {value instanceof File ? (
                <>
                  <span className="text-fd-muted-foreground text-xs">
                    Selected
                  </span>
                  <span className="truncate w-0 flex-1 text-end">
                    {value.name}
                  </span>
                </>
              ) : (
                <span className="text-fd-muted-foreground">Upload</span>
              )}
            </label>
            <input
              id={fieldName}
              type="file"
              multiple={false}
              onChange={(e) => {
                if (!e.target.files) return;
                onChange(e.target.files.item(0));
              }}
              hidden
              {...restField}
            />
          </div>
        )}
      />
    );
  }

  if (field.type === 'boolean') {
    return (
      <Controller
        control={control}
        name={fieldName}
        render={({ field: { value, onChange, ...restField } }) => (
          <Select
            value={String(value)}
            onValueChange={(value) =>
              onChange(value === 'null' ? null : value === 'true')
            }
            disabled={restField.disabled}
          >
            <SelectTrigger
              id={fieldName}
              className={props.className}
              {...restField}
            >
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="true">True</SelectItem>
              <SelectItem value="false">False</SelectItem>
              {!isRequired && <SelectItem value="null">Null</SelectItem>}
            </SelectContent>
          </Select>
        )}
      />
    );
  }

  if (field.type === 'null') return;

  return (
    <Input
      id={fieldName}
      placeholder="Enter value"
      type={field.type === 'string' ? 'text' : 'number'}
      {...register(fieldName, {
        valueAsNumber: field.type === 'number' || field.type === 'integer',
      })}
      {...props}
    />
  );
}

export function FieldSet({
  field: _field,
  fieldName,
  toolbar,
  name,
  isRequired,
  depth = 0,
  slotType,
  collapsible = true,
  ...props
}: HTMLAttributes<HTMLElement> & {
  isRequired?: boolean;
  name?: ReactNode;
  field: RequestSchema;
  fieldName: string;
  depth?: number;

  slotType?: ReactNode;
  toolbar?: ReactNode;
  collapsible?: boolean;
}) {
  const field = useResolvedSchema(_field);
  const [show, setShow] = useState(!collapsible);
  const { info, updateInfo } = useFieldInfo(fieldName, field, depth);

  if (_field === false) return null;

  if (info.unionField) {
    const union = field[info.unionField]!;
    const showSelect = union.length > 1;

    return (
      <FieldSet
        {...props}
        name={name}
        fieldName={fieldName}
        isRequired={isRequired}
        field={union[info.oneOf]}
        depth={depth + 1}
        slotType={showSelect ? false : slotType}
        toolbar={
          <>
            {showSelect && (
              <select
                className="text-xs font-mono"
                value={info.oneOf}
                onChange={(e) => {
                  updateInfo({
                    oneOf: Number(e.target.value),
                  });
                }}
              >
                {union.map((item, i) => (
                  <option key={i} value={i}>
                    {schemaToString(item)}
                  </option>
                ))}
              </select>
            )}
            {toolbar}
          </>
        }
      />
    );
  }

  if (Array.isArray(field.type)) {
    const showSelect = field.type.length > 1;

    return (
      <FieldSet
        {...props}
        name={name}
        fieldName={fieldName}
        isRequired={isRequired}
        field={{
          ...field,
          type: info.selectedType,
        }}
        depth={depth + 1}
        slotType={showSelect ? false : slotType}
        toolbar={
          <>
            {showSelect && (
              <select
                className="text-xs font-mono"
                value={info.selectedType}
                onChange={(e) => {
                  updateInfo({
                    selectedType: e.target.value,
                  });
                }}
              >
                {field.type.map((item) => (
                  <option key={item} value={item}>
                    {item}
                  </option>
                ))}
              </select>
            )}
            {toolbar}
          </>
        }
      />
    );
  }

  const showBn = collapsible && (
    <button
      type="button"
      onClick={() => setShow((prev) => !prev)}
      className={cn(
        buttonVariants({
          size: 'icon-xs',
          color: 'ghost',
          className: 'text-fd-muted-foreground -ms-1',
        }),
      )}
    >
      <ChevronDown className={cn(show && 'rotate-180')} />
    </button>
  );

  if (field.type === 'object' || field.anyOf || field.allOf) {
    return (
      <fieldset
        {...props}
        className={cn(
          'flex flex-col gap-1.5 col-span-full @container',
          props.className,
        )}
      >
        <FieldLabel htmlFor={fieldName}>
          {showBn}
          <FieldLabelName required={isRequired}>{name}</FieldLabelName>
          {slotType ?? <FieldLabelType>{schemaToString(field)}</FieldLabelType>}
          {toolbar}
        </FieldLabel>
        {show && (
          <ObjectInput
            field={field}
            fieldName={fieldName}
            {...props}
            className={cn(
              'rounded-lg border border-fd-primary/20 bg-fd-background/50 p-2 shadow-sm',
              props.className,
            )}
          />
        )}
      </fieldset>
    );
  }

  if (field.type === 'array') {
    return (
      <fieldset
        {...props}
        className={cn('flex flex-col gap-1.5 col-span-full', props.className)}
      >
        <FieldLabel htmlFor={fieldName}>
          {showBn}
          <FieldLabelName required={isRequired}>{name}</FieldLabelName>
          {slotType ?? <FieldLabelType>{schemaToString(field)}</FieldLabelType>}
          {toolbar}
        </FieldLabel>
        {show && (
          <ArrayInput
            fieldName={fieldName}
            items={field.items ?? anyFields}
            {...props}
            className={cn(
              'rounded-lg border border-fd-primary/20 bg-fd-background/50 p-2 shadow-sm',
              props.className,
            )}
          />
        )}
      </fieldset>
    );
  }
  return (
    <fieldset
      {...props}
      className={cn('flex flex-col gap-1.5', props.className)}
    >
      <FieldLabel htmlFor={fieldName}>
        <FieldLabelName required={isRequired}>{name}</FieldLabelName>
        {slotType ?? <FieldLabelType>{schemaToString(field)}</FieldLabelType>}
        {toolbar}
      </FieldLabel>
      <FieldInput field={field} fieldName={fieldName} isRequired={isRequired} />
    </fieldset>
  );
}

function ArrayInput({
  fieldName,
  items,
  ...props
}: {
  fieldName: string;
  items: RequestSchema;
} & HTMLAttributes<HTMLDivElement>) {
  const name = fieldName.split('.').at(-1) ?? '';
  const { fields, append, remove } = useFieldArray({
    name: fieldName,
  });

  return (
    <div {...props} className={cn('flex flex-col gap-2', props.className)}>
      {fields.map((item, index) => (
        <FieldSet
          key={item.id}
          name={
            <span className="text-fd-muted-foreground">
              {name}[{index}]
            </span>
          }
          field={items}
          fieldName={`${fieldName}.${index}`}
          toolbar={
            <button
              type="button"
              aria-label="Remove Item"
              className={cn(
                buttonVariants({
                  color: 'outline',
                  size: 'icon-xs',
                }),
              )}
              onClick={() => remove(index)}
            >
              <Trash2 />
            </button>
          }
        />
      ))}
      <button
        type="button"
        className={cn(
          buttonVariants({
            color: 'secondary',
            className: 'gap-1.5 py-2',
            size: 'sm',
          }),
        )}
        onClick={() => {
          append(getDefaultValue(items));
        }}
      >
        <Plus className="size-4" />
        New Item
      </button>
    </div>
  );
}



================================================
FILE: packages/openapi/src/playground/schema.tsx
================================================
import { Ajv2020 } from 'ajv/dist/2020';
import type { RequestSchema } from '@/playground/index';
import { createContext, ReactNode, useContext, useMemo, useState } from 'react';
import { useFormContext } from 'react-hook-form';
import { useEffectEvent } from 'fumadocs-core/utils/use-effect-event';
import { getDefaultValue } from '@/playground/get-default-values';
import type { ParsedSchema } from '@/utils/schema';

interface SchemaContextType {
  references: Record<string, RequestSchema>;
  fieldInfoMap: Map<string, FieldInfo>;
  ajv: Ajv2020;
}

type UnionField = 'anyOf' | 'allOf' | 'oneOf';

export interface FieldInfo {
  selectedType?: string;
  oneOf: number;

  /**
   * The actual field that represents union members.
   */
  unionField?: UnionField;
}

const SchemaContext = createContext<SchemaContextType | undefined>(undefined);
export const anyFields = {
  type: ['string', 'number', 'boolean', 'array', 'object'],
  items: true,
  additionalProperties: true,
} satisfies RequestSchema;

export function SchemaProvider({
  references,
  fieldInfoMap,
  children,
}: Omit<SchemaContextType, 'ajv'> & { children: ReactNode }) {
  const ajv = useMemo(
    () =>
      new Ajv2020({
        strict: false,
        validateSchema: false,
        validateFormats: false,
        schemas: references,
      }),
    [references],
  );

  return (
    <SchemaContext.Provider
      value={useMemo(
        () => ({ references, fieldInfoMap, ajv }),
        [fieldInfoMap, references, ajv],
      )}
    >
      {children}
    </SchemaContext.Provider>
  );
}

/**
 * A hook to store dynamic info of a field, such as selected schema of `oneOf`.
 *
 * @param fieldName - field name of form.
 * @param schema - The JSON Schema to generate initial values.
 * @param depth - The depth to avoid duplicated field name with same schema (e.g. nested `oneOf`).
 */
export function useFieldInfo(
  fieldName: string,
  schema: Exclude<RequestSchema, boolean>,
  depth: number,
): {
  info: FieldInfo;
  updateInfo: (value: Partial<FieldInfo>) => void;
} {
  const { fieldInfoMap, ajv } = useContext(SchemaContext)!;
  const form = useFormContext();
  const keyName = `${fieldName}:${depth}`;
  const value = form.getValues(fieldName as 'body');
  const [info, setInfo] = useState<FieldInfo>(() => {
    return fieldInfoMap.get(keyName) ?? init();
  });

  fieldInfoMap.set(keyName, info);

  /**
   * We automatically merge `allOf` | `anyOf` if all members are objects, but it's also possible for them to behave same as a union (`oneOf`).
   */
  function isUnion(anyOrAllOf: readonly ParsedSchema[]): boolean {
    return anyOrAllOf.every((item) => {
      if (typeof item === 'boolean') return true;

      const u = item.anyOf || item.allOf;
      return item.type !== 'object' && (!u || isUnion(u));
    });
  }

  function getUnion(): [readonly ParsedSchema[], UnionField] | undefined {
    if (schema.anyOf && isUnion(schema.anyOf)) {
      return [schema.anyOf, 'anyOf'];
    }

    if (schema.allOf && isUnion(schema.allOf)) {
      return [schema.allOf, 'allOf'];
    }

    if (schema.oneOf) return [schema.oneOf, 'oneOf'];
  }

  function init(): FieldInfo {
    const union = getUnion();
    if (union) {
      const [members, field] = union;

      let oneOf = members.findIndex((item) => ajv.validate(item, value));
      if (oneOf === -1) oneOf = 0;

      return {
        oneOf,
        unionField: field,
      };
    }

    if (Array.isArray(schema.type)) {
      const types = schema.type;

      return {
        selectedType:
          types.find((type) => {
            schema.type = type;
            const match = ajv.validate(schema, value);
            schema.type = types;

            return match;
          }) ?? types[0],
        oneOf: -1,
      };
    }

    return { oneOf: -1 };
  }

  return {
    info,
    updateInfo: useEffectEvent((value) => {
      const updated = {
        ...info,
        ...value,
      };

      if (
        updated.oneOf === info.oneOf &&
        updated.selectedType === info.selectedType
      )
        return;

      setInfo(updated);

      let valueSchema: ParsedSchema = schema;
      if (updated.unionField) {
        valueSchema = schema[updated.unionField]![updated.oneOf];
      } else if (updated.selectedType) {
        valueSchema = { ...schema, type: updated.selectedType };
      }

      form.setValue(fieldName, getDefaultValue(valueSchema));
    }),
  };
}

/**
 * Resolve `$ref` in the schema, **not recursive**.
 */
export function useResolvedSchema(
  schema: RequestSchema,
): Exclude<RequestSchema, boolean> {
  const { references } = useContext(SchemaContext)!;

  return useMemo(() => {
    if (typeof schema === 'boolean') return anyFields;
    if (schema.$ref) return fallbackAny(references[schema.$ref]);
    return schema;
  }, [references, schema]);
}

export function fallbackAny(
  schema: RequestSchema,
): Exclude<RequestSchema, boolean> {
  return typeof schema === 'boolean' ? anyFields : schema;
}



================================================
FILE: packages/openapi/src/playground/status-info.tsx
================================================
import { CircleCheck, CircleX } from 'lucide-react';

interface StatusInfo {
  description: string;
  color: string;
  icon: React.ElementType;
}

const statusMap: Record<number, StatusInfo> = {
  400: { description: 'Bad Request', color: 'text-red-500', icon: CircleX },
  401: {
    description: 'Unauthorized',
    color: 'text-red-500',
    icon: CircleX,
  },
  403: { description: 'Forbidden', color: 'text-red-500', icon: CircleX },
  404: {
    description: 'Not Found',
    color: 'text-fd-muted-foreground',
    icon: CircleX,
  },
  500: {
    description: 'Internal Server Error',
    color: 'text-red-500',
    icon: CircleX,
  },
};

export function getStatusInfo(status: number): StatusInfo {
  if (status in statusMap) {
    return statusMap[status];
  }

  if (status >= 200 && status < 300) {
    return {
      description: 'Successful',
      color: 'text-green-500',
      icon: CircleCheck,
    };
  }

  if (status >= 400) {
    return { description: 'Error', color: 'text-red-500', icon: CircleX };
  }

  return {
    description: 'No Description',
    color: 'text-fd-muted-foreground',
    icon: CircleX,
  };
}



================================================
FILE: packages/openapi/src/playground/auth/oauth-dialog.tsx
================================================
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/ui/components/dialog';
import type { OpenAPIV3_1 } from 'openapi-types';
import { useForm } from 'react-hook-form';
import { Input, labelVariants } from '@/ui/components/input';
import { useQuery } from '@/utils/use-query';
import { type ReactNode, useEffect, useState } from 'react';
import { cn } from 'fumadocs-ui/utils/cn';
import { buttonVariants } from 'fumadocs-ui/components/ui/button';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/ui/components/select';

type FlowType = keyof OpenAPIV3_1.OAuth2SecurityScheme['flows'];

export interface AuthDialogProps {
  scheme: OpenAPIV3_1.OAuth2SecurityScheme;
  scopes: string[];

  open: boolean;
  setOpen: (v: boolean) => void;
  setToken: (token: string) => void;
  children: ReactNode;
}

interface FormValues {
  clientId: string;
  clientSecret: string;
  username: string;
  password: string;
}

interface AuthCodeState {
  redirect_uri: string;
  client_id: string;
  client_secret: string;
}

interface ImplicitState {
  redirect_uri: string;
  client_id: string;
}

const FlowTypes = {
  password: {
    name: 'Resource Owner Password Flow',
    description: 'Authenticate using username and password.',
  },
  clientCredentials: {
    name: 'Client Credentials',
    description: 'Intended for the server-to-server authentication.',
  },
  authorizationCode: {
    name: 'Authorization code',
    description: 'Authenticate with 3rd party services',
  },
  implicit: {
    name: 'Implicit',
    description: 'Retrieve the access token directly.',
  },
} as const;

export function OauthDialog({
  scheme,
  scopes,
  setToken,
  children,
  open,
  setOpen,
}: AuthDialogProps) {
  const [type, setType] = useState(() => {
    return Object.keys(scheme.flows)[0] as FlowType;
  });

  const form = useForm<FormValues>({
    defaultValues: {
      clientId: '',
      clientSecret: '',
      username: '',
      password: '',
    },
  });

  const authCodeCallback = useQuery(
    async (code: string, state: AuthCodeState) => {
      const value = scheme.flows.authorizationCode!;

      const res = await fetch(value.tokenUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({
          grant_type: 'authorization_code',
          code,
          // note: `state` could be invalid, but server will check it
          redirect_uri: state.redirect_uri,
          client_id: state.client_id,
          client_secret: state.client_secret,
        }),
      });

      if (!res.ok) throw new Error(await res.text());
      const { access_token, token_type = 'Bearer' } = (await res.json()) as {
        access_token: string;
        token_type?: string;
      };

      setToken(`${token_type} ${access_token}`);
      setOpen(false);
    },
  );

  useEffect(() => {
    if (scheme.flows.authorizationCode) {
      const params = new URLSearchParams(window.location.search);
      const state = params.get('state');
      const code = params.get('code');

      if (state && code) {
        const parsedState = JSON.parse(state) as AuthCodeState;
        setOpen(true);

        form.setValue('clientId', parsedState.client_id);
        form.setValue('clientSecret', parsedState.client_secret);
        authCodeCallback.start(code, parsedState);
        window.history.replaceState(null, '', window.location.pathname);
        return;
      }
    }

    if (scheme.flows.implicit && window.location.hash.length > 1) {
      const params = new URLSearchParams(window.location.hash.slice(1));
      const state = params.get('state');
      const token = params.get('access_token');
      const type = params.get('token_type') ?? 'Bearer';

      if (state && token) {
        const parsedState = JSON.parse(state) as ImplicitState;

        form.setValue('clientId', parsedState.client_id);
        setToken(`${type} ${token}`);
        window.history.replaceState(null, '', window.location.pathname);
      }
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps -- first page load only
  }, []);

  const authorize = useQuery(async (values: FormValues) => {
    if (type === 'implicit') {
      const value = scheme.flows[type]!;

      const params = new URLSearchParams();
      params.set('response_type', 'token');
      params.set('client_id', values.clientId);
      params.set('redirect_uri', window.location.href);
      params.set('scope', scopes.join('+'));
      params.set(
        'state',
        JSON.stringify({
          client_id: values.clientId,
          redirect_uri: window.location.href,
        } satisfies ImplicitState),
      );

      window.location.replace(`${value.authorizationUrl}?${params.toString()}`);
      return;
    }
    if (type === 'authorizationCode') {
      const value = scheme.flows[type]!;

      const params = new URLSearchParams();
      params.set('response_type', 'code');
      params.set('client_id', values.clientId);
      params.set('redirect_uri', window.location.href);
      params.set('scope', scopes.join('+'));
      params.set(
        'state',
        JSON.stringify({
          client_id: values.clientId,
          client_secret: values.clientSecret,
          redirect_uri: window.location.href,
        } satisfies AuthCodeState),
      );

      window.location.replace(`${value.authorizationUrl}?${params.toString()}`);
      return;
    }

    let res;
    if (type === 'password') {
      const value = scheme.flows[type]!;

      res = await fetch(value.tokenUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({
          grant_type: 'password',
          username: values.username,
          password: values.password,
          scope: scopes.join('+'),
        }),
      });
    }

    if (type === 'clientCredentials') {
      const value = scheme.flows[type]!;

      res = await fetch(value.tokenUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({
          grant_type: 'client_credentials',
          client_id: values.clientId,
          client_secret: values.clientSecret,
          scope: scopes.join('+'),
        }),
      });
    }

    if (res) {
      if (!res.ok) throw new Error(await res.text());

      const { access_token, token_type = 'Bearer' } = (await res.json()) as {
        access_token: string;
        token_type?: string;
      };

      setToken(`${token_type} ${access_token}`);
      setOpen(false);
    }
  });

  const onSubmit = form.handleSubmit((values) => {
    return authorize.start(values);
  });

  const isLoading = authorize.isLoading || authCodeCallback.isLoading;
  const error = authCodeCallback.error ?? authorize.error;

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      {children}
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Authorization</DialogTitle>
          <DialogDescription>
            Obtain the access token for API.
          </DialogDescription>
        </DialogHeader>
        <form
          className="flex flex-col gap-6"
          onSubmit={(e) => {
            void onSubmit(e);
            e.stopPropagation();
          }}
        >
          <Select value={type} onValueChange={setType as (s: string) => void}>
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {Object.keys(scheme.flows).map((key) => {
                const { name, description } = FlowTypes[key as FlowType];

                return (
                  <SelectItem key={key} value={key}>
                    <p className="font-medium">{name}</p>
                    <p className="text-fd-muted-foreground">{description}</p>
                  </SelectItem>
                );
              })}
            </SelectContent>
          </Select>

          {(type === 'authorizationCode' ||
            type === 'clientCredentials' ||
            type === 'implicit') && (
            <fieldset className="flex flex-col gap-1.5">
              <label htmlFor="client_id" className={cn(labelVariants())}>
                Client ID
              </label>
              <p className="text-fd-muted-foreground text-sm">
                The client ID of your OAuth application.
              </p>
              <Input
                id="client_id"
                placeholder="Enter value"
                type="text"
                autoComplete="off"
                disabled={isLoading}
                {...form.register('clientId', { required: true })}
              />
            </fieldset>
          )}
          {(type === 'authorizationCode' || type === 'clientCredentials') && (
            <fieldset className="flex flex-col gap-1.5">
              <label htmlFor="client_secret" className={cn(labelVariants())}>
                Client Secret
              </label>
              <p className="text-fd-muted-foreground text-sm">
                The client secret of your OAuth application.
              </p>
              <Input
                id="client_secret"
                placeholder="Enter value"
                type="password"
                autoComplete="off"
                disabled={isLoading}
                {...form.register('clientSecret', { required: true })}
              />
            </fieldset>
          )}
          {type === 'password' && (
            <>
              <fieldset className="flex flex-col gap-1.5">
                <label htmlFor="username" className={cn(labelVariants())}>
                  Username
                </label>
                <Input
                  id="username"
                  placeholder="Enter value"
                  type="text"
                  disabled={isLoading}
                  autoComplete="off"
                  {...form.register('username', { required: true })}
                />
              </fieldset>
              <fieldset className="flex flex-col gap-1.5">
                <label htmlFor="password" className={cn(labelVariants())}>
                  Client Secret
                </label>
                <Input
                  id="password"
                  placeholder="Enter value"
                  type="password"
                  autoComplete="off"
                  disabled={isLoading}
                  {...form.register('password', { required: true })}
                />
              </fieldset>
            </>
          )}
          {error ? (
            <p className="text-red-400 font-medium text-sm">{String(error)}</p>
          ) : null}
          <button
            type="submit"
            disabled={isLoading}
            className={cn(
              buttonVariants({
                color: 'primary',
              }),
            )}
          >
            {authCodeCallback.isLoading ? 'Fetching token...' : 'Submit'}
          </button>
        </form>
      </DialogContent>
    </Dialog>
  );
}

export const OauthDialogTrigger = DialogTrigger;



================================================
FILE: packages/openapi/src/render/api-page.tsx
================================================
import Slugger from 'github-slugger';
import { Operation } from '@/render/operation';
import type { RenderContext } from '@/types';
import { createMethod } from '@/server/create-method';
import { createRenders, type Renderer } from '@/render/renderer';
import type { OpenAPIV3_1 } from 'openapi-types';
import {
  type DocumentInput,
  processDocument,
  type ProcessedDocument,
} from '@/utils/process-document';
import { defaultAdapters } from '@/media/adapter';

type ApiPageContextProps = Pick<
  Partial<RenderContext>,
  | 'shikiOptions'
  | 'generateTypeScriptSchema'
  | 'generateCodeSamples'
  | 'proxyUrl'
  | 'showResponseSchema'
  | 'disablePlayground'
  | 'mediaAdapters'
>;

export interface ApiPageProps extends ApiPageContextProps {
  document: DocumentInput;
  hasHead: boolean;

  renderer?: Partial<Renderer>;

  /**
   * An array of operations
   */
  operations?: OperationItem[];

  webhooks?: WebhookItem[];

  /**
   * By default, it is disabled on dev mode
   */
  disableCache?: boolean;
}

export interface WebhookItem {
  name: string;
  method: OpenAPIV3_1.HttpMethods;
}

export interface OperationItem {
  path: string;
  method: OpenAPIV3_1.HttpMethods;
}

export async function APIPage(props: ApiPageProps) {
  const {
    operations,
    hasHead = true,
    webhooks,
    disableCache = process.env.NODE_ENV === 'development',
  } = props;
  const processed = await processDocument(props.document, disableCache);
  const ctx = await getContext(processed, props);
  const { document } = processed;

  return (
    <ctx.renderer.Root ctx={ctx}>
      {operations?.map((item) => {
        const pathItem = document.paths?.[item.path];
        if (!pathItem)
          throw new Error(
            `[Fumadocs OpenAPI] Path not found in OpenAPI schema: ${item.path}`,
          );

        const operation = pathItem[item.method];
        if (!operation)
          throw new Error(
            `[Fumadocs OpenAPI] Method ${item.method} not found in operation: ${item.path}`,
          );

        const method = createMethod(item.method, pathItem, operation);

        return (
          <Operation
            key={`${item.path}:${item.method}`}
            method={method}
            path={item.path}
            ctx={ctx}
            hasHead={hasHead}
          />
        );
      })}
      {webhooks?.map((item) => {
        const webhook = document.webhooks?.[item.name];
        if (!webhook)
          throw new Error(
            `[Fumadocs OpenAPI] Webhook not found in OpenAPI schema: ${item.name}`,
          );

        const hook = webhook[item.method];
        if (!hook)
          throw new Error(
            `[Fumadocs OpenAPI] Method ${item.method} not found in webhook: ${item.name}`,
          );

        const method = createMethod(item.method, webhook, hook);

        return (
          <Operation
            type="webhook"
            key={`${item.name}:${item.method}`}
            method={method}
            ctx={ctx}
            path={`/${item.name}`}
            hasHead={hasHead}
          />
        );
      })}
    </ctx.renderer.Root>
  );
}

export async function getContext(
  schema: ProcessedDocument,
  options: ApiPageContextProps & {
    renderer?: Partial<Renderer>;
  } = {},
): Promise<RenderContext> {
  const document = schema.document;
  const servers =
    document.servers && document.servers.length > 0
      ? document.servers
      : [{ url: '/' }];

  return {
    schema,
    proxyUrl: options.proxyUrl,
    disablePlayground: options.disablePlayground,
    showResponseSchema: options.showResponseSchema,
    renderer: {
      ...createRenders(),
      ...options.renderer,
    },
    shikiOptions: options.shikiOptions,
    generateTypeScriptSchema: options.generateTypeScriptSchema,
    generateCodeSamples: options.generateCodeSamples,
    servers,
    mediaAdapters: {
      ...defaultAdapters,
      ...options.mediaAdapters,
    },
    slugger: new Slugger(),
  };
}



================================================
FILE: packages/openapi/src/render/codeblock.tsx
================================================
import { type HTMLAttributes } from 'react';
import * as Base from 'fumadocs-ui/components/codeblock';
import type { RenderContext } from '@/types';
import { highlight } from 'fumadocs-core/highlight';
import { cn } from 'fumadocs-ui/utils/cn';

export interface CodeBlockProps extends HTMLAttributes<HTMLElement> {
  code: string;
  lang: string;
  ctx: RenderContext;
}

export async function CodeBlock({ code, lang, ctx, ...rest }: CodeBlockProps) {
  const rendered = await highlight(code, {
    lang,
    ...ctx.shikiOptions,
    components: {
      pre: (props) => <Base.Pre {...props} />,
    },
  });

  return (
    <Base.CodeBlock className={cn('my-0', rest.className)}>
      {rendered}
    </Base.CodeBlock>
  );
}



================================================
FILE: packages/openapi/src/render/heading.tsx
================================================
import type { ReactNode } from 'react';
import { Heading } from 'fumadocs-ui/components/heading';
import type { RenderContext } from '@/types';

export function heading(
  depth: number,
  text: string,
  ctx: RenderContext,
  children: ReactNode = text,
): ReactNode {
  const id = ctx.slugger.slug(text);

  return (
    <Heading id={id} key={id} as={`h${depth.toString()}` as `h1`}>
      {children}
    </Heading>
  );
}



================================================
FILE: packages/openapi/src/render/markdown.tsx
================================================
/* eslint-disable @typescript-eslint/no-explicit-any -- rehype plugins */
import { type ReactElement } from 'react';
import {
  rehypeCode,
  type RehypeCodeOptions,
  remarkGfm,
  remarkImage,
} from 'fumadocs-core/mdx-plugins';
import defaultMdxComponents from 'fumadocs-ui/mdx';
import { remark } from 'remark';
import remarkRehype from 'remark-rehype';
import { toJsxRuntime } from 'hast-util-to-jsx-runtime';
import * as JsxRuntime from 'react/jsx-runtime';

const processor = remark()
  .use(remarkGfm)
  .use(remarkImage, { useImport: false })
  .use(remarkRehype)
  .use(rehypeCode, {
    langs: [],
    lazy: true,
  } satisfies Partial<RehypeCodeOptions>)
  .use(rehypeReact);

function rehypeReact(this: any) {
  this.compiler = (tree: any, file: any) => {
    return toJsxRuntime(tree, {
      development: false,
      filePath: file.path,
      ...JsxRuntime,
      components: defaultMdxComponents,
    });
  };
}

export async function Markdown({ text }: { text: string }) {
  const out = await processor.process({
    value: text,
  });

  return out.result as ReactElement;
}



================================================
FILE: packages/openapi/src/render/renderer.tsx
================================================
import type { ComponentType, ReactNode } from 'react';
import { Tab, Tabs } from 'fumadocs-ui/components/tabs';
import {
  AccordionContent,
  AccordionHeader,
  AccordionItem,
  Accordions,
  AccordionTrigger,
} from '@/ui/components/accordion';
import {
  API,
  APIExample,
  APIInfo,
  ObjectCollapsible,
  Property,
  Root,
} from '@/ui';
import type { RenderContext } from '@/types';
import { APIPlayground, type APIPlaygroundProps } from '@/playground';
import { CodeExampleSelector } from '@/ui/lazy';
import {
  CodeBlockTab,
  CodeBlockTabs,
  CodeBlockTabsList,
  CodeBlockTabsTrigger,
} from 'fumadocs-ui/components/codeblock';

export interface ResponsesProps {
  items: string[];
  children: ReactNode;
}

export interface ResponseProps {
  value: string;
  children: ReactNode;
}

export interface APIInfoProps {
  method: string;
  route: string;

  head: ReactNode;
  children: ReactNode;
}

export interface PropertyProps {
  name: string;
  type: string;
  required?: boolean;
  deprecated?: boolean;
  children?: ReactNode;
  nested?: boolean;
}

export interface ObjectCollapsibleProps {
  name: string;
  children: ReactNode;
}

export interface RequestProps {
  name: string;

  children: ReactNode;
}

export interface SamplesProps {
  items: {
    title: string;
    description?: ReactNode;
    value: string;
  }[];
}

export interface ResponseTypeProps {
  label: string;
  children: ReactNode;
}

export interface RootProps {
  ctx: RenderContext;
  children: ReactNode;
}

export interface Renderer {
  Root: ComponentType<RootProps>;
  API: ComponentType<{ children: ReactNode }>;
  APIInfo: ComponentType<APIInfoProps>;
  APIExample: ComponentType<{ children: ReactNode }>;

  Responses: ComponentType<ResponsesProps>;
  Response: ComponentType<ResponseProps>;
  CodeExampleSelector: ComponentType<SamplesProps>;
  Requests: ComponentType<{ items: string[]; children: ReactNode }>;
  Request: ComponentType<RequestProps>;
  ResponseTypes: ComponentType<{ defaultValue?: string; children: ReactNode }>;
  ResponseType: ComponentType<ResponseTypeProps>;

  /**
   * Collapsible to show object schemas
   */
  ObjectCollapsible: ComponentType<ObjectCollapsibleProps>;
  Property: ComponentType<PropertyProps>;
  APIPlayground: ComponentType<APIPlaygroundProps>;
}

export function createRenders(): Renderer {
  return {
    Root,
    API,
    APIInfo: ({ children, head }) => (
      <APIInfo>
        {head}
        {children}
      </APIInfo>
    ),
    APIExample,
    Responses: (props) => (
      <Tabs {...props} groupId="fumadocs_openapi_responses" />
    ),
    Response: Tab,
    ResponseTypes: (props) => (
      <Accordions
        type="single"
        className="pt-2"
        defaultValue={props.defaultValue}
      >
        {props.children}
      </Accordions>
    ),
    ResponseType: (props) => (
      <AccordionItem value={props.label}>
        <AccordionHeader>
          <AccordionTrigger>{props.label}</AccordionTrigger>
        </AccordionHeader>
        <AccordionContent className="prose-no-margin">
          {props.children}
        </AccordionContent>
      </AccordionItem>
    ),
    Property,
    ObjectCollapsible,
    Requests: ({ items, children }) => (
      <CodeBlockTabs
        groupId="fumadocs_openapi_requests"
        defaultValue={items[0]}
      >
        <CodeBlockTabsList>
          {items.map((item) => (
            <CodeBlockTabsTrigger key={item} value={item}>
              {item}
            </CodeBlockTabsTrigger>
          ))}
        </CodeBlockTabsList>
        {children}
      </CodeBlockTabs>
    ),

    CodeExampleSelector,
    Request: (props) => (
      <CodeBlockTab value={props.name}>{props.children}</CodeBlockTab>
    ),
    APIPlayground,
  };
}



================================================
FILE: packages/openapi/src/render/schema.tsx
================================================
import { Fragment, type ReactNode } from 'react';
import type { ResolvedSchema } from '@/utils/schema';
import type { RenderContext } from '@/types';
import { combineSchema } from '@/utils/combine-schema';
import { Markdown } from './markdown';
import { schemaToString } from '@/utils/schema-to-string';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from 'fumadocs-ui/components/tabs';

interface Context {
  stack: SchemaStack;
}

export function Schema({
  name,
  schema,
  required = false,
  readOnly = false,
  writeOnly = false,
  as = 'property',
  ctx: renderContext,
}: {
  name: string;
  required?: boolean;
  schema: ResolvedSchema;
  as?: 'property' | 'body';

  readOnly?: boolean;
  writeOnly?: boolean;
  ctx: RenderContext;
}): ReactNode {
  const { renderer } = renderContext;

  function propertyBody(
    schema: Exclude<ResolvedSchema, boolean>,
    renderPrimitive: (
      child: Exclude<ResolvedSchema, boolean>,
      ctx: Context,
    ) => ReactNode,
    ctx: Context,
  ) {
    if (Array.isArray(schema.type)) {
      const items = schema.type.flatMap((type) => {
        const composed = {
          ...schema,
          type,
        };
        if (!isComplexType(composed)) return [];
        return composed;
      });
      if (items.length === 0) return;
      if (items.length === 1)
        return propertyBody(items[0], renderPrimitive, ctx);

      return (
        <Tabs defaultValue={items[0].type}>
          <TabsList>
            {items.map((item) => (
              <TabsTrigger key={item.type} value={item.type}>
                {schemaToString(item, renderContext.schema)}
              </TabsTrigger>
            ))}
          </TabsList>
          {items.map((item) => (
            <TabsContent key={item.type} value={item.type}>
              {item.description && <Markdown text={item.description} />}
              {propertyInfo(item)}
              {renderPrimitive(item, ctx)}
            </TabsContent>
          ))}
        </Tabs>
      );
    }

    if (schema.oneOf) {
      const oneOf = schema.oneOf.filter((item) =>
        isComplexType(item),
      ) as Exclude<ResolvedSchema, boolean>[];
      if (oneOf.length === 0) return;
      if (oneOf.length === 1) {
        return propertyBody(oneOf[0], renderPrimitive, ctx);
      }

      return (
        <Tabs defaultValue="0">
          <TabsList>
            {oneOf.map((item, i) => (
              <TabsTrigger key={i} value={i.toString()}>
                {schemaToString(item, renderContext.schema)}
              </TabsTrigger>
            ))}
          </TabsList>
          {oneOf.map((item, i) => (
            <TabsContent key={i} value={i.toString()}>
              {item.description && <Markdown text={item.description} />}
              {propertyInfo(item)}
              {propertyBody(
                item,
                (child, ctx) => primitiveBody(child, ctx, false, true),
                ctx,
              )}
            </TabsContent>
          ))}
        </Tabs>
      );
    }

    const of = schema.allOf ?? schema.anyOf;
    if (of) {
      const arr = of.filter((item) => !ctx.stack.has(item));
      if (arr.length === 0) return;
      const combined = combineSchema(arr);
      if (typeof combined === 'boolean') return;

      return renderPrimitive(combined, ctx);
    }

    return renderPrimitive(schema, ctx);
  }

  function propertyInfo(schema: Exclude<ResolvedSchema, boolean>) {
    const fields: {
      key: string;
      value: string;
    }[] = [];

    if (schema.default !== undefined) {
      fields.push({
        key: 'Default',
        value: JSON.stringify(schema.default),
      });
    }

    if (schema.pattern) {
      fields.push({
        key: 'Match',
        value: schema.pattern,
      });
    }

    if (schema.format) {
      fields.push({
        key: 'Format',
        value: schema.format,
      });
    }

    if (schema.multipleOf) {
      fields.push({
        key: 'Multiple Of',
        value: String(schema.multipleOf),
      });
    }

    let range = getRange(
      'value',
      schema.minimum,
      schema.exclusiveMinimum,
      schema.maximum,
      schema.exclusiveMaximum,
    );
    if (range)
      fields.push({
        key: 'Range',
        value: range,
      });

    range = getRange(
      'length',
      schema.minLength,
      undefined,
      schema.maxLength,
      undefined,
    );
    if (range)
      fields.push({
        key: 'Length',
        value: range,
      });

    range = getRange(
      'properties',
      schema.minProperties,
      undefined,
      schema.maxProperties,
      undefined,
    );
    if (range)
      fields.push({
        key: 'Properties',
        value: range,
      });

    if (schema.enum) {
      fields.push({
        key: 'Value in',
        value: schema.enum.map((value) => JSON.stringify(value)).join(' | '),
      });
    }

    if (fields.length === 0) return;
    return (
      <div className="flex flex-wrap gap-2 not-prose">
        {fields.map((field) => (
          <div
            key={field.key}
            className="bg-fd-secondary border rounded-lg text-xs p-1.5 shadow-md"
          >
            <span className="font-medium me-2">{field.key}</span>
            <code className="text-fd-muted-foreground">{field.value}</code>
          </div>
        ))}
      </div>
    );
  }

  function primitiveBody(
    schema: Exclude<ResolvedSchema, boolean>,
    ctx: Context,
    collapsible: boolean,
    nested: boolean,
  ) {
    if (schema.type === 'object') {
      if (ctx.stack.has(schema)) return <p>Recursive</p>;
      const props = Object.entries(schema.properties ?? {});
      const patternProps = Object.entries(schema.patternProperties ?? {});
      const next = {
        ...ctx,
        stack: ctx.stack.next(schema),
      };

      if (props.length === 0 && patternProps.length === 0)
        return <p>Empty Object</p>;

      const children = (
        <>
          {props.map(([key, value]) => (
            <Fragment key={key}>
              {property(key, value, next, {
                required: schema.required?.includes(key) ?? false,
                nested,
              })}
            </Fragment>
          ))}
          {patternProps.map(([key, value]) => (
            <Fragment key={key}>
              {property(key, value, next, { nested })}
            </Fragment>
          ))}
          {schema.additionalProperties &&
            property('[key: string]', schema.additionalProperties, next, {
              nested,
            })}
        </>
      );

      if (!collapsible) return children;

      return (
        <renderer.ObjectCollapsible name="Show Attributes">
          {children}
        </renderer.ObjectCollapsible>
      );
    }

    if (schema.type === 'array') {
      const items = schema.items;
      if (!items || typeof items === 'boolean' || ctx.stack.has(items)) return;

      return (
        <renderer.ObjectCollapsible name="Array Item">
          <div className="text-sm border-t p-3 border-x prose-no-margin bg-fd-card last:rounded-b-xl first:rounded-tr-xl last:border-b empty:hidden">
            <Markdown text={items.description ?? 'No Description'} />
            {propertyInfo(items)}
          </div>
          {propertyBody(
            items,
            (child, ctx) => primitiveBody(child, ctx, false, true),
            {
              ...ctx,
              stack: ctx.stack.next(schema),
            },
          )}
        </renderer.ObjectCollapsible>
      );
    }
  }

  function property(
    key: string,
    schema: ResolvedSchema,
    ctx: Context,
    props?: {
      required?: boolean;
      nested?: boolean;
    },
  ) {
    if (schema === true) {
      return <renderer.Property name={key} type="any" {...props} />;
    } else if (schema === false) {
      return <renderer.Property name={key} type="never" {...props} />;
    }

    if ((schema.readOnly && !readOnly) || (schema.writeOnly && !writeOnly))
      return;

    return (
      <renderer.Property
        name={key}
        type={schemaToString(schema, renderContext.schema)}
        deprecated={schema.deprecated}
        {...props}
      >
        {schema.description && <Markdown text={schema.description} />}
        {propertyInfo(schema)}
        {propertyBody(
          schema,
          (child, ctx) => primitiveBody(child, ctx, true, true),
          ctx,
        )}
      </renderer.Property>
    );
  }

  const context: Context = {
    stack: schemaStack(),
  };
  if (
    typeof schema === 'boolean' ||
    as === 'property' ||
    !isComplexType(schema)
  )
    return property(name, schema, context, { required });
  return propertyBody(
    schema,
    (child, ctx) => primitiveBody(child, ctx, false, false),
    context,
  );
}

interface SchemaStack {
  next(...schema: ResolvedSchema[]): SchemaStack;
  add(schema: ResolvedSchema): void;
  has(schema: ResolvedSchema): boolean;
}

function schemaStack(parent?: SchemaStack): SchemaStack {
  const titles = new Set<string>();
  const history = new WeakSet();

  return {
    next(...schemas) {
      const child = schemaStack(this);
      for (const item of schemas) {
        child.add(item);
      }
      return child;
    },
    add(schema) {
      if (typeof schema !== 'object') return;

      if (schema.title) titles.add(schema.title);
      history.add(schema);
    },
    has(schema) {
      if (typeof schema !== 'object') return false;
      if (parent && parent.has(schema)) return true;
      if (schema.title && titles.has(schema.title)) return true;

      return history.has(schema);
    },
  };
}

/**
 * Check if the schema needs another collapsible to explain
 */
function isComplexType(
  schema: ResolvedSchema,
): schema is Exclude<ResolvedSchema, boolean> {
  if (typeof schema === 'boolean') return false;
  const arr = schema.anyOf ?? schema.oneOf ?? schema.allOf;
  if (arr && arr.some(isComplexType)) return true;

  return (
    schema.type === 'object' ||
    (schema.type === 'array' && schema.items != null)
  );
}

function getRange(
  value: string,
  min: number | undefined,
  exclusiveMin: number | undefined,
  max: number | undefined,
  exclusiveMax: number | undefined,
) {
  const out = [];
  if (min !== undefined) {
    out.push(`${min} <=`);
  } else if (exclusiveMin !== undefined) {
    out.push(`${exclusiveMin} <`);
  }

  out.push(value);
  if (max !== undefined) {
    out.push(`<= ${max}`);
  } else if (exclusiveMax !== undefined) {
    out.push(`< ${exclusiveMax}`);
  }
  if (out.length > 1) return out.join(' ');
}



================================================
FILE: packages/openapi/src/render/operation/api-example.tsx
================================================
import type { MethodInformation, RenderContext } from '@/types';
import { type ReactNode } from 'react';
import { Markdown } from '@/render/markdown';
import { type CodeSample } from '@/render/operation/index';
import { CodeBlock } from '@/render/codeblock';
import { CodeExample, CodeExampleProvider } from '@/ui/lazy';
import { getPreferredType, type NoReference } from '@/utils/schema';
import { getRequestData } from '@/render/operation/get-request-data';
import { sample } from 'openapi-sampler';
import {
  encodeRequestData,
  type RawRequestData,
  type RequestData,
} from '@/requests/_shared';

const defaultSamples: CodeSample[] = [
  {
    label: 'cURL',
    lang: 'bash',
  },
  {
    label: 'JavaScript',
    lang: 'js',
  },
  {
    label: 'Go',
    lang: 'go',
  },
  {
    label: 'Python',
    lang: 'python',
  },
  {
    label: 'Java',
    lang: 'java',
  },
  {
    label: 'C#',
    lang: 'csharp',
  },
];

interface CustomProperty {
  'x-codeSamples'?: CodeSample[];
  'x-selectedCodeSample'?: string;
  'x-exclusiveCodeSample'?: string;
}

interface CodeExampleItem {
  key: string;

  name: string;
  description?: string;
  data: RawRequestData;
  encoded: RequestData;
}

export function APIExampleProvider({
  examples,
  method,
  children,
  route,
}: {
  examples: CodeExampleItem[];
  method: MethodInformation & CustomProperty;
  route: string;
  children: ReactNode;
}) {
  const exclusiveSampleKey = method['x-exclusiveCodeSample'];

  return (
    <CodeExampleProvider
      initialKey={exclusiveSampleKey}
      route={route}
      examples={examples}
    >
      {children}
    </CodeExampleProvider>
  );
}

export function getAPIExamples(
  path: string,
  method: MethodInformation,
  ctx: RenderContext,
): CodeExampleItem[] {
  const media = method.requestBody
    ? getPreferredType(method.requestBody.content)
    : null;
  const bodyOfType = media ? method.requestBody?.content[media] : null;

  if (bodyOfType?.examples) {
    const result: CodeExampleItem[] = [];

    for (const [key, value] of Object.entries(bodyOfType.examples)) {
      const data = getRequestData(path, method, key, ctx);

      result.push({
        key,
        name: value.summary ?? key,
        description: value.description,
        data,
        encoded: encodeRequestData(
          data,
          ctx.mediaAdapters,
          method.parameters ?? [],
        ),
      });
    }

    if (result.length > 0) return result;
  }

  const data = getRequestData(path, method, null, ctx);
  return [
    {
      key: '_default',
      name: 'Default',
      description: bodyOfType?.schema?.description,
      data,
      encoded: encodeRequestData(
        data,
        ctx.mediaAdapters,
        method.parameters ?? [],
      ),
    },
  ];
}

export async function APIExample({
  method,
  examples,
  ctx,
}: {
  examples: CodeExampleItem[];
  method: MethodInformation & CustomProperty;
  ctx: RenderContext;
}) {
  const renderer = ctx.renderer;
  const generators = dedupe([
    ...defaultSamples,
    ...(ctx.generateCodeSamples ? await ctx.generateCodeSamples(method) : []),
    ...(method['x-codeSamples'] ?? []),
  ]).filter((generator) => generator.source !== false);

  const exclusiveSampleKey = method['x-exclusiveCodeSample'];

  return (
    <renderer.APIExample>
      {examples.length > 1 && !exclusiveSampleKey && (
        <renderer.CodeExampleSelector
          items={examples.map((sample) => ({
            title: sample.name,
            description: sample.description ? (
              <Markdown text={sample.description} />
            ) : null,
            value: sample.key,
          }))}
        />
      )}
      {generators.length > 0 && (
        <renderer.Requests items={generators.map((s) => s.label ?? s.lang)}>
          {generators.map((generator, i) => (
            <renderer.Request key={i} name={generator.label ?? generator.lang}>
              <CodeExample {...generator} />
            </renderer.Request>
          ))}
        </renderer.Requests>
      )}
      <ResponseTabs operation={method} ctx={ctx} />
    </renderer.APIExample>
  );
}

/**
 * Remove duplicated labels
 */
function dedupe(samples: CodeSample[]): CodeSample[] {
  const set = new Set<string>();
  const out: CodeSample[] = [];

  for (let i = samples.length - 1; i >= 0; i--) {
    const item = samples[i];
    if (item.label) {
      if (set.has(item.label)) continue;
      set.add(item.label);
    }

    out.unshift(item);
  }

  return out;
}

function ResponseTabs({
  operation,
  ctx,
}: {
  operation: NoReference<MethodInformation>;
  ctx: RenderContext;
}) {
  const { renderer } = ctx;
  if (!operation.responses) return null;

  async function renderResponse(code: string) {
    const response = operation.responses?.[code];
    const media = response?.content ? getPreferredType(response.content) : null;
    const responseOfType = media ? response?.content?.[media] : null;

    let slot: ReactNode = 'Empty';
    if (responseOfType?.examples) {
      const values: string[] = [];

      const children = Object.entries(responseOfType.examples).map(
        ([key, sample]) => {
          const title = sample?.summary ?? `Example ${key}`;

          values.push(title);
          return (
            <renderer.ResponseType key={key} label={title}>
              {sample?.description && <Markdown text={sample.description} />}
              <CodeBlock
                lang="json"
                code={JSON.stringify(sample.value, null, 2)}
                ctx={ctx}
              />
            </renderer.ResponseType>
          );
        },
      );

      slot = (
        <renderer.ResponseTypes defaultValue={values[0]}>
          {children}
        </renderer.ResponseTypes>
      );
    } else if (responseOfType?.example || responseOfType?.schema) {
      slot = (
        <CodeBlock
          lang="json"
          code={JSON.stringify(
            responseOfType.example ?? sample(responseOfType.schema as object),
            null,
            2,
          )}
          ctx={ctx}
        />
      );
    }

    return <renderer.Response value={code}>{slot}</renderer.Response>;
  }

  const codes = Object.keys(operation.responses);
  if (codes.length === 0) return null;

  return (
    <renderer.Responses items={codes}>
      {codes.map((code) => renderResponse(code))}
    </renderer.Responses>
  );
}



================================================
FILE: packages/openapi/src/render/operation/get-request-data.ts
================================================
import type { MethodInformation, RenderContext } from '@/types';
import type { ResolvedSchema } from '@/utils/schema';
import { getPreferredType } from '@/utils/schema';
import { sample } from 'openapi-sampler';
import { type RawRequestData } from '@/requests/_shared';

export function getRequestData(
  path: string,
  method: MethodInformation,
  sampleKey: string | null,
  _ctx: RenderContext,
): RawRequestData {
  const result: RawRequestData = {
    path: {},
    cookie: {},
    header: {},
    query: {},
    method: method.method,
  };

  for (const param of method.parameters ?? []) {
    let schema = param.schema;
    let value;

    if (!schema && param.content) {
      const type = getPreferredType(param.content);

      const content = type ? param.content[type] : undefined;
      if (!content)
        throw new Error(
          `Cannot find parameter schema for ${param.name} in ${path} ${method.method}`,
        );

      schema = content.schema;
      value = content.example ?? param.example ?? sample(schema as object);
    } else {
      value = param.example ?? sample(schema as object);
    }

    if (param.in === 'cookie') {
      result.cookie[param.name] = value;
    } else if (param.in === 'header') {
      result.header[param.name] = value;
    } else if (param.in === 'query') {
      result.query[param.name] = value;
    } else if (param.in === 'path') {
      result.path[param.name] = value;
    }
  }

  if (method.requestBody) {
    const body = method.requestBody.content;
    const type = getPreferredType(body);
    if (!type)
      throw new Error(
        `Cannot find body schema for ${path} ${method.method}: missing media type`,
      );
    result.bodyMediaType = type as RawRequestData['bodyMediaType'];
    const bodyOfType = body[type];

    if (bodyOfType.examples && sampleKey) {
      result.body = bodyOfType.examples[sampleKey].value;
    } else if (bodyOfType.example) {
      result.body = bodyOfType.example;
    } else {
      result.body = generateBody(
        method.method,
        (bodyOfType?.schema ?? {}) as ResolvedSchema,
      );
    }
  }

  return result;
}

function generateBody(method: string, schema: ResolvedSchema): unknown {
  return sample(schema as object, {
    skipReadOnly: method !== 'GET',
    skipWriteOnly: method === 'GET',
    skipNonRequired: true,
  });
}



================================================
FILE: packages/openapi/src/render/operation/index.tsx
================================================
import { Fragment, type ReactElement, type ReactNode } from 'react';
import type {
  CallbackObject,
  MethodInformation,
  RenderContext,
  SecuritySchemeObject,
} from '@/types';
import { type ResolvedSchema } from '@/utils/schema';
import { idToTitle } from '@/utils/id-to-title';
import { Markdown } from '../markdown';
import { heading } from '../heading';
import { Schema } from '../schema';
import { createMethod } from '@/server/create-method';
import { methodKeys } from '@/build-routes';
import {
  APIExample,
  APIExampleProvider,
  getAPIExamples,
} from '@/render/operation/api-example';
import { MethodLabel } from '@/ui/components/method-label';
import { type SampleGenerator } from '@/requests/_shared';
import { getTypescriptSchema } from '@/utils/get-typescript-schema';
import { CopyResponseTypeScript } from '@/ui/client';
import { SelectTab, SelectTabs, SelectTabTrigger } from '@/ui/select-tabs';
import {
  AccordionContent,
  AccordionHeader,
  AccordionItem,
  Accordions,
  AccordionTrigger,
} from '@/ui/components/accordion';

export interface CodeSample {
  lang: string;
  label?: string;
  source?: string | SampleGenerator | false;
}

const ParamTypes = {
  path: 'Path Parameters',
  query: 'Query Parameters',
  header: 'Header Parameters',
  cookie: 'Cookie Parameters',
};

export function Operation({
  type = 'operation',
  path,
  method,
  ctx,
  hasHead,
  headingLevel = 2,
}: {
  type?: 'webhook' | 'operation';
  path: string;
  method: MethodInformation;
  ctx: RenderContext;

  hasHead?: boolean;
  headingLevel?: number;
}): ReactElement {
  const body = method.requestBody;
  let headNode: ReactNode = null;
  let bodyNode: ReactNode = null;
  let authNode: ReactNode = null;
  let responseNode: ReactNode = null;
  let callbacksNode: ReactNode = null;

  if (hasHead) {
    const title =
      method.summary ??
      (method.operationId ? idToTitle(method.operationId) : path);

    headNode = (
      <>
        {heading(headingLevel, title, ctx)}
        {method.description ? <Markdown text={method.description} /> : null}
      </>
    );
    headingLevel++;
  }

  const contentTypes = body ? Object.entries(body.content) : null;

  if (body && contentTypes && contentTypes.length > 0) {
    bodyNode = (
      <SelectTabs defaultValue={contentTypes[0][0]}>
        <div className="flex gap-2 items-end justify-between">
          {heading(headingLevel, 'Request Body', ctx)}
          <SelectTabTrigger
            items={contentTypes.map((v) => v[0])}
            className="mb-4"
          />
        </div>
        {body.description && <Markdown text={body.description} />}
        {contentTypes.map(([type, content]) => {
          if (!(type in ctx.mediaAdapters)) {
            throw new Error(`Media type ${type} is not supported (in ${path})`);
          }

          return (
            <SelectTab key={type} value={type}>
              <Schema
                name="body"
                as="body"
                schema={(content.schema ?? {}) as ResolvedSchema}
                required={body.required}
                readOnly={method.method === 'GET'}
                writeOnly={method.method !== 'GET'}
                ctx={ctx}
              />
            </SelectTab>
          );
        })}
      </SelectTabs>
    );
  }

  if (method.responses && ctx.showResponseSchema !== false) {
    const statuses = Object.keys(method.responses);

    responseNode = (
      <>
        {heading(headingLevel, 'Response Body', ctx)}

        <Accordions type="multiple">
          {statuses.map((status) => (
            <AccordionItem key={status} value={status}>
              <ResponseAccordion status={status} operation={method} ctx={ctx} />
            </AccordionItem>
          ))}
        </Accordions>
      </>
    );
  }

  const parameterNode = Object.entries(ParamTypes).map(([type, title]) => {
    const params = method.parameters?.filter((param) => param.in === type);
    if (!params || params.length === 0) return;

    return (
      <Fragment key={type}>
        {heading(headingLevel, title, ctx)}
        <div className="flex flex-col">
          {params.map((param) => (
            <Schema
              key={param.name}
              name={param.name}
              schema={
                {
                  ...param.schema,
                  description: param.description ?? param.schema?.description,
                  deprecated:
                    (param.deprecated ?? false) ||
                    (param.schema?.deprecated ?? false),
                } as ResolvedSchema
              }
              required={param.required}
              readOnly={method.method === 'GET'}
              writeOnly={method.method !== 'GET'}
              ctx={ctx}
            />
          ))}
        </div>
      </Fragment>
    );
  });

  const securities = (
    method.security ??
    ctx.schema.document.security ??
    []
  ).filter((v) => Object.keys(v).length > 0);

  if (type === 'operation' && securities.length > 0) {
    const securitySchemes = ctx.schema.document.components?.securitySchemes;
    const names = securities.map((security) =>
      Object.keys(security).join(' & '),
    );

    authNode = (
      <SelectTabs defaultValue={names[0]}>
        <div className="flex items-end justify-between gap-2">
          {heading(headingLevel, 'Authorization', ctx)}
          <SelectTabTrigger items={names} className="mb-4" />
        </div>
        {securities.map((security, i) => (
          <SelectTab key={i} value={names[i]}>
            {Object.entries(security).map(([key, scopes]) => {
              const scheme = securitySchemes?.[key];
              if (!scheme) return;

              return (
                <AuthScheme
                  key={key}
                  scheme={scheme}
                  scopes={scopes}
                  ctx={ctx}
                />
              );
            })}
          </SelectTab>
        ))}
      </SelectTabs>
    );
  }

  if (method.callbacks) {
    const callbacks = Object.entries(method.callbacks);

    callbacksNode = (
      <SelectTabs defaultValue={callbacks[0][0]}>
        <div className="flex justify-between gap-2 items-end">
          {heading(headingLevel, 'Callbacks', ctx)}
          <SelectTabTrigger
            items={callbacks.map((v) => v[0])}
            className="mb-4"
          />
        </div>
        {callbacks.map(([name, callback]) => (
          <SelectTab key={name} value={name}>
            <WebhookCallback
              callback={callback}
              ctx={ctx}
              headingLevel={headingLevel}
            />
          </SelectTab>
        ))}
      </SelectTabs>
    );
  }

  const info = (
    <ctx.renderer.APIInfo head={headNode} method={method.method} route={path}>
      {type === 'operation' ? (
        ctx.disablePlayground ? (
          <div className="flex flex-row items-center gap-2.5 p-3 rounded-xl border bg-fd-card text-fd-card-foreground not-prose">
            <MethodLabel className="text-xs">{method.method}</MethodLabel>
            <code className="flex-1 overflow-auto text-nowrap text-[13px] text-fd-muted-foreground">
              {path}
            </code>
          </div>
        ) : (
          <ctx.renderer.APIPlayground path={path} method={method} ctx={ctx} />
        )
      ) : null}
      {authNode}
      {parameterNode}
      {bodyNode}
      {responseNode}
      {callbacksNode}
    </ctx.renderer.APIInfo>
  );

  if (type === 'operation') {
    const examples = getAPIExamples(path, method, ctx);

    return (
      <ctx.renderer.API>
        <APIExampleProvider route={path} examples={examples} method={method}>
          {info}
          <APIExample examples={examples} method={method} ctx={ctx} />
        </APIExampleProvider>
      </ctx.renderer.API>
    );
  } else {
    return info;
  }
}

async function ResponseAccordion({
  status,
  operation,
  ctx,
}: {
  status: string;
  operation: MethodInformation;
  ctx: RenderContext;
}) {
  const response = operation.responses![status];
  const {
    generateTypeScriptSchema,
    schema: { dereferenceMap },
  } = ctx;
  const contentTypes = response.content
    ? Object.entries(response.content)
    : null;

  return (
    <SelectTabs defaultValue={contentTypes?.[0][0]}>
      <AccordionHeader>
        <AccordionTrigger className="font-mono">{status}</AccordionTrigger>
        {contentTypes && (
          <SelectTabTrigger items={contentTypes.map((v) => v[0])} />
        )}
      </AccordionHeader>

      <AccordionContent>
        {response.description && (
          <div className="prose-no-margin">
            <Markdown text={response.description} />
          </div>
        )}
        {contentTypes?.map(async ([type, resType]) => {
          const schema = resType.schema;
          let ts: string | undefined;

          if (generateTypeScriptSchema) {
            ts = await generateTypeScriptSchema(operation, status);
          } else if (generateTypeScriptSchema === undefined && schema) {
            ts = await getTypescriptSchema(schema, dereferenceMap);
          }

          return (
            <SelectTab key={type} value={type} className="mt-2">
              {ts && <CopyResponseTypeScript code={ts} />}
              {schema && (
                <div className="border px-3 rounded-lg my-2 overflow-auto max-h-[400px]">
                  <Schema
                    name="response"
                    schema={schema as ResolvedSchema}
                    as="body"
                    readOnly
                    ctx={ctx}
                  />
                </div>
              )}
            </SelectTab>
          );
        })}
      </AccordionContent>
    </SelectTabs>
  );
}

function WebhookCallback({
  callback,
  ctx,
  headingLevel,
}: {
  callback: CallbackObject;
  ctx: RenderContext;
  headingLevel: number;
}) {
  const pathItems = Object.entries(callback);

  return (
    <Accordions type="single" collapsible>
      {pathItems.map(([path, pathItem]) => {
        const pathNodes = methodKeys.map((method) => {
          const operation = pathItem[method];
          if (!operation) return null;

          return (
            <div
              key={method}
              className="border p-3 my-2 prose-no-margin rounded-lg"
            >
              <Operation
                type="webhook"
                path={path}
                headingLevel={headingLevel + 1}
                method={createMethod(method, pathItem, operation)}
                ctx={ctx}
              />
            </div>
          );
        });

        return (
          <AccordionItem key={path} value={path}>
            <AccordionHeader>
              <AccordionTrigger className="font-mono">{path}</AccordionTrigger>
            </AccordionHeader>
            <AccordionContent>{pathNodes}</AccordionContent>
          </AccordionItem>
        );
      })}
    </Accordions>
  );
}

function AuthScheme({
  scheme: schema,
  scopes,
  ctx: { renderer },
}: {
  scheme: SecuritySchemeObject;
  scopes: string[];
  ctx: RenderContext;
}) {
  const scopeElement =
    scopes.length > 0 ? (
      <p>
        Scope: <code>{scopes.join(', ')}</code>
      </p>
    ) : null;

  if (schema.type === 'http' || schema.type === 'oauth2') {
    return (
      <renderer.Property
        name="Authorization"
        type={
          schema.type === 'http' && schema.scheme === 'basic'
            ? `Basic <token>`
            : 'Bearer <token>'
        }
        required
      >
        {schema.description && <Markdown text={schema.description} />}
        <p>
          In: <code>header</code>
        </p>
        {scopeElement}
      </renderer.Property>
    );
  }

  if (schema.type === 'apiKey') {
    return (
      <renderer.Property name={schema.name} type="<token>">
        {schema.description && <Markdown text={schema.description} />}
        <p>
          In: <code>{schema.in}</code>
          {scopeElement}
        </p>
      </renderer.Property>
    );
  }

  if (schema.type === 'openIdConnect') {
    return (
      <renderer.Property name="OpenID Connect" type="<token>" required>
        {schema.description && <Markdown text={schema.description} />}
        {scopeElement}
      </renderer.Property>
    );
  }
}



================================================
FILE: packages/openapi/src/requests/_shared.ts
================================================
import type { MediaAdapter } from '@/media/adapter';
import type { NoReference } from '@/utils/schema';
import type { ParameterObject } from '@/types';

export type SampleGenerator = (
  url: string,
  data: RequestData,
  context: {
    mediaAdapters: Record<string, MediaAdapter>;
  },
) => string;

export interface RawRequestData {
  method: string;

  path: Record<string, unknown>;
  query: Record<string, unknown>;
  header: Record<string, unknown>;
  cookie: Record<string, unknown>;

  body?: unknown;
  bodyMediaType?: string;
}

interface EncodedParameter {
  readonly value: string | string[];
}

export interface RequestData {
  method: string;

  path: Record<string, EncodedParameter>;
  query: Record<string, EncodedParameter>;
  header: Record<string, EncodedParameter>;
  cookie: Record<string, EncodedParameter>;

  body?: unknown;
  bodyMediaType?: string;
}

const FormDelimiter = {
  spaceDelimited: ' ',
  pipeDelimited: '|',
};

const PathPrefix = {
  label: '.',
  matrix: ';',
};

export function ident(code: string, tab: number = 1) {
  return code
    .split('\n')
    .map((v) => '  '.repeat(tab) + v)
    .join('\n');
}

export function encodeRequestData(
  from: RawRequestData,
  adapters: Record<string, MediaAdapter>,
  parameters: NoReference<ParameterObject>[],
): RequestData {
  function getMediaEncoder(field: NoReference<ParameterObject>) {
    if (!field.content) return;

    for (const k in field.content) {
      if (k in adapters) {
        return (v: unknown) => String(adapters[k].encode({ body: v }));
      }
    }
  }

  function writeObject(
    parentKey: string,
    value: object,
    deep: boolean,
    output: Record<string, EncodedParameter>,
  ) {
    for (const k in value) {
      const prop: unknown = value[k as keyof object];
      if (prop == null) continue;

      const key = deep ? `${parentKey}[${k}]` : k;
      if (!deep || typeof prop !== 'object') {
        output[key] = {
          value: String(prop),
        };

        continue;
      }

      writeObject(key, value, deep, output);
    }
  }

  function write(
    key: string,
    value: unknown,
    field: NoReference<ParameterObject>,
    output: Record<string, EncodedParameter> = {},
  ): Record<string, EncodedParameter> {
    const encoder = getMediaEncoder(field);
    if (encoder) {
      output[key] = { value: encoder(value) };
      return output;
    }

    const explode = field.explode ?? true;
    let prefix = '';
    let sep = ',';

    if (field.in === 'path') {
      const style = field.style ?? 'simple';

      if (style in PathPrefix) {
        prefix = PathPrefix[style as keyof typeof PathPrefix];

        if (explode) sep = prefix;
      }
    }

    if (Array.isArray(value)) {
      // header & cookie doesn't support explode for array values
      if (explode && field.in !== 'header' && field.in !== 'cookie') {
        output[key] = {
          value: prefix + value.map(String),
        };
        return output;
      }

      if (field.in === 'query') {
        const style = field.style ?? 'form';

        if (style in FormDelimiter)
          sep = FormDelimiter[style as keyof typeof FormDelimiter];
      }

      output[key] = {
        value: prefix + value.map(String).join(sep),
      };
      return output;
    }

    if (typeof value === 'object' && value) {
      // header & path creates key-value pairs
      if (explode && (field.in === 'header' || field.in === 'path')) {
        output[key] = {
          value:
            prefix +
            Object.entries(value)
              .map(([k, v]) => `${k}=${v}`)
              .join(sep),
        };
        return output;
      }

      if (explode || field.style === 'deepObject') {
        writeObject(key, value, field.style === 'deepObject', output);
        return output;
      }

      output[key] = {
        value: prefix + Object.entries(value).flat().join(sep),
      };
      return output;
    }

    output[key] = {
      value: prefix + String(value),
    };
    return output;
  }

  const result: Partial<RequestData> = {
    method: from.method,
    body: from.body,
    bodyMediaType: from.bodyMediaType,
  };

  for (const type of ['cookie', 'query', 'header', 'path'] as const) {
    const out = {};
    for (const k in from[type]) {
      const value = from[type][k];
      if (value == null) continue;

      const field = parameters.find((p) => p.name === k && p.in === type);
      if (!field) continue;

      write(k, value, field, out);
    }

    result[type] = out;
  }

  return result as RequestData;
}



================================================
FILE: packages/openapi/src/requests/csharp.ts
================================================
'use client';
import type { SampleGenerator } from '@/requests/_shared';

export const generator: SampleGenerator = (url, data, { mediaAdapters }) => {
  const s: string[] = [];
  const imports = new Set<string>(['System', 'System.Net.Http', 'System.Text']);
  const headers = { ...data.header };

  // Handle request body
  let body: string | undefined;
  if (data.body && data.bodyMediaType && data.bodyMediaType in mediaAdapters) {
    body = mediaAdapters[data.bodyMediaType].generateExample(
      data as { body: unknown },
      {
        lang: 'csharp',
        addImport(from) {
          imports.add(from);
        },
      },
    );
  }

  for (const specifier of imports) {
    s.push(`using ${specifier};`);
  }

  s.push('');

  if (body) {
    s.push(body, '');
  }

  s.push('var client = new HttpClient();');
  const headerLines: string[] = [];

  function addHeader(key: string, value: unknown) {
    headerLines.push(
      `client.DefaultRequestHeaders.Add("${key}", ${JSON.stringify(value)});`,
    );
  }
  for (const k in headers) {
    addHeader(k, headers[k].value);
  }

  // Add cookie header if cookies are present
  if (Object.keys(data.cookie).length > 0) {
    const cookie = Object.entries(data.cookie)
      .map(([key, param]) => `${key}=${param.value}`)
      .join('; ');

    addHeader('cookie', cookie);
  }

  s.push(...headerLines);

  // Build the request
  const method =
    data.method[0].toUpperCase() + data.method.slice(1).toLowerCase() + 'Async';

  if (body) {
    s.push(`var response = await client.${method}("${url}", body);`);
  } else {
    s.push(`var response = await client.${method}("${url}");`);
  }

  // Add response handling
  s.push('var responseBody = await response.Content.ReadAsStringAsync();');

  return s.join('\n');
};



================================================
FILE: packages/openapi/src/requests/curl.ts
================================================
'use client';
import { escapeString, inputToString } from '@/utils/input-to-string';
import { ident, type SampleGenerator } from '@/requests/_shared';

export const generator: SampleGenerator = (url, data) => {
  const s: string[] = [];
  s.push(`curl -X ${data.method} "${url}"`);

  for (const header in data.header) {
    const value = `${header}: ${data.header[header].value}`;

    s.push(`-H "${value}"`);
  }

  for (const k in data.cookie) {
    const param = data.cookie[k];

    s.push(`--cookie ${JSON.stringify(`${k}=${param.value}`)}`);
  }

  if (data.body && data.bodyMediaType === 'multipart/form-data') {
    if (typeof data.body !== 'object')
      throw new Error('[CURL] request body must be an object.');

    for (const [key, value] of Object.entries(data.body)) {
      s.push(`-F ${key}=${JSON.stringify(inputToString(value))}`);
    }
  } else if (data.body && data.bodyMediaType) {
    const escaped = escapeString(
      inputToString(
        data.body,
        // @ts-expect-error -- assume the body media type is supported
        data.bodyMediaType,
      ),
      "'",
    );

    s.push(`-H "Content-Type: ${data.bodyMediaType}"`);
    s.push(`-d ${escaped}`);
  }

  return s.flatMap((v, i) => ident(v, i > 0 ? 1 : 0)).join(' \\\n');
};



================================================
FILE: packages/openapi/src/requests/go.ts
================================================
'use client';
import { ident, type SampleGenerator } from '@/requests/_shared';

export const generator: SampleGenerator = (url, data, { mediaAdapters }) => {
  const imports = ['fmt', 'net/http', 'io/ioutil'];
  const headers = new Map<string, string>();
  const variables = new Map<string, string>();
  variables.set('url', JSON.stringify(url));

  for (const header in data.header) {
    headers.set(header, JSON.stringify(data.header[header].value));
  }

  const cookies = Object.entries(data.cookie);
  if (cookies.length > 0) {
    headers.set(
      'Cookie',
      JSON.stringify(
        cookies.map(([k, param]) => `${k}=${param.value}`).join('; '),
      ),
    );
  }

  let body: string | undefined;

  if (data.body && data.bodyMediaType && data.bodyMediaType in mediaAdapters) {
    headers.set('Content-Type', `"${data.bodyMediaType}"`);
    body = mediaAdapters[data.bodyMediaType].generateExample(
      data as { body: unknown },
      {
        lang: 'go',
        addImport(from) {
          imports.push(from);
        },
      },
    );
  }

  return `package main

import (
${ident(imports.map((v) => `"${v}"`).join('\n'))}
)

func main() {
${Array.from(variables.entries())
  .map(([k, v]) => ident(`${k} := ${v}`))
  .join('\n')}
${body ? ident(body) : ''}
  req, _ := http.NewRequest("${data.method}", url, ${body ? 'body' : 'nil'})
${ident(
  Array.from(headers.entries())
    .map(([key, value]) => `req.Header.Add("${key}", ${value})`)
    .join('\n'),
)}
  res, _ := http.DefaultClient.Do(req)
  defer res.Body.Close()
  body, _ := ioutil.ReadAll(res.Body)

  fmt.Println(res)
  fmt.Println(string(body))
}`;
};



================================================
FILE: packages/openapi/src/requests/index.ts
================================================
import type { CodeSample } from '@/render/operation';
import * as CURL from '@/requests/curl';
import * as JS from '@/requests/javascript';
import * as Go from '@/requests/go';
import * as Python from '@/requests/python';
import * as Java from '@/requests/java';
import * as CSharp from '@/requests/csharp';

export const defaultSamples: CodeSample[] = [
  {
    label: 'cURL',
    source: CURL.generator,
    lang: 'bash',
  },
  {
    label: 'JavaScript',
    source: JS.generator,
    lang: 'js',
  },
  {
    label: 'Go',
    source: Go.generator,
    lang: 'go',
  },
  {
    label: 'Python',
    source: Python.generator,
    lang: 'python',
  },
  {
    label: 'Java',
    source: Java.generator,
    lang: 'java',
  },
  {
    label: 'C#',
    source: CSharp.generator,
    lang: 'csharp',
  },
];



================================================
FILE: packages/openapi/src/requests/java.ts
================================================
'use client';
import { ident, type SampleGenerator } from '@/requests/_shared';

export const generator: SampleGenerator = (url, data, { mediaAdapters }) => {
  const s: string[] = [];
  const headers = { ...data.header };
  const imports = new Set<string>([
    'java.net.URI',
    'java.net.http.HttpClient',
    'java.net.http.HttpRequest',
    'java.net.http.HttpResponse',
    'java.net.http.HttpResponse.BodyHandlers',
    'java.time.Duration',
  ]);

  // Handle body if present
  let body: string | undefined;
  if (data.body && data.bodyMediaType && data.bodyMediaType in mediaAdapters) {
    const adapter = mediaAdapters[data.bodyMediaType];

    body = adapter.generateExample(data as { body: unknown }, {
      lang: 'java',
      addImport(specifier) {
        imports.add(specifier);
      },
    });
  }

  for (const value of imports.values()) {
    s.push(`import ${value};`);
  }
  s.push('');

  if (body) {
    s.push(body);
  }

  // Create HttpClient
  s.push('HttpClient client = HttpClient.newBuilder()');
  s.push(ident('.connectTimeout(Duration.ofSeconds(10))'));
  s.push(ident('.build();'));
  s.push('');

  // Build request
  s.push('HttpRequest.Builder requestBuilder = HttpRequest.newBuilder()');
  s.push(ident(`.uri(URI.create(${JSON.stringify(url)}))`));

  // Add headers
  for (const [key, param] of Object.entries(headers)) {
    s.push(
      ident(`.header(${JSON.stringify(key)}, ${JSON.stringify(param.value)})`),
    );
  }

  if (data.bodyMediaType) {
    s.push(ident(`.header("Content-Type", "${data.bodyMediaType}")`));
  }

  // Add cookies if present
  const cookies = Object.entries(data.cookie);

  if (cookies.length > 0) {
    const cookieString = cookies
      .map(([key, param]) => `${key}=${param.value}`)
      .join('; ');

    s.push(ident(`.header("Cookie", ${JSON.stringify(cookieString)})`));
  }

  const arg = body ? 'body' : '';
  s.push(ident(`.${data.method.toUpperCase()}(${arg})`));
  s.push(ident('.build();'));
  s.push('');

  // Add response handling
  s.push('try {');
  s.push(
    ident(
      'HttpResponse<String> response = client.send(requestBuilder.build(), BodyHandlers.ofString());',
    ),
  );
  s.push(ident('System.out.println("Status code: " + response.statusCode());'));
  s.push(ident('System.out.println("Response body: " + response.body());'));
  s.push('} catch (Exception e) {');
  s.push(ident('e.printStackTrace();'));
  s.push('}');

  return s.join('\n');
};



================================================
FILE: packages/openapi/src/requests/javascript.ts
================================================
'use client';
import { ident, type SampleGenerator } from '@/requests/_shared';

export const generator: SampleGenerator = (url, data, { mediaAdapters }) => {
  const s: string[] = [];
  const options = new Map<string, string>();
  const headers: Record<string, string> = {};

  for (const [k, v] of Object.entries(data.header)) {
    headers[k] = v.value as string;
  }

  const cookies = Object.entries(data.cookie);
  if (cookies.length > 0) {
    headers['cookie'] = cookies
      .map(([key, param]) => `${key}=${param.value}`)
      .join('; ');
  }

  if (Object.keys(headers).length > 0) {
    options.set('headers', JSON.stringify(headers, null, 2));
  }

  let body: string | undefined;
  if (data.body && data.bodyMediaType && data.bodyMediaType in mediaAdapters) {
    body = mediaAdapters[data.bodyMediaType].generateExample(
      data as { body: unknown },
      {
        lang: 'js',
        addImport(from, name) {
          s.unshift(`import { ${name} } from "${from}"`);
        },
      },
    );
  }

  if (body) {
    s.push(body);
    options.set('body', 'body');
  }

  const params = [JSON.stringify(url)];
  if (options.size > 0) {
    const str = Array.from(options.entries())
      .map(([k, v]) => ident(k === v ? k : `${k}: ${v}`))
      .join(',\n');

    params.push(`{\n${str}\n}`);
  }

  s.push(`fetch(${params.join(', ')})`);

  return s.join('\n\n');
};



================================================
FILE: packages/openapi/src/requests/python.ts
================================================
'use client';
import { type SampleGenerator } from '@/requests/_shared';

export const generator: SampleGenerator = (url, data, { mediaAdapters }) => {
  const headers: Record<string, string> = {};
  const params = [`"${data.method}"`, 'url'];
  let body: string | undefined;

  if (data.body && data.bodyMediaType && data.bodyMediaType in mediaAdapters) {
    headers['Content-Type'] = data.bodyMediaType;

    body = mediaAdapters[data.bodyMediaType].generateExample(
      data as { body: unknown },
      {
        lang: 'python',
      },
    );

    if (body && data.bodyMediaType === 'application/json') {
      params.push('json = body');
    } else if (body) {
      params.push('data = body');
    }
  }

  for (const [k, v] of Object.entries(data.header)) {
    headers[k] = v.value as string;
  }

  if (Object.keys(headers).length > 0) {
    params.push(`headers = ${JSON.stringify(headers, null, 2)}`);
  }

  const inputCookies = Object.entries(data.cookie);
  if (inputCookies.length > 0) {
    const cookies: Record<string, string> = {};

    for (const [k, v] of inputCookies) {
      cookies[k] = v.value as string;
    }

    params.push(`cookies = ${JSON.stringify(cookies, null, 2)}`);
  }

  return `import requests

url = ${JSON.stringify(url)}
${body ?? ''}
response = requests.request(${params.join(', ')})

print(response.text)`;
};



================================================
FILE: packages/openapi/src/scalar/client.tsx
================================================
'use client';
import { cn } from 'fumadocs-ui/utils/cn';
import { buttonVariants } from 'fumadocs-ui/components/ui/button';
import {
  ApiClientModalProvider,
  useApiClientModal,
} from '@scalar/api-client-react';
import { MethodLabel } from '@/ui/components/method-label';
import { useTheme } from 'next-themes';
import { useEffect, useState } from 'react';
import type { OpenAPIV3_1 } from 'openapi-types';

export default function ScalarPlayground({
  path,
  method,
  spec,
}: {
  spec: object;
  path: string;
  method: string;
}) {
  const { resolvedTheme } = useTheme();
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  return (
    <div
      className={cn(
        'flex flex-row items-center gap-2.5 p-3 rounded-xl border bg-fd-card text-fd-card-foreground not-prose',
        mounted ? `${resolvedTheme}-mode` : null,
      )}
    >
      <MethodLabel className="text-xs">{method}</MethodLabel>
      <code className="flex-1 overflow-auto text-nowrap text-[13px] text-fd-muted-foreground">
        {path}
      </code>
      <ApiClientModalProvider
        configuration={{
          theme: 'moon',
          spec: {
            content: spec,
          },
        }}
      >
        <Trigger path={path} method={method} />
      </ApiClientModalProvider>
    </div>
  );
}

function Trigger({ path, method }: { path: string; method: string }) {
  const client = useApiClientModal();

  return (
    <button
      type="submit"
      className={cn(
        buttonVariants({ color: 'primary', size: 'sm' }),
        'px-3 py-1.5',
      )}
      onClick={() =>
        client?.open({ path, method: method as OpenAPIV3_1.HttpMethods })
      }
    >
      Test
    </button>
  );
}



================================================
FILE: packages/openapi/src/scalar/index.tsx
================================================
import type { MethodInformation, RenderContext } from '@/types';
import dynamic from 'next/dynamic';

const Client = dynamic(() => import('./client'));

export function APIPlayground({
  path,
  method,
  ctx,
}: {
  path: string;
  method: MethodInformation;
  ctx: RenderContext;
}) {
  return (
    <Client method={method.method} path={path} spec={ctx.schema.downloaded} />
  );
}



================================================
FILE: packages/openapi/src/server/create-method.ts
================================================
import type {
  MethodInformation,
  OperationObject,
  PathItemObject,
} from '@/types';
import type { NoReference } from '@/utils/schema';

/**
 * Summarize method endpoint information
 */
export function createMethod(
  method: string,
  path: NoReference<PathItemObject>,
  operation: NoReference<OperationObject>,
): MethodInformation {
  return {
    description: path.description,
    summary: path.summary,
    ...operation,
    parameters: [...(operation.parameters ?? []), ...(path.parameters ?? [])],
    method: method.toUpperCase(),
  };
}



================================================
FILE: packages/openapi/src/server/create.tsx
================================================
import type { ApiPageProps } from '@/render/api-page';
import { createProxy } from '@/server/proxy';

export type OpenAPIOptions = Omit<Partial<ApiPageProps>, 'document'>;

export interface OpenAPIServer {
  getAPIPageProps: (from: ApiPageProps) => ApiPageProps;
  createProxy: typeof createProxy;
}

export function createOpenAPI(options: OpenAPIOptions = {}): OpenAPIServer {
  return {
    createProxy,
    getAPIPageProps(props) {
      return {
        ...options,
        ...props,
      };
    },
  };
}



================================================
FILE: packages/openapi/src/server/index.ts
================================================
export * from './create';
export * from './source-api';



================================================
FILE: packages/openapi/src/server/proxy.ts
================================================
import type { NextRequest } from 'next/server';

const keys = ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'HEAD'] as const;

type Proxy = {
  [K in (typeof keys)[number]]: (req: NextRequest) => Promise<Response>;
};

interface CreateProxyOptions {
  /**
   * Filter by prefixes of request url
   *
   * @deprecated Use `allowedOrigins` for filtering origins, or `filterRequest` for more detailed rules.
   */
  allowedUrls?: string[];

  /**
   * List of allowed origins to proxy to.
   */
  allowedOrigins?: string[];

  /**
   * Determine if the proxied request is allowed.
   *
   * @returns true if allowed, otherwise forbidden.
   */
  filterRequest?: (request: Request) => boolean;

  /**
   * Override proxied request/response with yours
   */
  overrides?: {
    request?: (request: Request) => Request;
    response?: (response: Response) => Response;
  };
}

export function createProxy(options: CreateProxyOptions = {}): Proxy {
  const {
    allowedOrigins,
    allowedUrls,
    filterRequest = (req) => {
      return (
        !allowedUrls || allowedUrls.some((item) => req.url.startsWith(item))
      );
    },
    overrides,
  } = options;
  const handlers: Partial<Proxy> = {};

  async function handler(req: NextRequest): Promise<Response> {
    const url = req.nextUrl.searchParams.get('url');

    if (!url) {
      return Response.json(
        '[Proxy] A `url` query parameter is required for proxy url',
        {
          status: 400,
        },
      );
    }

    let parsedUrl;
    try {
      parsedUrl = new URL(url);
    } catch {
      return Response.json('[Proxy] Invalid `url` parameter value.', {
        status: 400,
      });
    }

    if (allowedOrigins && !allowedOrigins.includes(parsedUrl.origin)) {
      return Response.json(
        `[Proxy] The origin "${parsedUrl.origin}" is not allowed.`,
        {
          status: 400,
        },
      );
    }

    const contentLength = req.headers.get('content-length');
    const hasBody = contentLength && parseInt(contentLength) > 0;

    let proxied = new Request(parsedUrl, {
      method: req.method,
      cache: 'no-cache',
      headers: req.headers,
      body:
        hasBody &&
        ['POST', 'PUT', 'PATCH', 'DELETE'].includes(req.method.toUpperCase())
          ? await req.arrayBuffer()
          : undefined,
    });

    if (overrides?.request) {
      proxied = overrides.request(proxied);
    }

    if (!filterRequest(proxied)) {
      return Response.json('[Proxy] The proxied request is not allowed', {
        status: 403,
      });
    }

    proxied.headers.forEach((_value, originalKey) => {
      const key = originalKey.toLowerCase();

      if (key === 'origin') {
        proxied.headers.delete(originalKey);
      }
    });

    let res = await fetch(proxied).catch((e) => new Error(e.toString()));
    if (res instanceof Error) {
      return Response.json(`[Proxy] Failed to proxy request: ${res.message}`, {
        status: 500,
      });
    }

    if (overrides?.response) {
      res = overrides.response(res);
    }

    const headers = new Headers(res.headers);
    headers.forEach((_value, originalKey) => {
      const key = originalKey.toLowerCase();
      if (key.startsWith('access-control-') || key === 'content-encoding') {
        headers.delete(originalKey);
      }
    });
    headers.set('X-Forwarded-Host', res.url);

    return new Response(res.body, {
      status: res.status,
      statusText: res.statusText,
      headers,
    });
  }

  for (const key of keys) {
    handlers[key] = handler;
  }

  return handlers as Proxy;
}



================================================
FILE: packages/openapi/src/server/source-api.tsx
================================================
import { MethodLabel } from '@/ui/components/method-label';
import type { PageTree } from 'fumadocs-core/server';
import type { PageFile } from 'fumadocs-core/source';

/**
 * Source API Integration
 *
 * Add this to page tree builder options
 */
export const attachFile = (
  node: PageTree.Item,
  file: PageFile | undefined,
): PageTree.Item => {
  if (!file) return node;
  let data = file.data as object;
  // backward compatible with older versions with `_openapi` is located in `data.data`
  if ('data' in data && data.data && typeof data === 'object') data = data.data;

  let method: string | undefined;

  if ('_openapi' in data && typeof data._openapi === 'object') {
    const meta = data._openapi as {
      method?: string;
    };

    method = meta.method;
  }

  if (method) {
    node.name = (
      <>
        {node.name}{' '}
        <MethodLabel className="ms-auto text-xs text-nowrap">
          {method}
        </MethodLabel>
      </>
    );
  }

  return node;
};



================================================
FILE: packages/openapi/src/ui/client.tsx
================================================
'use client';

import { useCopyButton } from 'fumadocs-ui/utils/use-copy-button';
import { buttonVariants } from 'fumadocs-ui/components/ui/button';
import { cn } from 'fumadocs-ui/utils/cn';
import { Check, Copy } from 'lucide-react';

export function CopyResponseTypeScript({ code }: { code: string }) {
  const [isChecked, onCopy] = useCopyButton(() => {
    void navigator.clipboard.writeText(code);
  });

  return (
    <div className="flex items-start justify-between gap-2 bg-fd-card text-fd-card-foreground border rounded-xl p-3 not-prose mb-4 last:mb-0">
      <div>
        <p className="font-medium text-sm mb-2">TypeScript Definitions</p>
        <p className="text-xs text-fd-muted-foreground">
          Use the response body type in TypeScript.
        </p>
      </div>
      <button
        onClick={onCopy}
        className={cn(
          buttonVariants({
            color: 'secondary',
            className: 'p-2 gap-2',
            size: 'sm',
          }),
        )}
      >
        {isChecked ? (
          <Check className="size-3.5" />
        ) : (
          <Copy className="size-3.5" />
        )}
        Copy
      </button>
    </div>
  );
}



================================================
FILE: packages/openapi/src/ui/index.tsx
================================================
import { type HTMLAttributes, type ReactNode } from 'react';
import { Badge } from '@/ui/components/method-label';
import type { PropertyProps, RootProps } from '@/render/renderer';
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from 'fumadocs-ui/components/ui/collapsible';
import { ChevronDown } from 'lucide-react';
import { ApiProvider } from '@/ui/lazy';
import { cn } from 'fumadocs-ui/utils/cn';
import { buttonVariants } from 'fumadocs-ui/components/ui/button';
import type { MediaAdapter } from '@/media/adapter';

export function Root({
  children,
  className,
  ctx,
  ...props
}: RootProps & HTMLAttributes<HTMLDivElement>) {
  const mediaAdapters: Record<string, MediaAdapter> = {};
  for (const k in ctx.mediaAdapters) {
    const adapter = ctx.mediaAdapters[k];

    if (adapter.client) mediaAdapters[k] = adapter.client;
  }

  return (
    <div className={cn('flex flex-col gap-24 text-sm', className)} {...props}>
      <ApiProvider
        mediaAdapters={mediaAdapters}
        servers={ctx.servers}
        shikiOptions={ctx.shikiOptions}
      >
        {children}
      </ApiProvider>
    </div>
  );
}

export function APIInfo({
  className,
  ...props
}: HTMLAttributes<HTMLDivElement>) {
  return (
    <div className={cn('min-w-0 flex-1', className)} {...props}>
      {props.children}
    </div>
  );
}

export function API({ children, ...props }: HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      {...props}
      className={cn(
        'flex flex-col gap-x-6 gap-y-4 xl:flex-row xl:items-start',
        props.className,
      )}
      style={
        {
          '--fd-api-info-top':
            'calc(12px + var(--fd-nav-height) + var(--fd-banner-height) + var(--fd-tocnav-height, 0px))',
          ...props.style,
        } as object
      }
    >
      {children}
    </div>
  );
}

export function Property({
  name,
  type,
  required,
  deprecated,
  nested,
  ...props
}: PropertyProps) {
  return (
    <div
      className={cn(
        'text-sm border-t',
        nested
          ? 'p-3 border-x bg-fd-card last:rounded-b-xl first:rounded-tr-xl last:border-b'
          : 'py-4 first:border-t-0',
      )}
    >
      <div className="flex flex-wrap items-center gap-2 not-prose">
        <span className="font-medium font-mono text-fd-primary">
          {name}
          {required === false && (
            <span className="text-fd-muted-foreground">?</span>
          )}
        </span>
        <span className="me-auto text-xs font-mono text-fd-muted-foreground">
          {type}
        </span>
        {deprecated && (
          <Badge color="yellow" className="text-xs">
            Deprecated
          </Badge>
        )}
      </div>
      <div className="prose-no-margin pt-2.5 empty:hidden">
        {props.children}
      </div>
    </div>
  );
}

export function APIExample(props: HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      {...props}
      className={cn(
        'prose-no-margin md:sticky md:top-(--fd-api-info-top) xl:w-[400px]',
        props.className,
      )}
    >
      {props.children}
    </div>
  );
}

export function ObjectCollapsible(props: {
  name: string;
  children: ReactNode;
}) {
  return (
    <Collapsible className="my-2" {...props}>
      <CollapsibleTrigger
        className={cn(
          buttonVariants({ color: 'secondary', size: 'sm' }),
          'group px-3 py-2 data-[state=open]:rounded-b-none',
        )}
      >
        {props.name}
        <ChevronDown className="size-4 text-fd-muted-foreground group-data-[state=open]:rotate-180" />
      </CollapsibleTrigger>
      <CollapsibleContent className="-mt-px *:bg-fd-card">
        {props.children}
      </CollapsibleContent>
    </Collapsible>
  );
}

export { APIPage, type ApiPageProps } from '@/render/api-page';



================================================
FILE: packages/openapi/src/ui/lazy.tsx
================================================
'use client';
import dynamic from 'next/dynamic';

export const CodeExampleProvider = dynamic(() =>
  import('./contexts/code-example').then((mod) => mod.CodeExampleProvider),
);
export const CodeExample = dynamic(() =>
  import('./contexts/code-example').then((mod) => mod.CodeExample),
);
export const CodeExampleSelector = dynamic(() =>
  import('./contexts/code-example').then((mod) => mod.CodeExampleSelector),
);

export const ClientLazy = dynamic(() => import('@/playground/client'));

export const ApiProvider = dynamic(() =>
  import('./contexts/api').then((mod) => mod.ApiProvider),
);



================================================
FILE: packages/openapi/src/ui/select-tabs.tsx
================================================
'use client';
import {
  type ComponentProps,
  createContext,
  type ReactNode,
  use,
  useMemo,
  useState,
} from 'react';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/ui/components/select';
import { cn } from 'fumadocs-ui/utils/cn';

const Context = createContext<{
  type: string | null;
  setType: (type: string) => void;
} | null>(null);

export function SelectTabs({
  defaultValue,
  children,
}: {
  defaultValue?: string;
  children: ReactNode;
}) {
  const [type, setType] = useState<string | null>(defaultValue ?? null);

  return (
    <Context value={useMemo(() => ({ type, setType }), [type])}>
      {children}
    </Context>
  );
}

export function SelectTab({
  value,
  ...props
}: ComponentProps<'div'> & {
  value: string;
}) {
  const { type } = use(Context)!;
  if (value !== type) return;

  return <div {...props}>{props.children}</div>;
}

export function SelectTabTrigger({
  items,
  ...props
}: ComponentProps<typeof SelectTrigger> & { items: string[] }) {
  const { type, setType } = use(Context)!;

  return (
    <Select value={type ?? ''} onValueChange={setType}>
      <SelectTrigger
        {...props}
        className={cn('not-prose w-fit', props.className)}
      >
        <SelectValue />
      </SelectTrigger>
      <SelectContent>
        {items.map((type) => (
          <SelectItem key={type} value={type}>
            {type}
          </SelectItem>
        ))}
      </SelectContent>
    </Select>
  );
}



================================================
FILE: packages/openapi/src/ui/server-select.tsx
================================================
'use client';
import {
  type SelectedServer,
  useApiContext,
  useServerSelectContext,
} from '@/ui/contexts/api';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/ui/components/select';
import { Input, labelVariants } from '@/ui/components/input';
import { type HTMLAttributes, useEffect, useState } from 'react';
import { cn } from 'fumadocs-ui/utils/cn';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/ui/components/dialog';
import { resolveServerUrl, withBase } from '@/utils/url';
import { FormProvider, useController, useForm } from 'react-hook-form';
import type { OpenAPIV3_1 } from 'openapi-types';
import { useEffectEvent } from 'fumadocs-core/utils/use-effect-event';

export default function ServerSelect(props: HTMLAttributes<HTMLDivElement>) {
  const { servers } = useApiContext();
  const { server, setServer } = useServerSelectContext();
  const [open, setOpen] = useState(false);
  const [isMounted, setIsMounted] = useState(false);

  useEffect(() => {
    setIsMounted(true);
  }, []);

  if (servers.length <= 0) return;

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger className="text-xs p-3 py-2 bg-fd-muted text-fd-muted-foreground transition-colors truncate hover:bg-fd-accent hover:text-fd-accent-foreground focus-visible:outline-none">
        {isMounted
          ? withBase(
              server ? resolveServerUrl(server.url, server.variables) : '/',
              window.location.origin,
            )
          : 'loading...'}
      </DialogTrigger>
      <DialogContent {...props}>
        <DialogHeader>
          <DialogTitle>Server URL</DialogTitle>
          <DialogDescription>
            The base URL of your API endpoint.
          </DialogDescription>
        </DialogHeader>
        <Select value={server?.url} onValueChange={setServer}>
          <SelectTrigger>
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            {servers.map((item) => (
              <SelectItem key={item.url} value={item.url}>
                <code className="text-[13px]">{item.url}</code>
                <p className="text-fd-muted-foreground">{item.description}</p>
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
        {server && server.variables && (
          <ServerSelectContent key={server.url} server={server} />
        )}
      </DialogContent>
    </Dialog>
  );
}

function ServerSelectContent({ server }: { server: SelectedServer }) {
  const { servers } = useApiContext();
  const { setServerVariables } = useServerSelectContext();
  const schema = servers.find((item) => item.url === server.url);
  const form = useForm({
    defaultValues: server.variables,
  });

  const onChangeDebounced = useEffectEvent((values: Record<string, string>) => {
    setServerVariables(values);
  });

  useEffect(() => {
    let timer: number | null = null;

    return form.subscribe({
      formState: {
        values: true,
      },
      callback({ values }) {
        if (timer !== null) window.clearTimeout(timer);

        timer = window.setTimeout(() => onChangeDebounced(values), 500);
      },
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps -- `form` shouldn't be included
  }, []);

  if (!schema?.variables) return;

  return (
    <FormProvider {...form}>
      <div className="flex flex-col gap-4">
        {Object.entries(schema.variables).map(([key, variable]) => {
          return (
            <fieldset key={key} className="flex flex-col gap-1">
              <label className={cn(labelVariants())} htmlFor={key}>
                {key}
              </label>
              <p className="text-xs text-fd-muted-foreground empty:hidden">
                {variable.description}
              </p>
              <Field
                fieldName={key}
                variable={variable as OpenAPIV3_1.ServerVariableObject}
              />
            </fieldset>
          );
        })}
      </div>
    </FormProvider>
  );
}

function Field({
  fieldName,
  variable,
}: {
  variable: OpenAPIV3_1.ServerVariableObject;
  fieldName: string;
}) {
  const { field } = useController({
    name: fieldName,
  });

  if (variable.enum) {
    return (
      <Select value={field.value} onValueChange={field.onChange}>
        <SelectTrigger id={fieldName} ref={field.ref}>
          <SelectValue />
        </SelectTrigger>
        <SelectContent>
          {variable.enum.map((value) => (
            <SelectItem key={value} value={value}>
              {value}
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
    );
  }

  return <Input id={fieldName} {...field} />;
}



================================================
FILE: packages/openapi/src/ui/components/accordion.tsx
================================================
'use client';

import * as Primitive from '@radix-ui/react-accordion';
import { ChevronRight } from 'lucide-react';
import type { ComponentProps } from 'react';
import { cn } from 'fumadocs-ui/utils/cn';

export function Accordions(props: ComponentProps<typeof Primitive.Root>) {
  return (
    <Primitive.Root
      {...props}
      className={cn('divide-y divide-fd-border', props.className)}
    />
  );
}

export function AccordionItem(props: ComponentProps<typeof Primitive.Item>) {
  return (
    <Primitive.Item {...props} className={cn('scroll-m-20', props.className)}>
      {props.children}
    </Primitive.Item>
  );
}

export function AccordionContent(
  props: ComponentProps<typeof Primitive.Content>,
) {
  return (
    <Primitive.Content
      {...props}
      className={cn(
        'overflow-hidden px-1 data-[state=closed]:animate-fd-accordion-up data-[state=open]:animate-fd-accordion-down',
        props.className,
      )}
    >
      {props.children}
    </Primitive.Content>
  );
}

export function AccordionHeader(
  props: ComponentProps<typeof Primitive.Header>,
) {
  return (
    <Primitive.Header
      {...props}
      className={cn(
        'not-prose flex py-2 text-fd-foreground font-medium',
        props.className,
      )}
    >
      {props.children}
    </Primitive.Header>
  );
}

export function AccordionTrigger(
  props: ComponentProps<typeof Primitive.Trigger>,
) {
  return (
    <Primitive.Trigger
      {...props}
      className={cn(
        'flex flex-1 items-center gap-1 text-start group/accordion focus-visible:outline-none',
        props.className,
      )}
    >
      <ChevronRight className="size-3.5 text-fd-muted-foreground shrink-0 transition-transform group-data-[state=open]/accordion:rotate-90" />
      {props.children}
    </Primitive.Trigger>
  );
}



================================================
FILE: packages/openapi/src/ui/components/dialog.tsx
================================================
'use client';

import * as React from 'react';
import * as DialogPrimitive from '@radix-ui/react-dialog';
import { X } from 'lucide-react';
import { cn } from 'fumadocs-ui/utils/cn';
import { buttonVariants } from 'fumadocs-ui/components/ui/button';

const Dialog = DialogPrimitive.Root;

const DialogTrigger = DialogPrimitive.Trigger;

const DialogPortal = DialogPrimitive.Portal;

const DialogClose = DialogPrimitive.Close;

const DialogOverlay = React.forwardRef<
  React.ComponentRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      'fixed inset-0 z-50 bg-black/30 backdrop-blur-sm data-[state=open]:animate-fd-fade-in data-[state=closed]:animate-fd-fade-out',
      className,
    )}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = React.forwardRef<
  React.ComponentRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        'fixed left-1/2 top-1/2 z-50 flex flex-col gap-4 w-full max-w-lg -translate-x-1/2 -translate-y-1/2 border bg-fd-popover p-4 shadow-lg rounded-xl duration-200 data-[state=open]:animate-fd-dialog-in data-[state=closed]:animate-fd-dialog-out focus-visible:outline-none',
        className,
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close
        aria-label="Close"
        className={cn(
          buttonVariants({ size: 'icon-sm', color: 'ghost' }),
          'absolute end-2 top-2 text-fd-muted-foreground/70',
        )}
      >
        <X />
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn('flex flex-col gap-1.5 text-center sm:text-start', className)}
    {...props}
  />
);
DialogHeader.displayName = 'DialogHeader';

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:gap-2',
      className,
    )}
    {...props}
  />
);
DialogFooter.displayName = 'DialogFooter';

const DialogTitle = React.forwardRef<
  React.ComponentRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      'text-lg font-semibold leading-none tracking-tight',
      className,
    )}
    {...props}
  />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = React.forwardRef<
  React.ComponentRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn('text-sm text-fd-muted-foreground', className)}
    {...props}
  />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
};



================================================
FILE: packages/openapi/src/ui/components/input.tsx
================================================
import * as React from 'react';
import { cn } from 'fumadocs-ui/utils/cn';
import { cva } from 'class-variance-authority';

export type InputProps = React.InputHTMLAttributes<HTMLInputElement>;

export const labelVariants = cva(
  'text-xs font-medium text-fd-foreground peer-disabled:cursor-not-allowed peer-disabled:opacity-70',
);

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          'flex h-9 w-full rounded-md border bg-fd-secondary px-2 py-1.5 text-[13px] text-fd-secondary-foreground transition-colors placeholder:text-fd-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-fd-ring disabled:cursor-not-allowed disabled:opacity-50',
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);
Input.displayName = 'Input';

export { Input };



================================================
FILE: packages/openapi/src/ui/components/method-label.tsx
================================================
import { cva, type VariantProps } from 'class-variance-authority';
import type { HTMLAttributes } from 'react';
import { cn } from 'fumadocs-ui/utils/cn';

export const badgeVariants = cva('font-mono font-medium', {
  variants: {
    color: {
      green: 'text-green-600 dark:text-green-400',
      yellow: 'text-yellow-600 dark:text-yellow-400',
      red: 'text-red-600 dark:text-red-400',
      blue: 'text-blue-600 dark:text-blue-400',
      orange: 'text-orange-600 dark:text-orange-400',
    },
  },
});

function getMethodColor(
  method: string,
): VariantProps<typeof badgeVariants>['color'] {
  switch (method.toUpperCase()) {
    case 'PUT':
      return 'yellow';
    case 'PATCH':
      return 'orange';
    case 'POST':
      return 'blue';
    case 'DELETE':
      return 'red';
    default:
      return 'green';
  }
}

export function Badge({
  className,
  color,
  ...props
}: Omit<HTMLAttributes<HTMLSpanElement>, 'color'> &
  VariantProps<typeof badgeVariants>) {
  return (
    <span
      className={cn(
        badgeVariants({
          color,
          className,
        }),
      )}
      {...props}
    >
      {props.children}
    </span>
  );
}

export function MethodLabel({
  children,
  ...props
}: Omit<HTMLAttributes<HTMLSpanElement>, 'children'> & {
  children: string;
}) {
  return (
    <Badge {...props} color={getMethodColor(children)}>
      {children.toUpperCase()}
    </Badge>
  );
}



================================================
FILE: packages/openapi/src/ui/components/select.tsx
================================================
import * as SelectPrimitive from '@radix-ui/react-select';
import { Check, ChevronDown, ChevronUp } from 'lucide-react';
import React, { forwardRef } from 'react';
import { cn } from 'fumadocs-ui/utils/cn';

const Select = SelectPrimitive.Root;

const SelectGroup = SelectPrimitive.Group;

const SelectValue = SelectPrimitive.Value;

const SelectTrigger = forwardRef<
  React.ComponentRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      'flex items-center w-full rounded-md border p-2 gap-2 text-start text-[13px] text-fd-secondary-foreground bg-fd-secondary hover:bg-fd-accent focus:outline-none focus:ring focus:ring-fd-ring disabled:cursor-not-allowed disabled:opacity-50',
      className,
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="ms-auto size-3.5 text-fd-muted-foreground shrink-0" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

const SelectScrollUpButton = forwardRef<
  React.ComponentRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn('flex items-center justify-center py-1', className)}
    {...props}
  >
    <ChevronUp className="size-4" />
  </SelectPrimitive.ScrollUpButton>
));
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;

const SelectScrollDownButton = forwardRef<
  React.ComponentRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn('flex items-center justify-center py-1', className)}
    {...props}
  >
    <ChevronDown className="size-4" />
  </SelectPrimitive.ScrollDownButton>
));
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName;

const SelectContent = forwardRef<
  React.ComponentRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position, ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        'z-50 overflow-hidden rounded-lg border bg-fd-popover text-fd-popover-foreground shadow-md',
        className,
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport className="p-1">
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));
SelectContent.displayName = SelectPrimitive.Content.displayName;

const SelectLabel = forwardRef<
  React.ComponentRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn('py-1.5 pe-2 ps-6 text-sm font-semibold', className)}
    {...props}
  />
));
SelectLabel.displayName = SelectPrimitive.Label.displayName;

const SelectItem = forwardRef<
  React.ComponentRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      'flex select-none flex-row items-center rounded-md py-1.5 px-2 text-[13px] outline-none focus:bg-fd-accent focus:text-fd-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className,
    )}
    {...props}
  >
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    <SelectPrimitive.ItemIndicator className="ms-auto">
      <Check className="size-3.5 text-fd-primary" />
    </SelectPrimitive.ItemIndicator>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;

const SelectSeparator = forwardRef<
  React.ComponentRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn('my-1 h-px bg-fd-muted', className)}
    {...props}
  />
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
};



================================================
FILE: packages/openapi/src/ui/contexts/api.tsx
================================================
'use client';
import {
  createContext,
  type ReactNode,
  useContext,
  useEffect,
  useMemo,
  useState,
} from 'react';
import type { RenderContext, ServerObject } from '@/types';
import { defaultAdapters, type MediaAdapter } from '@/media/adapter';

export interface ApiProviderProps
  extends Omit<ApiContextType, 'mediaAdapters'> {
  /**
   * Base URL for API requests
   */
  defaultBaseUrl?: string;
  children?: ReactNode;
  mediaAdapters?: Record<string, MediaAdapter>;
}

export interface SelectedServer {
  url: string;
  variables: Record<string, string>;
}

interface ApiContextType {
  servers: ServerObject[];
  shikiOptions: RenderContext['shikiOptions'];
  mediaAdapters: Record<string, MediaAdapter>;
}

interface ServerSelectType {
  server: SelectedServer | null;
  setServer: (value: string) => void;
  setServerVariables: (value: Record<string, string>) => void;
}

const ApiContext = createContext<ApiContextType | null>(null);
const ServerSelectContext = createContext<ServerSelectType | null>(null);

export function useApiContext(): ApiContextType {
  const ctx = useContext(ApiContext);
  if (!ctx) throw new Error('Component must be used under <ApiProvider />');

  return ctx;
}

export function useServerSelectContext(): ServerSelectType {
  const ctx = useContext(ServerSelectContext);
  if (!ctx) throw new Error('Component must be used under <ApiProvider />');

  return ctx;
}

export function ApiProvider({
  defaultBaseUrl,
  children,
  servers,
  mediaAdapters,
  shikiOptions,
}: ApiProviderProps) {
  const [server, setServer] = useState<SelectedServer | null>(() => {
    const defaultItem = defaultBaseUrl
      ? servers.find((item) => item.url === defaultBaseUrl)
      : servers.at(0);

    return defaultItem
      ? {
          url: defaultItem.url,
          variables: getDefaultValues(defaultItem),
        }
      : null;
  });

  useEffect(() => {
    const cached = localStorage.getItem('apiBaseUrl');
    if (!cached) return;

    try {
      const obj = JSON.parse(cached);
      if (!obj || typeof obj !== 'object') return;

      setServer(obj);
    } catch {
      // ignore
    }
  }, []);

  return (
    <ApiContext.Provider
      value={useMemo(
        () => ({
          shikiOptions,
          mediaAdapters: {
            ...defaultAdapters,
            ...mediaAdapters,
          },
          servers,
        }),
        [mediaAdapters, servers, shikiOptions],
      )}
    >
      <ServerSelectContext.Provider
        value={useMemo(
          () => ({
            server,
            setServerVariables(variables) {
              setServer((prev) => {
                if (!prev) return null;

                const updated = { ...prev, variables };
                localStorage.setItem('apiBaseUrl', JSON.stringify(updated));
                return updated;
              });
            },
            setServer(value) {
              const obj = servers.find((item) => item.url === value);
              if (!obj) return;

              const result: SelectedServer = {
                url: value,
                variables: getDefaultValues(obj),
              };

              localStorage.setItem('apiBaseUrl', JSON.stringify(result));
              setServer(result);
            },
          }),
          [server, servers],
        )}
      >
        {children}
      </ServerSelectContext.Provider>
    </ApiContext.Provider>
  );
}

function getDefaultValues(server: ServerObject): Record<string, string> {
  return Object.fromEntries(
    Object.entries(server.variables ?? {}).map(([k, v]) => [k, v.default]),
  );
}



================================================
FILE: packages/openapi/src/ui/contexts/code-example.tsx
================================================
'use client';
import {
  createContext,
  type HTMLAttributes,
  type ReactNode,
  useContext,
  useEffect,
  useMemo,
  useRef,
  useState,
} from 'react';
import { useApiContext, useServerSelectContext } from '@/ui/contexts/api';
import { DynamicCodeBlock } from 'fumadocs-ui/components/dynamic-codeblock';
import type { CodeSample } from '@/render/operation';
import type { SamplesProps } from '@/render/renderer';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/ui/components/select';
import { useEffectEvent } from 'fumadocs-core/utils/use-effect-event';
import {
  joinURL,
  resolveRequestData,
  resolveServerUrl,
  withBase,
} from '@/utils/url';
import type { RawRequestData, RequestData } from '@/requests/_shared';
import { defaultSamples } from '@/requests';

type UpdateListener = (data: RawRequestData, encoded: RequestData) => void;

const CodeExampleContext = createContext<{
  route: string;
  examples: {
    key: string;
    data: RawRequestData;
    encoded: RequestData;
  }[];

  key: string;
  setKey: (key: string) => void;

  setData: (data: RawRequestData, encoded: RequestData) => void;

  addListener: (listener: UpdateListener) => void;
  removeListener: (listener: UpdateListener) => void;
} | null>(null);

export function CodeExampleProvider({
  route,
  examples,
  initialKey,
  children,
}: {
  route: string;
  examples: {
    key: string;
    data: RawRequestData;
    encoded: RequestData;
  }[];
  initialKey?: string;
  children: ReactNode;
}) {
  const [key, setKey] = useState(initialKey ?? examples[0].key);
  const listeners = useRef<UpdateListener[]>([]);

  const setData = useEffectEvent(
    (data: RawRequestData, encoded: RequestData) => {
      for (const example of examples) {
        if (example.key === key) {
          // persistent changes
          example.data = data;
          example.encoded = encoded;
          break;
        }
      }

      for (const listener of listeners.current) {
        listener(data, encoded);
      }
    },
  );

  const updateKey = useEffectEvent((newKey: string) => {
    const example = examples.find((example) => example.key === newKey);
    if (!example) return;

    setKey(newKey);
    for (const listener of listeners.current) {
      listener(example.data, example.encoded);
    }
  });

  const addListener = useEffectEvent((listener: UpdateListener) => {
    // initial call to listeners to ensure their data is the latest
    // this is necessary to avoid race conditions between `useEffect()`
    const example = examples.find((example) => example.key === key)!;
    listener(example.data, example.encoded);
    listeners.current.push(listener);
  });

  const removeListener = useEffectEvent((listener: UpdateListener) => {
    listeners.current = listeners.current.filter((item) => item !== listener);
  });

  return (
    <CodeExampleContext
      value={useMemo(
        () => ({
          key,
          route,
          setKey: updateKey,
          examples,
          setData,
          removeListener,
          addListener,
        }),
        [addListener, examples, key, removeListener, route, setData, updateKey],
      )}
    >
      {children}
    </CodeExampleContext>
  );
}

export function CodeExample(props: CodeSample) {
  const { shikiOptions, mediaAdapters } = useApiContext();
  const { examples, key, route, addListener, removeListener } =
    useContext(CodeExampleContext)!;
  const { server } = useServerSelectContext();
  const [data, setData] = useState(() => {
    return examples.find((example) => example.key === key)!.encoded;
  });

  const sample = props.source
    ? props
    : defaultSamples.find((item) => item.label === props.label);

  useEffect(() => {
    const listener: UpdateListener = (_, encoded) => setData(encoded);

    addListener(listener);
    return () => {
      removeListener(listener);
    };
  }, [addListener, removeListener]);

  const code = useMemo(() => {
    if (!sample?.source) return;
    if (typeof sample.source === 'string') return sample.source;

    return sample.source(
      joinURL(
        withBase(
          server ? resolveServerUrl(server.url, server.variables) : '/',
          typeof window !== 'undefined'
            ? window.location.origin
            : 'https://loading',
        ),
        resolveRequestData(route, data),
      ),
      data,
      {
        mediaAdapters,
      },
    );
  }, [mediaAdapters, sample, server, route, data]);

  if (!code || !sample) return null;

  return (
    <DynamicCodeBlock lang={sample.lang} code={code} options={shikiOptions} />
  );
}

export function CodeExampleSelector({ items }: SamplesProps) {
  const { key, setKey } = useContext(CodeExampleContext)!;
  const item = items.find((item) => item.value === key);

  return (
    <Select value={key} onValueChange={setKey}>
      <SelectTrigger className="not-prose mb-2">
        <SelectValue asChild>
          {item ? <SelectDisplay item={item} /> : null}
        </SelectValue>
      </SelectTrigger>
      <SelectContent>
        {items.map((item) => (
          <SelectItem key={item.value} value={item.value}>
            <SelectDisplay item={item} />
          </SelectItem>
        ))}
      </SelectContent>
    </Select>
  );
}

function SelectDisplay({
  item,
  ...props
}: HTMLAttributes<HTMLDivElement> & {
  item: SamplesProps['items'][number];
}) {
  return (
    <div {...props}>
      <span className="font-medium text-sm">{item.title}</span>
      <span className="text-fd-muted-foreground">{item.description}</span>
    </div>
  );
}

export function useRequestInitialData() {
  const { examples, key } = useContext(CodeExampleContext)!;

  return useMemo(
    () => examples.find((example) => example.key === key)!.data,
    [examples, key],
  );
}

export function useRequestDataUpdater() {
  const { setData } = useContext(CodeExampleContext)!;
  return { setData };
}



================================================
FILE: packages/openapi/src/utils/combine-schema.ts
================================================
import { type ParsedSchema } from '@/utils/schema';

/**
 * Combine multiple object schemas into one
 */
export function combineSchema(schema: ParsedSchema[]): ParsedSchema {
  let result: ParsedSchema = {};
  const types = new Set<string>();
  const title = new Set<string>();

  function add(s: ParsedSchema): void {
    if (typeof s === 'boolean') {
      result = s;
      return;
    }

    if (typeof result === 'boolean') return;

    if (s.title) title.add(s.title);
    if (s.type) {
      for (const v of Array.isArray(s.type) ? s.type : [s.type]) {
        types.add(v);
      }
    }

    for (const key of ['oneOf', 'required', 'enum'] as const) {
      if (!s[key]) continue;

      result[key] = [...s[key], ...(result[key] ?? [])];
    }

    for (const key of ['properties', 'patternProperties'] as const) {
      if (!s[key]) continue;

      result[key] ??= {};
      Object.assign(result[key], s[key]);
    }

    if (s.additionalProperties === true) {
      result.additionalProperties = true;
    } else if (
      s.additionalProperties &&
      typeof result.additionalProperties !== 'boolean'
    ) {
      result.additionalProperties ??= {};
      Object.assign(result.additionalProperties, s.additionalProperties);
    }

    (s.allOf ?? s.anyOf)?.forEach(add);
  }

  schema.forEach(add);

  if (title.size > 0) result.title = Array.from(title).join(' & ');
  if (types.size > 0) {
    const typeArr = Array.from(types.values());
    result.type = typeArr.length === 1 ? typeArr[0] : typeArr;
  }

  return result;
}



================================================
FILE: packages/openapi/src/utils/generate-document.ts
================================================
import { dump } from 'js-yaml';
import Slugger from 'github-slugger';
import type { TableOfContents } from 'fumadocs-core/server';
import type { StructuredData } from 'fumadocs-core/mdx-plugins';
import type {
  ApiPageProps,
  OperationItem,
  WebhookItem,
} from '@/render/api-page';
import type { GenerateOptions } from '@/generate';
import { idToTitle } from '@/utils/id-to-title';
import type { Document, TagObject } from '@/types';
import type { NoReference } from '@/utils/schema';
import type {
  DocumentInput,
  ProcessedDocument,
} from '@/utils/process-document';

interface StaticData {
  toc: TableOfContents;
  structuredData: StructuredData;
}

export type DocumentContext =
  | {
      type: 'tag';
      tag: TagObject | undefined;
    }
  | {
      type: 'operation';
    }
  | {
      type: 'file';
    };

export function generateDocument(
  input: DocumentInput,
  processed: ProcessedDocument,
  pageProps: Omit<ApiPageProps, 'document'>,
  options: GenerateOptions & {
    title: string;
    description?: string;
  },
  context: DocumentContext,
): string {
  const {
    frontmatter,
    includeDescription = false,
    addGeneratedComment = true,
  } = options;
  const out: string[] = [];
  const extend = frontmatter?.(options.title, options.description, context);
  const page: ApiPageProps = {
    ...pageProps,
    document: options.inlineDocument ? processed.downloaded : input,
  };

  let meta: object | undefined;
  if (page.operations?.length === 1) {
    const operation = page.operations[0];

    meta = {
      method: operation.method.toUpperCase(),
      route: operation.path,
    };
  }

  const data = generateStaticData(processed.document, page);

  const banner = dump({
    title: options.title,
    description: !includeDescription ? options.description : undefined,
    full: true,
    ...extend,
    _openapi: {
      ...meta,
      ...data,
      ...(extend?._openapi as object | undefined),
    },
  }).trim();
  if (banner.length > 0) out.push(`---\n${banner}\n---`);

  if (addGeneratedComment !== false) {
    let commentContent =
      'This file was generated by Fumadocs. Do not edit this file directly. Any changes should be made by running the generation command again.';

    if (typeof addGeneratedComment === 'string') {
      commentContent = addGeneratedComment;
    }

    commentContent = commentContent.replaceAll('/', '\\/');
    out.push(`{/* ${commentContent} */}`);
  }

  const imports = options.imports
    ?.map(
      (item) =>
        `import { ${item.names.join(', ')} } from ${JSON.stringify(item.from)};`,
    )
    .join('\n');

  if (imports) {
    out.push(imports);
  }

  if (options.description && includeDescription) out.push(options.description);

  out.push(pageContent(page));

  return out.join('\n\n');
}

function generateStaticData(
  dereferenced: NoReference<Document>,
  props: ApiPageProps,
): StaticData {
  const slugger = new Slugger();
  const toc: TableOfContents = [];
  const structuredData: StructuredData = { headings: [], contents: [] };

  for (const item of props.operations ?? []) {
    const operation = dereferenced.paths?.[item.path]?.[item.method];
    if (!operation) continue;

    if (props.hasHead && operation.operationId) {
      const title =
        operation.summary ??
        (operation.operationId ? idToTitle(operation.operationId) : item.path);
      const id = slugger.slug(title);

      toc.push({
        depth: 2,
        title,
        url: `#${id}`,
      });
      structuredData.headings.push({
        content: title,
        id,
      });
    }

    if (operation.description)
      structuredData.contents.push({
        content: operation.description,
        heading: structuredData.headings.at(-1)?.id,
      });
  }

  return { toc, structuredData };
}

function pageContent(props: ApiPageProps): string {
  // filter extra properties in props
  const operations: OperationItem[] = (props.operations ?? []).map((item) => ({
    path: item.path,
    method: item.method,
  }));
  const webhooks: WebhookItem[] = (props.webhooks ?? []).map((item) => ({
    name: item.name,
    method: item.method,
  }));

  return `<APIPage document={${JSON.stringify(props.document)}} operations={${JSON.stringify(operations)}} webhooks={${JSON.stringify(webhooks)}} hasHead={${JSON.stringify(props.hasHead)}} />`;
}



================================================
FILE: packages/openapi/src/utils/get-typescript-schema.ts
================================================
import { compile } from '@fumari/json-schema-to-typescript';
import type { DereferenceMap } from '@/types';

export async function getTypescriptSchema(
  schema: object,
  dereferenceMap: DereferenceMap,
): Promise<string | undefined> {
  try {
    const cloned = structuredClone({ schema, dereferenceMap });
    return await compile(cloned.schema, 'Response', {
      $refOptions: false,
      schemaToId: cloned.dereferenceMap,
      bannerComment: '',
      additionalProperties: false,
      enableConstEnums: false,
    });
  } catch (e) {
    console.warn('Failed to generate typescript schema:', e);
  }
}



================================================
FILE: packages/openapi/src/utils/id-to-title.ts
================================================
export function idToTitle(id: string): string {
  let result: string[] = [];

  for (const c of id) {
    if (result.length === 0) result.push(c.toLocaleUpperCase());
    // ignore the other parts surrounded with '.', like 'migrations.dev' -> 'dev'
    else if (c === '.') result = [];
    else if (/^[A-Z]$/.test(c) && result.at(-1) !== ' ') result.push(' ', c);
    else if (c === '-') result.push(' ');
    else result.push(c);
  }

  return result.join('');
}



================================================
FILE: packages/openapi/src/utils/input-to-string.ts
================================================
// @ts-expect-error -- nothing
import js2xml from 'xml-js/lib/js2xml';

/**
 * Convert input value to hardcoded string (with quotes)
 */
export function inputToString(
  value: unknown,
  format:
    | 'application/x-www-form-urlencoded'
    | 'application/x-ndjson'
    | 'application/json'
    | 'application/xml' = 'application/json',
): string {
  if (typeof value === 'string') return value;

  if (format === 'application/json') {
    return JSON.stringify(value, null, 2);
  }

  if (format === 'application/x-ndjson') {
    return Array.isArray(value)
      ? value.map((v) => JSON.stringify(v)).join('\n')
      : JSON.stringify(value, null, 2);
  }

  if (format === 'application/x-www-form-urlencoded') {
    const params = new URLSearchParams();
    if (typeof value !== 'object')
      throw new Error(
        `For url encoded data, \`value\` must be an object, but received: ${typeof value}`,
      );

    for (const key in value) {
      if (value[key as keyof object])
        params.set(key, String(value[key as keyof object]));
    }

    return params.toString();
  }

  return js2xml(value, { compact: true, spaces: 2 });
}

export function escapeString(str: string, delimit?: string): string {
  if (!delimit) return JSON.stringify(str);

  return `${delimit}${str.replaceAll(delimit, `\\${delimit}`)}${delimit}`;
}



================================================
FILE: packages/openapi/src/utils/process-document.ts
================================================
import type { DereferenceMap, Document } from '@/types';
import type { NoReference } from '@/utils/schema';
import type { OpenAPIV3, OpenAPIV3_1 } from 'openapi-types';
import { bundle, dereference, upgrade } from '@scalar/openapi-parser';
import { fetchUrls, readFiles } from '@scalar/openapi-parser/plugins';

export type DocumentInput = string | OpenAPIV3_1.Document | OpenAPIV3.Document;

export type ProcessedDocument = {
  document: NoReference<Document>;
  dereferenceMap: DereferenceMap;
  downloaded: Document;
};

const cache = new Map<string, ProcessedDocument>();

/**
 * process & reference input document to a Fumadocs OpenAPI compatible format
 */
export async function processDocument(
  input: DocumentInput,
  disableCache = false,
): Promise<ProcessedDocument> {
  const cached =
    !disableCache && typeof input === 'string' ? cache.get(input) : null;

  if (cached) return cached;

  const dereferenceMap: DereferenceMap = new Map();
  let document = await bundle(input as string, {
    plugins: [fetchUrls(), readFiles()],
    treeShake: false,
  });

  // upgrade
  document = upgrade(document).specification;
  const { schema: dereferenced } = await dereference(document, {
    onDereference({ ref, schema }) {
      dereferenceMap.set(schema, ref);
    },
  });

  const processed: ProcessedDocument = {
    document: dereferenced as NoReference<Document>,
    dereferenceMap,
    downloaded: document as Document,
  };

  if (!disableCache && typeof input === 'string') {
    cache.set(input, processed);
  }

  return processed;
}



================================================
FILE: packages/openapi/src/utils/schema-to-string.ts
================================================
import { type ResolvedSchema } from '@/utils/schema';
import type { ProcessedDocument } from '@/utils/process-document';

export function schemaToString(
  value: ResolvedSchema,
  ctx?: ProcessedDocument,
): string {
  function union(union: readonly ResolvedSchema[], sep: string) {
    const members = new Set();
    let nullable = false;

    for (const item of union) {
      const result = run(item);
      if (result === 'null') {
        nullable = true;
      } else if (result !== 'unknown') {
        members.add(result);
      }
    }

    const result = Array.from(members).join(sep);
    return nullable ? `${result} | null` : result;
  }

  function run(schema: ResolvedSchema): string {
    if (schema === true) return 'any';
    else if (schema === false) return 'never';

    if (schema.title) return schema.title;
    const referenceName = ctx?.dereferenceMap.get(schema);
    if (referenceName) return referenceName.split('/').at(-1)!;

    if (Array.isArray(schema.type)) {
      const members = new Set();
      const types = schema.type;
      for (const type of types) {
        schema.type = type;
        const str = run(schema);
        schema.type = types;

        if (str !== 'unknown') members.add(str);
      }

      return Array.from(members).join(' | ');
    }

    if (schema.type === 'array')
      return `array<${schema.items ? run(schema.items) : 'unknown'}>`;

    if (schema.oneOf) {
      return union(schema.oneOf, ' | ');
    }

    const combinedOf = schema.anyOf ?? schema.allOf;
    if (combinedOf) {
      return union(combinedOf, ' & ');
    }

    if (schema.not) return `not ${run(schema.not)}`;
    if (schema.type === 'string' && schema.format === 'binary') return 'file';

    if (schema.type && Array.isArray(schema.type)) {
      return schema.type.filter((v) => v !== 'null').join(' | ');
    }

    if (schema.type) {
      return schema.type as string;
    }

    return 'unknown';
  }

  return run(value);
}



================================================
FILE: packages/openapi/src/utils/schema.ts
================================================
import { type JSONSchema } from 'json-schema-typed/draft-2020-12';
import { ReferenceObject } from '@/types';

export type NoReference<T> = T extends (infer I)[]
  ? NoReference<I>[]
  : T extends ReferenceObject
    ? Exclude<T, ReferenceObject>
    : T extends object
      ? {
          [K in keyof T]: NoReference<T[K]>;
        }
      : T;

type NoReferenceJSONSchema<T> = T extends (infer I)[]
  ? NoReference<I>[]
  : T extends { $ref?: string }
    ? Omit<T, '$ref'>
    : T;

export type ParsedSchema = JSONSchema;
export type ResolvedSchema = NoReferenceJSONSchema<ParsedSchema>;

export function getPreferredType<B extends Record<string, unknown>>(
  body: B,
): keyof B | undefined {
  if ('application/json' in body) return 'application/json';

  return Object.keys(body)[0];
}



================================================
FILE: packages/openapi/src/utils/url.ts
================================================
import type { RequestData } from '@/requests/_shared';

export function joinURL(base: string, pathname: string): string {
  if (pathname.startsWith('/')) pathname = pathname.slice(1);
  if (base.endsWith('/')) base = base.slice(0, -1);

  if (pathname.length > 0) return base + '/' + pathname;
  else return base;
}

/**
 * @param url - URL (can be relative)
 * @param base - the base URL (must be absolute)
 */
export function withBase(url: string, base: string): string {
  if (!url.startsWith('https://') && !url.startsWith('http://')) {
    return joinURL(base, url);
  }

  return url;
}

export function resolveServerUrl(
  template: string,
  variables: Record<string, string>,
): string {
  for (const [key, value] of Object.entries(variables)) {
    template = template.replaceAll(`{${key}}`, value);
  }

  return template;
}

export function resolveRequestData(
  pathname: string,
  { path, query }: RequestData,
): string {
  for (const key in path) {
    const param = path[key];

    if (Array.isArray(param.value)) {
      pathname = pathname.replace(`{${key}}`, param.value.join('/'));
    } else {
      pathname = pathname.replace(`{${key}}`, param.value);
    }
  }

  const searchParams = new URLSearchParams();
  for (const key in query) {
    const param = query[key];

    if (Array.isArray(param.value)) {
      for (const item of param.value) {
        searchParams.append(key, item);
      }
    } else {
      searchParams.append(key, param.value);
    }
  }

  return searchParams.size > 0 ? `${pathname}?${searchParams}` : pathname;
}



================================================
FILE: packages/openapi/src/utils/use-query.ts
================================================
import { useMemo, useRef, useState } from 'react';

export function useQuery<I extends unknown[], T>(
  fn: (...input: I) => Promise<T>,
): {
  start: (...input: I) => void;
  data?: T;
  error?: unknown;
  isLoading: boolean;
} {
  const [loading, setLoading] = useState(false);
  const [data, setData] = useState<T>();
  const [error, setError] = useState<T>();
  const fnRef = useRef(fn);
  fnRef.current = fn;

  return useMemo(
    () => ({
      isLoading: loading,
      data,
      error,
      start(...input) {
        setLoading(true);

        void fnRef
          .current(...input)
          .then((res) => {
            setData(res);
            setError(undefined);
          })
          .catch((err) => {
            setData(undefined);
            setError(err);
          })
          .finally(() => {
            setLoading(false);
          });
      },
    }),
    [error, data, loading],
  );
}



================================================
FILE: packages/openapi/test/code-sample.test.ts
================================================
import { describe, expect, test } from 'vitest';
import * as Python from '@/requests/python';
import * as Go from '@/requests/go';
import * as Curl from '@/requests/curl';
import * as JS from '@/requests/javascript';
import type { RequestData } from '@/requests/_shared';
import { defaultAdapters } from '@/media/adapter';
import { resolveRequestData } from '@/utils/url';

describe('Code Sample Generators', () => {
  const data: RequestData = {
    path: {
      test: { value: 'hello_world' },
    },
    body: {
      id: 'id',
    },
    bodyMediaType: 'application/json',
    method: 'GET',
    cookie: {
      mode: { value: 'light' },
    },
    header: {
      authorization: { value: 'Bearer' },
    },
    query: {
      search: { value: 'ai' },
    },
  };
  const url = resolveRequestData('http://localhost:8080/{test}', data);

  const context = {
    mediaAdapters: defaultAdapters,
  };

  test(`Go`, async () => {
    await expect(Go.generator(url, data, context)).toMatchFileSnapshot(
      `./out/samples/1.go`,
    );
  });

  test(`Curl`, async () => {
    await expect(Curl.generator(url, data, context)).toMatchFileSnapshot(
      `./out/samples/1.bash`,
    );
  });

  test(`Python`, async () => {
    await expect(Python.generator(url, data, context)).toMatchFileSnapshot(
      `./out/samples/1.py`,
    );
  });

  test(`JavaScript`, async () => {
    await expect(JS.generator(url, data, context)).toMatchFileSnapshot(
      `./out/samples/1.js`,
    );
  });
});



================================================
FILE: packages/openapi/test/index.test.ts
================================================
import { fileURLToPath } from 'node:url';
import { join } from 'node:path';
import { afterEach, describe, expect, test, vi } from 'vitest';
import { idToTitle } from '@/utils/id-to-title';
import { generateFiles } from '../src';
import { processDocument } from '@/utils/process-document';
import { generateAll, generateTags } from '@/generate';

describe('Utilities', () => {
  test('Operation ID to Title', () => {
    expect(idToTitle('getKey')).toBe('Get Key');
    expect(idToTitle('requestId30')).toBe('Request Id30');
    expect(idToTitle('requestId-30')).toBe('Request Id 30');
  });
});

describe('Generate documents', () => {
  const cwd = fileURLToPath(new URL('./', import.meta.url));

  afterEach(() => {
    vi.restoreAllMocks();
  });

  test('Pet Store', async () => {
    const result = await generateAll(
      './fixtures/petstore.yaml',
      await processDocument(join(cwd, './fixtures/petstore.yaml')),
      {
        cwd,
      },
    );

    await expect(result).toMatchFileSnapshot('./out/petstore.mdx');
  });

  test('Museum', async () => {
    const tags = await generateTags(
      './fixtures/museum.yaml',
      await processDocument(join(cwd, './fixtures/museum.yaml')),
      {
        cwd,
      },
    );

    for (const tag of tags) {
      await expect(tag.content).toMatchFileSnapshot(
        `./out/museum/${tag.tag.toLowerCase()}.mdx`,
      );
    }
  });

  test('Unkey', async () => {
    const tags = await generateTags(
      './fixtures/unkey.json',
      await processDocument(join(cwd, './fixtures/unkey.json')),
      { cwd },
    );

    for (const tag of tags) {
      await expect(tag.content).toMatchFileSnapshot(
        `./out/unkey/${tag.tag.toLowerCase()}.mdx`,
      );
    }
  });

  vi.mock('node:fs/promises', async (importOriginal) => {
    return {
      ...(await importOriginal<typeof import('node:fs/promises')>()),
      mkdir: vi.fn().mockImplementation(() => {
        // do nothing
      }),
      writeFile: vi.fn().mockImplementation(() => {
        // do nothing
      }),
    };
  });

  test('Generate Files', async () => {
    await generateFiles({
      input: ['./fixtures/museum.yaml', './fixtures/petstore.yaml'],
      output: './out',
      per: 'file',
      cwd,
    });

    const fs = await import('node:fs/promises');

    expect(fs.writeFile).toBeCalledTimes(2);
    expect(fs.writeFile).toBeCalledWith(
      join(cwd, './out/museum.mdx'),
      expect.anything(),
    );
    expect(fs.writeFile).toBeCalledWith(
      join(cwd, './out/petstore.mdx'),
      expect.anything(),
    );

    expect(fs.mkdir).toBeCalledWith(join(cwd, './out'), expect.anything());
  });

  test('Generate Files - throws error when no input files found', async () => {
    await expect(
      generateFiles({
        input: ['./fixtures/non-existent-*.yaml'],
        output: './out',
        per: 'file',
        cwd,
      }),
    ).rejects.toThrow(
      'No input files found. Tried resolving: ./fixtures/non-existent-*.yaml',
    );

    await expect(
      generateFiles({
        input: [
          './fixtures/non-existent-1.yaml',
          './fixtures/non-existent-2.yaml',
        ],
        output: './out',
        per: 'file',
        cwd,
        name: {
          algorithm: 'v1',
        },
      }),
    ).rejects.toThrow(
      'No input files found. Tried resolving: ./fixtures/non-existent-1.yaml, ./fixtures/non-existent-2.yaml',
    );
  });

  test('Generate Files - groupBy tag per operation', async () => {
    await generateFiles({
      input: ['./fixtures/products.yaml'],
      output: './out',
      per: 'operation',
      groupBy: 'tag',
      name: {
        algorithm: 'v1',
      },
      cwd,
    });

    const fs = await import('node:fs/promises');

    expect(fs.writeFile).toBeCalledTimes(3);

    expect(fs.writeFile).toBeCalledWith(
      join(cwd, './out/products/products/productid.mdx'),
      expect.anything(),
    );

    expect(fs.writeFile).toBeCalledWith(
      join(cwd, './out/inventory/inventory/productid.mdx'),
      expect.anything(),
    );

    expect(fs.writeFile).toBeCalledWith(
      join(cwd, './out/products/inventory/productid.mdx'),
      expect.anything(),
    );
  });
});



================================================
FILE: packages/openapi/test/utils.test.ts
================================================
import { describe, expect, test } from 'vitest';
import { combineSchema } from '@/utils/combine-schema';

describe('Merge object schemas', () => {
  test('Merge single object', () => {
    const result = combineSchema([
      {
        type: 'object',
        properties: {
          test: {
            type: 'string',
            enum: ['one', 'two'],
          },
        },
      },
    ]);

    expect(result).toMatchInlineSnapshot(`
      {
        "properties": {
          "test": {
            "enum": [
              "one",
              "two",
            ],
            "type": "string",
          },
        },
        "type": "object",
      }
    `);
  });

  test('Merge multiple objects', () => {
    const result = combineSchema([
      {
        type: 'object',
        properties: {
          test: {
            type: 'string',
            enum: ['one', 'two'],
          },
        },
      },
      {
        type: 'object',
        properties: {
          hello: {
            type: 'number',
          },
        },
      },
    ]);

    expect(result).toMatchInlineSnapshot(`
      {
        "properties": {
          "hello": {
            "type": "number",
          },
          "test": {
            "enum": [
              "one",
              "two",
            ],
            "type": "string",
          },
        },
        "type": "object",
      }
    `);
  });

  test('Merge multiple objects: required', () => {
    const result = combineSchema([
      {
        type: 'object',
        properties: {
          test: {
            type: 'string',
            enum: ['one', 'two'],
          },
        },
      },
      {
        type: 'object',
        properties: {
          hello: {
            type: 'number',
          },
        },
        required: ['hello'],
      },
    ]);

    expect(result).toMatchInlineSnapshot(`
      {
        "properties": {
          "hello": {
            "type": "number",
          },
          "test": {
            "enum": [
              "one",
              "two",
            ],
            "type": "string",
          },
        },
        "required": [
          "hello",
        ],
        "type": "object",
      }
    `);
  });

  test('Merge multiple objects: additional properties', () => {
    const result = combineSchema([
      {
        type: 'object',
        properties: {
          test: {
            type: 'string',
            enum: ['one', 'two'],
          },
        },
        additionalProperties: true,
      },
      {
        type: 'object',
        additionalProperties: {
          type: 'string',
        },
      },
    ]);

    expect(result).toMatchInlineSnapshot(`
      {
        "additionalProperties": true,
        "properties": {
          "test": {
            "enum": [
              "one",
              "two",
            ],
            "type": "string",
          },
        },
        "type": "object",
      }
    `);
  });

  test('Merge multiple objects: `allOf`', () => {
    const result = combineSchema([
      {
        type: 'object',
        properties: {
          test: {
            type: 'string',
            enum: ['one', 'two'],
          },
        },
      },
      {
        allOf: [
          {
            type: 'object',
            properties: {
              hello: {
                type: 'number',
              },
            },
          },
          {
            type: 'object',
            properties: {
              world: {
                type: 'number',
              },
            },
          },
        ],
      },
    ]);

    expect(result).toMatchInlineSnapshot(`
      {
        "properties": {
          "hello": {
            "type": "number",
          },
          "test": {
            "enum": [
              "one",
              "two",
            ],
            "type": "string",
          },
          "world": {
            "type": "number",
          },
        },
        "type": "object",
      }
    `);
  });
});



================================================
FILE: packages/openapi/test/fixtures/museum.yaml
================================================
openapi: 3.1.0
info:
  title: Redocly Museum API
  description: An imaginary, but delightful Museum API for interacting with museum services and information. Built with love by Redocly.
  version: 1.0.0
  contact:
    email: team@redocly.com
    url: 'https://redocly.com/docs/cli/'
  license:
    name: MIT
    url: 'https://opensource.org/license/mit/ '
servers:
  - url: 'https://api.fake-museum-example.com/v1'
paths:
  /museum-hours:
    get:
      x-codeSamples:
        - lang: bash
          label: List all unwatered plants
          source: |
            planter list -u
      summary: Get museum hours
      description: Get upcoming museum operating hours
      operationId: getMuseumHours
      tags:
        - Operations
      parameters:
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationLimit'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMuseumHoursResponse'
              examples:
                default_example:
                  $ref: '#/components/examples/GetMuseumHoursResponseExample'
        '400':
          description: Bad request
        '404':
          description: Not found
  /special-events:
    post:
      summary: Create special events
      description: Creates a new special event for the museum.
      operationId: createSpecialEvent
      tags:
        - Events
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSpecialEventRequest'
            examples:
              default_example:
                $ref: '#/components/examples/CreateSpecialEventRequestExample'
              seconday_example:
                $ref: '#/components/examples/SecondaryCreateSpecialEventRequestExample'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecialEventResponse'
              examples:
                default_example:
                  $ref: '#/components/examples/CreateSpecialEventResponseExample'
        '400':
          description: Bad request
        '404':
          description: Not found
    get:
      summary: List special events
      description: Return a list of upcoming special events at the museum.
      operationId: listSpecialEvents
      tags:
        - Events
      parameters:
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationLimit'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSpecialEventsResponse'
              examples:
                default_example:
                  $ref: '#/components/examples/ListSpecialEventsResponseExample'
        '400':
          description: Bad request
        '404':
          description: Not found
  /special-events/{eventId}:
    get:
      summary: Get special event
      description: Get details about a special event.
      operationId: getSpecialEvent
      tags:
        - Events
      parameters:
        - $ref: '#/components/parameters/EventId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecialEventResponse'
              examples:
                default_example:
                  $ref: '#/components/examples/GetSpecialEventResponseExample'
        '400':
          description: Bad request
        '404':
          description: Not found
    patch:
      summary: Update special event
      description: Update the details of a special event
      operationId: updateSpecialEvent
      tags:
        - Events
      parameters:
        - $ref: '#/components/parameters/EventId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSpecialEventRequest'
            examples:
              default_example:
                $ref: '#/components/examples/UpdateSpecialEventRequestExample'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecialEventResponse'
              examples:
                default_example:
                  $ref: '#/components/examples/UpdateSpecialEventResponseExample'
        '400':
          description: Bad request
        '404':
          description: Not found
    delete:
      summary: Delete special event
      description: Delete a special event from the collection. Allows museum to cancel planned events.
      operationId: deleteSpecialEvent
      tags:
        - Events
      parameters:
        - $ref: '#/components/parameters/EventId'
      responses:
        '204':
          description: Success - no content
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  /tickets:
    post:
      summary: Buy museum tickets
      description: Purchase museum tickets for general entry or special events.
      operationId: buyMuseumTickets
      tags:
        - Tickets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuyMuseumTicketsRequest'
            examples:
              general_entry:
                $ref: '#/components/examples/BuyGeneralTicketsRequestExample'
              event_entry:
                $ref: '#/components/examples/BuyEventTicketsRequestExample'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuyMuseumTicketsResponse'
              examples:
                general_entry:
                  $ref: '#/components/examples/BuyGeneralTicketsResponseExample'
                event_entry:
                  $ref: '#/components/examples/BuyEventTicketsResponseExample'
        '400':
          description: Bad request
        '404':
          description: Not found
  /tickets/{ticketId}/qr:
    get:
      summary: Get ticket QR code
      description: Return an image of your ticket with scannable QR code. Used for event entry.
      operationId: getTicketCode
      tags:
        - Tickets
      parameters:
        - $ref: '#/components/parameters/TicketId'
      responses:
        '200':
          description: Scannable event ticket in image format
          content:
            image/png:
              schema:
                $ref: '#/components/schemas/GetTicketCodeResponse'
        '400':
          description: Bad request
        '404':
          description: Not found
components:
  schemas:
    TicketType:
      description: Type of ticket being purchased. Use `general` for regular museum entry and `event` for tickets to special events.
      type: string
      enum:
        - event
        - general
      example: event
    Date:
      type: string
      format: date
      example: 2023-10-29
    Email:
      description: Email address for ticket purchaser.
      type: string
      format: email
      example: museum-lover@example.com
    Phone:
      description: Phone number for the ticket purchaser (optional).
      type: string
      example: +1(234)-567-8910
    BuyMuseumTicketsRequest:
      description: Request payload used for purchasing museum tickets.
      type: object
      properties:
        ticketType:
          $ref: '#/components/schemas/TicketType'
        eventId:
          description: Unique identifier for a special event. Required if purchasing tickets for the museum's special events.
          $ref: '#/components/schemas/EventId'
        ticketDate:
          description: Date that the ticket is valid for.
          $ref: '#/components/schemas/Date'
        email:
          $ref: '#/components/schemas/Email'
        phone:
          $ref: '#/components/schemas/Phone'
      required:
        - ticketType
        - ticketDate
        - email
    TicketMessage:
      description: Confirmation message after a ticket purchase.
      type: string
      example: Museum general entry ticket purchased
    TicketId:
      description: Unique identifier for museum ticket. Generated when purchased.
      type: string
      format: uuid
      example: a54a57ca-36f8-421b-a6b4-2e8f26858a4c
    TicketConfirmation:
      description: Unique confirmation code used to verify ticket purchase.
      type: string
      example: ticket-event-a98c8f-7eb12
    BuyMuseumTicketsResponse:
      description: Details for a museum ticket after a successful purchase.
      type: object
      properties:
        message:
          $ref: '#/components/schemas/TicketMessage'
        eventName:
          $ref: '#/components/schemas/EventName'
        ticketId:
          $ref: '#/components/schemas/TicketId'
        ticketType:
          $ref: '#/components/schemas/TicketType'
        ticketDate:
          description: Date the ticket is valid for.
          $ref: '#/components/schemas/Date'
        confirmationCode:
          $ref: '#/components/schemas/TicketConfirmation'
      required:
        - message
        - ticketId
        - ticketType
        - ticketDate
        - confirmationCode
    GetTicketCodeResponse:
      description: An image of a ticket with a QR code used for museum or event entry.
      type: string
      format: binary
    GetMuseumHoursResponse:
      description: List of museum operating hours for consecutive days.
      type: array
      items:
        $ref: '#/components/schemas/MuseumDailyHours'
    MuseumDailyHours:
      description: Daily operating hours for the museum.
      type: object
      properties:
        date:
          description: Date the operating hours apply to.
          $ref: '#/components/schemas/Date'
          example: 02-02-2022
        timeOpen:
          type: string
          pattern: '^([01]\d|2[0-3]):?([0-5]\d)$'
          description: Time the museum opens on a specific date. Uses 24 hour time format (`HH:mm`).
          example: 09:00
        timeClose:
          description: Time the museum closes on a specific date. Uses 24 hour time format (`HH:mm`).
          type: string
          pattern: '^([01]\d|2[0-3]):?([0-5]\d)$'
          example: 18:00
      required:
        - date
        - timeOpen
        - timeClose
    EventId:
      description: Identifier for a special event.
      type: string
      format: uuid
      example: 3be6453c-03eb-4357-ae5a-984a0e574a54
    EventName:
      type: string
      description: Name of the special event
      example: Pirate Coding Workshop
    EventLocation:
      type: string
      description: Location where the special event is held
      example: Computer Room
    EventDescription:
      type: string
      description: Description of the special event
      example: Captain Blackbeard shares his love of the C...language. And possibly Arrrrr (R lang).
    EventDates:
      type: array
      items:
        $ref: '#/components/schemas/Date'
      description: List of planned dates for the special event
    EventPrice:
      description: Price of a ticket for the special event
      type: number
      format: float
      example: 25
    CreateSpecialEventRequest:
      description: Request payload for creating new special events at the museum.
      properties:
        name:
          $ref: '#/components/schemas/EventName'
        location:
          $ref: '#/components/schemas/EventLocation'
        eventDescription:
          $ref: '#/components/schemas/EventDescription'
        dates:
          $ref: '#/components/schemas/EventDates'
        price:
          $ref: '#/components/schemas/EventPrice'
      required:
        - name
        - location
        - eventDescription
        - dates
        - price
    UpdateSpecialEventRequest:
      description: Request payload for updating an existing special event. Only included fields are updated in the event.
      properties:
        name:
          $ref: '#/components/schemas/EventName'
        location:
          $ref: '#/components/schemas/EventLocation'
        eventDescription:
          $ref: '#/components/schemas/EventDescription'
        dates:
          $ref: '#/components/schemas/EventDates'
        price:
          $ref: '#/components/schemas/EventPrice'
    ListSpecialEventsResponse:
      description: A list of upcoming special events
      type: array
      items:
        $ref: '#/components/schemas/SpecialEventResponse'
    SpecialEventResponse:
      description: Information about a special event.
      properties:
        eventId:
          $ref: '#/components/schemas/EventId'
        name:
          $ref: '#/components/schemas/EventName'
        location:
          $ref: '#/components/schemas/EventLocation'
        eventDescription:
          $ref: '#/components/schemas/EventDescription'
        dates:
          $ref: '#/components/schemas/EventDates'
        price:
          $ref: '#/components/schemas/EventPrice'
      required:
        - eventId
        - name
        - location
        - eventDescription
        - dates
        - price
  securitySchemes:
    MuseumPlaceholderAuth:
      type: http
      scheme: basic
  examples:
    BuyGeneralTicketsRequestExample:
      summary: General entry ticket
      value:
        ticketType: general
        ticketDate: 2023-09-07
        email: todd@example.com
    BuyEventTicketsRequestExample:
      summary: Special event ticket
      value:
        ticketType: general
        eventId: dad4bce8-f5cb-4078-a211-995864315e39
        ticketDate: 2023-09-05
        email: todd@example.com
    BuyGeneralTicketsResponseExample:
      summary: General entry ticket
      value:
        message: Museum general entry ticket purchased
        ticketId: 382c0820-0530-4f4b-99af-13811ad0f17a
        ticketType: general
        ticketDate: 2023-09-07
        confirmationCode: ticket-general-e5e5c6-dce78
    BuyEventTicketsResponseExample:
      summary: Special event ticket
      value:
        message: Museum special event ticket purchased
        ticketId: b811f723-17b2-44f7-8952-24b03e43d8a9
        eventName: Mermaid Treasure Identification and Analysis
        ticketType: event
        ticketDate: 2023-09-05
        confirmationCode: ticket-event-9c55eg-8v82a
    CreateSpecialEventRequestExample:
      summary: Create special event
      description: Create a special event for the museum.
      value:
        name: Mermaid Treasure Identification and Analysis
        location: Under the seaaa 🦀 🎶 🌊.
        eventDescription: Join us as we review and classify a rare collection of 20 thingamabobs, gadgets, gizmos, whoosits, and whatsits, kindly donated by Ariel.
        dates:
          - 2023-09-05
          - 2023-09-08
        price: 0
    SecondaryCreateSpecialEventRequestExample:
      summary: Create special event with price
      description: Create a special event with a price.
      value:
        name: Mermaid Treasure Identification and Analysis
        location: Under the seaaa 🦀 🎶 🌊.
        eventDescription: Join us as we review and classify a rare collection of 20 thingamabobs, gadgets, gizmos, whoosits, and whatsits, kindly donated by Ariel.
        dates:
          - 2023-09-05
          - 2023-09-08
        price: 1234
    CreateSpecialEventResponseExample:
      summary: Special event created
      value:
        eventId: dad4bce8-f5cb-4078-a211-995864315e39
        name: Mermaid Treasure Identification and Analysis
        location: Under the seaaa 🦀 🎶 🌊.
        eventDescription: Join us as we review and classify a rare collection of 20 thingamabobs, gadgets, gizmos, whoosits, and whatsits, kindly donated by Ariel.
        dates:
          - 2023-09-05
          - 2023-09-08
        price: 30
    GetSpecialEventResponseExample:
      summary: Get special event
      value:
        eventId: 6744a0da-4121-49cd-8479-f8cc20526495
        name: Time Traveler Tea Party
        location: Temporal Tearoom
        eventDescription: Sip tea with important historical figures.
        dates:
          - 2023-11-18
          - 2023-11-25
          - 2023-12-02
        price: 60
    ListSpecialEventsResponseExample:
      summary: List of special events
      value:
        - eventId: f3e0e76e-e4a8-466e-ab9c-ae36c15b8e97
          name: Sasquatch Ballet
          location: Seattle... probably
          eventDescription: They're big, they're hairy, but they're also graceful. Come learn how the biggest feet can have the lightest touch.
          dates:
            - 2023-12-15
            - 2023-12-22
          price: 40
        - eventId: 2f14374a-9c65-4ee5-94b7-fba66d893483
          name: Solar Telescope Demonstration
          location: Far from the sun.
          eventDescription: Look at the sun without going blind!
          dates:
            - 2023-09-07
            - 2023-09-14
          price: 50
        - eventId: 6aaa61ba-b2aa-4868-b803-603dbbf7bfdb
          name: Cook like a Caveman
          location: Fire Pit on East side
          eventDescription: Learn to cook on an open flame.
          dates:
            - 2023-11-10
            - 2023-11-17
            - 2023-11-24
          price: 5
        - eventId: 602b75e1-5696-4ab8-8c7a-f9e13580f910
          name: Underwater Basket Weaving
          location: Rec Center Pool next door.
          eventDescription: Learn to weave baskets underwater.
          dates:
            - 2023-09-12
            - 2023-09-15
          price: 15
        - eventId: dad4bce8-f5cb-4078-a211-995864315e39
          name: Mermaid Treasure Identification and Analysis
          location: Room Sea-12
          eventDescription: Join us as we review and classify a rare collection of 20 thingamabobs, gadgets, gizmos, whoosits, and whatsits — kindly donated by Ariel.
          dates:
            - 2023-09-05
            - 2023-09-08
          price: 30
        - eventId: 6744a0da-4121-49cd-8479-f8cc20526495
          name: Time Traveler Tea Party
          location: Temporal Tearoom
          eventDescription: Sip tea with important historical figures.
          dates:
            - 2023-11-18
            - 2023-11-25
            - 2023-12-02
          price: 60
        - eventId: 3be6453c-03eb-4357-ae5a-984a0e574a54
          name: Pirate Coding Workshop
          location: Computer Room
          eventDescription: Captain Blackbeard shares his love of the C...language. And possibly Arrrrr (R lang).
          dates:
            - 2023-10-29
            - 2023-10-30
            - 2023-10-31
          price: 45
        - eventId: 9d90d29a-2af5-4206-97d9-9ea9ceadcb78
          name: Llama Street Art Through the Ages
          location: Auditorium
          eventDescription: Llama street art?! Alpaca my bags -- let's go!
          dates:
            - 2023-10-29
            - 2023-10-30
            - 2023-10-31
          price: 45
        - eventId: a3c7b2c4-b5fb-4ef7-9322-00a919864957
          name: The Great Parrot Debate
          location: Outdoor Amphitheatre
          eventDescription: See leading parrot minds discuss important geopolitical issues.
          dates:
            - 2023-11-03
            - 2023-11-10
          price: 35
        - eventId: b92d46b7-4c5d-422b-87a5-287767e26f29
          name: Eat a Bunch of Corn
          location: Cafeteria
          eventDescription: We accidentally bought too much corn. Please come eat it.
          dates:
            - 2023-11-10
            - 2023-11-17
            - 2023-11-24
          price: 5
    UpdateSpecialEventRequestExample:
      summary: Update special event request
      value:
        location: On the beach.
        price: 15
    UpdateSpecialEventResponseExample:
      summary: Update special event
      value:
        eventId: dad4bce8-f5cb-4078-a211-995864315e39
        name: Mermaid Treasure Identification and Analysis
        location: On the beach.
        eventDescription: Join us as we review and classify a rare collection of 20 thingamabobs, gadgets, gizmos, whoosits, and whatsits, kindly donated by Ariel.
        dates:
          - 2023-09-05
          - 2023-09-08
        price: 15
    GetMuseumHoursResponseExample:
      summary: Get hours response
      value:
        - date: '2023-09-11'
          timeOpen: '09:00'
          timeClose: '18:00'
        - date: '2023-09-12'
          timeOpen: '09:00'
          timeClose: '18:00'
        - date: '2023-09-13'
          timeOpen: '09:00'
          timeClose: '18:00'
        - date: '2023-09-14'
          timeOpen: '09:00'
          timeClose: '18:00'
        - date: '2023-09-15'
          timeOpen: '10:00'
          timeClose: '16:00'
        - date: '2023-09-18'
          timeOpen: '09:00'
          timeClose: '18:00'
        - date: '2023-09-19'
          timeOpen: '09:00'
          timeClose: '18:00'
        - date: '2023-09-20'
          timeOpen: '09:00'
          timeClose: '18:00'
        - date: '2023-09-21'
          timeOpen: '09:00'
          timeClose: '18:00'
        - date: '2023-09-22'
          timeOpen: '10:00'
          timeClose: '16:00'
  parameters:
    PaginationPage:
      name: page
      in: query
      description: The page number to retrieve.
      schema:
        type: integer
        default: 1
        example: 2
    PaginationLimit:
      name: limit
      in: query
      description: The number of days per page.
      schema:
        type: integer
        default: 10
        maximum: 30
        example: 15
    EventId:
      name: eventId
      in: path
      description: An identifier for a special event.
      required: true
      schema:
        type: string
        format: uuid
        example: dad4bce8-f5cb-4078-a211-995864315e39
    StartDate:
      name: startDate
      in: query
      description: The starting date to retrieve future operating hours from. Defaults to today's date.
      schema:
        type: string
        format: date
        example: 2023-02-23
    EndDate:
      name: endDate
      in: query
      description: The end of a date range to retrieve special events for. Defaults to 7 days after `startDate`.
      schema:
        type: string
        format: date
        example: 2023-04-18
    TicketId:
      name: ticketId
      in: path
      description: An identifier for a ticket to a museum event. Used to generate ticket image.
      required: true
      schema:
        type: string
        format: uuid
        example: a54a57ca-36f8-421b-a6b4-2e8f26858a4c
tags:
  - name: Operations
    description: Operational information about the museum.
  - name: Events
    description: Special events hosted by the Museum
  - name: Tickets
    description: Museum tickets for general entrance or special events.
security:
  - MuseumPlaceholderAuth: []



================================================
FILE: packages/openapi/test/fixtures/petstore.yaml
================================================
openapi: '3.0.0'
info:
  version: 1.0.0
  title: Swagger Petstore
  license:
    name: MIT
servers:
  - url: http://petstore.swagger.io/v1
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            maximum: 100
            format: int32
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pets'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a pet
      operationId: createPets
      tags:
        - pets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Pet:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Pets:
      type: array
      maxItems: 100
      items:
        $ref: '#/components/schemas/Pet'
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string



================================================
FILE: packages/openapi/test/fixtures/products.yaml
================================================
openapi: 3.0.3
info:
  title: Inventory/Product API
  description: A minimal test fixture for Inventory and Product operations.
  version: 1.0.0

tags:
  - name: Products
    description: Operations related to products.
  - name: Inventory
    description: Operations related to inventory.

paths:
  /products/{productId}:
    get:
      summary: Get product details
      description: Retrieve details of a product by its ID.
      operationId: getProductDetails
      tags:
        - Products
      parameters:
        - name: productId
          in: path
          required: true
          description: ID of the product to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Successful response with product details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Product ID
                  price:
                    type: number
                    description: Price of the product
        '404':
          description: Product not found

  /inventory/{productId}:
    get:
      summary: Get product inventory
      description: Retrieve inventory details for a specific product.
      operationId: getInventoryForProduct
      tags:
        - Inventory
        - Products
      parameters:
        - name: productId
          in: path
          required: true
          description: ID of the product to retrieve inventory information
          schema:
            type: string
      responses:
        '200':
          description: Successful response with inventory details
          content:
            application/json:
              schema:
                type: object
                properties:
                  productId:
                    type: string
                    description: Product ID
        '404':
          description: Product not found



================================================
FILE: packages/openapi/test/fixtures/unkey.json
================================================
{
  "openapi": "3.0.0",
  "info": {
    "title": "Unkey Api",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.unkey.dev",
      "description": "Production"
    }
  ],
  "components": {
    "securitySchemes": {
      "rootKey": {
        "bearerFormat": "root key",
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "ErrBadRequest": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "enum": ["BAD_REQUEST"],
                "description": "A machine readable error code.",
                "example": "BAD_REQUEST"
              },
              "docs": {
                "type": "string",
                "description": "A link to our documentation with more details about this error code",
                "example": "https://unkey.dev/docs/api-reference/errors/code/BAD_REQUEST"
              },
              "message": {
                "type": "string",
                "description": "A human readable explanation of what went wrong"
              },
              "requestId": {
                "type": "string",
                "description": "Please always include the requestId in your error report",
                "example": "req_1234"
              }
            },
            "required": ["code", "docs", "message", "requestId"]
          }
        },
        "required": ["error"]
      },
      "ErrUnauthorized": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "enum": ["UNAUTHORIZED"],
                "description": "A machine readable error code.",
                "example": "UNAUTHORIZED"
              },
              "docs": {
                "type": "string",
                "description": "A link to our documentation with more details about this error code",
                "example": "https://unkey.dev/docs/api-reference/errors/code/UNAUTHORIZED"
              },
              "message": {
                "type": "string",
                "description": "A human readable explanation of what went wrong"
              },
              "requestId": {
                "type": "string",
                "description": "Please always include the requestId in your error report",
                "example": "req_1234"
              }
            },
            "required": ["code", "docs", "message", "requestId"]
          }
        },
        "required": ["error"]
      },
      "Butler_API_Entities_UserPrivate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "login": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string"
          },
          "given_name": {
            "type": "string"
          },
          "family_name": {
            "type": "string"
          },
          "picture": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "supporter": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "access_token": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "projects": {
            "$ref": "#/components/schemas/Butler_API_Entities_Project"
          }
        },
        "description": "Butler_API_Entities_UserPrivate model"
      },
      "Butler_API_Entities_Project": {
        "type": "object",
        "properties": {
          "slug": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "parent_project": {
            "$ref": "#/components/schemas/Butler_API_Entities_Project"
          },
          "name": {
            "type": "string",
            "description": "Project Name"
          },
          "description": {
            "type": "string",
            "description": "Project Description"
          },
          "repository_id": {
            "type": "string",
            "description": "Repository"
          },
          "code_repository_id": {
            "type": "string",
            "description": "Code Repository ID"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "description": "Butler_API_Entities_Project model"
      },
      "ErrForbidden": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "enum": ["FORBIDDEN"],
                "description": "A machine readable error code.",
                "example": "FORBIDDEN"
              },
              "docs": {
                "type": "string",
                "description": "A link to our documentation with more details about this error code",
                "example": "https://unkey.dev/docs/api-reference/errors/code/FORBIDDEN"
              },
              "message": {
                "type": "string",
                "description": "A human readable explanation of what went wrong"
              },
              "requestId": {
                "type": "string",
                "description": "Please always include the requestId in your error report",
                "example": "req_1234"
              }
            },
            "required": ["code", "docs", "message", "requestId"]
          }
        },
        "required": ["error"]
      },
      "ErrNotFound": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "enum": ["NOT_FOUND"],
                "description": "A machine readable error code.",
                "example": "NOT_FOUND"
              },
              "docs": {
                "type": "string",
                "description": "A link to our documentation with more details about this error code",
                "example": "https://unkey.dev/docs/api-reference/errors/code/NOT_FOUND"
              },
              "message": {
                "type": "string",
                "description": "A human readable explanation of what went wrong"
              },
              "requestId": {
                "type": "string",
                "description": "Please always include the requestId in your error report",
                "example": "req_1234"
              }
            },
            "required": ["code", "docs", "message", "requestId"]
          }
        },
        "required": ["error"]
      },
      "ErrConflict": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "enum": ["CONFLICT"],
                "description": "A machine readable error code.",
                "example": "CONFLICT"
              },
              "docs": {
                "type": "string",
                "description": "A link to our documentation with more details about this error code",
                "example": "https://unkey.dev/docs/api-reference/errors/code/CONFLICT"
              },
              "message": {
                "type": "string",
                "description": "A human readable explanation of what went wrong"
              },
              "requestId": {
                "type": "string",
                "description": "Please always include the requestId in your error report",
                "example": "req_1234"
              }
            },
            "required": ["code", "docs", "message", "requestId"]
          }
        },
        "required": ["error"]
      },
      "ErrTooManyRequests": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "enum": ["TOO_MANY_REQUESTS"],
                "description": "A machine readable error code.",
                "example": "TOO_MANY_REQUESTS"
              },
              "docs": {
                "type": "string",
                "description": "A link to our documentation with more details about this error code",
                "example": "https://unkey.dev/docs/api-reference/errors/code/TOO_MANY_REQUESTS"
              },
              "message": {
                "type": "string",
                "description": "A human readable explanation of what went wrong"
              },
              "requestId": {
                "type": "string",
                "description": "Please always include the requestId in your error report",
                "example": "req_1234"
              }
            },
            "required": ["code", "docs", "message", "requestId"]
          }
        },
        "required": ["error"]
      },
      "ErrInternalServerError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "enum": ["INTERNAL_SERVER_ERROR"],
                "description": "A machine readable error code.",
                "example": "INTERNAL_SERVER_ERROR"
              },
              "docs": {
                "type": "string",
                "description": "A link to our documentation with more details about this error code",
                "example": "https://unkey.dev/docs/api-reference/errors/code/INTERNAL_SERVER_ERROR"
              },
              "message": {
                "type": "string",
                "description": "A human readable explanation of what went wrong"
              },
              "requestId": {
                "type": "string",
                "description": "Please always include the requestId in your error report",
                "example": "req_1234"
              }
            },
            "required": ["code", "docs", "message", "requestId"]
          }
        },
        "required": ["error"]
      },
      "Key": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the key",
            "example": "key_1234"
          },
          "start": {
            "type": "string",
            "description": "The first few characters of the key to visually identify it",
            "example": "sk_5j1"
          },
          "workspaceId": {
            "type": "string",
            "description": "The id of the workspace that owns the key",
            "example": "ws_1234"
          },
          "apiId": {
            "type": "string",
            "description": "The id of the api that this key is for",
            "example": "api_1234"
          },
          "name": {
            "type": "string",
            "description": "The name of the key, give keys a name to easily identify their purpose",
            "example": "Customer X"
          },
          "ownerId": {
            "type": "string",
            "description": "The id of the tenant associated with this key. Use whatever reference you have in your system to identify the tenant. When verifying the key, we will send this field back to you, so you know who is accessing your API.",
            "example": "user_123"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Any additional metadata you want to store with the key",
            "example": {
              "roles": ["admin", "user"],
              "stripeCustomerId": "cus_1234"
            }
          },
          "createdAt": {
            "type": "number",
            "description": "The unix timestamp in milliseconds when the key was created",
            "example": 0
          },
          "deletedAt": {
            "type": "number",
            "description": "The unix timestamp in milliseconds when the key was deleted. We don't delete the key outright, you can restore it later.",
            "example": 0
          },
          "expires": {
            "type": "number",
            "description": "The unix timestamp in milliseconds when the key will expire. If this field is null or undefined, the key is not expiring.",
            "example": 0
          },
          "remaining": {
            "type": "number",
            "description": "The number of requests that can be made with this key before it becomes invalid. If this field is null or undefined, the key has no request limit.",
            "example": 1000
          },
          "refill": {
            "type": "object",
            "properties": {
              "interval": {
                "type": "string",
                "enum": ["daily", "monthly"],
                "description": "Determines the rate at which verifications will be refilled.",
                "example": "daily"
              },
              "amount": {
                "type": "integer",
                "description": "Resets `remaining` to this value every interval.",
                "example": 100
              },
              "lastRefillAt": {
                "type": "number",
                "description": "The unix timestamp in miliseconds when the key was last refilled.",
                "example": 100
              }
            },
            "required": ["interval", "amount"],
            "description": "Unkey allows you to refill remaining verifications on a key on a regular interval.",
            "example": {
              "interval": "daily",
              "amount": 10
            }
          },
          "ratelimit": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["fast", "consistent"],
                "default": "fast",
                "description": "Fast ratelimiting doesn't add latency, while consistent ratelimiting is more accurate.",
                "externalDocs": {
                  "description": "Learn more",
                  "url": "https://unkey.dev/docs/features/ratelimiting"
                }
              },
              "limit": {
                "type": "integer",
                "minimum": 1,
                "description": "The total amount of burstable requests."
              },
              "refillRate": {
                "type": "integer",
                "minimum": 1,
                "description": "How many tokens to refill during each refillInterval."
              },
              "refillInterval": {
                "type": "integer",
                "minimum": 1,
                "description": "Determines the speed at which tokens are refilled, in milliseconds."
              }
            },
            "required": ["type", "limit", "refillRate", "refillInterval"],
            "description": "Unkey comes with per-key ratelimiting out of the box.",
            "example": {
              "type": "fast",
              "limit": 10,
              "refillRate": 1,
              "refillInterval": 60
            }
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "All roles this key belongs to",
            "example": ["admin", "finance"]
          },
          "enabled": {
            "type": "boolean",
            "description": "Sets if key is enabled or disabled. Disabled keys are not valid.",
            "example": true
          }
        },
        "required": ["id", "start", "workspaceId"]
      },
      "V1KeysVerifyKeyResponse": {
        "type": "object",
        "properties": {
          "keyId": {
            "type": "string",
            "description": "The id of the key",
            "example": "key_1234"
          },
          "valid": {
            "type": "boolean",
            "description": "Whether the key is valid or not.\nA key could be invalid for a number of reasons, for example if it has expired, has no more verifications left or if it has been deleted.",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "The name of the key, give keys a name to easily identifiy their purpose",
            "example": "Customer X"
          },
          "ownerId": {
            "type": "string",
            "description": "The id of the tenant associated with this key. Use whatever reference you have in your system to identify the tenant. When verifying the key, we will send this field back to you, so you know who is accessing your API.",
            "example": "user_123"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Any additional metadata you want to store with the key",
            "example": {
              "roles": ["admin", "user"],
              "stripeCustomerId": "cus_1234"
            }
          },
          "expires": {
            "type": "number",
            "description": "The unix timestamp in milliseconds when the key will expire. If this field is null or undefined, the key is not expiring.",
            "example": 123
          },
          "ratelimit": {
            "type": "object",
            "properties": {
              "limit": {
                "type": "number",
                "description": "Maximum number of requests that can be made inside a window",
                "example": 10
              },
              "remaining": {
                "type": "number",
                "description": "Remaining requests after this verification",
                "example": 9
              },
              "reset": {
                "type": "number",
                "description": "Unix timestamp in milliseconds when the ratelimit will reset",
                "example": 3600000
              }
            },
            "required": ["limit", "remaining", "reset"],
            "description": "The ratelimit configuration for this key. If this field is null or undefined, the key has no ratelimit.",
            "example": {
              "limit": 10,
              "remaining": 9,
              "reset": 3600000
            }
          },
          "remaining": {
            "type": "number",
            "description": "The number of requests that can be made with this key before it becomes invalid. If this field is null or undefined, the key has no request limit.",
            "example": 1000
          },
          "code": {
            "type": "string",
            "enum": [
              "NOT_FOUND",
              "FORBIDDEN",
              "USAGE_EXCEEDED",
              "RATE_LIMITED",
              "UNAUTHORIZED",
              "DISABLED",
              "INSUFFICIENT_PERMISSIONS"
            ],
            "description": "If the key is invalid this field will be set to the reason why it is invalid.\nPossible values are:\n- NOT_FOUND: the key does not exist or has expired\n- FORBIDDEN: the key is not allowed to access the api\n- USAGE_EXCEEDED: the key has exceeded its request limit\n- RATE_LIMITED: the key has been ratelimited\n- UNAUTHORIZED: the key is not authorized\n- DISABLED: the key is disabled\n- INSUFFICIENT_PERMISSIONS: you do not have the required permissions to perform this action\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Sets the key to be enabled or disabled. Disabled keys will not verify."
          }
        },
        "required": ["valid"]
      },
      "V1KeysVerifyKeyRequest": {
        "type": "object",
        "properties": {
          "apiId": {
            "type": "string",
            "description": "The id of the api where the key belongs to. This is optional for now but will be required soon.\nThe key will be verified against the api's configuration. If the key does not belong to the api, the verification will fail.",
            "example": "api_1234"
          },
          "key": {
            "type": "string",
            "minLength": 1,
            "description": "The key to verify",
            "example": "sk_1234"
          }
        },
        "required": ["key"]
      }
    },
    "parameters": {}
  },
  "paths": {
    "/v1/liveness": {
      "get": {
        "tags": ["liveness"],
        "operationId": "checkLiveness",
        "responses": {
          "200": {
            "description": "The configured services and their status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "The status of the server"
                    },
                    "services": {
                      "type": "object",
                      "properties": {
                        "metrics": {
                          "type": "string",
                          "description": "The name of the connected metrics service",
                          "example": "AxiomMetrics"
                        },
                        "logger": {
                          "type": "string",
                          "description": "The name of the connected logger service",
                          "example": "AxiomLogger or ConsoleLogger"
                        },
                        "ratelimit": {
                          "type": "string",
                          "description": "The name of the connected ratelimit service"
                        },
                        "usagelimit": {
                          "type": "string",
                          "description": "The name of the connected usagelimit service"
                        },
                        "analytics": {
                          "type": "string",
                          "description": "The name of the connected analytics service"
                        }
                      },
                      "required": [
                        "metrics",
                        "logger",
                        "ratelimit",
                        "usagelimit",
                        "analytics"
                      ]
                    }
                  },
                  "required": ["status", "services"]
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Although the HTTP standard specifies \"unauthorized\", semantically this response means \"unauthenticated\". That is, the client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "This response is sent when a request conflicts with the current state of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time (\"rate limiting\")",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrTooManyRequests"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it does not know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/keys.getKey": {
      "get": {
        "operationId": "getKey",
        "tags": ["keys"],
        "security": [
          {
            "rootKey": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the key to fetch",
              "example": "key_1234"
            },
            "required": true,
            "name": "keyId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "The configuration for a single key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Key"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Although the HTTP standard specifies \"unauthorized\", semantically this response means \"unauthenticated\". That is, the client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "This response is sent when a request conflicts with the current state of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time (\"rate limiting\")",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrTooManyRequests"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it does not know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/keys.deleteKey": {
      "post": {
        "operationId": "deleteKey",
        "tags": ["keys"],
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "keyId": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The id of the key to revoke",
                    "example": "key_1234"
                  }
                },
                "required": ["keyId"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The key was successfully revoked, it may take up to 30s for this to take effect in all regions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Although the HTTP standard specifies \"unauthorized\", semantically this response means \"unauthenticated\". That is, the client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "This response is sent when a request conflicts with the current state of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time (\"rate limiting\")",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrTooManyRequests"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it does not know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/keys.createKey": {
      "post": {
        "operationId": "createKey",
        "tags": ["keys"],
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "apiId": {
                    "type": "string",
                    "description": "Choose an `API` where this key should be created.",
                    "example": "api_123"
                  },
                  "prefix": {
                    "type": "string",
                    "maxLength": 8,
                    "description": "To make it easier for your users to understand which product an api key belongs to, you can add prefix them.\n\nFor example Stripe famously prefixes their customer ids with cus_ or their api keys with sk_live_.\n\nThe underscore is automatically added if you are defining a prefix, for example: \"prefix\": \"abc\" will result in a key like abc_xxxxxxxxx\n"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name for your Key. This is not customer facing.",
                    "example": "my key"
                  },
                  "byteLength": {
                    "type": "integer",
                    "minimum": 16,
                    "maximum": 255,
                    "default": 16,
                    "description": "The byte length used to generate your key determines its entropy as well as its length. Higher is better, but keys become longer and more annoying to handle. The default is 16 bytes, or 2^^128 possible combinations."
                  },
                  "ownerId": {
                    "type": "string",
                    "description": "Your user’s Id. This will provide a link between Unkey and your customer record.\nWhen validating a key, we will return this back to you, so you can clearly identify your user from their api key.",
                    "example": "team_123"
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": {
                      "nullable": true
                    },
                    "description": "This is a place for dynamic meta data, anything that feels useful for you should go here",
                    "example": {
                      "billingTier": "PRO",
                      "trialEnds": "2023-06-16T17:16:37.161Z"
                    }
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "description": "A list of roles that this key should have. New roles will be created if they don't exist yet.",
                    "example": ["admin", "finance"]
                  },
                  "expires": {
                    "type": "integer",
                    "description": "You can auto expire keys by providing a unix timestamp in milliseconds. Once Keys expire they will automatically be disabled and are no longer valid unless you enable them again.",
                    "example": 1623869797161
                  },
                  "remaining": {
                    "type": "integer",
                    "description": "You can limit the number of requests a key can make. Once a key reaches 0 remaining requests, it will automatically be disabled and is no longer valid unless you update it.",
                    "example": 1000,
                    "externalDocs": {
                      "description": "Learn more",
                      "url": "https://unkey.dev/docs/features/remaining"
                    }
                  },
                  "refill": {
                    "type": "object",
                    "properties": {
                      "interval": {
                        "type": "string",
                        "enum": ["daily", "monthly"],
                        "description": "Unkey will automatically refill verifications at the set interval."
                      },
                      "amount": {
                        "type": "integer",
                        "minimum": 0,
                        "exclusiveMinimum": true,
                        "description": "The number of verifications to refill for each occurrence is determined individually for each key."
                      }
                    },
                    "required": ["interval", "amount"],
                    "description": "Unkey enables you to refill verifications for each key at regular intervals.",
                    "example": {
                      "interval": "daily",
                      "amount": 100
                    }
                  },
                  "ratelimit": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": ["fast", "consistent"],
                        "default": "fast",
                        "description": "Fast ratelimiting doesn't add latency, while consistent ratelimiting is more accurate.",
                        "externalDocs": {
                          "description": "Learn more",
                          "url": "https://unkey.dev/docs/features/ratelimiting"
                        }
                      },
                      "limit": {
                        "type": "integer",
                        "minimum": 1,
                        "description": "The total amount of burstable requests."
                      },
                      "refillRate": {
                        "type": "integer",
                        "minimum": 1,
                        "description": "How many tokens to refill during each refillInterval."
                      },
                      "refillInterval": {
                        "type": "integer",
                        "minimum": 1,
                        "description": "Determines the speed at which tokens are refilled, in milliseconds."
                      }
                    },
                    "required": [
                      "type",
                      "limit",
                      "refillRate",
                      "refillInterval"
                    ],
                    "description": "Unkey comes with per-key ratelimiting out of the box.",
                    "example": {
                      "type": "fast",
                      "limit": 10,
                      "refillRate": 1,
                      "refillInterval": 60
                    }
                  },
                  "enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Sets if key is enabled or disabled. Disabled keys are not valid.",
                    "example": false
                  }
                },
                "required": ["apiId"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The configuration for an api",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Butler_API_Entities_UserPrivate"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Although the HTTP standard specifies \"unauthorized\", semantically this response means \"unauthenticated\". That is, the client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "This response is sent when a request conflicts with the current state of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time (\"rate limiting\")",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrTooManyRequests"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it does not know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/keys.verifyKey": {
      "post": {
        "operationId": "verifyKey",
        "tags": ["keys"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V1KeysVerifyKeyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The verification result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V1KeysVerifyKeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Although the HTTP standard specifies \"unauthorized\", semantically this response means \"unauthenticated\". That is, the client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "This response is sent when a request conflicts with the current state of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time (\"rate limiting\")",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrTooManyRequests"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it does not know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/keys.updateKey": {
      "post": {
        "operationId": "updateKey",
        "tags": ["keys"],
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "keyId": {
                    "type": "string",
                    "description": "The id of the key you want to modify",
                    "example": "key_123"
                  },
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "description": "The name of the key",
                    "example": "Customer X"
                  },
                  "ownerId": {
                    "type": "string",
                    "nullable": true,
                    "description": "The id of the tenant associated with this key. Use whatever reference you have in your system to identify the tenant. When verifying the key, we will send this field back to you, so you know who is accessing your API.",
                    "example": "user_123"
                  },
                  "meta": {
                    "type": "object",
                    "nullable": true,
                    "additionalProperties": {
                      "nullable": true
                    },
                    "description": "Any additional metadata you want to store with the key",
                    "example": {
                      "roles": ["admin", "user"],
                      "stripeCustomerId": "cus_1234"
                    }
                  },
                  "expires": {
                    "type": "number",
                    "nullable": true,
                    "description": "The unix timestamp in milliseconds when the key will expire. If this field is null or undefined, the key is not expiring.",
                    "example": 0
                  },
                  "ratelimit": {
                    "type": "object",
                    "nullable": true,
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": ["fast", "consistent"],
                        "description": "Fast ratelimiting doesn't add latency, while consistent ratelimiting is more accurate.",
                        "externalDocs": {
                          "description": "Learn more",
                          "url": "https://unkey.dev/docs/features/ratelimiting"
                        }
                      },
                      "limit": {
                        "type": "integer",
                        "minimum": 1,
                        "description": "The total amount of burstable requests."
                      },
                      "refillRate": {
                        "type": "integer",
                        "minimum": 1,
                        "description": "How many tokens to refill during each refillInterval."
                      },
                      "refillInterval": {
                        "type": "integer",
                        "minimum": 1,
                        "description": "Determines the speed at which tokens are refilled, in milliseconds."
                      }
                    },
                    "required": [
                      "type",
                      "limit",
                      "refillRate",
                      "refillInterval"
                    ],
                    "description": "Unkey comes with per-key ratelimiting out of the box. Set `null` to disable.",
                    "example": {
                      "type": "fast",
                      "limit": 10,
                      "refillRate": 1,
                      "refillInterval": 60
                    }
                  },
                  "remaining": {
                    "type": "number",
                    "nullable": true,
                    "description": "The number of requests that can be made with this key before it becomes invalid. Set `null` to disable.",
                    "example": 1000
                  },
                  "refill": {
                    "type": "object",
                    "nullable": true,
                    "properties": {
                      "interval": {
                        "type": "string",
                        "enum": ["daily", "monthly"],
                        "description": "Unkey will automatically refill verifications at the set interval. If null is used the refill functionality will be removed from the key."
                      },
                      "amount": {
                        "type": "integer",
                        "minimum": 1,
                        "description": "The amount of verifications to refill for each occurrence is determined individually for each key."
                      }
                    },
                    "required": ["interval", "amount"],
                    "description": "Unkey enables you to refill verifications for each key at regular intervals.",
                    "example": {
                      "interval": "daily",
                      "amount": 100
                    }
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Set if key is enabled or disabled. If disabled, the key cannot be used to verify.",
                    "example": true
                  }
                },
                "required": ["keyId"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The key was successfully updated, it may take up to 30s for this to take effect in all regions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Although the HTTP standard specifies \"unauthorized\", semantically this response means \"unauthenticated\". That is, the client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "This response is sent when a request conflicts with the current state of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time (\"rate limiting\")",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrTooManyRequests"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it does not know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/keys.updateRemaining": {
      "post": {
        "operationId": "updateRemaining",
        "tags": ["keys"],
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "keyId": {
                    "type": "string",
                    "description": "The id of the key you want to modify",
                    "example": "key_123"
                  },
                  "op": {
                    "type": "string",
                    "enum": ["increment", "decrement", "set"],
                    "description": "The operation you want to perform on the remaining count"
                  },
                  "value": {
                    "type": "integer",
                    "nullable": true,
                    "description": "The value you want to set, add or subtract the remaining count by",
                    "example": 1
                  }
                },
                "required": ["keyId", "op", "value"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The configuration for an api",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "remaining": {
                      "type": "integer",
                      "nullable": true,
                      "description": "The number of remaining requests for this key after updating it. `null` means unlimited.",
                      "example": 100
                    }
                  },
                  "required": ["remaining"]
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Although the HTTP standard specifies \"unauthorized\", semantically this response means \"unauthenticated\". That is, the client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "This response is sent when a request conflicts with the current state of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time (\"rate limiting\")",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrTooManyRequests"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it does not know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/keys.getVerifications": {
      "get": {
        "operationId": "getVerifications",
        "tags": ["keys"],
        "security": [
          {
            "rootKey": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The id of the key to fetch, either `keyId` or `ownerId` must be provided",
              "example": "key_1234"
            },
            "required": false,
            "name": "keyId",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "description": "The owner id to fetch keys for, either `keyId` or `ownerId` must be provided",
              "example": "chronark"
            },
            "required": false,
            "name": "ownerId",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "nullable": true,
              "description": "The start of the period to fetch usage for as unix milliseconds timestamp",
              "example": 1620000000000
            },
            "required": false,
            "name": "start",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "nullable": true,
              "description": "The end of the period to fetch usage for as unix milliseconds timestamp",
              "example": 1620000000000
            },
            "required": false,
            "name": "end",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": ["day"],
              "default": "day",
              "description": "The granularity of the usage data to fetch, currently only `day` is supported",
              "example": "day"
            },
            "required": false,
            "name": "granularity",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "The configuration for a single key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "verifications": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "time": {
                            "type": "integer",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "description": "The timestamp of the usage data",
                            "example": 1620000000000
                          },
                          "success": {
                            "type": "number",
                            "description": "The number of successful requests",
                            "example": 100
                          },
                          "rateLimited": {
                            "type": "number",
                            "description": "The number of requests that were rate limited",
                            "example": 10
                          },
                          "usageExceeded": {
                            "type": "number",
                            "description": "The number of requests that exceeded the usage limit",
                            "example": 0
                          }
                        },
                        "required": [
                          "time",
                          "success",
                          "rateLimited",
                          "usageExceeded"
                        ]
                      }
                    }
                  },
                  "required": ["verifications"]
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Although the HTTP standard specifies \"unauthorized\", semantically this response means \"unauthenticated\". That is, the client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "This response is sent when a request conflicts with the current state of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time (\"rate limiting\")",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrTooManyRequests"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it does not know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/apis.getApi": {
      "get": {
        "tags": ["apis"],
        "operationId": "getApi",
        "security": [
          {
            "rootKey": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the api to fetch",
              "example": "api_1234"
            },
            "required": true,
            "name": "apiId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "The configuration for an api",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The id of the key",
                      "example": "key_1234"
                    },
                    "workspaceId": {
                      "type": "string",
                      "description": "The id of the workspace that owns the api",
                      "example": "ws_1234"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the api. This is internal and your users will not see this.",
                      "example": "Unkey - Production"
                    }
                  },
                  "required": ["id", "workspaceId"]
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Although the HTTP standard specifies \"unauthorized\", semantically this response means \"unauthenticated\". That is, the client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "This response is sent when a request conflicts with the current state of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time (\"rate limiting\")",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrTooManyRequests"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it does not know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/apis.createApi": {
      "post": {
        "operationId": "createApi",
        "tags": ["apis"],
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 3,
                    "description": "The name for your API. This is not customer facing.",
                    "example": "my-api"
                  }
                },
                "required": ["name"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The configuration for an api",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "apiId": {
                      "type": "string",
                      "description": "The id of the api",
                      "example": "api_134"
                    }
                  },
                  "required": ["apiId"]
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Although the HTTP standard specifies \"unauthorized\", semantically this response means \"unauthenticated\". That is, the client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "This response is sent when a request conflicts with the current state of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time (\"rate limiting\")",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrTooManyRequests"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it does not know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/apis.listKeys": {
      "get": {
        "operationId": "listKeys",
        "tags": ["apis"],
        "security": [
          {
            "rootKey": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the api to fetch",
              "example": "api_1234"
            },
            "required": true,
            "name": "apiId",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100,
              "description": "The maximum number of keys to return",
              "example": 100
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "description": "Use this to fetch the next page of results. A new cursor will be returned in the response if there are more results."
            },
            "required": false,
            "name": "cursor",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "If provided, this will only return keys where the `ownerId` matches."
            },
            "required": false,
            "name": "ownerId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "The configuration for an api",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "keys": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Key"
                      }
                    },
                    "cursor": {
                      "type": "string",
                      "description": "The cursor to use for the next page of results, if no cursor is returned, there are no more results",
                      "example": "eyJrZXkiOiJrZXlfMTIzNCJ9"
                    },
                    "total": {
                      "type": "integer",
                      "description": "The total number of keys for this api"
                    }
                  },
                  "required": ["keys", "total"]
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Although the HTTP standard specifies \"unauthorized\", semantically this response means \"unauthenticated\". That is, the client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "This response is sent when a request conflicts with the current state of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time (\"rate limiting\")",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrTooManyRequests"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it does not know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/apis.deleteApi": {
      "post": {
        "operationId": "deleteApi",
        "tags": ["apis"],
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "apiId": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The id of the api to delete",
                    "example": "api_1234"
                  }
                },
                "required": ["apiId"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The api was successfully deleted, it may take up to 30s for this to take effect in all regions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Although the HTTP standard specifies \"unauthorized\", semantically this response means \"unauthenticated\". That is, the client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "This response is sent when a request conflicts with the current state of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time (\"rate limiting\")",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrTooManyRequests"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it does not know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      }
    }
  }
}



================================================
FILE: packages/python/CHANGELOG.md
================================================
# fumadocs-python

## 0.0.3

### Patch Changes

- 1b7bc4b: Add `@types/react` to optional peer dependency to avoid version conflict in monorepos
- Updated dependencies [b675728]
- Updated dependencies [7a45921]
- Updated dependencies [1b7bc4b]
- Updated dependencies [82fc4c8]
  - fumadocs-ui@15.5.2
  - fumadocs-core@15.5.2

## 0.0.2

### Patch Changes

- b0fa6ac: Fix: Add missing dependency for `griffe_typingdoc`
- Updated dependencies [3372792]
  - fumadocs-core@15.3.1
  - fumadocs-ui@15.3.1

## 0.0.1

### Patch Changes

- 3eef0bd: Initial release
- Updated dependencies [d4d1ba7]
- Updated dependencies [4e62b41]
- Updated dependencies [07cd690]
  - fumadocs-ui@15.2.11
  - fumadocs-core@15.2.11



================================================
FILE: packages/python/eslint.config.mjs
================================================
import library from 'eslint-config-custom/library.js';

export default [
  {
    ignores: ['dist/', 'node_modules/', 'test/**/*.output.js'],
  },
  ...library,
  {
    rules: {
      'import/no-named-as-default': 'off',
      'import/no-named-as-default-member': 'off',
      '@typescript-eslint/no-explicit-any': 'off',
    },
  },
];



================================================
FILE: packages/python/package.json
================================================
{
  "name": "fumadocs-python",
  "version": "0.0.3",
  "description": "The built-in Python docgen for Fumadocs",
  "keywords": [
    "NextJs",
    "Docs",
    "Python"
  ],
  "homepage": "https://fumadocs.vercel.app",
  "repository": "github:fuma-nama/fumadocs",
  "license": "MIT",
  "author": "Fuma Nama",
  "type": "module",
  "module": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "files": [
    "dist/*",
    "fumapy",
    "styles",
    "pyproject.toml"
  ],
  "exports": {
    "./preset.css": "./styles/preset.css",
    ".": {
      "import": "./dist/index.js",
      "types": "./dist/index.d.ts"
    },
    "./components": {
      "import": "./dist/components/index.js",
      "types": "./dist/components/index.d.ts"
    }
  },
  "scripts": {
    "build": "tsup",
    "clean": "rimraf dist",
    "dev": "tsup --watch",
    "lint": "eslint .",
    "types:check": "tsc --noEmit"
  },
  "devDependencies": {
    "@types/js-yaml": "^4.0.9",
    "@types/node": "^24.0.12",
    "@types/react": "^19.1.8",
    "eslint-config-custom": "workspace:*",
    "fumadocs-core": "workspace:*",
    "fumadocs-ui": "workspace:*",
    "lucide-react": "^0.525.0",
    "tsconfig": "workspace:*"
  },
  "peerDependencies": {
    "@types/react": "*",
    "fumadocs-core": "15.x.x",
    "fumadocs-ui": "15.x.x"
  },
  "peerDependenciesMeta": {
    "@types/react": {
      "optional": true
    }
  },
  "publishConfig": {
    "access": "public"
  },
  "dependencies": {
    "class-variance-authority": "^0.7.1",
    "js-yaml": "^4.1.0"
  }
}



================================================
FILE: packages/python/pyproject.toml
================================================
[project]
name = "fumapy"
version = "0.1.0"
description = "Extract API documentation from source code and docstrings. For the python API extension for FumaDocs."

authors = [
    { name = "florez", email = "florez@ethz.ch" },
    { name = 'fuma-nama' }
]
requires-python = ">=3.10"
dependencies = [
    "griffe",
    "griffe_typingdoc"
]

[project.scripts]
fumapy-generate = "fumapy:generate"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"



================================================
FILE: packages/python/tsconfig.json
================================================
{
  "extends": "tsconfig/react-library.json",
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "exclude": ["node_modules", "eslint.config.mjs"]
}



================================================
FILE: packages/python/tsup.config.ts
================================================
import { defineConfig } from 'tsup';

export default defineConfig({
  entry: ['./src/index.ts', './src/components/index.tsx'],
  format: 'esm',
  dts: true,
  target: 'es2022',
  external: ['react'],
});



================================================
FILE: packages/python/vitest.config.ts
================================================
import { defineProject } from 'vitest/config';

export default defineProject({
  resolve: {
    alias: {
      '@/': new URL('./src/', import.meta.url).pathname,
    },
  },
});



================================================
FILE: packages/python/fumapy/__init__.py
================================================
import argparse
import json
import os

import griffe
from griffe_typingdoc import TypingDocExtension

from .mksource import CustomEncoder, parse_module

DOCSTRING_TYPE = "google"
STORE_SOURCE = True

def generate() -> None:
    """Generate Python API documentation for a specified module.

    This function parses command-line arguments, loads the specified module,
    parses its content, and saves the generated API documentation as a JSON file.

    Args:
        None

    Returns:
        None

    Raises:
        argparse.ArgumentTypeError: If invalid arguments are provided.
        FileNotFoundError: If the specified module or output directory doesn't exist.
        PermissionError: If there's no write permission for the output directory.
    """
    parser = argparse.ArgumentParser(description="Generate python API documentation")
    parser.add_argument(
        "module", type=str, help="The module to generate documentation for"
    )
    parser.add_argument(
        "--dir",
        "-d",
        type=str,
        default=".",
        help="The directory to save the documentation in",
    )
    args = parser.parse_args()

    extensions = griffe.load_extensions(TypingDocExtension)
    pkg = parse_module(
        griffe.load(
            args.module, docstring_parser="auto", store_source=STORE_SOURCE, extensions=extensions
        )
    )
    api_filename = f"{args.module}.json"

    with open(os.path.join(args.dir, api_filename), "w") as file:
        json.dump(pkg, file, cls=CustomEncoder, indent=2, full=True)


if __name__ == "__main__":
    generate()



================================================
FILE: packages/python/fumapy/mksource/__init__.py
================================================
from .document_module import parse_class, parse_function, parse_module
from .json_encoder import CustomEncoder


__all__ = (
    "parse_class",
    "parse_function",
    "parse_module",
    "CustomEncoder",
)



================================================
FILE: packages/python/fumapy/mksource/document_module.py
================================================
from __future__ import annotations

from importlib.metadata import version

import griffe

from .models import Class, Function, Module
from .simplify_docstring import simplify_docstring
from .utils import build_signature


def parse_module(m: griffe.Object) -> Module:
    if not isinstance(m, griffe.Module):
        raise ValueError("Module must be a module")

    out = simplify_docstring(m.docstring, m)
    res: Module = {
        "name": m.name,
        "path": m.path,
        "filepath": m.filepath,
        "description": out.description,
        "docstring": out.remainder,
        "attributes": out.attributes,
        "modules": {
            name: parse_module(value)
            for name, value in m.modules.items()
            if not value.is_alias
        },
        "classes": {
            name: parse_class(value)
            for name, value in m.classes.items()
            if not value.is_alias
        },
        "functions": {
            name: parse_function(value)
            for name, value in m.functions.items()
            if not value.is_alias
        },
    }
    if m.is_package:
        try:
            res["version"] = version(m.name)
        except AttributeError:
            res["version"] = "unknown"

    return res


def parse_class(c: griffe.Class) -> Class:
    out = simplify_docstring(c.docstring, c)
    res: Class = {
        "name": c.name,
        "path": c.path,
        "description": out.description,
        "parameters": out.parameters,
        "attributes": out.attributes,
        "docstring": out.remainder,
        "functions": {
            name: parse_function(value)
            for name, value in c.functions.items()
            if not value.is_alias
        },
        "source": c.source,
        "inherited_members": {},
    }
    for member in c.inherited_members.values():
        parent_path = ".".join(member.canonical_path.split(".")[:-1])
        member_info = {"kind": member.kind, "path": member.canonical_path}
        if parent_path not in res["inherited_members"]:
            res["inherited_members"][parent_path] = []
        res["inherited_members"][parent_path].append(member_info)
    return res


def parse_function(f: griffe.Function) -> Function:
    out = simplify_docstring(f.docstring, f)
    res: Function = {
        "name": f.name,
        "path": f.path,
        "signature": build_signature(f),
        "description": out.description,
        "parameters": out.parameters,
        "returns": out.returns,
        "docstring": out.remainder,
        "source": f.source,
    }
    return res



================================================
FILE: packages/python/fumapy/mksource/json_encoder.py
================================================
import typing as t

import griffe
from _griffe.encoders import _json_encoder_map


class CustomEncoder(griffe.JSONEncoder):
    def default(self, obj: t.Any) -> t.Any:
        """Return a serializable representation of the given object.

        Parameters:
            obj: The object to serialize.

        Returns:
            A serializable representation.
        """

        try:
            if isinstance(obj, griffe.Expr):
                return str(obj)
            return obj.as_dict(full=self.full)
        except AttributeError:
            return _json_encoder_map.get(type(obj), super().default)(obj)



================================================
FILE: packages/python/fumapy/mksource/models.py
================================================
from __future__ import annotations

import typing as t


class Module(t.TypedDict):
    name: str
    path: str
    filepath: str
    description: str | None
    docstring: Docstring
    attributes: list[Attribute]
    modules: dict[str, Module]
    classes: dict[str, Class]
    functions: dict[str, Function]
    version: str | None


class Class(t.TypedDict):
    name: str
    path: str
    description: str | None
    parameters: list[Parameter]
    attributes: list[Attribute]
    docstring: Docstring
    functions: dict[str, Function]
    source: str


class Function(t.TypedDict):
    name: str
    path: str
    signature: str
    description: str | None
    parameters: list[Parameter]
    returns: dict[str, str | None]
    docstring: Docstring
    source: str


class DocstringSection(t.TypedDict):
    kind: str
    value: str | list[Parameter]


Docstring = list[DocstringSection]


class Parameter(t.TypedDict):
    name: str
    annotation: str
    description: str
    value: str


class Attribute(t.TypedDict):
    name: str
    annotation: str
    description: str
    value: str



================================================
FILE: packages/python/fumapy/mksource/simplify_docstring.py
================================================
import typing as t

import griffe


class SimplifiedDocstring(t.NamedTuple):
    description: str | None
    parameters: list[dict[str, str | None]]
    returns: dict[str, str | None]
    attributes: list[dict[str, str | None]]
    remainder: list[griffe.DocstringSection]


def simplify_docstring(
    doc: griffe.Docstring, parent: griffe.Module | griffe.Class | griffe.Function = None
) -> SimplifiedDocstring:
    def get_parameters_from_signature(parent: griffe.Class | griffe.Function):
        return [
            {
                "name": p.name,
                "annotation": p.annotation,
                "description": None,
                "value": p.default,
            }
            for p in parent.parameters
        ]

    def get_returns_from_signature(parent: griffe.Function):
        return {
            "name": "",
            "annotation": (
                parent.returns
                if isinstance(parent.returns, (str, type(None)))
                else "".join(
                    elem if isinstance(elem, str) else elem.canonical_path
                    for elem in parent.returns.iterate(flat=True)
                )
            ),
            "description": None,
        }

    def get_attributes_from_signature(parent: griffe.Module | griffe.Class):
        return [
            {
                "name": attr.name,
                "annotation": attr.annotation,
                "description": attr.docstring.parsed if attr.docstring else None,
                "value": attr.value,
            }
            for attr in parent.attributes.values()
            if (not attr.is_alias and not attr.is_private)
        ]

    description = None
    parameters = (
        get_parameters_from_signature(parent)
        if isinstance(parent, (griffe.Class, griffe.Function))
        else None
    )
    attributes = (
        get_attributes_from_signature(parent)
        if isinstance(parent, (griffe.Class, griffe.Module))
        else None
    )
    returns = (
        get_returns_from_signature(parent)
        if isinstance(parent, (griffe.Function))
        else None
    )
    remainder = []
    if not doc:
        return SimplifiedDocstring(
            description, parameters, returns, attributes, remainder
        )

    for i, sec in enumerate(doc.parsed):
        if sec.kind == "text" and i == 0:
            description = sec.value
            continue

        # Sort the parameters with the real signature
        if sec.kind == "parameters":
            map = {i.name: i for i in sec.value}
            params_list = []
            for param in parent.parameters:
                if param.name in map:
                    docstring = map[param.name]
                    try:
                        docstring.description = griffe.parse_google(
                            griffe.Docstring(docstring.description)
                        )
                    except AttributeError:
                        pass
                    params_list.append(docstring)
                else:
                    params_list.append(
                        {
                            "name": param.name,
                            "annotation": param.annotation,
                            "description": None,
                            "value": param.default,
                        }
                    )

            parameters = params_list
            continue

        if sec.kind == "returns":
            returns: griffe.DocstringReturn = sec.value[0]
            returns.annotation = (
                returns.annotation.canonical_path
                if isinstance(returns.annotation, griffe.Expr)
                else returns.annotation
            )
            continue

        if sec.kind == "attributes":
            map = {i.name: i for i in sec.value}
            attributes_list = []
            for attr in parent.attributes.values():
                # exclude aliased attributes
                if attr.is_alias:
                    continue

                if attr.name in map:
                    attr_in_docstring: dict = map[attr.name]
                    attr_item: dict = {
                        "name": attr_in_docstring.name,
                        "description": None,
                        "annotation": attr_in_docstring.annotation,
                        "value": attr.value,
                    }

                    try:
                        attr_item["description"] = griffe.parse_google(
                            griffe.Docstring(attr_in_docstring.description)
                        )
                    except AttributeError:
                        pass

                    attributes_list.append(attr_item)
                else:
                    attributes_list.append(
                        {
                            "name": attr.name,
                            "annotation": attr.annotation,
                            "description": (
                                attr.docstring.parsed if attr.docstring else None
                            ),
                            "value": attr.value,
                        }
                    )
            attributes = attributes_list
            continue

        remainder.append(sec)

    return SimplifiedDocstring(description, parameters, returns, attributes, remainder)



================================================
FILE: packages/python/fumapy/mksource/utils.py
================================================
import griffe


def build_signature(func: griffe.Function) -> str:
    parameters: list[griffe.Parameter] = func.parameters

    s = "("
    positional_only = True
    keyword_only = False
    for i, p in enumerate(parameters):
        if i != 0:
            s += ", "
        if p.kind in (
            griffe.ParameterKind.positional_or_keyword,
            griffe.ParameterKind.keyword_only,
        ):
            if positional_only and i != 0:
                s += "/, "
            positional_only = False

            if p.kind == griffe.ParameterKind.keyword_only:
                if not keyword_only:
                    s += "*, "
                keyword_only = True

        if p.kind == griffe.ParameterKind.var_keyword:
            s += f"**{p.name}"
        elif p.kind == griffe.ParameterKind.var_positional:
            s += f"*{p.name}"
        else:
            s += p.name
            if p.default is not None:
                s += f"={p.default}"

    s += ")"
    if func.returns:
        s += f" -> {func.returns}"

    return s


def filter_non_imported(d: dict[str, griffe.Object]) -> dict:
    return {k: v for k, v in d.items() if not v.is_imported}


def stringify_expr(expr: griffe.Expr | str) -> str:
    if isinstance(expr, griffe.Expr):
        return expr.path
    return expr



================================================
FILE: packages/python/src/convert.ts
================================================
import type {
  AttributeInterface,
  ClassInterface,
  DocstringSection,
  FunctionInterface,
  ModuleInterface,
  ParameterInterface,
} from '@/generated';

export type OutputFile = {
  path: string;
  frontmatter: Record<string, unknown>;
  content: string;
};

export interface ConvertOptions {
  baseUrl?: string;
}

export function convert(
  mod: ModuleInterface,
  options: ConvertOptions = {},
): OutputFile[] {
  const files: OutputFile[] = [];
  const content: string[] = [];
  const tabs: string[] = [];
  const tabContents: string[] = [];

  if (mod.description) content.push(encodeText(mod.description));
  for (const attr of mod.attributes) {
    content.push(convertAttribute(attr));
  }

  if (Object.keys(mod.classes).length > 0) {
    tabs.push('Class');
    const lines: string[] = [];
    for (const cls of Object.values(mod.classes)) {
      files.push(...convertClass(cls));

      lines.push(
        element('Card', {
          title: cls.name,
          href: getHref(cls, options),
        }),
      );
    }

    tabContents.push(element('Cards', undefined, lines.join('\n')));
  }

  if (Object.keys(mod.functions).length > 0) {
    tabs.push('Functions');
    const lines: string[] = [];
    for (const func of Object.values(mod.functions)) {
      lines.push(convertFunction(func));
    }
    tabContents.push(lines.join('\n'));
  }

  if (Object.keys(mod.modules).length > 0) {
    tabs.push('Modules');
    const lines: string[] = [];
    for (const submod of Object.values(mod.modules)) {
      files.push(...convert(submod, options));

      lines.push(
        element('Card', {
          href: getHref(submod, options),
          title: submod.name,
        }),
      );
    }
    tabContents.push(element('Cards', undefined, lines.join('\n')));
  }

  if (tabs.length > 0) {
    content.push(
      element(
        'Tabs',
        {
          items: tabs,
        },
        tabContents
          .map((content, i) => element('Tab', { value: tabs[i] }, content))
          .join('\n'),
      ),
    );
  }

  files.push({
    path: [...mod.path.split('.'), 'index.mdx'].join('/'),
    frontmatter: {
      title: mod.name,
    },
    content: content.join('\n\n'),
  });

  return files;
}

function convertClass(cls: ClassInterface): OutputFile[] {
  const content: string[] = [];
  const files: OutputFile[] = [];

  if (cls.description) content.push(encodeText(cls.description));

  if (cls.attributes.length > 0) {
    content.push(heading(2, 'Attributes'));
  }

  for (const attr of cls.attributes) {
    content.push(convertAttribute(attr));
  }

  if (Object.keys(cls.functions).length > 0) {
    content.push(heading(2, 'Functions'));

    for (const func of Object.values(cls.functions)) {
      content.push(convertFunction(func));
    }
  }

  files.push({
    path: cls.path.replaceAll('.', '/') + '.mdx',
    frontmatter: {
      title: cls.name,
    },
    content: content.join('\n\n'),
  });
  return files;
}

function convertFunction(func: FunctionInterface) {
  return element(
    'PyFunction',
    {
      name: func.name,
      type: func.signature,
    },
    [
      func.description ? encodeText(func.description) : null,
      convertDoc(func.docstring ?? []),
      func.source.length > 0
        ? element('PySourceCode', undefined, codeblock('python', func.source))
        : null,
      func.parameters.length > 0
        ? element(
            'div',
            undefined,
            func.parameters.map(convertParameter).join('\n'),
          )
        : null,
      element(
        'PyFunctionReturn',
        {
          type: func.returns.annotation,
        },
        [func.returns.description ? encodeText(func.returns.description) : null]
          .filter(Boolean)
          .join('\n'),
      ),
    ]
      .filter(Boolean)
      .join('\n\n'),
  );
}

function convertParameter(param: ParameterInterface) {
  const lines: string[] = [];
  if (param.description)
    lines.push(
      typeof param.description === 'string'
        ? param.description
        : convertDoc(param.description),
    );

  return element(
    'PyParameter',
    { name: param.name, type: param.annotation, value: param.value },
    lines.join('\n'),
  );
}

function convertAttribute(attribute: AttributeInterface) {
  return element(
    'PyAttribute',
    {
      name: attribute.name,
      type: attribute.annotation,
      value: attribute.value,
    },
    [attribute.description ? convertDoc(attribute.description) : null]
      .filter(Boolean)
      .join('\n'),
  );
}

function convertDoc(docstring: DocstringSection[]) {
  const lines: string[] = [];
  for (const item of docstring) {
    if (item.kind === 'text') {
      lines.push(encodeText(item.value as string));
    }

    if (item.kind === 'admonition') {
      const value = item.value as { annotation: string; description: string };
      lines.push(
        element(
          'Callout',
          {
            title: item.title,
            type: value.annotation,
          },
          encodeText(item.value.description),
        ),
      );
    }
    if (item.kind === 'code') {
      console.log(item.value);
    }
  }

  return lines.join('\n\n');
}

function heading(depth: number, content: string) {
  return ['#'.repeat(depth), content].join(' ');
}

function codeblock(meta: string, code: string) {
  const delimit = '```';
  return `${delimit}${meta}\n${code.replaceAll(delimit, '\\' + delimit)}\n${delimit}`;
}

function element(
  name: string,
  props: Record<string, unknown> = {},
  children?: string,
) {
  const propsStr: string[] = [];
  for (const key in props) {
    propsStr.push(`${key}={${JSON.stringify(props[key])}}`);
  }

  if (children)
    return `<${name} ${propsStr.join(' ')}>

${children}

</${name}>`;

  return `<${name} ${propsStr.join(' ')} />`;
}

function getHref(
  ele: ModuleInterface | FunctionInterface | ClassInterface,
  options: ConvertOptions,
) {
  const { baseUrl = '/' } = options;

  return (
    '/' +
    [...baseUrl.split('/'), ...ele.path.split('.')]
      .filter((v) => v.length > 0)
      .join('/')
  );
}

function encodeText(v: string) {
  return v.replaceAll('<', '\\<').replaceAll('{', '\\{').replaceAll('}', '\\}');
}



================================================
FILE: packages/python/src/generated.ts
================================================
interface ModuleInterface {
  name: string;
  path: string;
  description: string | null;
  docstring: DocstringSection[] | null;
  modules: { [key: string]: ModuleInterface };
  attributes: AttributeInterface[];
  classes: { [key: string]: ClassInterface };
  functions: { [key: string]: FunctionInterface };
  version?: string;
}

interface ClassInterface {
  name: string;
  path: string;
  description: string | null;
  docstring: DocstringSection[] | null;
  parameters: ParameterInterface[];
  attributes: AttributeInterface[];
  functions: { [key: string]: FunctionInterface };
  source: string;
  inherited_members: { [key: string]: { kind: string; path: string }[] };
}

interface FunctionInterface {
  name: string;
  path: string;
  signature: string;
  description: string | null;
  docstring: DocstringSection[];
  parameters: ParameterInterface[];
  returns: ReturnInterface;
  source: string;
}

interface AttributeInterface {
  name: string;
  annotation: string | null;
  description: DocstringSection[] | null;
  value: string | null;
}

type DocstringSection =
  | {
      kind: 'text';
      value: string;
    }
  | {
      kind: 'code';
      value: string;
      title?: string;
    }
  | {
      kind: 'admonition';
      value: {
        annotation: string;
        description: string;
      };
      title: string;
    }
  | {
      kind: 'examples';
      value: [string, string][];
    }
  | {
      kind: string;
      value: any;
      title?: string;
    };

interface ParameterInterface {
  name: string;
  annotation: string | null;
  description: string | DocstringSection[] | null;
  value?: string | null;
}

interface ReturnInterface {
  name: string;
  annotation: string | null;
  description: string | null;
}

export type {
  ModuleInterface,
  ClassInterface,
  FunctionInterface,
  AttributeInterface,
  DocstringSection,
  ParameterInterface,
  ReturnInterface,
};



================================================
FILE: packages/python/src/index.ts
================================================
export * from './generated';
export * from './convert';
export * from './write';



================================================
FILE: packages/python/src/write.ts
================================================
import type { OutputFile } from './convert';
import * as fs from 'node:fs/promises';
import { dump } from 'js-yaml';
import * as path from 'node:path';

interface WriteOptions {
  outDir?: string;
}

export async function write(output: OutputFile[], options: WriteOptions = {}) {
  await Promise.all(
    output.map(async (file) => {
      const filePath = path.resolve(
        options.outDir ?? './',
        file.path.split('/').slice(1).join('/'),
      );
      console.log('write', filePath);

      await fs.mkdir(path.dirname(filePath), { recursive: true });
      await fs.writeFile(
        filePath,
        Object.keys(file.frontmatter).length > 0
          ? `${frontmatter(file.frontmatter)}\n\n${file.content}`
          : file.content,
      );
    }),
  );
}

export function frontmatter(obj: unknown) {
  return `---\n${dump(obj).trim()}\n---`;
}



================================================
FILE: packages/python/src/components/index.tsx
================================================
import type { ComponentProps, ReactNode } from 'react';
import { cva } from 'class-variance-authority';
import { cn } from 'fumadocs-ui/utils/cn';
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from 'fumadocs-ui/components/ui/collapsible';
import { buttonVariants } from 'fumadocs-ui/components/ui/button';
import { ChevronRight } from 'lucide-react';
import { highlight } from 'fumadocs-core/highlight';

const cardVariants = cva('bg-fd-card rounded-lg text-sm my-6 p-3 border');
const badgeVariants = cva(
  'text-xs font-medium border p-1 rounded-lg not-prose',
  {
    variants: {
      color: {
        func: 'bg-fdpy-func/10 text-fdpy-func border-fdpy-func/50',
        attribute:
          'bg-fdpy-attribute/10 text-fdpy-attribute border-fdpy-attribute/50',
        class: 'bg-fdpy-class/10 text-fdpy-class border-fdpy-class/50',
        primary: 'bg-fd-primary/10 text-fd-primary border-fd-primary/10',
      },
    },
  },
);

export function PyFunction(props: {
  name: string;
  type: string;
  children?: ReactNode;
}) {
  return (
    <figure className={cn(cardVariants())}>
      <div className="flex gap-2 items-center font-mono flex-wrap mb-4">
        <code className={cn(badgeVariants({ color: 'func' }))}>func</code>
        {props.name}
        <InlineCode
          lang="python"
          className="not-prose text-xs text-fd-muted-foreground"
          code={props.type}
        />
      </div>
      <div className="text-fd-muted-foreground prose-no-margin">
        {props.children}
      </div>
    </figure>
  );
}

export function PyAttribute(props: {
  name: string;
  type?: string;
  value?: string;
  children?: ReactNode;
}) {
  return (
    <figure className={cn(cardVariants())}>
      <div className="flex gap-2 items-center flex-wrap font-mono mb-4">
        <code className={cn(badgeVariants({ color: 'attribute' }))}>
          attribute
        </code>
        {props.name}
        {props.type && (
          <InlineCode
            lang="python"
            className="not-prose text-fd-muted-foreground text-xs"
            code={props.type}
          />
        )}
      </div>
      <div className="text-fd-muted-foreground prose-no-margin">
        {props.value && (
          <InlineCode
            lang="python"
            className="not-prose text-xs"
            code={`= ${props.value}`}
          />
        )}
        {props.children}
      </div>
    </figure>
  );
}

export function PyParameter(props: {
  name: string;
  type?: string;
  value?: string;
  children?: ReactNode;
}) {
  return (
    <div
      data-parameter=""
      className="bg-fd-secondary rounded-lg text-sm p-3 border shadow-md rounded-none first:rounded-t-lg last:rounded-b-lg"
    >
      <div className="flex flex-wrap gap-2 items-center font-mono text-fd-foreground">
        <code className={cn(badgeVariants({ color: 'primary' }))}>param</code>
        {props.name}
        {props.type && (
          <InlineCode
            lang="python"
            className="ms-auto text-fd-muted-foreground not-prose text-xs"
            code={props.type}
          />
        )}
      </div>
      <div className="text-fd-muted-foreground prose-no-margin mt-4 empty:hidden">
        {props.value ? (
          <InlineCode
            lang="python"
            code={`= ${props.value}`}
            className="not-prose text-xs"
          />
        ) : null}
        {props.children}
      </div>
    </div>
  );
}

export function PySourceCode({ children }: { children: ReactNode }) {
  return (
    <Collapsible className="my-6">
      <CollapsibleTrigger
        className={cn(
          buttonVariants({
            color: 'secondary',
            size: 'sm',
            className: 'group',
          }),
        )}
      >
        Source Code
        <ChevronRight className="size-3.5 text-fd-muted-foreground group-data-[state=open]:rotate-90" />
      </CollapsibleTrigger>
      <CollapsibleContent className="prose-no-margin">
        {children}
      </CollapsibleContent>
    </Collapsible>
  );
}

export function PyFunctionReturn({
  type,
  children,
}: {
  type?: string;
  children: ReactNode;
}) {
  return (
    <div className="border bg-fd-secondary rounded-lg p-3 mt-2">
      <div className="flex flex-wrap gap-2 not-prose">
        <p className="font-medium me-auto">Returns</p>
        <InlineCode lang="python" code={type ?? 'None'} className="text-xs" />
      </div>
      {children}
    </div>
  );
}

async function InlineCode({
  lang,
  code,
  ...rest
}: ComponentProps<'span'> & {
  lang: string;
  code: string;
}) {
  return highlight(code, {
    lang,
    components: {
      pre: (props) => (
        <span
          {...props}
          {...rest}
          className={cn(rest.className, props.className)}
        />
      ),
    },
  });
}

export { Tab, Tabs } from 'fumadocs-ui/components/tabs';



================================================
FILE: packages/python/styles/preset.css
================================================
@source '../dist/**/*.js';

@theme inline {
  --color-fdpy-func: oklch(79.2% 0.209 151.711);
  --color-fdpy-class: red;
  --color-fdpy-attribute: oklch(74% 0.238 322.16);
  --color-fdpy-method: blue;
}



================================================
FILE: packages/tsconfig/base.json
================================================
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Default",
  "compilerOptions": {
    "composite": false,
    "allowJs": true,
    "declaration": true,
    "declarationMap": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "inlineSources": false,
    "isolatedModules": true,
    "moduleResolution": "bundler",
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "resolveJsonModule": true,
    "preserveWatchOutput": true,
    "skipLibCheck": true,
    "strict": true,
    "strictNullChecks": true
  },
  "exclude": ["node_modules"]
}



================================================
FILE: packages/tsconfig/nextjs.json
================================================
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Next.js",
  "extends": "./base.json",
  "compilerOptions": {
    "plugins": [{ "name": "next" }],
    "declaration": false,
    "declarationMap": false,
    "incremental": true,
    "moduleResolution": "bundler",
    "jsx": "preserve",
    "lib": ["dom", "dom.iterable", "esnext"],
    "module": "esnext",
    "noEmit": true,
    "allowJs": true,
    "target": "ES2020"
  },
  "include": ["next-env.d.ts", "src"],
  "exclude": ["node_modules"]
}



================================================
FILE: packages/tsconfig/package.json
================================================
{
  "name": "tsconfig",
  "version": "0.0.0",
  "private": true,
  "license": "MIT"
}



================================================
FILE: packages/tsconfig/react-library.json
================================================
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "React Library",
  "extends": "./base.json",
  "compilerOptions": {
    "noEmit": true,
    "jsx": "react-jsx",
    "lib": ["ESNext", "DOM"],
    "module": "ESNext",
    "target": "ES2020"
  }
}



================================================
FILE: packages/twoslash/README.md
================================================
# Fumadocs Twoslash

Use Typescript Twolash in Fumadocs.



================================================
FILE: packages/twoslash/CHANGELOG.md
================================================
# fumadocs-twoslash

## 3.1.4

### Patch Changes

- 1b7bc4b: Add `@types/react` to optional peer dependency to avoid version conflict in monorepos
- Updated dependencies [b675728]
- Updated dependencies [1b7bc4b]
- Updated dependencies [82fc4c8]
  - fumadocs-ui@15.5.2

## 3.1.3

### Patch Changes

- 721c927: Lazy load twoslasher
- 3372792: Support line numbers in codeblock
- Updated dependencies [3372792]
  - fumadocs-ui@15.3.1

## 3.1.2

### Patch Changes

- 81fe2c2: Remove the need for placeholder lines
- Updated dependencies [52b5ad8]
- Updated dependencies [abce713]
  - fumadocs-ui@15.3.0

## 3.1.1

### Patch Changes

- 085e39f: Fix inline code issues
- Updated dependencies [eb18da9]
- Updated dependencies [085e39f]
- Updated dependencies [4d50bcf]
  - fumadocs-ui@15.2.7

## 3.1.0

### Minor Changes

- b49d236: Support `typesCache` option and `fumadocs-twoslash/cache-fs` similar to Vitepress

### Patch Changes

- Updated dependencies [6bc033a]
  - fumadocs-ui@15.0.14

## 3.0.1

### Patch Changes

- 0f59dfc: Update peer deps
- Updated dependencies [7608f4e]
- Updated dependencies [89ff3ae]
- Updated dependencies [16c8944]
  - fumadocs-ui@15.0.13

## 3.0.0

### Major Changes

- a89d6e0: Require Fumadocs v15 & Tailwind CSS v4

### Patch Changes

- Updated dependencies [a89d6e0]
- Updated dependencies [a84f37a]
- Updated dependencies [f2f9c3d]
  - fumadocs-ui@15.0.0

## 2.0.3

### Patch Changes

- b9601fb: Update Shiki
  - fumadocs-ui@14.7.6

## 2.0.2

### Patch Changes

- 9585561: Fix Twoslash popups focus outline
- 4766292: Support React 19
- Updated dependencies [010da9e]
- Updated dependencies [bebb16b]
- Updated dependencies [9585561]
- Updated dependencies [4766292]
  - fumadocs-ui@14.6.0

## 2.0.1

### Patch Changes

- d6d290c: Upgrade Shiki
  - fumadocs-ui@14.1.0

## 2.0.0

### Major Changes

- 9a10262: **Move Twoslash UI components to `fumadocs-twoslash`**

  **why:** Isolate logic from Fumadocs UI

  **migrate:**

  Before:

  ```ts
  import 'fumadocs-ui/twoslash.css';

  import { Popup } from 'fumadocs-ui/twoslash/popup';
  ```

  After:

  ```ts
  import 'fumadocs-twoslash/twoslash.css';

  import { Popup } from 'fumadocs-twoslash/ui';
  ```

  **Tailwind CSS is now required for Twoslash integration.**

### Patch Changes

- be820c4: Bump deps
- Updated dependencies [34cf456]
- Updated dependencies [d9e908e]
- Updated dependencies [f949520]
- Updated dependencies [ad47fd8]
- Updated dependencies [d9e908e]
- Updated dependencies [367f4c3]
- Updated dependencies [87063eb]
- Updated dependencies [64f0653]
- Updated dependencies [e1ee822]
- Updated dependencies [d9e908e]
- Updated dependencies [d9e908e]
- Updated dependencies [e612f2a]
- Updated dependencies [3d0369a]
- Updated dependencies [9a10262]
- Updated dependencies [d9e908e]
- Updated dependencies [3d054a8]
- Updated dependencies [d9e908e]
- Updated dependencies [be820c4]
- Updated dependencies [be53a0e]
  - fumadocs-ui@14.0.0

## 1.1.3

### Patch Changes

- 0c251e5: Bump deps
- Updated dependencies [0c251e5]
- Updated dependencies [0c251e5]
- Updated dependencies [0c251e5]
  - fumadocs-ui@13.4.2

## 1.1.2

### Patch Changes

- 2cc477f: Fix meta field inherited to child code blocks
- Updated dependencies [8f5b19e]
- Updated dependencies [32ca37a]
- Updated dependencies [9aae448]
- Updated dependencies [c542561]
  - fumadocs-ui@13.3.0

## 1.1.1

### Patch Changes

- 6ed95ea: Fix compatibility issues with Fumadocs UI v13
- Updated dependencies [89190ae]
- Updated dependencies [b02eebf]
- Updated dependencies [f868018]
- Updated dependencies [8aebeab]
- Updated dependencies [c684c00]
- Updated dependencies [8aebeab]
- Updated dependencies [0377bb4]
- Updated dependencies [e8e6a17]
- Updated dependencies [c8964d3]
- Updated dependencies [c901e6b]
- Updated dependencies [daa7d3c]
- Updated dependencies [89190ae]
- Updated dependencies [b02eebf]
- Updated dependencies [4373231]
  - fumadocs-ui@13.0.0

## 1.1.0

### Minor Changes

- 5f86faa: Improve multi-line code blocks

## 1.0.3

### Patch Changes

- 8ef2b68: Bump deps

## 1.0.2

### Patch Changes

- 08e4904: Update types

## 1.0.1

### Patch Changes

- c71b7e3: Ignore injected elements when copying code



================================================
FILE: packages/twoslash/eslint.config.mjs
================================================
import library from 'eslint-config-custom/library.js';

export default [
  ...library,
  {
    ignores: ['dist/', 'node_modules/', '*.test.ts'],
  },
];



================================================
FILE: packages/twoslash/package.json
================================================
{
  "name": "fumadocs-twoslash",
  "version": "3.1.4",
  "description": "Typescript Twoslash Integration for Fumadocs",
  "keywords": [
    "NextJs",
    "fumadocs",
    "Docs"
  ],
  "homepage": "https://fumadocs.vercel.app",
  "repository": "github:fuma-nama/fumadocs",
  "license": "MIT",
  "author": "Fuma Nama",
  "type": "module",
  "exports": {
    "./twoslash.css": "./styles/twoslash.css",
    ".": {
      "import": "./dist/index.js",
      "types": "./dist/index.d.ts"
    },
    "./ui": {
      "import": "./dist/ui/index.js",
      "types": "./dist/ui/index.d.ts"
    },
    "./cache-fs": {
      "import": "./dist/cache-fs.js",
      "types": "./dist/cache-fs.d.ts"
    }
  },
  "main": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "files": [
    "dist/*",
    "styles/*"
  ],
  "scripts": {
    "build": "tsup",
    "clean": "rimraf dist",
    "dev": "tsup --watch",
    "lint": "eslint .",
    "types:check": "tsc --noEmit"
  },
  "dependencies": {
    "@radix-ui/react-popover": "^1.1.14",
    "@shikijs/twoslash": "^3.7.0",
    "mdast-util-from-markdown": "^2.0.2",
    "mdast-util-gfm": "^3.1.0",
    "mdast-util-to-hast": "^13.2.0",
    "shiki": "^3.7.0",
    "tailwind-merge": "^3.3.1",
    "twoslash": "^0.3.2"
  },
  "devDependencies": {
    "@types/hast": "^3.0.4",
    "@types/mdast": "^4.0.3",
    "@types/node": "24.0.12",
    "@types/react": "^19.1.8",
    "eslint-config-custom": "workspace:*",
    "fumadocs-ui": "workspace:*",
    "tsconfig": "workspace:*"
  },
  "peerDependencies": {
    "@types/react": "*",
    "fumadocs-ui": "^15.0.0",
    "react": "18.x.x || 19.x.x"
  },
  "peerDependenciesMeta": {
    "@types/react": {
      "optional": true
    }
  },
  "publishConfig": {
    "access": "public"
  }
}



================================================
FILE: packages/twoslash/tsconfig.json
================================================
{
  "extends": "tsconfig/react-library.json",
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "exclude": ["node_modules", "dist", "eslint.config.mjs"]
}



================================================
FILE: packages/twoslash/tsup.config.ts
================================================
import { defineConfig } from 'tsup';

export default defineConfig({
  dts: true,
  target: 'es6',
  format: 'esm',
  entry: ['src/index.ts', 'src/cache-fs.ts', 'src/ui/index.ts'],
});



================================================
FILE: packages/twoslash/src/cache-fs.ts
================================================
/**
 * Original: https://github.com/shikijs/shiki/blob/main/packages/vitepress-twoslash/src/cache-fs.ts
 */
import { createHash } from 'node:crypto';
import * as fs from 'node:fs';
import * as path from 'node:path';
import type { TwoslashTypesCache } from '@/index';
import * as process from 'node:process';

export interface FileSystemTypeResultCacheOptions {
  /**
   * The directory to store the cache files.
   *
   * @default '.next/cache/twoslash'
   */
  dir?: string;

  cwd?: string;
}

export function createFileSystemTypesCache(
  options: FileSystemTypeResultCacheOptions = {},
): TwoslashTypesCache {
  const { cwd = process.cwd() } = options;
  const dir = path.join(cwd, options.dir ?? '.next/cache/twoslash');

  return {
    init() {
      try {
        fs.mkdirSync(dir, { recursive: true });
      } catch {
        // skip
      }
    },
    read(code) {
      const hash = createHash('SHA256').update(code).digest('hex').slice(0, 12);
      const filePath = path.join(dir, `${hash}.json`);
      if (!fs.existsSync(filePath)) {
        return null;
      }
      return JSON.parse(fs.readFileSync(filePath, { encoding: 'utf-8' }));
    },
    write(code, data) {
      const hash = createHash('SHA256').update(code).digest('hex').slice(0, 12);
      const filePath = path.join(dir, `${hash}.json`);
      const json = JSON.stringify(data);
      fs.writeFileSync(filePath, json, { encoding: 'utf-8' });
    },
  };
}



================================================
FILE: packages/twoslash/src/index.ts
================================================
import type { Element, ElementContent } from 'hast';
import type { Code } from 'mdast';
import { fromMarkdown } from 'mdast-util-from-markdown';
import { gfmFromMarkdown } from 'mdast-util-gfm';
import { defaultHandlers, toHast } from 'mdast-util-to-hast';
import type {
  ShikiTransformer,
  ShikiTransformerContext,
  ShikiTransformerContextCommon,
} from 'shiki';
import {
  createTransformerFactory,
  rendererRich,
  type TransformerTwoslashIndexOptions,
} from '@shikijs/twoslash';
import {
  createTwoslasher,
  type TwoslashExecuteOptions,
  type TwoslashInstance,
  type TwoslashReturn,
} from 'twoslash';

export interface TwoslashTypesCache {
  /**
   * Read cached result
   *
   * @param code Source code
   */
  read: (code: string) => TwoslashReturn | null;

  /**
   * Save result to cache
   *
   * @param code Source code
   * @param data Twoslash data
   */
  write: (code: string, data: TwoslashReturn) => void;

  /**
   * On initialization
   */
  init?: () => void | Promise<void>;
}

export interface TransformerTwoslashOptions
  extends TransformerTwoslashIndexOptions {
  typesCache?: TwoslashTypesCache;
}

let cachedInstance: TwoslashInstance | undefined;

// Since some internals of Shiki Twoslash are not documented
// This is highly inspired by https://github.com/shikijs/shiki/blob/main/packages/vitepress-twoslash
export function transformerTwoslash({
  typesCache,
  ...options
}: TransformerTwoslashOptions = {}): ShikiTransformer {
  const ignoreClass = 'nd-copy-ignore';

  function getInstance() {
    cachedInstance ??= createTwoslasher(options.twoslashOptions);
    return cachedInstance;
  }

  let twoslasher: TwoslashInstance;
  // Wrap twoslasher with cache when `resultCache` is provided
  if (typesCache) {
    twoslasher = ((
      code: string,
      extension?: string,
      options?: TwoslashExecuteOptions,
    ): TwoslashReturn => {
      const cached = typesCache.read(code); // Restore cache
      if (cached) return cached;

      const instance = getInstance();
      const twoslashResult = instance(code, extension, options);
      typesCache.write(code, twoslashResult);
      return twoslashResult;
    }) as TwoslashInstance;

    twoslasher.getCacheMap = () => {
      return getInstance().getCacheMap();
    };
    typesCache.init?.();
  } else {
    twoslasher = getInstance();
  }

  const renderer = rendererRich({
    classExtra: ignoreClass,
    queryRendering: 'line',
    renderMarkdown,
    renderMarkdownInline,
    ...options?.rendererRich,
    hast: {
      hoverToken: {
        tagName: 'Popup',
      },
      hoverPopup: {
        tagName: 'PopupContent',
      },
      hoverCompose: ({ popup, token }) => [
        popup,
        {
          type: 'element',
          tagName: 'PopupTrigger',
          properties: {
            asChild: true,
          },
          children: [
            {
              type: 'element',
              tagName: 'span',
              properties: {
                class: 'twoslash-hover',
              },
              children: [token],
            },
          ],
        },
      ],
      popupDocs: {
        class: 'prose twoslash-popup-docs',
      },
      popupTypes: {
        tagName: 'div',
        class: 'twoslash shiki fd-codeblock prose-no-margin',
        children: (v) => {
          if (
            v.length === 1 &&
            v[0].type === 'element' &&
            v[0].tagName === 'pre'
          )
            return v;

          return [
            {
              type: 'element',
              tagName: 'code',
              properties: {
                class: 'twoslash-popup-code',
              },
              children: v,
            },
          ];
        },
      },
      popupDocsTags: {
        class: 'prose twoslash-popup-docs twoslash-popup-docs-tags',
      },
      nodesHighlight: {
        class: 'highlighted-word twoslash-highlighted',
      },
      ...options?.rendererRich?.hast,
    },
  });

  const fn = renderer.lineQuery!;
  renderer.lineQuery = function (this: ShikiTransformerContext, ...args) {
    const result = fn.call(this, ...args);
    // this may break if Shiki updates, need more attention
    // @ts-expect-error -- extract offset
    const child = result[0].children[0];
    // @ts-expect-error -- attend offset as span
    result[0].children[0] = {
      type: 'element',
      tagName: 'span',
      children: [child],
    };
    return result;
  };
  return createTransformerFactory(
    twoslasher,
    renderer,
  )({
    explicitTrigger: true,
    ...options,
  });
}

function renderMarkdown(
  this: ShikiTransformerContextCommon,
  md: string,
): ElementContent[] {
  const mdast = fromMarkdown(
    md.replace(/{@link (?<link>[^}]*)}/g, '$1'), // replace jsdoc links
    { mdastExtensions: [gfmFromMarkdown()] },
  );

  return (
    toHast(mdast, {
      handlers: {
        code: (state, node: Code) => {
          if (node.lang) {
            return this.codeToHast(node.value, {
              ...this.options,
              transformers: [],
              meta: {
                __raw: node.meta ?? undefined,
              },
              lang: node.lang,
            }).children[0] as Element;
          }

          return defaultHandlers.code(state, node);
        },
      },
    }) as Element
  ).children;
}

function renderMarkdownInline(
  this: ShikiTransformerContextCommon,
  md: string,
  context?: string,
): ElementContent[] {
  const text =
    context === 'tag:param' ? md.replace(/^(?<link>[\w$-]+)/, '`$1` ') : md;

  const children = renderMarkdown.call(this, text);
  if (
    children.length === 1 &&
    children[0].type === 'element' &&
    children[0].tagName === 'p'
  )
    return children[0].children;
  return children;
}



================================================
FILE: packages/twoslash/src/ui/cn.ts
================================================
export { twMerge as cn } from 'tailwind-merge';



================================================
FILE: packages/twoslash/src/ui/index.ts
================================================
'use client';
export * from './popup';



================================================
FILE: packages/twoslash/src/ui/popover.tsx
================================================
import * as PopoverPrimitive from '@radix-ui/react-popover';
import * as React from 'react';
import { cn } from './cn';

const Popover = PopoverPrimitive.Root;

const PopoverTrigger = PopoverPrimitive.Trigger;

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = 'center', sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      side="bottom"
      className={cn('fd-twoslash-popover', className)}
      {...props}
    />
  </PopoverPrimitive.Portal>
));
PopoverContent.displayName = PopoverPrimitive.Content.displayName;

const PopoverClose = PopoverPrimitive.PopoverClose;

export { Popover, PopoverTrigger, PopoverContent, PopoverClose };



================================================
FILE: packages/twoslash/src/ui/popup.tsx
================================================
import {
  forwardRef,
  useState,
  useRef,
  useContext,
  createContext,
  useMemo,
  type ReactNode,
  type ComponentRef,
  type ComponentPropsWithoutRef,
} from 'react';
import { Popover, PopoverContent, PopoverTrigger } from './popover';

interface PopupContextObject {
  open: boolean;
  setOpen: (open: boolean) => void;

  handleOpen: (e: React.PointerEvent) => void;
  handleClose: (e: React.PointerEvent) => void;
}

const PopupContext = createContext<PopupContextObject | undefined>(undefined);

function Popup({
  delay = 300,
  children,
}: {
  delay?: number;
  children: ReactNode;
}) {
  const [open, setOpen] = useState(false);
  const openTimeoutRef = useRef<number>(undefined);
  const closeTimeoutRef = useRef<number>(undefined);

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopupContext.Provider
        value={useMemo(
          () => ({
            open,
            setOpen,
            handleOpen(e) {
              if (e.pointerType === 'touch') return;
              if (closeTimeoutRef.current)
                clearTimeout(closeTimeoutRef.current);

              openTimeoutRef.current = window.setTimeout(() => {
                setOpen(true);
              }, delay);
            },
            handleClose(e) {
              if (e.pointerType === 'touch') return;
              if (openTimeoutRef.current) clearTimeout(openTimeoutRef.current);

              closeTimeoutRef.current = window.setTimeout(() => {
                setOpen(false);
              }, delay);
            },
          }),
          [delay, open],
        )}
      >
        {children}
      </PopupContext.Provider>
    </Popover>
  );
}

const PopupTrigger = forwardRef<
  ComponentRef<typeof PopoverTrigger>,
  ComponentPropsWithoutRef<typeof PopoverTrigger>
>((props, ref) => {
  const ctx = useContext(PopupContext);
  if (!ctx) throw new Error('Missing Popup Context');

  return (
    <PopoverTrigger
      ref={ref}
      onPointerEnter={ctx.handleOpen}
      onPointerLeave={ctx.handleClose}
      {...props}
    />
  );
});

PopupTrigger.displayName = 'PopupTrigger';

const PopupContent = forwardRef<
  ComponentRef<typeof PopoverContent>,
  ComponentPropsWithoutRef<typeof PopoverContent>
>((props, ref) => {
  const ctx = useContext(PopupContext);
  if (!ctx) throw new Error('Missing Popup Context');

  return (
    <PopoverContent
      ref={ref}
      onPointerEnter={ctx.handleOpen}
      onPointerLeave={ctx.handleClose}
      onOpenAutoFocus={(e) => {
        e.preventDefault();
      }}
      onCloseAutoFocus={(e) => {
        e.preventDefault();
      }}
      {...props}
    />
  );
});

PopupContent.displayName = 'PopupContent';

export { Popup, PopupTrigger, PopupContent };



================================================
FILE: packages/twoslash/styles/twoslash.css
================================================
/* ===== Basic ===== */
@theme {
  --color-twoslash-error-foreground: #d45656;
  --color-twoslash-error: #d4565620;
  --color-twoslash-tag-foreground: #3772cf;
  --color-twoslash-tag: #3772cf20;
  --color-twoslash-tag-warn-foreground: #c37d0d;
  --color-twoslash-tag-warn: #c37d0d20;
  --color-twoslash-tag-annotate-foreground: #1ba673;
  --color-twoslash-tag-annotate: #1ba67320;
}

.twoslash-meta-line {
  display: flex;
}

.twoslash-popup-container,
.twoslash-completion-list {
  position: relative;
  user-select: none;
  display: flex;
  margin-top: 8px;
  width: 20rem;
  flex-direction: column;
  white-space: normal;
  box-shadow:
    0 4px 6px -1px rgb(0 0 0 / 0.1),
    0 2px 4px -2px rgb(0 0 0 / 0.1);
  border: 1px solid var(--color-fd-border);
  border-radius: 6px;
  padding: 8px;
  z-index: 8;
  color: var(--color-fd-popover-foreground);
  background-color: var(--color-fd-popover);
}

.twoslash-completion-cursor {
  display: inline-flex;
  flex-direction: column;
}

.twoslash-completion-list {
  margin-right: -20rem;
}

.twoslash-completion-list:hover {
  user-select: auto;
}

.twoslash-popup-arrow {
  position: absolute;
  top: -4px;
  left: 1em;
  transform: rotate(-45deg);
  pointer-events: none;
  width: 6px;
  height: 6px;
  border-top-width: 1px;
  border-right-width: 1px;
  border-color: var(--color-fd-primary);
  background-color: var(--color-fd-popover);
}

.twoslash-popup-docs-tag {
  display: flex;
  flex-direction: row;
  gap: 0.5em;
}

.twoslash-popup-docs-tag-name {
  font-weight: 600;
}

.twoslash-popup-code {
  font-size: 13px !important;
  overflow-wrap: anywhere;
}

.twoslash-popup-code .line {
  padding-left: 0 !important;
}

.twoslash-popup-docs,
.twoslash-popup-docs-tags {
  font-size: 14px !important;
  line-height: 20px !important;
  margin-top: 8px !important;
}

/* ===== Hover Info ===== */
.twoslash:hover .twoslash-hover {
  border-color: currentColor;
}

.twoslash .twoslash-hover {
  position: relative;
  transition: border 300ms;
  border-bottom: 1px dotted;
  border-color: transparent;
}

/* ===== Error Line ===== */
.twoslash .twoslash-error-line {
  position: relative;
  background-color: var(--twoslash-error-bg);
  border-left: 3px solid var(--color-twoslash-error-foreground);
  color: var(--color-twoslash-error-foreground);
  padding: 6px 12px;
  margin: 0.2em 0;
}

.twoslash .twoslash-error {
  text-decoration: wavy underline var(--color-twoslash-error-foreground);
  padding-bottom: 2px;
}

/* ===== Completions ===== */
.twoslash-completion-cursor::before {
  width: 1px;
  height: 1.4em;
  content: ' ';
  background-color: var(--color-fd-foreground);
}

.twoslash-completion-list {
  display: inline-flex;
}

.twoslash-completion-list li {
  font-size: 13px;
  display: inline-flex;
  align-items: center;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  gap: 0.5rem;
}

.twoslash-completion-list li span.twoslash-completions-unmatched {
  color: var(--color-fd-muted-foreground);
}

.twoslash-completion-list .deprecated {
  text-decoration: line-through;
  opacity: 0.5;
}

/* Icons */
.twoslash-completion-list .twoslash-completions-icon {
  width: 1em;
  flex: none;
  color: var(--color-fd-muted-foreground);
}

/* Custom Tags */
.twoslash .twoslash-tag-line {
  position: relative;
  background-color: var(--color-twoslash-tag);
  border-left: 3px solid var(--color-twoslash-tag-foreground);
  color: var(--color-twoslash-tag-foreground);
  padding: 6px 10px;
  margin: 0.2em 0;
  display: flex;
  align-items: center;
  gap: 0.3em;
}

.twoslash .twoslash-tag-line .twoslash-tag-icon {
  width: 1.1em;
  color: inherit;
}

.twoslash .twoslash-tag-line.twoslash-tag-error-line {
  background-color: var(--color-twoslash-error);
  border-left: 3px solid var(--color-twoslash-error-foreground);
  color: var(--color-twoslash-error-foreground);
}

.twoslash .twoslash-tag-line.twoslash-tag-warn-line {
  background-color: var(--color-twoslash-tag-warn);
  border-left: 3px solid var(--color-twoslash-tag-warn-foreground);
  color: var(--color-twoslash-tag-warn-foreground);
}

.twoslash .twoslash-tag-line.twoslash-tag-annotate-line {
  background-color: var(--color-twoslash-tag-annotate);
  border-left: 3px solid var(--color-twoslash-tag-annotate-foreground);
  color: var(--color-twoslash-tag-annotate-foreground);
}

/* Respect people's wishes to not have animations */
@media (prefers-reduced-motion: reduce) {
  .twoslash * {
    transition: none !important;
  }
}

.fd-twoslash-popover {
  z-index: 50;
  min-width: 220px;
  max-width: 380px;
  max-height: 400px;
  overflow: auto;
  border-radius: var(--radius-xl);
  border: 1px solid var(--color-fd-border);
  background-color: var(--color-fd-popover);
  padding: calc(var(--spacing) * 3);
  font-size: var(--text-sm);
  color: var(--color-fd-popover-foreground);
  box-shadow: var(--shadow-md);
  transform-origin: var(--radix-popover-content-transform-origin);
}

.fd-twoslash-popover[data-state='open'] {
  animation: var(--animate-fd-popover-in);
}

.fd-twoslash-popover[data-state='closed'] {
  animation: var(--animate-fd-popover-out);
}

.fd-twoslash-popover:focus-visible {
  outline-style: none;
}



================================================
FILE: packages/typescript/README.md
================================================
# Fumadocs Typescript

Typescript Integration for Fumadocs.



================================================
FILE: packages/typescript/CHANGELOG.md
================================================
# fumadocs-typescript

## 4.0.6

### Patch Changes

- 1b7bc4b: Add `@types/react` to optional peer dependency to avoid version conflict in monorepos

## 4.0.5

### Patch Changes

- a6c909b: Removed unused devDependencies and migrated from `fast-glob` to `tinyglobby`

## 4.0.4

### Patch Changes

- 6b04eed: Fix errors on special keys
- a1f3273: Lazy load compiler instance

## 4.0.3

### Patch Changes

- 3a5595a: Support deprecated properties in Type Table

## 4.0.2

### Patch Changes

- 38117c1: add `null | undefined` to optional props in a object type

## 4.0.1

### Patch Changes

- f67d20f: Fix `remark-auto-type-table` doesn't render `required` property

## 4.0.0

### Major Changes

- b83d946: **Use `createGenerator` API**

  Create a generator instance:

  ```ts
  import { createGenerator } from 'fumadocs-typescript';

  const generator = createGenerator(tsconfig);
  ```

  Refactor:

  ```tsx
  import { remarkAutoTypeTable, createTypeTable } from 'fumadocs-typescript';

  generateDocumentation('./file.ts', 'MyClass', fs.readFileSync('./file.ts').toString())
  generateMDX('content', {...})
  generateFiles({...})
  const processor = createProcessor({
      remarkPlugins: [remarkAutoTypeTable],
  });

  const AutoTypeTable = createTypeTable()
  return <AutoTypeTable {...props} />
  ```

  To:

  ```tsx
  import { AutoTypeTable, remarkAutoTypeTable } from "fumadocs-typescript";

  generator.generateDocumentation({path: './file.ts'}, 'MyClass')
  generateMDX(generator, 'content', { ... })
  generateFiles(generator, { ... })
  const processor = createProcessor({
      remarkPlugins: [
          [remarkAutoTypeTable, { generator }],
      ],
  });

  return <AutoTypeTable generator={generator} {...props} />
  ```

  This ensure the compiler instance is always re-used.

## 3.1.0

### Minor Changes

- 42d68a6: Support `remarkAutoTypeTable` plugin, deprecate MDX generator in favour of new remark plugin

### Patch Changes

- 5d0dd11: Support overriding `renderMarkdown` function

## 3.0.4

### Patch Changes

- 7608f4e: Support showing optional properties on TypeTable

## 3.0.3

### Patch Changes

- b9601fb: Update Shiki

## 3.0.2

### Patch Changes

- c042eb7: Fix private class members

## 3.0.1

### Patch Changes

- d6d290c: Upgrade Shiki

## 3.0.0

### Major Changes

- f9adba6: Return an array of doc entry in `generateDocumentation`

### Minor Changes

- f9adba6: Support inline type syntax in `AutoTypeTable` `type` prop
- f9adba6: Support `createTypeTable` for shared project instance

### Patch Changes

- be820c4: Bump deps

## 2.1.0

### Minor Changes

- 3a2c837: Disable cache on program-level

### Patch Changes

- 0c251e5: Bump deps

## 2.0.1

### Patch Changes

- 8ef2b68: Bump deps

## 2.0.0

### Major Changes

- f75287d: **Introduce `fumadocs-docgen` package.**

  Offer a better authoring experience for advanced use cases.

  - Move `remark-dynamic-content` and `remark-install` plugins to the new package `fumadocs-docgen`.
  - Support Typescript generator by default

  **Usage**

  Add the `remarkDocGen` plugin to your remark plugins.

  ```ts
  import { remarkDocGen, fileGenerator } from 'fumadocs-docgen';

  remark().use(remarkDocGen, { generators: [fileGenerator()] });
  ```

  Generate docs with code blocks.

  ````mdx
  ```json doc-gen:<generator>
  {
    // options
  }
  ```
  ````

  **Migrate**

  For `remarkDynamicContent`, enable `fileGenerator` and use this syntax:

  ````mdx
  ```json doc-gen:file
  {
    "file": "./path/to/my-file.txt"
  }
  ```
  ````

  For `remarkInstall`, it remains the same:

  ```ts
  import { remarkInstall } from 'fumadocs-docgen';
  ```

## 1.0.2

### Patch Changes

- 77b5b70: Fix compatibility problems with Typescript 5.4.3

## 1.0.1

### Patch Changes

- f4aa6b6: Ignore fields marked with `@internal` tag

## 1.0.0

### Major Changes

- 321d1e1f: Support markdown in type description

### Minor Changes

- 722c2d6e: Support generating MDX files



================================================
FILE: packages/typescript/eslint.config.mjs
================================================
import library from 'eslint-config-custom/library.js';

export default [
  {
    ignores: ['dist/', 'node_modules', '*.test.ts'],
  },
  ...library,
  {
    rules: {
      // typescript is CommonJS
      'import/no-named-as-default-member': 'off',
    },
  },
];



================================================
FILE: packages/typescript/package.json
================================================
{
  "name": "fumadocs-typescript",
  "version": "4.0.6",
  "description": "Typescript Integration for Fumadocs",
  "keywords": [
    "NextJs",
    "fumadocs",
    "Docs"
  ],
  "homepage": "https://fumadocs.vercel.app",
  "repository": "github:fuma-nama/fumadocs",
  "license": "MIT",
  "author": "Fuma Nama",
  "type": "module",
  "exports": {
    ".": {
      "import": "./dist/index.js",
      "types": "./dist/index.d.ts"
    },
    "./ui": {
      "import": "./dist/ui/index.js",
      "types": "./dist/ui/index.d.ts"
    }
  },
  "main": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "files": [
    "dist/*"
  ],
  "scripts": {
    "build": "tsup",
    "clean": "rimraf dist",
    "dev": "tsup --watch",
    "lint": "eslint .",
    "types:check": "tsc --noEmit"
  },
  "dependencies": {
    "estree-util-value-to-estree": "^3.4.0",
    "hast-util-to-estree": "^3.1.3",
    "hast-util-to-jsx-runtime": "^2.3.6",
    "remark": "^15.0.1",
    "remark-rehype": "^11.1.2",
    "shiki": "^3.7.0",
    "tinyglobby": "^0.2.14",
    "ts-morph": "^26.0.0",
    "unist-util-visit": "^5.0.0"
  },
  "devDependencies": {
    "@mdx-js/mdx": "^3.1.0",
    "@types/estree": "^1.0.8",
    "@types/hast": "^3.0.4",
    "@types/mdast": "^4.0.3",
    "@types/node": "24.0.12",
    "@types/react": "19.1.8",
    "@types/react-dom": "19.1.6",
    "eslint-config-custom": "workspace:*",
    "fumadocs-core": "workspace:*",
    "fumadocs-ui": "workspace:*",
    "tsconfig": "workspace:*",
    "typescript": "^5.8.3",
    "unified": "^11.0.5"
  },
  "peerDependencies": {
    "@types/react": "*",
    "typescript": "*"
  },
  "peerDependenciesMeta": {
    "@types/react": {
      "optional": true
    }
  },
  "publishConfig": {
    "access": "public"
  }
}



================================================
FILE: packages/typescript/tsconfig.json
================================================
{
  "extends": "tsconfig/react-library.json",
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "exclude": ["node_modules", "dist", "eslint.config.mjs"]
}



================================================
FILE: packages/typescript/tsup.config.ts
================================================
import { defineConfig } from 'tsup';

export default defineConfig({
  external: ['server-only', 'fumadocs-ui', 'fumadocs-core', 'react'],
  dts: true,
  target: 'es6',
  format: 'esm',
  entry: ['src/index.ts', 'src/ui/index.ts'],
});



================================================
FILE: packages/typescript/vitest.config.ts
================================================
import { defineProject } from 'vitest/config';

export default defineProject({
  resolve: {
    alias: {
      '@/': new URL('./src/', import.meta.url).pathname,
    },
  },
});



================================================
FILE: packages/typescript/src/create-project.ts
================================================
import { Project } from 'ts-morph';

export interface TypescriptConfig {
  files?: string[];
  tsconfigPath?: string;
  /** A root directory to resolve relative path entries in the config file to. e.g. outDir */
  basePath?: string;
}

export function createProject(options: TypescriptConfig = {}): Project {
  return new Project({
    tsConfigFilePath: options.tsconfigPath ?? './tsconfig.json',
    skipAddingFilesFromTsConfig: true,
  });
}



================================================
FILE: packages/typescript/src/index.ts
================================================
export * from '@/lib/base';
export * from '@/lib/mdx';
export * from '@/lib/file';
export { renderMarkdownToHast } from './markdown';
export { createProject } from './create-project';
export * from '@/lib/remark-auto-type-table';



================================================
FILE: packages/typescript/src/markdown.ts
================================================
import type { Nodes } from 'hast';
import { remark } from 'remark';
import {
  rehypeCode,
  type RehypeCodeOptions,
  remarkGfm,
} from 'fumadocs-core/mdx-plugins';
import remarkRehype from 'remark-rehype';

const processor = remark()
  .use(remarkGfm)
  .use(remarkRehype)
  .use(rehypeCode, {
    lazy: true,

    themes: {
      light: 'github-light',
      dark: 'github-dark',
    },
  } satisfies RehypeCodeOptions)
  // @ts-expect-error -- safe
  .use(() => {
    return (tree, file: { data: Record<string, unknown> }) => {
      file.data.tree = tree;

      return '';
    };
  });

export async function renderMarkdownToHast(md: string): Promise<Nodes> {
  md = md.replace(/{@link (?<link>[^}]*)}/g, '$1'); // replace jsdoc links

  const out = await processor.process(md);

  return out.data.tree as Nodes;
}



================================================
FILE: packages/typescript/src/lib/base.ts
================================================
import {
  type ExportedDeclarations,
  Project,
  type Symbol as TsSymbol,
  ts,
  type Type,
} from 'ts-morph';
import { createProject, type TypescriptConfig } from '@/create-project';
import fs from 'node:fs';
import {
  type BaseTypeTableProps,
  type GenerateTypeTableOptions,
  getTypeTableOutput,
} from '@/lib/type-table';
import { createCache } from '@/lib/cache';
import path from 'node:path';

export interface GeneratedDoc {
  name: string;
  description: string;
  entries: DocEntry[];
}

export interface DocEntry {
  name: string;
  description: string;
  type: string;
  tags: Record<string, string>;
  required: boolean;
  deprecated: boolean;
}

interface EntryContext {
  program: Project;
  transform?: Transformer;
  type: Type;
  declaration: ExportedDeclarations;
}

type Transformer = (
  this: EntryContext,
  entry: DocEntry,
  propertyType: Type,
  propertySymbol: TsSymbol,
) => void;

export interface GenerateOptions {
  /**
   * Allow fields with `@internal` tag
   *
   * @defaultValue false
   */
  allowInternal?: boolean;

  /**
   * Modify output property entry
   */
  transform?: Transformer;
}

export type Generator = ReturnType<typeof createGenerator>;

export interface GeneratorOptions extends TypescriptConfig {
  /**
   * cache results, note that some options are not marked as dependency.
   *
   * @defaultValue fs
   */
  cache?: 'fs' | false;

  project?: Project;
}

export function createGenerator(config?: GeneratorOptions | Project) {
  const options =
    config instanceof Project
      ? {
          project: config,
        }
      : config;
  const cacheType = options?.cache ?? 'fs';
  const cache = cacheType === 'fs' ? createCache() : null;
  let instance: Project | undefined;

  function getProject() {
    instance ??= options?.project ?? createProject(options);
    return instance;
  }

  return {
    generateDocumentation(
      file: {
        path: string;
        content?: string;
      },
      name: string | undefined,
      options?: GenerateOptions,
    ) {
      const content =
        file.content ?? fs.readFileSync(path.resolve(file.path)).toString();
      const cacheKey = `${file.path}:${name}:${content}`;
      if (cache) {
        const cached = cache.read(cacheKey) as GeneratedDoc[] | undefined;
        if (cached) return cached;
      }
      const sourceFile = getProject().createSourceFile(file.path, content, {
        overwrite: true,
      });
      const out: GeneratedDoc[] = [];

      for (const [k, d] of sourceFile.getExportedDeclarations()) {
        if (name && name !== k) continue;

        if (d.length > 1)
          console.warn(
            `export ${k} should not have more than one type declaration.`,
          );

        out.push(generate(getProject(), k, d[0], options));
      }

      cache?.write(cacheKey, out);
      return out;
    },
    generateTypeTable(
      props: BaseTypeTableProps,
      options?: GenerateTypeTableOptions,
    ) {
      return getTypeTableOutput(this, props, options);
    },
  };
}

/**
 * Generate documentation for properties in an exported type/interface
 *
 * @deprecated use `createGenerator` instead
 */
export function generateDocumentation(
  file: string,
  name: string | undefined,
  content: string,
  options: GenerateOptions & {
    /**
     * Typescript configurations
     */
    config?: TypescriptConfig;
    project?: Project;
  } = {},
): GeneratedDoc[] {
  const gen = createGenerator(options.project ?? options.config);

  return gen.generateDocumentation({ path: file, content }, name, options);
}

function generate(
  program: Project,
  name: string,
  declaration: ExportedDeclarations,
  { allowInternal = false, transform }: GenerateOptions = {},
): GeneratedDoc {
  const entryContext: EntryContext = {
    transform,
    program,
    type: declaration.getType(),
    declaration,
  };

  const comment = declaration
    .getSymbol()
    ?.compilerSymbol.getDocumentationComment(
      program.getTypeChecker().compilerObject,
    );

  return {
    name,
    description: comment ? ts.displayPartsToString(comment) : '',
    entries: declaration
      .getType()
      .getProperties()
      .map((prop) => getDocEntry(prop, entryContext))
      .filter(
        (entry) => entry && (allowInternal || !('internal' in entry.tags)),
      ) as DocEntry[],
  };
}

function getDocEntry(
  prop: TsSymbol,
  context: EntryContext,
): DocEntry | undefined {
  const { transform, program } = context;

  if (context.type.isClass() && prop.getName().startsWith('#')) {
    return;
  }

  const subType = program
    .getTypeChecker()
    .getTypeOfSymbolAtLocation(prop, context.declaration);
  const tags = Object.fromEntries(
    prop
      .getJsDocTags()
      .map((tag) => [tag.getName(), ts.displayPartsToString(tag.getText())]),
  );

  let typeName = subType.getText(
    undefined,
    ts.TypeFormatFlags.UseAliasDefinedOutsideCurrentScope,
  );

  if (
    subType.getAliasSymbol() &&
    subType.getAliasTypeArguments().length === 0
  ) {
    typeName = subType.getAliasSymbol()?.getEscapedName() ?? typeName;
  }

  if (prop.isOptional() && typeName.endsWith('| undefined')) {
    typeName = typeName
      .slice(0, typeName.length - '| undefined'.length)
      .trimEnd();
  }

  if ('remarks' in tags) {
    typeName = /^`(?<name>.+)`/.exec(tags.remarks)?.[1] ?? typeName;
  }

  const entry: DocEntry = {
    name: prop.getName(),
    description: ts.displayPartsToString(
      prop.compilerSymbol.getDocumentationComment(
        program.getTypeChecker().compilerObject,
      ),
    ),
    tags,
    type: typeName,
    required: !prop.isOptional(),
    deprecated: prop
      .getJsDocTags()
      .some((tag) => tag.getName() === 'deprecated'),
  };

  transform?.call(context, entry, subType, prop);

  return entry;
}



================================================
FILE: packages/typescript/src/lib/cache.ts
================================================
import fs from 'node:fs';
import { createHash } from 'node:crypto';
import path from 'node:path';

export function createCache() {
  const dir = path.join(process.cwd(), '.next/fumadocs-typescript');
  try {
    fs.mkdirSync(dir, { recursive: true });
  } catch {
    // it fails on Vercel as of 12 May, we can skip it
  }

  return {
    write(input: string, data: unknown) {
      const hash = createHash('SHA256')
        .update(input)
        .digest('hex')
        .slice(0, 12);

      fs.writeFileSync(path.join(dir, `${hash}.json`), JSON.stringify(data));
    },
    read(input: string): unknown | undefined {
      const hash = createHash('SHA256')
        .update(input)
        .digest('hex')
        .slice(0, 12);

      try {
        return JSON.parse(
          fs.readFileSync(path.join(dir, `${hash}.json`)).toString(),
        );
      } catch {
        return;
      }
    },
  };
}



================================================
FILE: packages/typescript/src/lib/file.ts
================================================
import * as path from 'node:path';
import { mkdir, writeFile, readFile } from 'node:fs/promises';
import { glob, type GlobOptions } from 'tinyglobby';
import { generateMDX, type GenerateMDXOptions } from './mdx';
import type { Generator } from '@/lib/base';

export interface GenerateFilesOptions {
  input: string | string[];
  /**
   * Output directory, or a function that returns the output path
   */
  output: string | ((inputPath: string) => string);
  globOptions?: GlobOptions;
  options?: GenerateMDXOptions;

  /**
   * @returns New content
   */
  transformOutput?: (path: string, content: string) => string;
}

export async function generateFiles(
  generator: Generator,
  options: GenerateFilesOptions,
): Promise<void> {
  const files = await glob(options.input, options.globOptions);

  const produce = files.map(async (file) => {
    const absolutePath = path.resolve(file);
    const outputPath =
      typeof options.output === 'function'
        ? options.output(file)
        : path.resolve(
            options.output,
            `${path.basename(file, path.extname(file))}.mdx`,
          );

    const content = (await readFile(absolutePath)).toString();
    let result = generateMDX(generator, content, {
      basePath: path.dirname(absolutePath),
      ...options.options,
    });

    if (options.transformOutput) {
      result = options.transformOutput(outputPath, result);
    }

    await write(outputPath, result);
    console.log(`Generated: ${outputPath}`);
  });

  await Promise.all(produce);
}

async function write(file: string, content: string): Promise<void> {
  await mkdir(path.dirname(file), { recursive: true });
  await writeFile(file, content);
}



================================================
FILE: packages/typescript/src/lib/mdx.ts
================================================
import * as path from 'node:path';
import {
  type DocEntry,
  type GeneratedDoc,
  type Generator,
  type GenerateOptions,
} from './base';

interface Templates {
  block: (doc: GeneratedDoc, children: string) => string;
  property: (entry: DocEntry) => string;
}

export interface GenerateMDXOptions extends GenerateOptions {
  /**
   * a root directory to resolve relative file paths
   */
  basePath?: string;
  templates?: Partial<Templates>;
}

// \r?\n is required for cross-platform compatibility
const regex =
  /^---type-table---\r?\n(?<file>.+?)(?:#(?<name>.+))?\r?\n---end---$/gm;

const defaultTemplates: Templates = {
  block: (doc, c) => `### ${doc.name}

${doc.description}

<div className='*:border-b [&>*:last-child]:border-b-0'>${c}</div>`,

  property: (c) => `<div className='text-sm text-fd-muted-foreground py-4'>

<div className="flex flex-row items-center gap-4">
  <code className="text-sm">${c.name}</code>
  <code className="text-fd-muted-foreground">{${JSON.stringify(c.type)}}</code>
</div>

${c.description || 'No Description'}

${Object.entries(c.tags)
  .map(([tag, value]) => `- ${tag}:\n${replaceJsDocLinks(value)}`)
  .join('\n')}

</div>`,
};

export function generateMDX(
  generator: Generator,
  source: string,
  { basePath = './', templates: overrides, ...rest }: GenerateMDXOptions = {},
): string {
  const templates = { ...defaultTemplates, ...overrides };

  return source.replace(regex, (...args) => {
    const groups = args[args.length - 1] as {
      file: string;
      name: string | undefined;
    };
    const file = path.resolve(basePath, groups.file);
    const docs = generator.generateDocumentation(
      { path: file },
      groups.name,
      rest,
    );

    return docs
      .map((doc) =>
        templates.block(doc, doc.entries.map(templates.property).join('\n')),
      )
      .join('\n\n');
  });
}

function replaceJsDocLinks(md: string): string {
  return md.replace(/{@link (?<link>[^}]*)}/g, '$1');
}



================================================
FILE: packages/typescript/src/lib/remark-auto-type-table.tsx
================================================
import type { Root } from 'mdast';
import type { Transformer } from 'unified';
import type {
  ExpressionStatement,
  ObjectExpression,
  Program,
  Property,
} from 'estree';
import { createGenerator, type DocEntry, type Generator } from '@/lib/base';
import { renderMarkdownToHast } from '@/markdown';
import { valueToEstree } from 'estree-util-value-to-estree';
import { visit } from 'unist-util-visit';
import {
  type BaseTypeTableProps,
  type GenerateTypeTableOptions,
} from '@/lib/type-table';
import { toEstree } from 'hast-util-to-estree';
import { dirname } from 'node:path';

async function mapProperty(
  entry: DocEntry,
  renderMarkdown: typeof renderMarkdownToHast,
): Promise<Property> {
  const value = valueToEstree({
    type: entry.type,
    default: entry.tags.default || entry.tags.defaultValue,
    required: entry.required,
  }) as ObjectExpression;

  if (entry.description) {
    const hast = toEstree(await renderMarkdown(entry.description), {
      elementAttributeNameCase: 'react',
    }).body[0] as ExpressionStatement;

    value.properties.push({
      type: 'Property',
      method: false,
      shorthand: false,
      computed: false,
      key: {
        type: 'Identifier',
        name: 'description',
      },
      kind: 'init',
      value: hast.expression,
    });
  }

  return {
    type: 'Property',
    method: false,
    shorthand: false,
    computed: false,
    key: {
      type: 'Literal',
      value: entry.name,
    },
    kind: 'init',
    value,
  };
}

export interface RemarkAutoTypeTableOptions {
  /**
   * @defaultValue 'auto-type-table'
   */
  name?: string;

  /**
   * @defaultValue 'TypeTable'
   */
  outputName?: string;

  renderMarkdown?: typeof renderMarkdownToHast;

  /**
   * Customise type table generation
   */
  options?: GenerateTypeTableOptions;

  /**
   * generate required `value` property for `remark-stringify`
   */
  remarkStringify?: boolean;

  generator?: Generator;
}

/**
 * Compile `auto-type-table` into Fumadocs UI compatible TypeTable
 *
 * MDX is required to use this plugin.
 */
export function remarkAutoTypeTable({
  name = 'auto-type-table',
  outputName = 'TypeTable',
  renderMarkdown = renderMarkdownToHast,
  options = {},
  remarkStringify = true,
  generator = createGenerator(),
}: RemarkAutoTypeTableOptions = {}): Transformer<Root, Root> {
  return async (tree, file) => {
    const queue: Promise<void>[] = [];
    let basePath = options?.basePath;
    if (!basePath && file.path) basePath = dirname(file.path);

    visit(tree, 'mdxJsxFlowElement', (node) => {
      if (node.name !== name) return;
      const props: Record<string, string> = {};

      for (const attr of node.attributes) {
        if (attr.type !== 'mdxJsxAttribute' || typeof attr.value !== 'string')
          throw new Error(
            '`auto-type-table` does not support non-string attributes',
          );

        props[attr.name] = attr.value;
      }

      async function run() {
        const output = await generator.generateTypeTable(
          props as BaseTypeTableProps,
          {
            ...options,
            basePath,
          },
        );

        const rendered = output.map(async (doc) => {
          const properties = await Promise.all(
            doc.entries.map((entry) => mapProperty(entry, renderMarkdown)),
          );

          return {
            type: 'mdxJsxFlowElement',
            name: outputName,
            attributes: [
              {
                type: 'mdxJsxAttribute',
                name: 'type',
                value: {
                  type: 'mdxJsxAttributeValueExpression',
                  value: remarkStringify ? JSON.stringify(doc, null, 2) : '',
                  data: {
                    estree: {
                      type: 'Program',
                      sourceType: 'module',
                      body: [
                        {
                          type: 'ExpressionStatement',
                          expression: {
                            type: 'ObjectExpression',
                            properties,
                          },
                        },
                      ],
                    } satisfies Program,
                  },
                },
              },
            ],
            children: [],
          };
        });

        Object.assign(node, {
          type: 'root',
          attributes: [],
          children: await Promise.all(rendered),
        } as Root);
      }

      queue.push(run());
      return 'skip';
    });

    await Promise.all(queue);
  };
}



================================================
FILE: packages/typescript/src/lib/type-table.ts
================================================
import * as fs from 'node:fs/promises';
import { type GenerateOptions, type Generator } from '@/lib/base';
import { join } from 'node:path';

export interface BaseTypeTableProps {
  /**
   * The path to source TypeScript file.
   */
  path?: string;

  /**
   * Exported type name to generate from.
   */
  name?: string;

  /**
   * Set the type to generate from.
   *
   * When used with `name`, it generates the type with `name` as export name.
   *
   * ```ts
   * export const myName = MyType;
   * ```
   *
   * When `type` contains multiple lines, `export const` is not added.
   * You need to export it manually, and specify the type name with `name`.
   *
   * ```tsx
   * <AutoTypeTable
   *   path="./file.ts"
   *   type={`import { ReactNode } from "react"
   *   export const MyName = ReactNode`}
   *   name="MyName"
   * />
   * ```
   */
  type?: string;
}

export interface GenerateTypeTableOptions extends GenerateOptions {
  /**
   * base path to resolve `path` prop
   */
  basePath?: string;
}

export async function getTypeTableOutput(
  gen: Generator,
  { name, type, ...props }: BaseTypeTableProps,
  options?: GenerateTypeTableOptions,
) {
  const file =
    props.path && options?.basePath
      ? join(options.basePath, props.path)
      : props.path;
  let typeName = name;
  let content = '';

  if (file) {
    content = (await fs.readFile(file)).toString();
  }

  if (type && type.split('\n').length > 1) {
    content += `\n${type}`;
  } else if (type) {
    typeName ??= '$Fumadocs';
    content += `\nexport type ${typeName} = ${type}`;
  }

  const output = gen.generateDocumentation(
    { path: file ?? 'temp.ts', content },
    typeName,
    options,
  );

  if (name && output.length === 0)
    throw new Error(`${name} in ${file ?? 'empty file'} doesn't exist`);

  return output;
}



================================================
FILE: packages/typescript/src/ui/auto-type-table.tsx
================================================
import { TypeTable } from 'fumadocs-ui/components/type-table';
import { type Jsx, toJsxRuntime } from 'hast-util-to-jsx-runtime';
import * as runtime from 'react/jsx-runtime';
import defaultMdxComponents from 'fumadocs-ui/mdx';
import { renderMarkdownToHast } from '@/markdown';
import 'server-only';
import type { ReactNode } from 'react';
import {
  type BaseTypeTableProps,
  type GenerateTypeTableOptions,
} from '@/lib/type-table';
import { type Generator } from '@/lib/base';

export type AutoTypeTableProps = BaseTypeTableProps;

export async function AutoTypeTable({
  generator,
  options = {},
  renderMarkdown = renderMarkdownDefault,
  ...props
}: AutoTypeTableProps & {
  generator: Generator;

  renderMarkdown?: typeof renderMarkdownDefault;
  options?: GenerateTypeTableOptions;
}) {
  const output = await generator.generateTypeTable(props, options);

  return output.map(async (item) => {
    const entries = item.entries.map(
      async (entry) =>
        [
          entry.name,
          {
            type: entry.type,
            description: await renderMarkdown(entry.description),
            default: entry.tags.default || entry.tags.defaultValue,
            required: entry.required,
            deprecated: entry.deprecated,
          },
        ] as const,
    );

    return (
      <TypeTable
        key={item.name}
        type={Object.fromEntries(await Promise.all(entries))}
      />
    );
  });
}

async function renderMarkdownDefault(md: string): Promise<ReactNode> {
  return toJsxRuntime(await renderMarkdownToHast(md), {
    Fragment: runtime.Fragment,
    jsx: runtime.jsx as Jsx,
    jsxs: runtime.jsxs as Jsx,
    components: { ...defaultMdxComponents, img: undefined },
  });
}



================================================
FILE: packages/typescript/src/ui/index.ts
================================================
export * from './auto-type-table';



================================================
FILE: packages/typescript/test/index.test.ts
================================================
import { expect, test } from 'vitest';
import { createGenerator } from '@/lib/base';

const generator = createGenerator();

test('class members', () => {
  const out = generator.generateDocumentation(
    {
      path: 'index.ts',
      content: `
    export class MyClass {
        #name: string;
        private test: string;
        age: number;
        
        constructor(name: string) { 
            this.#name = name;
        }
    }
    `,
    },
    'MyClass',
  );

  expect(out).toMatchInlineSnapshot(`
    [
      {
        "description": "",
        "entries": [
          {
            "deprecated": false,
            "description": "",
            "name": "test",
            "required": true,
            "tags": {},
            "type": "string",
          },
          {
            "deprecated": false,
            "description": "",
            "name": "age",
            "required": true,
            "tags": {},
            "type": "number",
          },
        ],
        "name": "MyClass",
      },
    ]
  `);
});

test('interface members', () => {
  const out = generator.generateDocumentation(
    {
      path: 'index.ts',
      content: `
    export interface MyInterface {
        "#name": string;
        age: number
    }
    `,
    },
    'MyInterface',
  );

  expect(out).toMatchInlineSnapshot(`
    [
      {
        "description": "",
        "entries": [
          {
            "deprecated": false,
            "description": "",
            "name": "#name",
            "required": true,
            "tags": {},
            "type": "string",
          },
          {
            "deprecated": false,
            "description": "",
            "name": "age",
            "required": true,
            "tags": {},
            "type": "number",
          },
        ],
        "name": "MyInterface",
      },
    ]
  `);
});



================================================
FILE: packages/typescript/test/type-gen.test.ts
================================================
import {
  createGenerator,
  type GeneratorOptions,
  remarkAutoTypeTable,
  type RemarkAutoTypeTableOptions,
} from '../src';
import { fileURLToPath } from 'url';
import { expect, test } from 'vitest';
import * as path from 'node:path';
import * as fs from 'node:fs/promises';
import { createProcessor } from '@mdx-js/mdx';

const relative = (s: string): string =>
  path.resolve(fileURLToPath(new URL(s, import.meta.url)));

const tsconfig: GeneratorOptions = {
  tsconfigPath: relative('../tsconfig.json'),
  basePath: relative('../'),
  cache: false,
};

const generator = createGenerator(tsconfig);

test('Run', async () => {
  const file = relative('./fixtures/test.ts');

  const result = ['Test1', 'Test2', 'Test3'].flatMap((name) =>
    generator.generateDocumentation({ path: file }, name),
  );

  await expect(JSON.stringify(result, null, 2)).toMatchFileSnapshot(
    './fixtures/test.output.json',
  );
});

test('Run on MDX files', async () => {
  const file = relative('./fixtures/test.mdx');
  const processor = createProcessor({
    remarkPlugins: [
      [
        remarkAutoTypeTable,
        {
          generator,
        } as RemarkAutoTypeTableOptions,
      ],
    ],
  });

  const output = await processor.process({
    path: file,
    value: (await fs.readFile(file)).toString(),
  });
  await expect(String(output.value)).toMatchFileSnapshot(
    './fixtures/test.output.js',
  );
});



================================================
FILE: packages/typescript/test/fixtures/test-2.ts
================================================
/**
 * Player in the room
 */
export interface Player {
  /**
   * The name of player
   *
   * @see https://fumadocs.vercel.app
   * @defaultValue Henry
   */
  name: string;

  /**
   * @example
   * ```js
   * console.log("Hello World")
   * ```
   * @remarks `timestamp`
   * Returned by API
   */
  age: number;

  /**
   * @internal
   */
  privateValue: string;
}



================================================
FILE: packages/typescript/test/fixtures/test.mdx
================================================
<auto-type-table path="./test-2.ts" name="Player" />



================================================
FILE: packages/typescript/test/fixtures/test.output.js
================================================
import {Fragment as _Fragment, jsx as _jsx} from "react/jsx-runtime";
function _createMdxContent(props) {
  const _components = {
    p: "p",
    ...props.components
  }, {TypeTable} = _components;
  if (!TypeTable) _missingMdxReference("TypeTable", true);
  return _jsx(_Fragment, {
    children: _jsx(_Fragment, {
      children: _jsx(TypeTable, {
        type: {
          "name": {
            "type": "string",
            "default": "Henry",
            "required": true,
            description: _jsx(_Fragment, {
              children: _jsx(_components.p, {
                children: "The name of player"
              })
            })
          },
          "age": {
            "type": "timestamp",
            "default": undefined,
            "required": true
          }
        }
      })
    })
  });
}
export default function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = props.components || ({});
  return MDXLayout ? _jsx(MDXLayout, {
    ...props,
    children: _jsx(_createMdxContent, {
      ...props
    })
  }) : _createMdxContent(props);
}
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}



================================================
FILE: packages/typescript/test/fixtures/test.output.json
================================================
[
  {
    "name": "Test1",
    "description": "",
    "entries": [
      {
        "name": "name",
        "description": "",
        "tags": {},
        "type": "string",
        "required": true,
        "deprecated": false
      },
      {
        "name": "age",
        "description": "",
        "tags": {
          "defaultValue": "4"
        },
        "type": "number",
        "required": false,
        "deprecated": false
      }
    ]
  },
  {
    "name": "Test2",
    "description": "",
    "entries": [
      {
        "name": "name",
        "description": "",
        "tags": {},
        "type": "string",
        "required": true,
        "deprecated": false
      },
      {
        "name": "age",
        "description": "",
        "tags": {
          "defaultValue": "4"
        },
        "type": "number",
        "required": false,
        "deprecated": false
      },
      {
        "name": "generic",
        "description": "",
        "tags": {},
        "type": "GenericType<string, string, string>",
        "required": true,
        "deprecated": false
      }
    ]
  },
  {
    "name": "Test3",
    "description": "Player in the room",
    "entries": [
      {
        "name": "name",
        "description": "The name of player",
        "tags": {
          "see": "https://fumadocs.vercel.app",
          "defaultValue": "Henry"
        },
        "type": "string",
        "required": true,
        "deprecated": false
      },
      {
        "name": "age",
        "description": "",
        "tags": {
          "example": "```js\nconsole.log(\"Hello World\")\n```",
          "remarks": "`timestamp`\nReturned by API"
        },
        "type": "timestamp",
        "required": true,
        "deprecated": false
      }
    ]
  }
]


================================================
FILE: packages/typescript/test/fixtures/test.ts
================================================
export interface Test1 {
  name: string;
  /**
   * @defaultValue 4
   */
  age?: number;
}

export type Test2 = Test1 & {
  generic: GenericType<string, string, string>;
};

export type { Player as Test3 } from './test-2';

interface GenericType<A, B, C> {
  A: A;
  B: B;
  C: C;
}



================================================
FILE: packages/ui/README.md
================================================
# Fumadocs UI

The Next.js framework for building documentation website.

[Read Documentation](https://fumadocs.vercel.app/docs/ui)



================================================
FILE: packages/ui/CHANGELOG.md
================================================
# next-docs-ui

## 15.6.3

### Patch Changes

- a2d7940: Fix layout: remove reserved sidebar space when sidebar is disabled in DocsLayout
  - fumadocs-core@15.6.3

## 15.6.2

### Patch Changes

- 1e50889: Fix mobile sidebar trigger visibility when sidebar is disabled
- 353c139: Callout add fallback icons
- 5844c6f: no longer sort type table properties by default
  - fumadocs-core@15.6.2

## 15.6.1

### Patch Changes

- Updated dependencies [1a902ff]
  - fumadocs-core@15.6.1

## 15.6.0

### Minor Changes

- f8d1709: **Redesigned Codeblock Tabs**

  Instead of relying on `Tabs` component, it supports a dedicated tabs component for codeblocks:

  ```tsx
  <CodeBlockTabs>
    <CodeBlockTabsList>
      <CodeBlockTabsTrigger value="value">Name</CodeBlockTabsTrigger>
    </CodeBlockTabsList>
    <CodeBlockTab value="value" asChild>
      <CodeBlock>...</CodeBlock>
    </CodeBlockTab>
  </CodeBlockTabs>
  ```

  The old usage is not deprecated, you can still use them while Fumadocs' remark plugins will generate codeblock tabs using the new way.

### Patch Changes

- bf15617: Fix Notebook layout minor UI inconsistency
- Updated dependencies [d0f8a15]
- Updated dependencies [84918b8]
- Updated dependencies [f8d1709]
  - fumadocs-core@15.6.0

## 15.5.5

### Patch Changes

- e9b1c9c: Support `rainbowColors` API in `<Banner />` component
- d5c9b11: Fix Notebook Layout tab mode `navbar` cannot handle nested tabs
- Updated dependencies [0d3f76b]
  - fumadocs-core@15.5.5

## 15.5.4

### Patch Changes

- 4a1d3cf: Reduce sidebar intensity
- 58b7596: Fix copying line breaks with Twoslash codeblocks
- Updated dependencies [35c3c0b]
  - fumadocs-core@15.5.4

## 15.5.3

### Patch Changes

- Updated dependencies [7d1ac21]
  - fumadocs-core@15.5.3

## 15.5.2

### Patch Changes

- b675728: Redesign search dialog style
- 1b7bc4b: Add `@types/react` to optional peer dependency to avoid version conflict in monorepos
- 82fc4c8: Avoid direct update to passed props.
- Updated dependencies [7a45921]
- Updated dependencies [1b7bc4b]
  - fumadocs-core@15.5.2

## 15.5.1

### Patch Changes

- b4916d2: Move `hide-if-empty` component to Fumadocs Core
- 68526ea: Redesign `fumadocs-ui/components/dialog/search` usage to make it composable, and mark it as stable API.
- Updated dependencies [b4916d2]
- Updated dependencies [8738b9c]
- Updated dependencies [a66886b]
  - fumadocs-core@15.5.1

## 15.5.0

### Minor Changes

- 589d101: **Move TOC closer to page body on larger viewports**

  Changed layout positioning, all layout components now use `fixed` position.

  This may impact sites that:
  - using custom styling on Fumadocs layouts.
  - added a custom footer (see below).

  For custom footer, make sure to add them into `<DocsLayout />` instead:

  ```tsx
  <DocsLayout>
    {children}
    <div className="h-[400px] bg-fd-secondary">Hello World</div>
  </DocsLayout>
  ```

### Patch Changes

- 50f8f7f: Update Home Layout navbar design
- 697d5b4: Support specifying a custom `value` for `Accordion`
  - fumadocs-core@15.5.0

## 15.4.2

### Patch Changes

- Updated dependencies [0ab6c7f]
  - fumadocs-core@15.4.2

## 15.4.1

### Patch Changes

- e72b7b4: hotfix: production source map being ignored
  - fumadocs-core@15.4.1

## 15.4.0

### Minor Changes

- 961b67e: **Bump algolia search to v5**

  This also introduced changes to some APIs since `algoliasearch` v4 and v5 has many differences.

  Now we highly recommend to pass an index name to `sync()`:

  ```ts
  import { algoliasearch } from 'algoliasearch';
  import { sync } from 'fumadocs-core/search/algolia';
  const client = algoliasearch('id', 'key');

  void sync(client, {
    indexName: 'document',
    documents: records,
  });
  ```

  For search client, pass them to `searchOptions`:

  ```tsx
  'use client';

  import { liteClient } from 'algoliasearch/lite';
  import type { SharedProps } from 'fumadocs-ui/components/dialog/search';
  import SearchDialog from 'fumadocs-ui/components/dialog/search-algolia';

  const client = liteClient(appId, apiKey);

  export default function CustomSearchDialog(props: SharedProps) {
    return (
      <SearchDialog
        searchOptions={{
          client,
          indexName: 'document',
        }}
        {...props}
        showAlgolia
      />
    );
  }
  ```

### Patch Changes

- 092fd04: Fallback to `dangerouslySetInnerHTML` for inlined scripts for backward compatibility
- 7d78bc5: Improve `createRelativeLink` and `getPageByHref` for i18n usage
- Updated dependencies [1b999eb]
- Updated dependencies [961b67e]
- Updated dependencies [7d78bc5]
  - fumadocs-core@15.4.0

## 15.3.4

### Patch Changes

- e0c2a92: Improve UI consistency
- 71fc1a5: Mount all children of tabs by default
  - fumadocs-core@15.3.4

## 15.3.3

### Patch Changes

- 05b3bd9: [Internal] require `TagsListItem` to be used with `TagsList`
- 39bf088: Support usage with `Tabs` in primitive way
- e955a98: Hotfix problems with `HideIfEmpty`
- Updated dependencies [4ae7b4a]
  - fumadocs-core@15.3.3

## 15.3.2

### Patch Changes

- 1753cf1: Fix navbar external items and nav menu scroll
- 9b38baf: add `success` type to callout
- 8e862e5: Use native scroll bar for codeblocks and some elements for better performance
- ac0ab12: Improve performance by reducing usage of `@radix-ui/react-scroll-area`
- c25d678: Support Shiki focus notation transformer by default
- Updated dependencies [c25d678]
  - fumadocs-core@15.3.2

## 15.3.1

### Patch Changes

- 3372792: Support line numbers in codeblock
- Updated dependencies [3372792]
  - fumadocs-core@15.3.1

## 15.3.0

### Minor Changes

- 52b5ad8: **Redesign mobile sidebar**

  Mobile sidebar is now a separate component from the desktop one, with its own id `nd-sidebar-mobile`.

  note to advanced use cases: Fumadocs UI now stopped using `fumadocs-core/sidebar`, avoid using the primitive directly as provider is not used.

### Patch Changes

- abce713: Adjust design (Accordion, Tabs, border color of themes)
- Updated dependencies [c05dc03]
  - fumadocs-core@15.3.0

## 15.2.15

### Patch Changes

- 50db874: Remove placeholder space for codeblocks
- Updated dependencies [50db874]
- Updated dependencies [79e75c3]
  - fumadocs-core@15.2.15

## 15.2.14

### Patch Changes

- Updated dependencies [6ea1718]
  - fumadocs-core@15.2.14

## 15.2.13

### Patch Changes

- b433d93: Recommend using custom button/link instead for edit on GitHub button
- 1e07ed8: Support disabling codeblock styles with `.not-fumadocs-codeblock`
  - fumadocs-core@15.2.13

## 15.2.12

### Patch Changes

- b68bb51: Fix sidebar legacy behaviours
- 127e681: Fix Notebook layout ignores `themeSwitch` and `sidebar.collapsible` on nav mode
- Updated dependencies [acff667]
  - fumadocs-core@15.2.12

## 15.2.11

### Patch Changes

- d4d1ba7: Fix sidebar collapsible control search button still visible with search disabled
- 4e62b41: Bundle `lucide-react` as part of library
- 07cd690: Support separators without name
- Updated dependencies [07cd690]
  - fumadocs-core@15.2.11

## 15.2.10

### Patch Changes

- 3a5595a: Support deprecated properties in Type Table
- 8c9fc1f: Fix callout margin
  - fumadocs-core@15.2.10

## 15.2.9

### Patch Changes

- e72af4b: Improve layout
- ea0f468: Fix relative file href with hash
- 7f3c30e: Add `shadcn.css` preset
  - fumadocs-core@15.2.9

## 15.2.8

### Patch Changes

- 4fad539: fix TOC relative position
- a673ef4: Make `@source` in `global.css` optional
  - fumadocs-core@15.2.8

## 15.2.7

### Patch Changes

- eb18da9: Support `searchToggle` option to customise search toggle
- 085e39f: Fix inline code issues
- 4d50bcf: fix banner overlapping with collapsible control
- Updated dependencies [ec85a6c]
- Updated dependencies [e1a61bf]
  - fumadocs-core@15.2.7

## 15.2.6

### Patch Changes

- b07e98c: Deprecate `DocsCategory`, see https://fumadocs.vercel.app/docs/ui/markdown#further-reading-section
- Updated dependencies [d49f9ae]
- Updated dependencies [b07e98c]
- Updated dependencies [3a4bd88]
  - fumadocs-core@15.2.6

## 15.2.5

### Patch Changes

- Updated dependencies [c66ed79]
  - fumadocs-core@15.2.5

## 15.2.4

### Patch Changes

- 1057957: Fix type problems on dynamic codeblock
- Updated dependencies [1057957]
  - fumadocs-core@15.2.4

## 15.2.3

### Patch Changes

- 5e4e9ec: Deprecate I18nProvider in favour of `<RootProvider />` `i18n` prop
- 293178f: revert framework migration on i18n provider
  - fumadocs-core@15.2.3

## 15.2.2

### Patch Changes

- 0829544: Remove unused registry files from dist
- Updated dependencies [0829544]
  - fumadocs-core@15.2.2

## 15.2.1

### Patch Changes

- 22aeafb: Improve Tree context performance
  - fumadocs-core@15.2.1

## 15.2.0

### Patch Changes

- c5af09f: UI: Use `text.previousPage` for previous page navigation
- Updated dependencies [2fd325c]
- Updated dependencies [a7cf4fa]
  - fumadocs-core@15.2.0

## 15.1.3

### Patch Changes

- Updated dependencies [b734f92]
  - fumadocs-core@15.1.3

## 15.1.2

### Patch Changes

- 44d5acf: Improve sidebar UI
- Updated dependencies [3f580c4]
  - fumadocs-core@15.1.2

## 15.1.1

### Patch Changes

- Updated dependencies [c5add28]
- Updated dependencies [f3cde4f]
- Updated dependencies [7c8a690]
- Updated dependencies [b812457]
  - fumadocs-core@15.1.1

## 15.1.0

### Patch Changes

- Updated dependencies [f491f6f]
- Updated dependencies [f491f6f]
- Updated dependencies [f491f6f]
  - fumadocs-core@15.1.0

## 15.0.18

### Patch Changes

- e7e2a2a: Support `createRelativeLink` component factory for using relative file paths in `href`
  - fumadocs-core@15.0.18

## 15.0.17

### Patch Changes

- b790699: Support `themeSwitch` option in layouts to customise theme switch
- Updated dependencies [72f79cf]
  - fumadocs-core@15.0.17

## 15.0.16

### Patch Changes

- fumadocs-core@15.0.16

## 15.0.15

### Patch Changes

- 0e5e14d: Use container media queries on Cards
- Updated dependencies [9f6d39a]
- Updated dependencies [2035cb1]
  - fumadocs-core@15.0.15

## 15.0.14

### Patch Changes

- 6bc033a: Display humanized stars number to GitHub info component
- Updated dependencies [37dc0a6]
- Updated dependencies [796cc5e]
- Updated dependencies [2cc0be5]
  - fumadocs-core@15.0.14

## 15.0.13

### Patch Changes

- 7608f4e: Support showing optional properties on TypeTable
- 89ff3ae: Support GithubInfo component
- 16c8944: Fix Tailwind CSS utilities
  - fumadocs-core@15.0.13

## 15.0.12

### Patch Changes

- 3534a10: Move `fumadocs-core` highlighting utils to `fumadocs-core/highlight` and `fumadocs-core/highlight/client`
- ecacb53: Improve performance
- Updated dependencies [3534a10]
- Updated dependencies [93952db]
  - fumadocs-core@15.0.12

## 15.0.11

### Patch Changes

- 886da49: Fix sidebar layout shifts with `defaultOpen` option
- 04e6c6e: Fix Notebook layout paddings
  - fumadocs-core@15.0.11

## 15.0.10

### Patch Changes

- e8a3ab7: Add collapse button back to sidebar on Notebook layout
- Updated dependencies [d95c21f]
  - fumadocs-core@15.0.10

## 15.0.9

### Patch Changes

- fa5b908: Fix React 18 compatibility
  - fumadocs-core@15.0.9

## 15.0.8

### Patch Changes

- 8f5993b: Support custom nav mode and tabs mode on Notebook layout
  - fumadocs-core@15.0.8

## 15.0.7

### Patch Changes

- 5deaf40: Support icons in separators of `meta.json`
- f782c2c: Improve sidebar design
- Updated dependencies [5deaf40]
  - fumadocs-core@15.0.7

## 15.0.6

### Patch Changes

- Updated dependencies [08236e1]
- Updated dependencies [a06af26]
  - fumadocs-core@15.0.6

## 15.0.5

### Patch Changes

- 14b2f95: Improve accessibility
  - fumadocs-core@15.0.5

## 15.0.4

### Patch Changes

- c892bd9: Improve `DocsCategory` cards
- c892bd9: Always show copy button on codeblocks on touch devices
  - fumadocs-core@15.0.4

## 15.0.3

### Patch Changes

- 47171db: UI: fix ocean theme
  - fumadocs-core@15.0.3

## 15.0.2

### Patch Changes

- a8e9e1f: Bump deps
  - fumadocs-core@15.0.2

## 15.0.1

### Patch Changes

- 421166a: Fix border styles
  - fumadocs-core@15.0.1

## 15.0.0

### Major Changes

- a84f37a: **Migrate to Tailwind CSS v4**

  **migrate:**

  Follow https://tailwindcss.com/blog/tailwindcss-v4 for official migrate guide of Tailwind CSS v4.

  Fumadocs UI v15 redesigned the Tailwind CSS config to fully adhere the new config style, no JavaScript and options needed for plugins.
  Add the following to your CSS file:

  ```css
  @import 'tailwindcss';
  @import 'fumadocs-ui/css/neutral.css';
  @import 'fumadocs-ui/css/preset.css';
  /* if you have Twoslash enabled */
  @import 'fumadocs-twoslash/twoslash.css';

  @source '../node_modules/fumadocs-ui/dist/**/*.js';
  /* if you have OpenAPI enabled */
  @source '../node_modules/fumadocs-openapi/dist/**/*.js';
  ```

  The `fumadocs-ui/css/preset.css` import is required, it declares necessary plugins & styles for Fumadocs UI, and `fumadocs-ui/css/neutral.css` defines the color palette of UI.

  Like the previous `preset` option in Tailwind CSS plugin, you can import other color presets like `fumadocs-ui/css/vitepress.css`.

  You should also pay attention to `@source`, the file paths are relative to the CSS file itself. For your project, it might not be `../node_modules/fumadocs-ui/dist/**/*.js`.

### Patch Changes

- a89d6e0: Support Fumadocs v15
- f2f9c3d: Redesign sidebar
- Updated dependencies [5b8cca8]
- Updated dependencies [a763058]
- Updated dependencies [581f4a5]
  - fumadocs-core@15.0.0

## 14.7.7

### Patch Changes

- 4f2538a: Support `children` prop in custom `Folder` component
- 191012a: `DocsCategory` search based on file path when item isn't present in the tree
- fb6b168: No longer rely on search context on search dialog
  - fumadocs-core@14.7.7

## 14.7.6

### Patch Changes

- Updated dependencies [b9601fb]
  - fumadocs-core@14.7.6

## 14.7.5

### Patch Changes

- 5d41bf1: Enable system option for theme toggle on NoteBook layout
- 900eb6c: Prevent shrink on sidebar icons by default
- a959374: Support `fd-*` prefixes to Tailwind CSS utils
- Updated dependencies [777188b]
  - fumadocs-core@14.7.5

## 14.7.4

### Patch Changes

- 26d9ccb: Fix banner preview
- 036f8e1: Disable hover to open navbar menu by default, can be enabled via `nav.enableHoverToOpen`
- Updated dependencies [bb73a72]
- Updated dependencies [69bd4fe]
  - fumadocs-core@14.7.4

## 14.7.3

### Patch Changes

- 041f230: Support trailing slash
- ca1cf19: Support custom `<Banner />` height
- Updated dependencies [041f230]
  - fumadocs-core@14.7.3

## 14.7.2

### Patch Changes

- Updated dependencies [14b280c]
  - fumadocs-core@14.7.2

## 14.7.1

### Patch Changes

- 18b00c1: Fix `hideSearch` option
- Updated dependencies [72dc093]
  - fumadocs-core@14.7.1

## 14.7.0

### Patch Changes

- a557bb4: revert `contain`
- Updated dependencies [97ed36c]
  - fumadocs-core@14.7.0

## 14.6.8

### Patch Changes

- e95be52: Fix i18n toggle
- f3298ea: Add css prefix by default
  - fumadocs-core@14.6.8

## 14.6.7

### Patch Changes

- Updated dependencies [5474343]
  - fumadocs-core@14.6.7

## 14.6.6

### Patch Changes

- 9c930ea: fix runtime error
  - fumadocs-core@14.6.6

## 14.6.5

### Patch Changes

- 969da26: Improve i18n api
- Updated dependencies [969da26]
  - fumadocs-core@14.6.5

## 14.6.4

### Patch Changes

- 67124b1: Improve theme toggle on Notebook layout
- 1810868: Enable `content-visibility` CSS features
- Updated dependencies [b71064a]
  - fumadocs-core@14.6.4

## 14.6.3

### Patch Changes

- abc3677: Allow `className` to be used with `SidebarItem`
  - fumadocs-core@14.6.3

## 14.6.2

### Patch Changes

- 9908922: Add default icon styles (`transformer`) to sidebar tabs
- ece734f: Support custom children of trigger on `InlineTOC` component
- 1a2597a: Expose `--fd-tocnav-height` CSS variable
- Updated dependencies [2357d40]
  - fumadocs-core@14.6.2

## 14.6.1

### Patch Changes

- 9532855: Hide toc popover when no items
  - fumadocs-core@14.6.1

## 14.6.0

### Minor Changes

- 010da9e: Tabs: support usage without `value`
- bebb16b: Support `DynamicCodeBlock` component

### Patch Changes

- 9585561: Fix Twoslash popups focus outline
- 4766292: Support React 19
- Updated dependencies [4dfde6b]
- Updated dependencies [bebb16b]
- Updated dependencies [4766292]
- Updated dependencies [050b326]
  - fumadocs-core@14.6.0

## 14.5.6

### Patch Changes

- b7745f4: Fix references problem of sidebar tabs
- Updated dependencies [9a18c14]
  - fumadocs-core@14.5.6

## 14.5.5

### Patch Changes

- 06f66d8: improve notebook layout for transparent sidebar
- 2d0501f: Fi sidebar icon trigger
  - fumadocs-core@14.5.5

## 14.5.4

### Patch Changes

- 8e2cb31: fix trivial bugs
  - fumadocs-core@14.5.4

## 14.5.3

### Patch Changes

- c5a5ba0: fix sidebar `defaultOpenLevel`
- f34e895: Support `props` in tag items
- 4c82a3d: Hide toc when it has no items and custom banner & footer
- f8e5157: Fix custom `theme` with Typography plugin
- ad00dd3: Support folder groups on sidebar tabs
  - fumadocs-core@14.5.3

## 14.5.2

### Patch Changes

- 072e349: fix initial sidebar level to 0
  - fumadocs-core@14.5.2

## 14.5.1

### Patch Changes

- 6fd480f: Fix old browser compatibility
  - fumadocs-core@14.5.1

## 14.5.0

### Minor Changes

- 66c70ec: **Replace official Tailwind CSS typography plugin**
  - Other variants like `prose-sm` and `prose-gray` are removed, as it's supposed to only provide support for Fumadocs UI typography styles.

- 05d224c: added the updateAnchor option for the Tabs ui component

### Patch Changes

- fumadocs-core@14.5.0

## 14.4.2

### Patch Changes

- 0f1603a: Fix bugs
  - fumadocs-core@14.4.2

## 14.4.1

### Patch Changes

- 07474cb: fix codeblock paddings
- 48a2c15: Control page styles from layouts
  - fumadocs-core@14.4.1

## 14.4.0

### Minor Changes

- 5fd4e2f: Make TOC collapse to a popover on `lg` screen size instead of `md`
- 5fd4e2f: Support better table styles for Typography plugin
- 8a3f5b0: Make `neutral` the default theme of Fumadocs UI

### Patch Changes

- 5145123: Fix sidebar footer issues
- 64defe0: Support `fumadocs-ui/layouts/notebook` layout
  - fumadocs-core@14.4.0

## 14.3.1

### Patch Changes

- e7443d7: Fix development errors
  - fumadocs-core@14.3.1

## 14.3.0

### Minor Changes

- b8a12ed: Move to `tsc` (experimental)

### Patch Changes

- 80655b3: Improve padding of sidebar tabs and expose it to sidebar
  - fumadocs-core@14.3.0

## 14.2.1

### Patch Changes

- 2949da3: Show 'ctrl' for windows in search toggle
- Updated dependencies [ca94bfd]
  - fumadocs-core@14.2.1

## 14.2.0

### Minor Changes

- e248a0f: Support Orama Cloud integration
- 7a5393b: Replace `cmdk` with custom implementation

### Patch Changes

- Updated dependencies [e248a0f]
  - fumadocs-core@14.2.0

## 14.1.1

### Patch Changes

- Updated dependencies [1573d63]
  - fumadocs-core@14.1.1

## 14.1.0

### Patch Changes

- Updated dependencies [b262d99]
- Updated dependencies [d6d290c]
- Updated dependencies [4a643ff]
- Updated dependencies [b262d99]
- Updated dependencies [90725c1]
  - fumadocs-core@14.1.0

## 14.0.2

### Patch Changes

- bfc2bf2: Fix navbar issues
  - fumadocs-core@14.0.2

## 14.0.1

### Patch Changes

- 1a7d78a: Pass props to replaced layout components via Radix UI `<Slot />`
  - fumadocs-core@14.0.1

## 14.0.0

### Major Changes

- d9e908e: **Refactor import paths for layouts**

  **migrate:** Use

  ```ts
  import { DocsLayout } from 'fumadocs-ui/layouts/docs';

  import { HomeLayout } from 'fumadocs-ui/layouts/home';

  import { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';
  ```

  Instead of

  ```ts
  import { DocsLayout } from 'fumadocs-ui/layout';

  import { HomeLayout } from 'fumadocs-ui/home-layout';

  import { HomeLayoutProps } from 'fumadocs-ui/home-layout';
  ```

- 9a10262: **Move Twoslash UI components to `fumadocs-twoslash`**

  **why:** Isolate logic from Fumadocs UI

  **migrate:**

  Before:

  ```ts
  import 'fumadocs-ui/twoslash.css';

  import { Popup } from 'fumadocs-ui/twoslash/popup';
  ```

  After:

  ```ts
  import 'fumadocs-twoslash/twoslash.css';

  import { Popup } from 'fumadocs-twoslash/ui';
  ```

  **Tailwind CSS is now required for Twoslash integration.**

- d9e908e: **Remove `getImageMeta` from `fumadocs-ui/og`**

  **migrate:** Use Metadata API from `fumadocs-core/server`

- d9e908e: Replace `fumadocs-core/search/shared` with `fumadocs-core/server`
- be53a0e: **`DocsCategory` now accept `from` prop instead of `pages` prop.**

  **why:** This allows sharing the order of items with page tree.
  **migrate:**

  The component now takes `from` prop which is the Source API object.

  ```tsx
  import { source } from '@/lib/source';
  import { DocsCategory } from 'fumadocs-ui/page';

  const page = source.getPage(params.slug);

  <DocsCategory page={page} from={source} />;
  ```

### Minor Changes

- 34cf456: Support `disableThemeSwitch` on layouts
- d9e908e: Bundle icons into dist
- ad47fd8: Show i18n language toggle on home layout
- 87063eb: Add root toggle to sidebar automatically
- 64f0653: Introduce `--fd-nav-height` CSS variable for custom navbar
- e1ee822: Support hast nodes in `toc` variable
- 3d054a8: Support linking to a specific tab

### Patch Changes

- f949520: Support Shiki diff transformer
- 367f4c3: Improve Root Toggle component
- d9e908e: Change default URL of title on i18n mode
- d9e908e: Add center to root toggle
- e612f2a: Make compatible with Next.js 15
- 3d0369a: Improve edit on GitHub button
- be820c4: Bump deps
- Updated dependencies [e45bc67]
- Updated dependencies [d9e908e]
- Updated dependencies [d9e908e]
- Updated dependencies [f949520]
- Updated dependencies [9a0b09f]
- Updated dependencies [9a0b09f]
- Updated dependencies [367f4c3]
- Updated dependencies [e1ee822]
- Updated dependencies [e612f2a]
- Updated dependencies [9a0b09f]
- Updated dependencies [d9e908e]
- Updated dependencies [8ef00dc]
- Updated dependencies [979e301]
- Updated dependencies [d9e908e]
- Updated dependencies [979e301]
- Updated dependencies [15781f0]
- Updated dependencies [be820c4]
- Updated dependencies [d9e908e]
  - fumadocs-core@14.0.0

## 13.4.10

### Patch Changes

- 4cb74d5: Expose more props to Image Zoom
- Updated dependencies [6231ad3]
  - fumadocs-core@13.4.10

## 13.4.9

### Patch Changes

- bcf51a6: Improve banner rainbow variant
- Updated dependencies [083f04a]
  - fumadocs-core@13.4.9

## 13.4.8

### Patch Changes

- 5581733: Add center to root toggle
- 1a327cc: Fix props types of Root Toggle
- Updated dependencies [78e59e7]
  - fumadocs-core@13.4.8

## 13.4.7

### Patch Changes

- 6e1923e: Fix ocean present background repeat
- 6e1923e: Introduce `rainbow` variant on Banner component
- Updated dependencies [6e1923e]
  - fumadocs-core@13.4.7

## 13.4.6

### Patch Changes

- b33aff0: Fix typography styles
- afb697e: Fix Next.js 14.2.8 dynamic import problems
- 6bcd263: Fix Banner component z-index
- Updated dependencies [afb697e]
- Updated dependencies [daa66d2]
  - fumadocs-core@13.4.6

## 13.4.5

### Patch Changes

- d46a3f1: Improve search dialog
  - fumadocs-core@13.4.5

## 13.4.4

### Patch Changes

- Updated dependencies [729928e]
  - fumadocs-core@13.4.4

## 13.4.3

### Patch Changes

- fumadocs-core@13.4.3

## 13.4.2

### Patch Changes

- 0c251e5: Bump deps
- 0c251e5: Support Shiki inline code
- 0c251e5: Improve nested list styles
- Updated dependencies [7dabbc1]
- Updated dependencies [0c251e5]
- Updated dependencies [3b56170]
  - fumadocs-core@13.4.2

## 13.4.1

### Patch Changes

- Updated dependencies [95dbba1]
  - fumadocs-core@13.4.1

## 13.4.0

### Minor Changes

- 26f5360: Support built-in OG Image generation

### Patch Changes

- fumadocs-core@13.4.0

## 13.3.3

### Patch Changes

- Updated dependencies [f8cc167]
  - fumadocs-core@13.3.3

## 13.3.2

### Patch Changes

- 17746a6: Support built-in edit on github button
- Updated dependencies [0e0ef8c]
  - fumadocs-core@13.3.2

## 13.3.1

### Patch Changes

- 7258c4b: Fix thumb not rendered on initial render
  - fumadocs-core@13.3.1

## 13.3.0

### Minor Changes

- 8f5b19e: Introduce `DocsTitle`, `DocsDescription` and `DocsCategory` components
- 32ca37a: Support Clerk-style TOC
- 9aae448: Support multiple toc active items
- c542561: Use cookie to store active locale on `always` mode

### Patch Changes

- Updated dependencies [4916f84]
- Updated dependencies [fd46eb6]
- Updated dependencies [fd46eb6]
- Updated dependencies [fd46eb6]
- Updated dependencies [fd46eb6]
- Updated dependencies [9aae448]
- Updated dependencies [c542561]
  - fumadocs-core@13.3.0

## 13.2.2

### Patch Changes

- Updated dependencies [36b771b]
- Updated dependencies [61b91fa]
  - fumadocs-core@13.2.2

## 13.2.1

### Patch Changes

- Updated dependencies [17fa173]
  - fumadocs-core@13.2.1

## 13.2.0

### Minor Changes

- ba588a2: Support custom max width
- ec983a3: Change default value of `defaultOpenLevel` to 0

### Patch Changes

- 96c9dda: Change Heading scroll margins
- 96c9dda: Hide TOC Popover on full mode
- Updated dependencies [96c9dda]
  - fumadocs-core@13.2.0

## 13.1.0

### Minor Changes

- c8910c4: Add default 'max-height' to codeblocks

### Patch Changes

- 61ef42c: Add `vitepress` theme preset
- deae4dd: Improve theme presets
- c8910c4: Fix empty space on search dialog
- 6c42960: Improve TOC design
- Updated dependencies [f280191]
  - fumadocs-core@13.1.0

## 13.0.7

### Patch Changes

- e7c52f2: Fix code styles in headings
- Updated dependencies [37bbfff]
  - fumadocs-core@13.0.7

## 13.0.6

### Patch Changes

- 1622e36: Fix bug breaking Tailwind CSS IntelliSense VSCode Extension
  - fumadocs-core@13.0.6

## 13.0.5

### Patch Changes

- Updated dependencies [2cf65f6]
  - fumadocs-core@13.0.5

## 13.0.4

### Patch Changes

- Updated dependencies [5355391]
  - fumadocs-core@13.0.4

## 13.0.3

### Patch Changes

- Updated dependencies [978342f]
  - fumadocs-core@13.0.3

## 13.0.2

### Patch Changes

- Updated dependencies [4819820]
  - fumadocs-core@13.0.2

## 13.0.1

### Patch Changes

- fumadocs-core@13.0.1

## 13.0.0

### Major Changes

- 89190ae: **Rename `prefix` option on Tailwind CSS Plugin to `cssPrefix`**

  **why:** The previous name was misleading

  **migrate:** Rename the option.

  ```js
  import { createPreset } from 'fumadocs-ui/tailwind-plugin';

  /** @type {import('tailwindcss').Config} */
  export default {
    presets: [
      createPreset({
        cssPrefix: 'fd',
      }),
    ],
  };
  ```

- b02eebf: **Move `keepCodeBlockBackground` option to code block component**

  **why:** Easier to customise code block styles.

  **migrate:**

  Enable `keepBackground` on `<CodeBlock />`, and remove deprecated usage.

  ```tsx
  import { Pre, CodeBlock } from 'fumadocs-ui/components/codeblock';

  <MDX
    components={{
      pre: ({ ref: _ref, ...props }) => (
        <CodeBlock keepBackground {...props}>
          <Pre>{props.children}</Pre>
        </CodeBlock>
      ),
    }}
  />;
  ```

- f868018: **Replace `secondary` link items with `icon` link items**

  **why:** Link items with type `secondary` has been deprecated long time ago.

  **migrate:** Replace type `secondary` with `icon`.

- 8aebeab: **Change usage of I18nProvider**

  **why:** Make possible to load translations lazily

  **migrate:**

  ```tsx
  import { RootProvider } from 'fumadocs-ui/provider';
  import type { ReactNode } from 'react';
  import { I18nProvider } from 'fumadocs-ui/i18n';

  export default function Layout({
    params: { lang },
    children,
  }: {
    params: { lang: string };
    children: ReactNode;
  }) {
    return (
      <html lang={lang}>
        <body>
          <I18nProvider
            locale={lang}
            // options
            locales={[
              {
                name: 'English',
                locale: 'en',
              },
              {
                name: 'Chinese',
                locale: 'cn',
              },
            ]}
            // translations
            translations={
              {
                cn: {
                  toc: '目錄',
                  search: '搜尋文檔',
                  lastUpdate: '最後更新於',
                  searchNoResult: '沒有結果',
                  previousPage: '上一頁',
                  nextPage: '下一頁',
                },
              }[lang]
            }
          >
            <RootProvider>{children}</RootProvider>
          </I18nProvider>
        </body>
      </html>
    );
  }
  ```

- 8aebeab: **Require `locale` prop on I18nProvider**

  **why:** Fix problems related to pathname parsing

  **migrate:** Pass `locale` parameter to the provider

- 0377bb4: **Rename `id` prop on Tabs component to `groupId`**

  **why:** Conflicted with HTML `id` attribute.

  **migrate:** Rename to `groupId`.

- e8e6a17: **Make Tailwind CSS Plugin ESM-only**

  **why:** Tailwind CSS supported ESM and TypeScript configs.

  **migrate:** Use ESM syntax in your Tailwind CSS config.

- c901e6b: **Remove deprecated `fumadocs-ui/components/api` components**

  **why:** The new OpenAPI integration has its own UI implementation.

  **migrate:** Update to latest OpenAPI integration.

- 89190ae: **Add `fd-` prefix to all Fumadocs UI colors, animations and utilities**

  **why:** The added Tailwind CSS colors may conflict with the existing colors of codebases.

  **migrate:** Enable `addGlobalColors` on Tailwind CSS Plugin or add the `fd-` prefix to class names.

  ```js
  import { createPreset } from 'fumadocs-ui/tailwind-plugin';

  /** @type {import('tailwindcss').Config} */
  export default {
    presets: [
      createPreset({
        addGlobalColors: true,
      }),
    ],
  };
  ```

- b02eebf: **Change code block component usage**

  **why:** The previous usage was confusing, some props are passed directly to `pre` while some are not.

  **migrate:**

  Pass all props to `CodeBlock` component.
  This also includes class names, change your custom styles if necessary.

  ```tsx
  import { Pre, CodeBlock } from 'fumadocs-ui/components/codeblock';

  <MDX
    components={{
      // HTML `ref` attribute conflicts with `forwardRef`
      pre: ({ ref: _ref, ...props }) => (
        <CodeBlock {...props}>
          <Pre>{props.children}</Pre>
        </CodeBlock>
      ),
    }}
  />;
  ```

  You can ignore this if you didn't customise the default `pre` element.

- 4373231: **Remove `RollButton` component**

  **why:** `RollButton` was created because there were no "Table Of Contents" on mobile viewports. Now users can use the TOC Popover to switch between headings, `RollButton` is no longer a suitable design for Fumadocs UI.

  **migrate:** Remove usages, you may copy the [last implementation of `RollButton`](https://github.com/fuma-nama/fumadocs/blob/fumadocs-ui%4012.5.6/packages/ui/src/components/roll-button.tsx).

### Minor Changes

- c684c00: Support to disable container style overriding
- c8964d3: Include `Callout` as default MDX component

### Patch Changes

- daa7d3c: Fix empty folder animation problems
- Updated dependencies [09c3103]
- Updated dependencies [c714eaa]
- Updated dependencies [b02eebf]
  - fumadocs-core@13.0.0

## 12.5.6

### Patch Changes

- a332bee: Support `undefined` state of `defaultOpen` in folder nodes
  - fumadocs-core@12.5.6

## 12.5.5

### Patch Changes

- 3519e6c: Fix TOC overflow problems
  - fumadocs-core@12.5.5

## 12.5.4

### Patch Changes

- fccdfdb: Improve TOC Popover design
- Updated dependencies [fccdfdb]
- Updated dependencies [2ffd5ea]
  - fumadocs-core@12.5.4

## 12.5.3

### Patch Changes

- 5d963f4: Support to disable prefetching links on sidebar
  - fumadocs-core@12.5.3

## 12.5.2

### Patch Changes

- a5c34f0: Support specifying the url of root node when breadcrumbs have `includeRoot` enabled
- Updated dependencies [a5c34f0]
  - fumadocs-core@12.5.2

## 12.5.1

### Patch Changes

- c5d20d0: Fix wrong padding
- 3d8f6cf: Add data attributes to certain components to improve CSS targeting
  - fumadocs-core@12.5.1

## 12.5.0

### Minor Changes

- b9fa99d: Support tag filters in search dialog
- a4bcaa7: Rename `Layout` in `fumadocs-ui/layout` to `HomeLayout` in `fumadocs-ui/home-layout`

### Patch Changes

- d1c7405: Optimize performance
- Updated dependencies [b9fa99d]
- Updated dependencies [525925b]
  - fumadocs-core@12.5.0

## 12.4.2

### Patch Changes

- 503e8e9: Improve Object Collaspible
- Updated dependencies [503e8e9]
  - fumadocs-core@12.4.2

## 12.4.1

### Patch Changes

- fumadocs-core@12.4.1

## 12.4.0

### Minor Changes

- eb36761: Replace link item `secondary` type with `icon` (backward compatible)
- eb36761: Support `secondary` property in link items
- eb36761: Support `button` type link item
- eb36761: Support `on` filter in link items

### Patch Changes

- 33ffa99: Improve design details
  - fumadocs-core@12.4.0

## 12.3.6

### Patch Changes

- 4cc5782: Adding secondary custom links
  - fumadocs-core@12.3.6

## 12.3.5

### Patch Changes

- fumadocs-core@12.3.5

## 12.3.4

### Patch Changes

- fbfd050: Improve the default theme
- eefa75d: Reduce the navbar height
  - fumadocs-core@12.3.4

## 12.3.3

### Patch Changes

- 90d51cb: Fix problem with I18n middleware & language toggle
- Updated dependencies [90d51cb]
  - fumadocs-core@12.3.3

## 12.3.2

### Patch Changes

- Updated dependencies [ca7d0f4]
  - fumadocs-core@12.3.2

## 12.3.1

### Patch Changes

- Updated dependencies [cf852f6]
  - fumadocs-core@12.3.1

## 12.3.0

### Patch Changes

- Updated dependencies [ce3c8ad]
- Updated dependencies [ce3c8ad]
  - fumadocs-core@12.3.0

## 12.2.5

### Patch Changes

- 7c23f7e: No longer set a default size for SVG elements in title
  - fumadocs-core@12.2.5

## 12.2.4

### Patch Changes

- ffb9026: Fix `cmdk` upstream dependency problems
  - fumadocs-core@12.2.4

## 12.2.3

### Patch Changes

- b4824fa: Updated `<APIInfo />` component, so method name appears vertically centered.
- e120e0f: Improve `<Banner/>` component
- 3970b55: Support custom type link items
  - fumadocs-core@12.2.3

## 12.2.2

### Patch Changes

- 72c7991: Improve sidebar
  - fumadocs-core@12.2.2

## 12.2.1

### Patch Changes

- c428a60: Revert the height of docs navbar to 64px
- 018dbd9: Support `Banner` component
  - fumadocs-core@12.2.1

## 12.2.0

### Minor Changes

- 318eaf9: **Redesign TOC popover:** Make the TOC Popover trigger a part of navbar.
- ea22d04: **Improve dynamic sidebar:** Improve animation & close delay

### Patch Changes

- 2f2d9cf: **Improve footer:** Use card-style buttons to match the other buttons
- bcc9f91: Added a new colors for API info badge, so POST, PATCH requests are different from PUT.
- 2f2d9cf: Improve OpenAPI styles
- Updated dependencies [b70ff06]
  - fumadocs-core@12.2.0

## 12.1.3

### Patch Changes

- 2a5db91: Add timeout for hovering after collapsed the sidebar
- 3e98d7d: Support `full` mode on pages
- d06c92a: Support `transparentMode` on secondary (docs) navbar
- 3bdc786: Support Fumadocs OpenAPI 3.1.0
- d06c92a: Fix hot keys order
  - fumadocs-core@12.1.3

## 12.1.2

### Patch Changes

- 284a571: Support Fumadocs OpenAPI v3
- Updated dependencies [b4856d1]
  - fumadocs-core@12.1.2

## 12.1.1

### Patch Changes

- 1c3a127: Redesign Tabs component
- Updated dependencies [a39dbcb]
  - fumadocs-core@12.1.1

## 12.1.0

### Minor Changes

- 0a377a9: **Pass the `icon` prop to code blocks as HTML instead of MDX attribute.**

  **why:** Only MDX flow elements support attributes with JSX value, like:

  ```mdx
  <Pre icon={<svg />}>...</Pre>
  ```

  As Shiki outputs hast elements, we have to convert the output of Shiki to a MDX flow element so that we can pass the `icon` property.

  Now, `rehype-code` passes a HTML string instead of JSX, and render it with `dangerouslySetInnerHTML`:

  ```mdx
  <Pre icon="<svg />">...</Pre>
  ```

  **migrate:** Not needed, it should work seamlessly.

### Patch Changes

- 0a377a9: Close sidebar on collapse
- 5f86faa: Improve multi-line code blocks
- Updated dependencies [0a377a9]
- Updated dependencies [0a377a9]
  - fumadocs-core@12.1.0

## 12.0.7

### Patch Changes

- 51441d3: Fix `RollButton` component problems on Safari
  - fumadocs-core@12.0.7

## 12.0.6

### Patch Changes

- 056bad5: Improve default values
- Updated dependencies [7a29b79]
- Updated dependencies [b0c1242]
  - fumadocs-core@12.0.6

## 12.0.5

### Patch Changes

- 4455d58: Fix `bannerProps` being ignored
  - fumadocs-core@12.0.5

## 12.0.4

### Patch Changes

- 70666d8: Hide file name on breadcrumbs
- f96da27: Improve design details
- 51ca944: Support including separators in breadcrumbs
- Updated dependencies [72dbaf1]
- Updated dependencies [51ca944]
  - fumadocs-core@12.0.4

## 12.0.3

### Patch Changes

- 18928af: Improve mobile experience on Safari
- Updated dependencies [053609d]
  - fumadocs-core@12.0.3

## 12.0.2

### Patch Changes

- Show TOC on mobile devices
  - fumadocs-core@12.0.2

## 12.0.1

### Patch Changes

- 21fe244: Redesign roll button
- 547a61a: Use Menu for link items
  - fumadocs-core@12.0.1

## 12.0.0

### Major Changes

- 62b5abb: **New Layout**
  - Remove navbar from docs layout, replace it with sidebar.
  - On smaller devices, navbar is always shown.
  - Remove exports of internal components, copying components from the repository is now the preferred way.

  **migrate:** On layouts, Rename `nav.githubUrl` to `githubUrl`.
  Modify your stylesheet if necessary.

- 5741224: **Remove deprecated option `enableThemeProvider` from Root Provider**

  **migrate:** Use `theme.enabled` instead.

- 2f8b168: **Replace `<LanguageSelect />` component with `<LanguageToggle />`**

  **migrate:**

  Remove your `<LanguageSelect />` component from the layout. Enable the new language toggle with:

  ```tsx
  import { DocsLayout } from 'fumadocs-ui/layout';

  export default function Layout({ children }: { children: React.ReactNode }) {
    return <DocsLayout i18n>{children}</DocsLayout>;
  }
  ```

### Minor Changes

- d88dfa6: Support switching between page trees with `RootToggle` component

### Patch Changes

- c110040: Fix problems with twoslash codeblocks
- 13a60b9: Heading support typography styles
- 1fe0812: Support translation for theme label
- Updated dependencies [98430e9]
- Updated dependencies [d88dfa6]
- Updated dependencies [ba20694]
- Updated dependencies [57eb762]
  - fumadocs-core@12.0.0

## 11.3.2

### Patch Changes

- 1b8e12b: Use `display: grid` for codeblocks
- Updated dependencies [1b8e12b]
  - fumadocs-core@11.3.2

## 11.3.1

### Patch Changes

- 10ab3e9: Fix sidebar opened by default
  - fumadocs-core@11.3.1

## 11.3.0

### Minor Changes

- 917d87f: Rename sidebar primitive `minWidth` prop to `blockScrollingWidth`

### Patch Changes

- 2a1211e: Support customising search dialog hotkeys
- 9de31e6: Support `withArticle` for MDX Pages
- Updated dependencies [917d87f]
  - fumadocs-core@11.3.0

## 11.2.2

### Patch Changes

- dd0feb2: Support customising sidebar background with opacity
- 72096c3: Support customising theme options from root provider
  - fumadocs-core@11.2.2

## 11.2.1

### Patch Changes

- 8074920: Fix sidebar background width on dynamic sidebar
  - fumadocs-core@11.2.1

## 11.2.0

### Minor Changes

- 3292df1: Support sliding dynamic sidebar

### Patch Changes

- fumadocs-core@11.2.0

## 11.1.3

### Patch Changes

- 2b95c89: Fix codeblock select highlight problems
- cdc52ad: Improve page footer mobile responsibility
- Updated dependencies [88008b1]
- Updated dependencies [944541a]
- Updated dependencies [07a9312]
  - fumadocs-core@11.1.3

## 11.1.2

### Patch Changes

- 58adab1: Improve theme & styles
- ae88793: Improve page footer design
  - fumadocs-core@11.1.2

## 11.1.1

### Patch Changes

- 771314c: Use `sessionStorage` for non-persistent tabs
- 8ef2b68: Bump deps
- fa78241: Fix accordion text alignment
- Updated dependencies [8ef2b68]
- Updated dependencies [26f464d]
- Updated dependencies [26f464d]
  - fumadocs-core@11.1.1

## 11.1.0

### Minor Changes

- 02a014f: Support custom menu items in navbar

### Patch Changes

- fumadocs-core@11.1.0

## 11.0.8

### Patch Changes

- Updated dependencies [98258b5]
  - fumadocs-core@11.0.8

## 11.0.7

### Patch Changes

- Updated dependencies [f7c2c5c]
  - fumadocs-core@11.0.7

## 11.0.6

### Patch Changes

- 8e0ef4b: Support disable search functionality including shortcuts
- Updated dependencies [5653d5d]
- Updated dependencies [5653d5d]
  - fumadocs-core@11.0.6

## 11.0.5

### Patch Changes

- c8ea344: Support disabling search bar
  - fumadocs-core@11.0.5

## 11.0.4

### Patch Changes

- 7b61b2f: Migrate `fumadocs-ui` to fully ESM, adding support for ESM `tailwind.config` file
- Updated dependencies [7b61b2f]
  - fumadocs-core@11.0.4

## 11.0.3

### Patch Changes

- c11e6ce: New color preset: `catppuccin`
  - fumadocs-core@11.0.3

## 11.0.2

### Patch Changes

- 6470d6d: Fix collapse button on smaller viewports
  - fumadocs-core@11.0.2

## 11.0.1

### Patch Changes

- 1136e02: Support modifying css with color presets
- 1136e02: New color preset `neutral`
- f6b4797: Improve Sidebar footer
  - fumadocs-core@11.0.1

## 11.0.0

### Major Changes

- 2d8df75: Replace `nav.links` option with secondary links

  why: A more straightforward API design

  migrate:

  ```diff
  <DocsLayout
  +  links={[
  +    {
  +      type: 'secondary',
  +      text: 'Github',
  +      url: 'https://github.com',
  +      icon: <GithubIcon />,
  +      external: true,
  +    },
  +  ]}
  -  nav={{
  -    links: [
  -      {
  -        icon: <GithubIcon />,
  -        href: 'https://github.com',
  -        label: 'Github',
  -        external: true,
  -      },
  -    ],
  -  }}
  >
    {children}
  </DocsLayout>
  ```

### Patch Changes

- Updated dependencies [2d8df75]
- Updated dependencies [92cb12f]
- Updated dependencies [f75287d]
- Updated dependencies [2d8df75]
  - fumadocs-core@11.0.0

## 10.1.3

### Patch Changes

- 6ace206: Support opening Twoslash popup on mobile
- d0288d1: New theme dusk
- Updated dependencies [bbad52f]
  - fumadocs-core@10.1.3

## 10.1.2

### Patch Changes

- 0facc07: Replace navbar links with secondary links
- fd38022: Improve sidebar collapse
  - fumadocs-core@10.1.2

## 10.1.1

### Patch Changes

- 38d6f22: Improve RTL Layout experience
- Updated dependencies [779c599]
- Updated dependencies [0c01300]
- Updated dependencies [779c599]
  - fumadocs-core@10.1.1

## 10.1.0

### Minor Changes

- 566539a: Support RTL layout

### Patch Changes

- fumadocs-core@10.1.0

## 10.0.5

### Patch Changes

- Updated dependencies [e47c62f]
  - fumadocs-core@10.0.5

## 10.0.4

### Patch Changes

- fumadocs-core@10.0.4

## 10.0.3

### Patch Changes

- b27091f: Support passing search dialog `options` from root provider
- Updated dependencies [6f321e5]
  - fumadocs-core@10.0.3

## 10.0.2

### Patch Changes

- 10e099a: Add scrollbar to TOC
- Updated dependencies [10e099a]
  - fumadocs-core@10.0.2

## 10.0.1

### Patch Changes

- 0e78dc8: Support customising search API URL
- Updated dependencies [c9b7763]
- Updated dependencies [0e78dc8]
- Updated dependencies [d8483a8]
  - fumadocs-core@10.0.1

## 10.0.0

### Major Changes

- 321d1e1f: **Move Typescript integrations to `fumadocs-typescript`**

  why: It is now a stable feature

  migrate: Use `fumadocs-typescript` instead.

  ```diff
  - import { AutoTypeTable } from "fumadocs-ui/components/auto-type-table"
  + import { AutoTypeTable } from "fumadocs-typescript/ui"
  ```

### Patch Changes

- de7ed150: Hide external items from navigation footer
- Updated dependencies [b5d16938]
- Updated dependencies [321d1e1f]
  - fumadocs-core@10.0.0

## 9.1.0

### Minor Changes

- ffc76e9d: Support to override sidebar components
- 1c388ca5: Support `defaultOpen` for folder nodes

### Patch Changes

- Updated dependencies [909b0e35]
- Updated dependencies [691f12aa]
- Updated dependencies [1c388ca5]
  - fumadocs-core@9.1.0

## 9.0.0

### Major Changes

- 071898da: **Remove deprecated usage of `Files` component**

  Why: Since `8.3.0`, you should use the `Folder` component instead for folders. For simplicity, the `title` prop has been renamed to `name`.

  Migrate: Replace folders with the `Folder` component. Rename `title` prop to `name`.

  ```diff
  - <Files>
  - <File title="folder">
  - <File title="file.txt" />
  - </File>
  - </Files>

  + <Files>
  + <Folder name="folder">
  + <File name="file.txt" />
  + </Folder>
  + </Files>
  ```

- 2b355907: **Remove controlled usage for Accordion**

  Why: Components in Fumadocs UI should not be used outside of MDX.

  Migrate: Remove `value` and `onValueChange` props.

### Patch Changes

- fumadocs-core@9.0.0

## 8.3.0

### Minor Changes

- b0003d44: Add `purple` theme
- 9bdb49dd: Add `Folder` export to `fumadocs-ui/components/files`
- 99d66d2d: Rename `title` prop to `name` in `File` and `Folder` component

### Patch Changes

- 5e314eee: Deprecate `input` color and `medium` font size from Tailwind CSS preset
- 52d578d0: Set `darkMode` to `class` by default
- 84667d2f: Improve Accordions
  - fumadocs-core@8.3.0

## 8.2.0

### Minor Changes

- 5c24659: Support code block icons

### Patch Changes

- 09bdf63: Separate stylesheet with Image Zoom component
- Updated dependencies [5c24659]
  - fumadocs-core@8.2.0

## 8.1.1

### Patch Changes

- 153ceaf: Fix typo
  - fumadocs-core@8.1.1

## 8.1.0

### Minor Changes

- 0012eba: Support Typescript Twoslash
- bc936c5: Add `AutoTypeTable` server component

### Patch Changes

- 6c5a39a: Rename Git repository to `fumadocs`
- Updated dependencies [6c5a39a]
- Updated dependencies [eb028b4]
- Updated dependencies [054ec60]
  - fumadocs-core@8.1.0

## 8.0.0

### Major Changes

- a2f4819: **Improve internationalized routing**

  `I18nProvider` now handles routing for you.
  Therefore, `locale` and `onChange` is no longer required.

  ```tsx
  <I18nProvider
    translations={{
      cn: {
        name: 'Chinese', // required
        search: 'Translated Content',
      },
    }}
  ></I18nProvider>
  ```

  `LanguageSelect` detects available options from your translations, therefore, the `languages` prop is removed.

- c608ad2: **Remove deprecated `docsUiPlugins`**

  migrate: Use `createPreset` instead

  ```js
  const { createPreset } = require('fumadocs-ui/tailwind-plugin');

  /** @type {import('tailwindcss').Config} */
  module.exports = {
    content: [
      './components/**/*.{ts,tsx}',
      './app/**/*.{ts,tsx}',
      './content/**/*.mdx',
      './node_modules/fumadocs-ui/dist/**/*.js',
    ],
    presets: [createPreset()],
  };
  ```

- 2ea9437: **Change usage of Code Block component**

  The inner `pre` element is now separated from code block container, making it easier to customise.`

  Before:

  ```tsx
  import { CodeBlock, Pre } from 'fumadocs-ui/mdx/pre';

  <Pre title={title} allowCopy {...props} />;
  ```

  After:

  ```tsx
  import { CodeBlock, Pre } from 'fumadocs-ui/components/codeblock';

  <CodeBlock title={title} allowCopy>
    <Pre {...props} />
  </CodeBlock>;
  ```

- ac424ec: **Update import paths of MDX components**

  why: To improve consistency, all MDX components are located in `/components/*` instead.

  migrate:

  ```diff
  - import { Card, Cards } from "fumadocs-ui/mdx/card"
  + import { Card, Cards } from "fumadocs-ui/components/card"

  - import { Heading } from "fumadocs-ui/mdx/heading"
  + import { Heading } from "fumadocs-ui/components/heading"

  - import { Codeblock, Pre } from "fumadocs-ui/mdx/pre"
  + import { Codeblock, Pre } from "fumadocs-ui/components/codeblock"
  ```

- 2b11c20: **Rename to Fumadocs**

  `next-docs-zeta` -> `fumadocs-core`

  `next-docs-ui` -> `fumadocs-ui`

  `next-docs-mdx` -> `fumadocs-mdx`

  `@fuma-docs/openapi` -> `fumadocs-openapi`

  `create-next-docs-app` -> `create-fumadocs-app`

- 60db195: **Remove Nav component export**

  why: Replaced by the DocsLayout and Layout component, it is now an internal component

  migration: Use the Layout component for sharing the navbar across pages

  ```diff
  - import { Nav } from "fumadocs-ui/nav"
  + import { Layout } from "fumadocs-ui/layout"
  ```

### Minor Changes

- 60db195: **Support transparent navbar**

### Patch Changes

- 974e00f: Collapse API example by default
- Updated dependencies [2ea9437]
- Updated dependencies [cdff313]
- Updated dependencies [1a346a1]
- Updated dependencies [2b11c20]
  - fumadocs-core@8.0.0

## 7.1.2

### Patch Changes

- 9204975: Fix search dialog overflow issues
  - next-docs-zeta@7.1.2

## 7.1.1

### Patch Changes

- next-docs-zeta@7.1.1

## 7.1.0

### Minor Changes

- 40e51a4: Support integration with @fuma-docs/openapi
- d2744a4: Remove tailwindcss-animate

### Patch Changes

- c527044: Support preloading Search Dialog
  - next-docs-zeta@7.1.0

## 7.0.0

### Major Changes

- f995ad9: **Page Footer is now a client component**

  This allows the footer component to find items within the current page tree, which fixes the problem where a item from another page tree is appeared.

  Also removed the `url` and `tree` properties from `DocsPage` since we can pass them via React Context API.

  ```diff
  export default async function Page({ params }) {
    return (
      <DocsPage
  -      url={page.url}
  -      tree={pageTree}
      >
        ...
      </DocsPage>
    );
  }
  ```

  The `footer` property in `DocsPage` has also updated, now you can specify or replace the default footer component.

  ```tsx
  <DocsPage footer={{ items: {} }}>...</DocsPage>
  ```

### Minor Changes

- b30d1cd: **Support theme presets**

  Add theme presets for the Tailwind CSS plugin, the default and ocean presets are available now.

  ```js
  const { docsUi, docsUiPlugins } = require('next-docs-ui/tailwind-plugin');

  /** @type {import('tailwindcss').Config} */
  module.exports = {
    plugins: [
      ...docsUiPlugins,
      docsUi({
        preset: 'ocean',
      }),
    ],
  };
  ```

- 9929c5b: **Support multiple page tree roots**

  You can specify a `root` property in `meta.json`, the nearest root folder will be used as the root of page tree instead.

  ```json
  {
    "title": "Hello World",
    "root": true
  }
  ```

### Patch Changes

- Updated dependencies [9929c5b]
- Updated dependencies [9929c5b]
- Updated dependencies [49201be]
- Updated dependencies [338ea98]
- Updated dependencies [4c1334e]
- Updated dependencies [9929c5b]
  - next-docs-zeta@7.0.0

## 6.1.0

### Minor Changes

- 6e0d2e1: **Support `Layout` for non-docs pages (without page tree)**

  Same as Docs Layout but doesn't include a sidebar. It can be used outside of the docs, a page tree is not required.

  ```jsx
  import { Layout } from 'next-docs-ui/layout';

  export default function HomeLayout({ children }) {
    return <Layout>{children}</Layout>;
  }
  ```

  **`nav.items` prop is deprecated**

  It is now replaced by `links`.

- 2a82e9d: **Support linking to accordions**

  You can now specify an `id` for accordion. The accordion will automatically open when the user is navigating to the page with the specified `id` in hash parameter.

  ```mdx
  <Accordions>
  <Accordion title="My Title" id="my-title">

  My Content

  </Accordion>
  </Accordions>
  ```

### Patch Changes

- 65b7f30: Improve search dialog design
- Updated dependencies [f39ae40]
  - next-docs-zeta@6.1.0

## 6.0.2

### Patch Changes

- next-docs-zeta@6.0.2

## 6.0.1

### Patch Changes

- 515a3e1: Fix inline code blocks are not highlighted
  - next-docs-zeta@6.0.1

## 6.0.0

### Major Changes

- 983ede8: **Remove `not-found` component**

  The `not-found` component was initially intended to be the default 404 page. However, we found that the Next.js default one is good enough. For advanced cases, you can always build your own 404 page.

- ebe8d9f: **Support Tailwind CSS plugin usage**

  If you are using Tailwind CSS for your docs, it's now recommended to use the official plugin instead.

  ```js
  const { docsUi, docsUiPlugins } = require('next-docs-ui/tailwind-plugin');

  /** @type {import('tailwindcss').Config} */
  module.exports = {
    darkMode: 'class',
    content: [
      './components/**/*.{ts,tsx}',
      './app/**/*.{ts,tsx}',
      './content/**/*.mdx',
      './node_modules/next-docs-ui/dist/**/*.js',
    ],
    plugins: [...docsUiPlugins, docsUi],
  };
  ```

  The `docsUi` plugin adds necessary utilities & colors, and `docsUiPlugins` are its dependency plugins which should not be missing.

- 7d89e83: **Add required property `url` to `<DocsPage />` component**

  You must pass the URL of current page to `<DocsPage />` component.

  ```diff
  export default function Page({ params }) {
    return (
      <DocsPage
  +      url={page.url}
        toc={page.data.toc}
      >
        ...
      </DocsPage>
    )
  }
  ```

  **`footer` property is now optional**

  Your `footer` property in `<DocsPage />` will be automatically generated if not specified.

  ```ts
  findNeighbour(tree, url);
  ```

- 0599d50: **Separate MDX components**

  Previously, you can only import the code block component from `next-docs-ui/mdx` (Client Component) and `next-docs-ui/mdx-server` (Server Component).

  This may lead to confusion, hence, it is now separated into multiple files. You can import these components regardless it is either a client or a server component.

  Notice that `MDXContent` is now renamed to `DocsBody`, you must import it from `next-docs-ui/page` instead.

  ```diff
  - import { MDXContent } from "next-docs-ui/mdx"
  - import { MDXContent } from "next-docs-ui/mdx-server"

  + import { DocsBody } from "next-docs-ui/page"
  ```

  ```diff
  - import { Card, Cards } from "next-docs-ui/mdx"
  + import { Card, Cards } from "next-docs-ui/mdx/card"

  - import { Pre } from "next-docs-ui/mdx"
  + import { Pre } from "next-docs-ui/mdx/pre"

  - import { Heading } from "next-docs-ui/mdx"
  + import { Heading } from "next-docs-ui/mdx/heading"

  - import defaultComponents from "next-docs-ui/mdx"
  + import defaultComponents from "next-docs-ui/mdx/default-client"

  - import defaultComponents from "next-docs-ui/mdx-server"
  + import defaultComponents from "next-docs-ui/mdx/default"
  ```

### Minor Changes

- 56a35ce: Support custom `searchOptions` in Algolia Search Dialog

### Patch Changes

- 5c98f7f: Support custom attributes to `pre` element inside code blocks
- Updated dependencies [9ef047d]
  - next-docs-zeta@6.0.0

## 5.0.0

### Minor Changes

- de44efe: Migrate to Shikiji
- de44efe: Support code highlighting options

### Patch Changes

- Updated dependencies [de44efe]
- Updated dependencies [de44efe]
  - next-docs-zeta@5.0.0

## 4.0.9

### Patch Changes

- 70545e7: Support `enableThemeProvider` option in RootProvider
- Updated dependencies [a883009]
  - next-docs-zeta@4.0.9

## 4.0.8

### Patch Changes

- e0c5c96: Make ESM only
- Updated dependencies [e0c5c96]
  - next-docs-zeta@4.0.8

## 4.0.7

### Patch Changes

- b9af5ed: Update tsup & dependencies
- Updated dependencies [b9af5ed]
  - next-docs-zeta@4.0.7

## 4.0.6

### Patch Changes

- Updated dependencies [ff38f6e]
  - next-docs-zeta@4.0.6

## 4.0.5

### Patch Changes

- f00e38f: Use `dvh` for sidebar height
  - next-docs-zeta@4.0.5

## 4.0.4

### Patch Changes

- 1b10e13: Default accordion type to "single"
  - next-docs-zeta@4.0.4

## 4.0.3

### Patch Changes

- Updated dependencies [0cc10cb]
  - next-docs-zeta@4.0.3

## 4.0.2

### Patch Changes

- next-docs-zeta@4.0.2

## 4.0.1

### Patch Changes

- 927714a: Remove dropdown from theme toggle
- d58e90a: Use await imports to import client components in Server Components
- cc1fe39: Render TOC header & footer in Server Component
- 01b23e2: Support Next.js 14
- d58e90a: Add y margins to Callout and Pre component
- Updated dependencies [2da93d8]
- Updated dependencies [01b23e2]
  - next-docs-zeta@4.0.1

## 4.0.0

### Minor Changes

- 6c4a782: Improve CommonJS/ESM compatibility

  Since this release, all server utilities will be CommonJS by default unless
  they have referenced ESM modules in the code. For instance,
  `next-docs-zeta/middleware` is now a CommonJS file. However, some modules,
  such as `next-docs-zeta/server` requires ESM-only package, hence, they remain
  a ESM file.

  Notice that the extension of client-side files is now `.js` instead of `.mjs`,
  but they're still ESM.

  **Why?**

  After migrating to `.mjs` Next.js config file, some imports stopped to work.
  The built-in Next.js bundler seems can't resolve these `next` imports in
  external packages, causing errors when modules have imported Next.js itself
  (e.g. `next/image`) in the code.

  By changing client-side files extension to `.mjs` and using CommonJS for
  server-side files, this error is solved.

- 6c4a782: Support Server Component usage for MDX default components

### Patch Changes

- b2112e8: Improve default codeblock
- 6c4a782: Fix sidebar opening issue
- Updated dependencies [6c4a782]
- Updated dependencies [6c4a782]
  - next-docs-zeta@4.0.0

## 4.0.0

### Minor Changes

- 678cd3d: Improve CommonJS/ESM compatibility

  Since this release, all server utilities will be CommonJS by default unless
  they have referenced ESM modules in the code. For instance,
  `next-docs-zeta/middleware` is now a CommonJS file. However, some modules,
  such as `next-docs-zeta/server` requires ESM-only package, hence, they remain
  a ESM file.

  Notice that the extension of client-side files is now `.js` instead of `.mjs`,
  but they're still ESM.

  **Why?**

  After migrating to `.mjs` Next.js config file, some imports stopped to work.
  The built-in Next.js bundler seems can't resolve these `next` imports in
  external packages, causing errors when modules have imported Next.js itself
  (e.g. `next/image`) in the code.

  By changing client-side files extension to `.mjs` and using CommonJS for
  server-side files, this error is solved.

- d2eb490: Support Server Component usage for MDX default components

### Patch Changes

- 0175b4f: Fix sidebar opening issue
- Updated dependencies [678cd3d]
- Updated dependencies [24245a3]
  - next-docs-zeta@4.0.0

## 3.0.0

### Minor Changes

- 522ed48: Update typography & layout styles

### Patch Changes

- a4a8120: Update search utilities import paths.

  Search Utilities in `next-docs-zeta/server` is now moved to
  `next-docs-zeta/search` and `next-docs-zeta/server-algolia`.

  Client-side Changes: `next-docs-zeta/search` -> `next-docs-zeta/search/client`
  `next-docs-zeta/search-algolia` -> `next-docs-zeta/search-algolia/client`

  If you're using Next Docs UI, make sure to import the correct path.

- Updated dependencies [1043532]
- Updated dependencies [7a0690b]
- Updated dependencies [a4a8120]
  - next-docs-zeta@3.0.0

## 2.4.1

### Patch Changes

- dc4f10d: Fix Callout component overflow
- 841a18b: Support passing extra props to Card components
- Updated dependencies [dfc8b44]
- Updated dependencies [ef4d8cc]
  - next-docs-zeta@2.4.1

## 2.4.0

### Minor Changes

- 82c4fc6: Override default typography styles
- 25e6856: Create Callout component

### Patch Changes

- 1cb6385: Improve Inline TOC component
- Updated dependencies [27ce871]
  - next-docs-zeta@2.4.0

## 2.3.3

### Patch Changes

- 634f7d3: Reduce dependencies
- 996a914: Create Inline TOC component
- eac081c: Update github urls & author name
- Updated dependencies [634f7d3]
- Updated dependencies [eac081c]
  - next-docs-zeta@2.3.3

## 2.3.2

### Patch Changes

- e0ebafa: Improve global padding
  - next-docs-zeta@2.3.2

## 2.3.1

### Patch Changes

- cd0b4a3: Support CSS classes usage for steps component
- cd0b4a3: Fix TOC marker position
  - next-docs-zeta@2.3.1

## 2.3.0

### Minor Changes

- 32a4669: Support algolia search dialog

### Patch Changes

- cef6143: Fix toc marker position
- 32a4669: Improve search API usage
- b65219c: Separate default and custom search dialog
- 9c3bc86: Improve i18n language select
- 6664178: Support custom search function for search dialog
- Updated dependencies [6664178]
- Updated dependencies [a0f9911]
- Updated dependencies [6664178]
  - next-docs-zeta@2.3.0

## 2.2.0

### Minor Changes

- 1ff7172: Remove support for importing "next-docs-ui/components", please use
  "next-docs-ui/nav" instead

### Patch Changes

- e546f4e: Hotfix sidebar collapsible not closing
  - next-docs-zeta@2.2.0

## 2.1.2

### Patch Changes

- a3f443f: Improve colors in light mode
- 2153fc8: Improve navbar transparent mode
- 4e7e0d2: Replace `next-docs-ui/components` with `next-docs-ui/nav`
- 4816737: Fix sidebar collapsible button
- Updated dependencies [dfbbc17]
- Updated dependencies [79227d8]
  - next-docs-zeta@2.1.2

## 2.1.1

### Patch Changes

- 14459cf: Fix image-zoom causes viewport overflow on IOS devices
- a015445: Improve search toggle
- 794c2c6: Remove default icon from cards
  - next-docs-zeta@2.1.1

## 2.1.0

### Minor Changes

- db050fc: Redesign default theme & layout

### Patch Changes

- b527988: Files component support custom icons
- 69a4469: Animate TOC marker
- dbe1bcf: Support transparent navbar for custom navbar
- Updated dependencies [a5a661e]
  - next-docs-zeta@2.1.0

## 2.0.3

### Patch Changes

- caa7e98: Fix sidebar animation problems
- caa7e98: Improve copy button in codeblocks
  - next-docs-zeta@2.0.3

## 2.0.2

### Patch Changes

- 74e5e85: Several UI improvements
- Support adding header to TOC component
- Updated dependencies [74e5e85]
- Updated dependencies [72e9fdf]
  - next-docs-zeta@2.0.2

## 2.0.1

### Patch Changes

- 8a05955: Improve syntax highlighting
- Updated dependencies [48c5256]
  - next-docs-zeta@2.0.1

## 2.0.0

### Major Changes

- 9bf1297: Update API usage

### Patch Changes

- e8b3e50: Use react-medium-image-zoom for zoom images
- 6c408d0: Change layout width
  - next-docs-zeta@2.0.0

## 1.6.9

### Patch Changes

- 5ee874c: Create Accordions component
- 1630f74: Add default border to TOC content
  - next-docs-zeta@1.6.9

## 1.6.8

### Patch Changes

- 4cf4552: Fix aria-controls warning & support default index
  - next-docs-zeta@1.6.8

## 1.6.7

### Patch Changes

- f72a4c1: Improve animations & layout
- 88bab2f: Support `lastUpdate` in page
- f1846e8: Support i18n search dialog placeholder
  - next-docs-zeta@1.6.7

## 1.6.6

### Patch Changes

- be8a93d: Support sidebar default open level
  - next-docs-zeta@1.6.6

## 1.6.5

### Patch Changes

- b8a76f8: Fix theme toggle wrong icon
- 7337d59: Create Zoom Image component
- 79abe84: Support collapsible sidebar
- Updated dependencies [79abe84]
  - next-docs-zeta@1.6.5

## 1.6.4

### Patch Changes

- e6ebf6a: Rename `sidebarContent` to `sidebarFooter`
- e01bf3a: Allow `true` to keep default
- e6ebf6a: Imrove sidebar banner
  - next-docs-zeta@1.6.4

## 1.6.3

### Patch Changes

- Support replacing breadcrumb
- 8d07003: Replace type of `TreeNode[]` with `PageTree`
- Updated dependencies [8d07003]
  - next-docs-zeta@1.6.3

## 1.6.2

### Patch Changes

- 5512300: Support custom navbar items
- af8720b: Improve default code block
- 2836799: Support I18n text in built-in components
  - next-docs-zeta@1.6.2

## 1.6.1

### Patch Changes

- 689c75d: Create Files component
- Updated dependencies [fc6279e]
  - next-docs-zeta@1.6.1

## 1.6.0

### Patch Changes

- 037d5e5: Export default mdx components
- Updated dependencies [cdd30d5]
- Updated dependencies [edb9930]
  - next-docs-zeta@1.6.0

## 1.5.3

### Patch Changes

- fa8d4cf: Update dependencies
- f0ab1ba: Improve typography
- Updated dependencies [fa8d4cf]
  - next-docs-zeta@1.5.3

## 1.5.2

### Patch Changes

- 1906e80: Create steps component
  - next-docs-zeta@1.5.2

## 1.5.1

### Patch Changes

- d4f718d: Support disabling TOC & Sidebar
  - next-docs-zeta@1.5.1

## 1.5.0

### Patch Changes

- Updated dependencies [fb2abb3]
  - next-docs-zeta@1.5.0

## 1.4.1

### Patch Changes

- 8883553: Support tabs component
- d084de2: Export default search dialog
- Improve Search Dialog UI
- Updated dependencies
- Updated dependencies [3d92c92]
  - next-docs-zeta@1.4.1

## 1.4.0

### Minor Changes

- 45a174a: Split roll-button into optional component

### Patch Changes

- ed385ab: Add Type Table component
- 5407360: Improve sidebar layout
- Updated dependencies [0f106d9]
  - next-docs-zeta@1.4.0

## 1.3.1

### Patch Changes

- 21725e4: Support replacing default search dialog component
- 7fb2b9e: Support custom page & folder icons
- Updated dependencies [ff05f5d]
- Updated dependencies [7fb2b9e]
  - next-docs-zeta@1.3.1

## 1.3.0

### Minor Changes

- 98226d9: Rewrite slugger and TOC utilities

### Patch Changes

- 6999268: Support custom codeblock meta in Codeblocks
- Change default typography
- Updated dependencies [98226d9]
  - next-docs-zeta@1.3.0

## 1.2.1

### Patch Changes

- 1b626c9: Redesign UI
- ce10df9: Support custom sidebar banner
- Updated dependencies [b15895f]
  - next-docs-zeta@1.2.1

## 1.2.0

### Minor Changes

- Remove `tree` prop from Docs Page, replaced by pages context.

### Patch Changes

- 5f248fb: Support Auto Scroll in TOC for headless docs
- Updated dependencies [5f248fb]
  - next-docs-zeta@1.2.0

## 1.1.4

### Patch Changes

- 496a6b0: Improve footer design
- 496a6b0: Configure eslint + prettier
- Updated dependencies [496a6b0]
  - next-docs-zeta@1.1.4

## 1.1.3

### Patch Changes

- 10d31e6: Fix sidebar scrollbars disappeared
- Updated dependencies [0998b1b]
  - next-docs-zeta@1.1.3

## 1.1.2

### Patch Changes

- Fix aria attributes
- Improve footer styles
- Updated dependencies
  - next-docs-zeta@1.1.2

## 1.1.1

### Patch Changes

- Fix codeblocks not being generated correctly
  - next-docs-zeta@1.1.1

## 1.1.0

### Minor Changes

- 524ca9a: Support page footer

### Patch Changes

- d810bbd: Improve codeblock styles
- d810bbd: Add `<RollButton />` component
- Updated dependencies [255fc92]
  - next-docs-zeta@1.1.0

## 1.0.0

### Minor Changes

- d30d57f: Support optional I18n context provider

### Patch Changes

- Improve codeblock styles
- Updated dependencies [8e4a001]
- Updated dependencies [4fa45c0]
- Updated dependencies [0983891]
  - next-docs-zeta@1.0.0

## 0.3.2

### Patch Changes

- Fix unexpected trailing slash on Contentlayer v0.3.4
- Add Auto scroll for TOC
  - next-docs-zeta@0.3.2

## 0.3.1

### Patch Changes

- Use Radix UI scroll area
- d91de39: Fix sticky position for TOC and Sidebar
  - next-docs-zeta@0.3.1

## 0.3.0

### Minor Changes

- Support next.js images in MDX files

### Patch Changes

- next-docs-zeta@0.3.0

## 0.1.2

### Patch Changes

- 67cd8ab: Remove unused files in dist
- Updated dependencies [67cd8ab]
  - next-docs-zeta@0.2.1

## 0.1.1

### Patch Changes

- Updated dependencies [5ff94af]
- Updated dependencies [5ff94af]
  - next-docs-zeta@0.2.0



================================================
FILE: packages/ui/eslint.config.mjs
================================================
import next from 'eslint-config-custom/next.js';

export default [
  ...next,
  {
    rules: {
      // for the import hacks
      '@typescript-eslint/consistent-type-imports': 'off',
      // some arrays like link items won't be changed
      'react/no-array-index-key': 'off',
      '@typescript-eslint/unbound-method': 'off',
      '@typescript-eslint/restrict-template-expressions': 'off',
      'import/no-relative-packages': 'off',
    },
  },
];



================================================
FILE: packages/ui/package.json
================================================
{
  "name": "fumadocs-ui",
  "version": "15.6.3",
  "description": "The framework for building a documentation website in Next.js",
  "keywords": [
    "NextJs",
    "Docs"
  ],
  "homepage": "https://fumadocs.vercel.app",
  "repository": "github:fuma-nama/fumadocs",
  "license": "MIT",
  "author": "Fuma Nama",
  "type": "module",
  "exports": {
    "./style.css": "./dist/style.css",
    "./css/*": "./css/*",
    "./image-zoom.css": "./dist/image-zoom.css",
    "./components/*": {
      "import": "./dist/components/*.js",
      "types": "./dist/components/*.d.ts",
      "default": "./dist/components/*.js"
    },
    "./i18n": {
      "import": "./dist/i18n.js",
      "types": "./dist/i18n.d.ts"
    },
    "./layouts/*": {
      "import": "./dist/layouts/*.js",
      "types": "./dist/layouts/*.d.ts"
    },
    "./page": {
      "node": "./dist/page.server.js",
      "import": "./dist/page.js",
      "types": "./dist/page.server.d.ts"
    },
    "./provider": {
      "import": "./dist/provider/index.js",
      "types": "./dist/provider/index.d.ts"
    },
    "./provider/*": {
      "import": "./dist/provider/*.js",
      "types": "./dist/provider/*.d.ts"
    },
    "./contexts/*": {
      "import": "./dist/contexts/*.js",
      "types": "./dist/contexts/*.d.ts"
    },
    "./mdx": {
      "node": "./dist/mdx.server.js",
      "import": "./dist/mdx.js",
      "types": "./dist/mdx.d.ts"
    },
    "./og": {
      "import": "./dist/og.js",
      "types": "./dist/og.d.ts"
    },
    "./theme/*": {
      "import": "./dist/theme/*.js",
      "types": "./dist/theme/*.d.ts"
    },
    "./utils/*": {
      "import": "./dist/utils/*.js",
      "types": "./dist/utils/*.d.ts"
    },
    "./internal/icons": {
      "import": "./dist/icons.js",
      "types": "./dist/icons.d.ts"
    }
  },
  "files": [
    "dist/*",
    "css/*"
  ],
  "scripts": {
    "build": "pnpm build:layout && pnpm build:tailwind",
    "build:layout": "tsc --project tsconfig.build.json && tsc-alias -p tsconfig.build.json",
    "build:tailwind": "tailwindcss -i css/style.css -o ./dist/style.css && tailwindcss -i src/components/image-zoom.css -o dist/components/image-zoom.css",
    "clean": "rimraf dist",
    "dev": "concurrently \"tsc -w --project tsconfig.build.json\" \"tsc-alias -w -p tsconfig.build.json\" \"pnpm dev:tailwind\"",
    "dev:tailwind": "tailwindcss -i css/style.css -o ./dist/style.css -w && tailwindcss -i src/components/image-zoom.css -o dist/components/image-zoom.css -w",
    "lint": "eslint .",
    "types:check": "tsc --noEmit"
  },
  "dependencies": {
    "@radix-ui/react-accordion": "^1.2.11",
    "@radix-ui/react-collapsible": "^1.1.11",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-direction": "^1.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.13",
    "@radix-ui/react-popover": "^1.1.14",
    "@radix-ui/react-presence": "^1.1.4",
    "@radix-ui/react-scroll-area": "^1.2.9",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-tabs": "^1.1.12",
    "class-variance-authority": "^0.7.1",
    "fumadocs-core": "workspace:*",
    "lodash.merge": "^4.6.2",
    "next-themes": "^0.4.6",
    "postcss-selector-parser": "^7.1.0",
    "react-medium-image-zoom": "^5.2.14",
    "scroll-into-view-if-needed": "^3.1.0",
    "tailwind-merge": "^3.3.1"
  },
  "devDependencies": {
    "@fumadocs/cli": "workspace:*",
    "@next/eslint-plugin-next": "^15.3.5",
    "@tailwindcss/cli": "^4.1.11",
    "@types/lodash.merge": "^4.6.9",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "eslint-config-custom": "workspace:*",
    "fumadocs-core": "workspace:*",
    "next": "15.3.5",
    "tailwindcss": "^4.1.11",
    "tsc-alias": "^1.8.16",
    "tsconfig": "workspace:*"
  },
  "peerDependencies": {
    "@types/react": "*",
    "next": "14.x.x || 15.x.x",
    "react": "18.x.x || 19.x.x",
    "react-dom": "18.x.x || 19.x.x",
    "tailwindcss": "^3.4.14 || ^4.0.0"
  },
  "peerDependenciesMeta": {
    "next": {
      "optional": true
    },
    "@types/react": {
      "optional": true
    },
    "tailwindcss": {
      "optional": true
    }
  },
  "publishConfig": {
    "access": "public"
  }
}



================================================
FILE: packages/ui/postcss.config.js
================================================
export default {
  plugins: {
    '@tailwindcss/postcss': {},
  },
};



================================================
FILE: packages/ui/tsconfig.build.json
================================================
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "noEmit": false,
    "outDir": "dist",
    "rootDir": "src"
  },
  "include": ["./src/**/*"],
  "exclude": ["./src/_registry"]
}



================================================
FILE: packages/ui/tsconfig.json
================================================
{
  "extends": "tsconfig/react-library.json",
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"],
      "lucide-react": ["./src/icons"]
    }
  },
  "tsc-alias": {
    "resolveFullPaths": true
  },
  "exclude": ["node_modules", "dist", "eslint.config.mjs"]
}



================================================
FILE: packages/ui/css/black.css
================================================
@theme {
  --color-fd-background: hsl(0, 0%, 98%);
  --color-fd-foreground: hsl(0, 0%, 3.9%);
  --color-fd-muted: hsl(0, 0%, 96.1%);
  --color-fd-muted-foreground: hsl(0, 0%, 45.1%);
  --color-fd-popover: hsl(0, 0%, 100%);
  --color-fd-popover-foreground: hsl(0, 0%, 15.1%);
  --color-fd-card: hsl(0, 0%, 99.7%);
  --color-fd-card-foreground: hsl(0, 0%, 3.9%);
  --color-fd-border: hsla(0, 0%, 60%, 0.2);
  --color-fd-primary: hsl(0, 0%, 9%);
  --color-fd-primary-foreground: hsl(0, 0%, 98%);
  --color-fd-secondary: hsl(0, 0%, 96.1%);
  --color-fd-secondary-foreground: hsl(0, 0%, 9%);
  --color-fd-accent: hsl(0, 0%, 94.1%);
  --color-fd-accent-foreground: hsl(0, 0%, 9%);
  --color-fd-ring: hsl(0, 0%, 63.9%);
}

.dark {
  --color-fd-background: hsl(0, 0%, 2%);
  --color-fd-foreground: hsl(0, 0%, 98%);
  --color-fd-muted: hsl(0, 0%, 8%);
  --color-fd-muted-foreground: hsl(0, 0%, 60%);
  --color-fd-popover: hsl(0, 0%, 4%);
  --color-fd-popover-foreground: hsl(0, 0%, 98%);
  --color-fd-card: hsl(0, 0%, 4%);
  --color-fd-card-foreground: hsl(0, 0%, 98%);
  --color-fd-border: hsl(0, 0%, 50%, 0.2);
  --color-fd-primary: hsl(0, 0%, 98%);
  --color-fd-primary-foreground: hsl(0, 0%, 9%);
  --color-fd-secondary: hsl(0, 0%, 12.9%);
  --color-fd-secondary-foreground: hsl(0, 0%, 98%);
  --color-fd-accent: hsl(0, 0%, 15%);
  --color-fd-accent-foreground: hsl(0, 0%, 100%);
  --color-fd-ring: hsl(0, 0%, 34.9%);
}



================================================
FILE: packages/ui/css/catppuccin.css
================================================
@theme {
  --color-fd-popover: hsl(220, 22%, 92%);
  --color-fd-popover-foreground: hsl(234, 16%, 35%);
  --color-fd-secondary-foreground: hsl(234, 16%, 35%);
  --color-fd-border: hsl(223, 16%, 83%);
  --color-fd-primary: hsl(266, 85%, 58%);
  --color-fd-primary-foreground: hsl(234, 16%, 35%);
  --color-fd-muted: hsl(220, 22%, 92%);
  --color-fd-card: hsl(220, 22%, 92%);
  --color-fd-accent: hsl(223, 16%, 83%);
  --color-fd-accent-foreground: hsl(234, 16%, 35%);
  --color-fd-card-foreground: hsl(234, 16%, 35%);
  --color-fd-muted-foreground: hsl(233, 10%, 47%);
  --color-fd-foreground: hsl(234, 16%, 35%);
  --color-fd-secondary: hsl(220, 22%, 92%);
  --color-fd-background: hsl(220, 23%, 95%);
  --color-fd-ring: hsl(267, 84%, 81%);
}

.dark {
  --color-fd-background: hsl(240, 21%, 15%);
  --color-fd-foreground: hsl(226, 64%, 88%);
  --color-fd-ring: hsl(267, 84%, 81%);
  --color-fd-primary: hsl(267, 84%, 81%);
  --color-fd-popover: hsl(240, 23%, 9%);
  --color-fd-card: hsl(240, 21%, 12%);
  --color-fd-muted: hsl(240, 21%, 12%);
  --color-fd-border: hsl(237, 16%, 23%);
  --color-fd-accent: hsl(237, 16%, 23%);
  --color-fd-secondary: hsl(240, 21%, 12%);
  --color-fd-primary-foreground: hsl(240, 23%, 9%);
  --color-fd-card-foreground: hsl(226, 64%, 88%);
  --color-fd-secondary-foreground: hsl(226, 64%, 88%);
  --color-fd-popover-foreground: hsl(226, 64%, 88%);
  --color-fd-accent-foreground: hsl(226, 64%, 88%);
  --color-fd-muted-foreground: hsl(228, 24%, 72%);
}

#nd-sidebar {
  --color-fd-secondary: hsl(223, 16%, 83%);
  --color-fd-muted: hsl(223, 16%, 83%);
}

.dark #nd-sidebar {
  --color-fd-secondary: hsl(237, 16%, 23%);
  --color-fd-muted: hsl(237, 16%, 23%);
}



================================================
FILE: packages/ui/css/dusk.css
================================================
@theme {
  --color-fd-background: hsl(250, 20%, 92%);
  --color-fd-primary: hsl(340, 40%, 48%);
  --color-fd-border: hsl(240, 40%, 90%);
  --color-fd-accent: hsl(250, 30%, 90%);
  --color-fd-accent-foreground: hsl(250, 20%, 20%);
  --color-fd-muted: hsl(240, 30%, 94%);
  --color-fd-muted-foreground: hsl(240, 10%, 50%);
  --color-fd-foreground: hsl(220, 20%, 30%);
  --color-fd-secondary: hsl(250, 40%, 94%);
  --color-fd-secondary-foreground: hsl(240, 40%, 10%);
  --color-fd-card: hsl(250, 20%, 92%);
  --color-fd-card-foreground: hsl(250, 20%, 20%);
  --color-fd-popover-foreground: hsl(250, 40%, 20%);
  --color-fd-popover: hsl(250, 40%, 96%);
  --color-fd-primary-foreground: hsl(240, 80%, 20%);
  --color-fd-ring: hsl(340, 40%, 48%);
}

.dark {
  --color-fd-ring: hsl(340, 100%, 90%);
  --color-fd-primary-foreground: hsl(240, 40%, 4%);
  --color-fd-popover: hsl(240, 20%, 5%);
  --color-fd-popover-foreground: hsl(250, 20%, 90%);
  --color-fd-primary: hsl(340, 100%, 90%);
  --color-fd-border: hsl(220, 15%, 15%);
  --color-fd-background: hsl(220, 15%, 6%);
  --color-fd-foreground: hsl(220, 15%, 87%);
  --color-fd-muted: hsl(220, 20%, 15%);
  --color-fd-muted-foreground: hsl(220, 15%, 60%);
  --color-fd-accent: hsl(250, 20%, 15%);
  --color-fd-secondary: hsl(240, 20%, 15%);
  --color-fd-card-foreground: hsl(240, 15%, 87%);
  --color-fd-card: hsl(240, 20%, 5%);
  --color-fd-secondary-foreground: hsl(250, 20%, 90%);
  --color-fd-accent-foreground: hsl(340, 5%, 90%);
}

#nd-sidebar {
  background-color: hsl(250 20% 90%);
}

.dark #nd-sidebar {
  background-color: hsl(240 20% 5%);
}



================================================
FILE: packages/ui/css/neutral.css
================================================
@theme {
  --color-fd-background: hsl(0, 0%, 96%);
  --color-fd-foreground: hsl(0, 0%, 3.9%);
  --color-fd-muted: hsl(0, 0%, 96.1%);
  --color-fd-muted-foreground: hsl(0, 0%, 45.1%);
  --color-fd-popover: hsl(0, 0%, 98%);
  --color-fd-popover-foreground: hsl(0, 0%, 15.1%);
  --color-fd-card: hsl(0, 0%, 94.7%);
  --color-fd-card-foreground: hsl(0, 0%, 3.9%);
  --color-fd-border: hsla(0, 0%, 62%, 20%);
  --color-fd-primary: hsl(0, 0%, 9%);
  --color-fd-primary-foreground: hsl(0, 0%, 98%);
  --color-fd-secondary: hsl(0, 0%, 93.1%);
  --color-fd-secondary-foreground: hsl(0, 0%, 9%);
  --color-fd-accent: hsla(0, 0%, 82%, 50%);
  --color-fd-accent-foreground: hsl(0, 0%, 9%);
  --color-fd-ring: hsl(0, 0%, 63.9%);
}

.dark {
  --color-fd-background: hsl(0, 0%, 7.04%);
  --color-fd-foreground: hsl(0, 0%, 92%);
  --color-fd-muted: hsl(0, 0%, 12.9%);
  --color-fd-muted-foreground: hsla(0, 0%, 70%, 0.8);
  --color-fd-popover: hsl(0, 0%, 10.6%);
  --color-fd-popover-foreground: hsl(0, 0%, 86.9%);
  --color-fd-card: hsl(0, 0%, 9.8%);
  --color-fd-card-foreground: hsl(0, 0%, 98%);
  --color-fd-border: hsla(0, 0%, 40%, 20%);
  --color-fd-primary: hsl(0, 0%, 98%);
  --color-fd-primary-foreground: hsl(0, 0%, 9%);
  --color-fd-secondary: hsl(0, 0%, 12.9%);
  --color-fd-secondary-foreground: hsl(0, 0%, 92%);
  --color-fd-accent: hsla(0, 0%, 40.9%, 30%);
  --color-fd-accent-foreground: hsl(0, 0%, 90%);
  --color-fd-ring: hsl(0, 0%, 54.9%);
}

.dark #nd-sidebar {
  --color-fd-muted: hsl(0, 0%, 16%);
  --color-fd-secondary: hsl(0, 0%, 18%);
  --color-fd-muted-foreground: hsl(0, 0%, 72%);
}



================================================
FILE: packages/ui/css/ocean.css
================================================
@theme {
  --color-fd-background: hsl(0, 0%, 98%);
  --color-fd-foreground: hsl(0, 0%, 3.9%);
  --color-fd-muted: hsl(220, 90%, 96.1%);
  --color-fd-muted-foreground: hsl(0, 0%, 45.1%);
  --color-fd-popover: hsl(0, 0%, 98%);
  --color-fd-popover-foreground: hsl(0, 0%, 15.1%);
  --color-fd-card: hsl(220, 50%, 98%);
  --color-fd-card-foreground: hsl(0, 0%, 3.9%);
  --color-fd-border: hsl(220, 50%, 89.8%);
  --color-fd-primary: hsl(210, 80%, 20.2%);
  --color-fd-primary-foreground: hsl(0, 0%, 98%);
  --color-fd-secondary: hsl(220, 90%, 96.1%);
  --color-fd-secondary-foreground: hsl(0, 0%, 9%);
  --color-fd-accent: hsl(220, 50%, 94.1%);
  --color-fd-accent-foreground: hsl(0, 0%, 9%);
  --color-fd-ring: hsl(220, 100%, 63.9%);
}

.dark {
  --color-fd-background: hsl(220, 60%, 8%);
  --color-fd-foreground: hsl(220, 60%, 94.5%);
  --color-fd-muted: hsl(220, 50%, 10%);
  --color-fd-muted-foreground: hsl(220, 30%, 65%);
  --color-fd-popover: hsl(220, 50%, 10%);
  --color-fd-popover-foreground: hsl(220, 60%, 94.5%);
  --color-fd-card: hsla(220, 56%, 15%, 0.4);
  --color-fd-card-foreground: hsl(220, 60%, 94.5%);
  --color-fd-border: hsla(220, 50%, 50%, 0.2);
  --color-fd-primary: hsl(205, 100%, 85%);
  --color-fd-primary-foreground: hsl(0, 0%, 9%);
  --color-fd-secondary: hsl(220, 50%, 20%);
  --color-fd-secondary-foreground: hsl(220, 80%, 90%);
  --color-fd-accent: hsl(220, 40%, 20%);
  --color-fd-accent-foreground: hsl(220, 80%, 90%);
  --color-fd-ring: hsl(205, 100%, 85%);
}

.dark body {
  background-image: linear-gradient(
    rgba(5, 105, 255, 0.15),
    transparent 20rem,
    transparent
  );
  background-repeat: no-repeat;
}



================================================
FILE: packages/ui/css/preset.css
================================================
@import './shiki.css';

@source '../dist/**/*.js';
@plugin '../dist/theme/typography/index.js';

@theme static {
  --color-fd-info: oklch(62.3% 0.214 259.815);
  --color-fd-warning: oklch(76.9% 0.188 70.08);
  --color-fd-error: oklch(63.7% 0.237 25.331);
  --color-fd-success: oklch(72.3% 0.219 149.579);
}

@theme {
  --spacing-fd-container: 1400px;
  --fd-page-width: 1200px;
  --fd-sidebar-width: 0px;
  --fd-toc-width: 0px;
  --fd-layout-width: 100vw;
  --fd-banner-height: 0px;
  --fd-nav-height: 0px;
  --fd-tocnav-height: 0px;

  --color-fd-diff-remove: rgba(200, 10, 100, 0.12);
  --color-fd-diff-remove-symbol: rgb(230, 10, 100);
  --color-fd-diff-add: rgba(14, 180, 100, 0.1);
  --color-fd-diff-add-symbol: rgb(10, 200, 100);

  --animate-fd-fade-in: fd-fade-in 300ms ease;
  --animate-fd-fade-out: fd-fade-out 300ms ease;

  --animate-fd-dialog-in: fd-dialog-in 300ms cubic-bezier(0.16, 1, 0.3, 1);
  --animate-fd-dialog-out: fd-dialog-out 300ms cubic-bezier(0.16, 1, 0.3, 1);

  --animate-fd-popover-in: fd-popover-in 130ms ease;
  --animate-fd-popover-out: fd-popover-out 130ms ease;

  --animate-fd-collapsible-down: fd-collapsible-down 150ms
    cubic-bezier(0.45, 0, 0.55, 1);
  --animate-fd-collapsible-up: fd-collapsible-up 150ms
    cubic-bezier(0.45, 0, 0.55, 1);

  --animate-fd-accordion-down: fd-accordion-down 200ms ease-out;
  --animate-fd-accordion-up: fd-accordion-up 200ms ease-out;

  --animate-fd-nav-menu-in: fd-nav-menu-in 200ms ease;
  --animate-fd-nav-menu-out: fd-nav-menu-out 200ms ease;

  --animate-fd-enterFromLeft: fd-enterFromLeft 250ms ease;
  --animate-fd-enterFromRight: fd-enterFromRight 250ms ease;

  --animate-fd-sidebar-in: fd-sidebar-in 250ms ease;
  --animate-fd-sidebar-out: fd-sidebar-out 250ms ease;

  --animate-fd-exitToLeft: fd-exitToLeft 250ms ease;
  --animate-fd-exitToRight: fd-exitToRight 250ms ease;

  @keyframes fd-collapsible-down {
    from {
      height: 0;
      opacity: 0;
    }
    to {
      height: var(--radix-collapsible-content-height);
    }
  }

  @keyframes fd-collapsible-up {
    from {
      height: var(--radix-collapsible-content-height);
    }
    to {
      height: 0;
      opacity: 0;
    }
  }

  @keyframes fd-accordion-down {
    from {
      height: 0;
      opacity: 0.5;
    }
    to {
      height: var(--radix-accordion-content-height);
    }
  }

  @keyframes fd-accordion-up {
    from {
      height: var(--radix-accordion-content-height);
    }
    to {
      height: 0;
      opacity: 0.5;
    }
  }

  @keyframes fd-dialog-in {
    from {
      transform: scale(1.06);
      opacity: 0;
    }
    to {
      transform: scale(1);
    }
  }

  @keyframes fd-dialog-out {
    from {
      transform: scale(1);
    }
    to {
      transform: scale(1.04);
      opacity: 0;
    }
  }

  @keyframes fd-popover-in {
    from {
      opacity: 0;
      transform: scale(0.7);
    }
  }

  @keyframes fd-popover-out {
    to {
      opacity: 0;
      transform: scale(0.7);
    }
  }

  @keyframes fd-fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes fd-fade-out {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }

  @keyframes fd-enterFromRight {
    from {
      opacity: 0;
      transform: translateX(200px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes fd-enterFromLeft {
    from {
      opacity: 0;
      transform: translateX(-200px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes fd-exitToRight {
    from {
      opacity: 1;
      transform: translateX(0);
    }
    to {
      opacity: 0;
      transform: translateX(200px);
    }
  }

  @keyframes fd-exitToLeft {
    from {
      opacity: 1;
      transform: translateX(0);
    }
    to {
      opacity: 0;
      transform: translateX(-200px);
    }
  }

  @keyframes fd-sidebar-in {
    from {
      transform: translateX(-100%);
    }
  }

  @keyframes fd-sidebar-out {
    to {
      transform: translateX(-100%);
    }
  }

  @keyframes fd-nav-menu-in {
    from {
      opacity: 0;
      height: 0px;
    }
    to {
      opacity: 1;
      height: var(--radix-navigation-menu-viewport-height);
    }
  }

  @keyframes fd-nav-menu-out {
    from {
      opacity: 1;
      height: var(--radix-navigation-menu-viewport-height);
    }
    to {
      opacity: 0;
      height: 0px;
    }
  }
}

@layer base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-fd-border, currentColor);
  }

  body {
    background-color: var(--color-fd-background);
    color: var(--color-fd-foreground);
  }

  [data-rmiz-modal-overlay='visible'] {
    background-color: var(--color-fd-background);
  }

  :root,
  #nd-docs-layout {
    --fd-layout-offset: max(calc(50vw - var(--fd-layout-width) / 2), 0px);
  }
}

@variant max-xl {
  #nd-docs-layout:has([data-toc-popover]) {
    --fd-tocnav-height: calc(var(--spacing) * 10);
  }
}

@utility fd-scroll-container {
  &::-webkit-scrollbar {
    width: 5px;
    height: 5px;
  }

  &::-webkit-scrollbar-thumb {
    border-radius: 5px;
    background: var(--color-fd-border);
  }

  &::-webkit-scrollbar-track {
    background: transparent;
  }

  &::-webkit-scrollbar-corner {
    display: none;
  }
}

@utility fd-steps {
  counter-reset: step;
  position: relative;
  @apply pl-6 ml-2 border-l sm:ml-4 sm:pl-7;
}

@utility fd-step {
  &:before {
    background-color: var(--color-fd-secondary);
    color: var(--color-fd-secondary-foreground);
    content: counter(step);
    counter-increment: step;
    justify-content: center;
    align-items: center;
    font-size: 0.875rem;
    line-height: 1.25rem;
    display: flex;
    position: absolute;
    @apply size-8 -start-4 rounded-full;
  }
}

@utility prose-no-margin {
  & > :first-child {
    margin-top: 0;
  }

  & > :last-child {
    margin-bottom: 0;
  }
}

@property --radix-collapsible-content-height {
  syntax: '<length>';
  inherits: false;
  initial-value: 0px;
}

@utility container {
  margin-inline: auto;
  padding-inline: 1rem;

  @apply 2xl:max-w-[1400px];
}

@variant dark (&:where(.dark, .dark *));



================================================
FILE: packages/ui/css/purple.css
================================================
@theme {
  --color-fd-background: hsl(256, 100%, 96%);
  --color-fd-primary: hsl(270, 100%, 52%);
  --color-fd-border: hsla(270, 40%, 80%, 0.5);
  --color-fd-accent: hsl(270, 40%, 88%);
  --color-fd-accent-foreground: hsl(270, 100%, 20%);
  --color-fd-muted: hsl(256, 60%, 94%);
  --color-fd-muted-foreground: hsl(256, 50%, 50%);
  --color-fd-foreground: hsl(256, 60%, 26%);
  --color-fd-secondary: hsl(270, 60%, 90%);
  --color-fd-secondary-foreground: hsl(256, 60%, 10%);
  --color-fd-card: hsl(256, 60%, 92%);
  --color-fd-card-foreground: hsl(256, 100%, 20%);
  --color-fd-popover-foreground: hsl(256, 100%, 20%);
  --color-fd-popover: hsl(256, 60%, 96%);
  --color-fd-primary-foreground: hsl(270, 100%, 20%);
  --color-fd-ring: hsl(270, 100%, 52%);
}

.dark {
  --color-fd-background: hsl(256, 20%, 6%);
  --color-fd-primary: hsl(270, 100%, 86%);
  --color-fd-border: hsla(270, 50%, 40%, 0.3);
  --color-fd-accent: hsl(256, 23%, 22%);
  --color-fd-accent-foreground: hsl(270, 40%, 86%);
  --color-fd-muted: hsl(256, 23%, 10%);
  --color-fd-foreground: hsl(256, 60%, 90%);
  --color-fd-muted-foreground: hsl(256, 50%, 75%);
  --color-fd-secondary: hsl(270, 23%, 20%);
  --color-fd-secondary-foreground: hsl(256, 60%, 90%);
  --color-fd-card: hsl(256, 23%, 10%);
  --color-fd-card-foreground: hsl(256, 60%, 90%);
  --color-fd-popover-foreground: hsl(256, 60%, 90%);
  --color-fd-popover: hsl(256, 23%, 6%);
  --color-fd-primary-foreground: hsl(256, 60%, 6%);
  --color-fd-ring: hsl(270, 100%, 86%);
}



================================================
FILE: packages/ui/css/shadcn.css
================================================
@theme {
  --color-fd-background: var(--background);
  --color-fd-foreground: var(--foreground);
  --color-fd-muted: var(--muted);
  --color-fd-muted-foreground: var(--muted-foreground);
  --color-fd-popover: var(--popover);
  --color-fd-popover-foreground: var(--popover-foreground);
  --color-fd-card: var(--card);
  --color-fd-card-foreground: var(--card-foreground);
  --color-fd-border: var(--border);
  --color-fd-primary: var(--primary);
  --color-fd-primary-foreground: var(--primary-foreground);
  --color-fd-secondary: var(--secondary);
  --color-fd-secondary-foreground: var(--secondary-foreground);
  --color-fd-accent: var(--accent);
  --color-fd-accent-foreground: var(--accent-foreground);
  --color-fd-ring: var(--ring);
}



================================================
FILE: packages/ui/css/shiki.css
================================================
.shiki:not(.not-fumadocs-codeblock *) {
  --padding-left: calc(var(--spacing) * 3);
  --padding-right: calc(var(--spacing) * 3);

  code span {
    color: var(--shiki-light);
  }

  code .line {
    position: relative;
    min-height: 1lh;
    padding-left: var(--padding-left);
    padding-right: var(--padding-right);
  }

  &.has-focused code .line:not(.focused) {
    filter: blur(2px);
    transition: filter 200ms;
  }

  &.has-focused:hover code .line:not(.focused) {
    filter: blur(0);
  }

  &[data-line-numbers] code .twoslash-meta-line {
    @apply ml-7;
  }

  &[data-line-numbers] code .line {
    width: calc(100% - 7 * var(--spacing));
    counter-increment: line;
    padding-left: calc(var(--padding-left) - var(--spacing));
    @apply ml-7;

    &::after {
      position: absolute;
      content: counter(line);
      @apply top-0 -left-5 text-fd-muted-foreground/60;
    }
  }

  code .diff::before {
    position: absolute;
    left: var(--spacing);
  }

  code .diff.remove {
    opacity: 0.7;
    @apply bg-fd-diff-remove;
  }

  code .diff.remove::before {
    content: '-';
    @apply text-fd-diff-remove-symbol;
  }

  code .diff.add {
    @apply bg-fd-diff-add;
  }

  code .diff.add::before {
    content: '+';
    @apply text-fd-diff-add-symbol;
  }

  .highlighted {
    @apply bg-fd-primary/10;
  }

  .highlighted-word {
    padding: 1px;
    @apply border -my-px border-fd-primary/30 bg-fd-primary/10 rounded-md font-medium;
  }
}

.dark .shiki:not(.not-fumadocs-codeblock *) {
  code span {
    color: var(--shiki-dark);
  }
}



================================================
FILE: packages/ui/css/style.css
================================================
@import 'tailwindcss';
@import './neutral.css';
@import './preset.css';

@layer base {
  body {
    @apply flex flex-col min-h-screen;
  }
}



================================================
FILE: packages/ui/css/vitepress.css
================================================
@theme {
  --color-fd-muted: hsl(0, 0%, 96.1%);
  --color-fd-popover: hsl(0, 0%, 100%);
  --color-fd-popover-foreground: hsl(0, 0%, 15.1%);
  --color-fd-card-foreground: hsl(0, 0%, 3.9%);
  --color-fd-border: hsl(0, 0%, 89.8%);
  --color-fd-primary-foreground: hsl(0, 0%, 98%);
  --color-fd-secondary-foreground: hsl(0, 0%, 9%);
  --color-fd-accent: hsl(0, 0%, 94.1%);
  --color-fd-ring: hsl(0, 0%, 63.9%);

  --color-fd-background: hsl(0, 0%, 100%);
  --color-fd-card: hsl(0, 0%, 100%);
  --color-fd-foreground: hsl(240, 6%, 25%);
  --color-fd-muted-foreground: hsl(240, 6%, 50%);
  --color-fd-secondary: hsl(240, 6%, 97%);
  --color-fd-accent-foreground: hsl(240, 6%, 25%);
  --color-fd-primary: hsl(226, 55%, 45%);
}

.dark {
  --color-fd-ring: hsl(234, 100%, 83%);
  --color-fd-primary: hsl(234, 100%, 83%);
  --color-fd-secondary-foreground: hsl(60, 100%, 98%);
  --color-fd-card-foreground: hsl(60, 100%, 98%);
  --color-fd-background: hsl(240, 7%, 11%);
  --color-fd-foreground: hsl(60, 100%, 98%);
  --color-fd-popover: hsl(240, 7%, 11%);
  --color-fd-popover-foreground: hsl(60, 100%, 98%);
  --color-fd-primary-foreground: hsl(240, 7%, 11%);
  --color-fd-card: hsl(240, 7%, 11%);
  --color-fd-muted: hsl(0, 0%, 13%);
  --color-fd-border: hsl(240, 4%, 19%);
  --color-fd-accent: hsl(0, 0%, 15%);
  --color-fd-secondary: hsl(240, 4%, 9%);
  --color-fd-accent-foreground: hsl(0, 0%, 100%);
  --color-fd-muted-foreground: hsl(240, 4%, 65%);
}

.prose {
  --tw-prose-body: color-mix(
    in oklab,
    var(--color-fd-foreground) 85%,
    transparent
  );
  --tw-prose-headings: color-mix(
    in oklab,
    var(--color-fd-foreground) 85%,
    transparent
  );
  --tw-prose-links: var(--color-fd-primary);
  --tw-prose-code: var(--color-fd-primary);
}

.prose :where(code):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  border: none;
  background-color: color-mix(
    in oklab,
    var(--color-fd-primary) 10%,
    transparent
  );
}

#nd-sidebar {
  background-color: hsl(240, 6%, 97%);
  border-color: transparent;
}

.dark #nd-sidebar {
  background-color: hsl(240, 4%, 9%);
}

button[data-search-full] {
  background-color: var(--color-fd-background);
}



================================================
FILE: packages/ui/src/i18n.tsx
================================================
'use client';
import { usePathname, useRouter } from 'next/navigation';
import { useEffectEvent } from 'fumadocs-core/utils/use-effect-event';
import { useMemo } from 'react';
import { defaultTranslations, I18nContext } from '@/contexts/i18n';
import type { I18nProviderProps } from './provider/base';

export type { I18nProviderProps };
export { defaultTranslations, type Translations } from './contexts/i18n';

// TODO: remove next major
/**
 * @deprecated legacy I18n Provider, use `<RootProvider i18n={...} />` instead
 */
export function I18nProvider({
  locales = [],
  locale,
  onChange: _onChange,
  onLocaleChange = _onChange,
  ...props
}: I18nProviderProps & {
  /**
   * @deprecated use `onLocaleChange` instead
   */
  onChange?: I18nProviderProps['onLocaleChange'];
}) {
  const router = useRouter();
  const pathname = usePathname();
  const onChange = useEffectEvent((value: string) => {
    if (onLocaleChange) {
      return onLocaleChange(value);
    }
    const segments = pathname.split('/').filter((v) => v.length > 0);

    // If locale prefix hidden
    if (segments[0] !== locale) {
      segments.unshift(value);
    } else {
      segments[0] = value;
    }

    router.push(`/${segments.join('/')}`);
    router.refresh();
  });

  return (
    <I18nContext.Provider
      value={useMemo(
        () => ({
          locale,
          locales,
          text: {
            ...defaultTranslations,
            ...props.translations,
          },
          onChange,
        }),
        [locale, locales, onChange, props.translations],
      )}
    >
      {props.children}
    </I18nContext.Provider>
  );
}



================================================
FILE: packages/ui/src/icons.tsx
================================================
/**
 * @license lucide-react - ISC
 *
 * All copyright belongs to https://github.com/lucide-icons/lucide, we bundle it as part of library to avoid upstream issues.
 */
import { type ComponentProps, createElement, forwardRef } from 'react';
import { cn } from '@/utils/cn';

const defaultAttributes: LucideProps = {
  xmlns: 'http://www.w3.org/2000/svg',
  width: 24,
  height: 24,
  viewBox: '0 0 24 24',
  fill: 'none',
  stroke: 'currentColor',
  strokeWidth: 2,
  strokeLinecap: 'round',
  strokeLinejoin: 'round',
};

type SVGElementType =
  | 'circle'
  | 'ellipse'
  | 'g'
  | 'line'
  | 'path'
  | 'polygon'
  | 'polyline'
  | 'rect';

export interface LucideProps extends ComponentProps<'svg'> {
  size?: string | number;
}

export type IconNode = [
  elementName: SVGElementType,
  attrs: Record<string, string>,
][];

const createLucideIcon = (iconName: string, iconNode: IconNode) => {
  const Component = forwardRef<SVGSVGElement, LucideProps>(
    (
      { className, size = 24, color = 'currentColor', children, ...props },
      ref,
    ) => {
      return (
        <svg
          ref={ref}
          {...defaultAttributes}
          width={size}
          height={size}
          stroke={color}
          className={cn('lucide', className)}
          {...props}
        >
          {iconNode.map(([tag, attr]) => createElement(tag, attr))}
          {children}
        </svg>
      );
    },
  );

  Component.displayName = iconName;
  return Component;
};

export const ChevronDown = createLucideIcon('chevron-down', [
  ['path', { d: 'm6 9 6 6 6-6', key: 'qrunsl' }],
]);

export const Languages = createLucideIcon('languages', [
  ['path', { d: 'm5 8 6 6', key: '1wu5hv' }],
  ['path', { d: 'm4 14 6-6 2-3', key: '1k1g8d' }],
  ['path', { d: 'M2 5h12', key: 'or177f' }],
  ['path', { d: 'M7 2h1', key: '1t2jsx' }],
  ['path', { d: 'm22 22-5-10-5 10', key: 'don7ne' }],
  ['path', { d: 'M14 18h6', key: '1m8k6r' }],
]);

export const Sidebar = createLucideIcon('panel-left', [
  [
    'rect',
    { width: '18', height: '18', x: '3', y: '3', rx: '2', key: 'afitv7' },
  ],
  ['path', { d: 'M9 3v18', key: 'fh3hqa' }],
]);

export const ChevronsUpDown = createLucideIcon('chevrons-up-down', [
  ['path', { d: 'm7 15 5 5 5-5', key: '1hf1tw' }],
  ['path', { d: 'm7 9 5-5 5 5', key: 'sgt6xg' }],
]);

export const Search = createLucideIcon('search', [
  ['circle', { cx: '11', cy: '11', r: '8', key: '4ej97u' }],
  ['path', { d: 'm21 21-4.3-4.3', key: '1qie3q' }],
]);

export const ExternalLink = createLucideIcon('external-link', [
  ['path', { d: 'M15 3h6v6', key: '1q9fwt' }],
  ['path', { d: 'M10 14 21 3', key: 'gplh6r' }],
  [
    'path',
    {
      d: 'M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6',
      key: 'a6xqqp',
    },
  ],
]);

export const Moon = createLucideIcon('moon', [
  ['path', { d: 'M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z', key: 'a7tn18' }],
]);

export const Sun = createLucideIcon('sun', [
  ['circle', { cx: '12', cy: '12', r: '4', key: '4exip2' }],
  ['path', { d: 'M12 2v2', key: 'tus03m' }],
  ['path', { d: 'M12 20v2', key: '1lh1kg' }],
  ['path', { d: 'm4.93 4.93 1.41 1.41', key: '149t6j' }],
  ['path', { d: 'm17.66 17.66 1.41 1.41', key: 'ptbguv' }],
  ['path', { d: 'M2 12h2', key: '1t8f8n' }],
  ['path', { d: 'M20 12h2', key: '1q8mjw' }],
  ['path', { d: 'm6.34 17.66-1.41 1.41', key: '1m8zz5' }],
  ['path', { d: 'm19.07 4.93-1.41 1.41', key: '1shlcs' }],
]);

export const Airplay = createLucideIcon('airplay', [
  [
    'path',
    {
      d: 'M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1',
      key: 'ns4c3b',
    },
  ],
  ['path', { d: 'm12 15 5 6H7Z', key: '14qnn2' }],
]);

export const Menu = createLucideIcon('menu', [
  ['line', { x1: '4', x2: '20', y1: '12', y2: '12', key: '1e0a9i' }],
  ['line', { x1: '4', x2: '20', y1: '6', y2: '6', key: '1owob3' }],
  ['line', { x1: '4', x2: '20', y1: '18', y2: '18', key: 'yk5zj1' }],
]);

export const X = createLucideIcon('x', [
  ['path', { d: 'M18 6 6 18', key: '1bl5f8' }],
  ['path', { d: 'm6 6 12 12', key: 'd8bk6v' }],
]);

export const LoaderCircle = createLucideIcon('loader-circle', [
  ['path', { d: 'M21 12a9 9 0 1 1-6.219-8.56', key: '13zald' }],
]);

export const CircleCheck = createLucideIcon('circle-check', [
  ['circle', { cx: '12', cy: '12', r: '10', key: '1mglay' }],
  ['path', { d: 'm9 12 2 2 4-4', key: 'dzmm74' }],
]);

export const CircleX = createLucideIcon('circle-x', [
  ['circle', { cx: '12', cy: '12', r: '10', key: '1mglay' }],
  ['path', { d: 'm15 9-6 6', key: '1uzhvr' }],
  ['path', { d: 'm9 9 6 6', key: 'z0biqf' }],
]);

export const Check = createLucideIcon('check', [
  ['path', { d: 'M20 6 9 17l-5-5', key: '1gmf2c' }],
]);

export const TriangleAlert = createLucideIcon('triangle-alert', [
  [
    'path',
    {
      d: 'm21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3',
      key: 'wmoenq',
    },
  ],
  ['path', { d: 'M12 9v4', key: 'juzpu7' }],
  ['path', { d: 'M12 17h.01', key: 'p32p05' }],
]);

export const Info = createLucideIcon('info', [
  ['circle', { cx: '12', cy: '12', r: '10', key: '1mglay' }],
  ['path', { d: 'M12 16v-4', key: '1dtifu' }],
  ['path', { d: 'M12 8h.01', key: 'e9boi3' }],
]);

export const Copy = createLucideIcon('copy', [
  [
    'rect',
    {
      width: '14',
      height: '14',
      x: '8',
      y: '8',
      rx: '2',
      ry: '2',
      key: '17jyea',
    },
  ],
  [
    'path',
    {
      d: 'M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2',
      key: 'zix9uf',
    },
  ],
]);

export const FileText = createLucideIcon('file-text', [
  [
    'path',
    {
      d: 'M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z',
      key: '1rqfz7',
    },
  ],
  ['path', { d: 'M14 2v4a2 2 0 0 0 2 2h4', key: 'tnqrlb' }],
  ['path', { d: 'M10 9H8', key: 'b1mrlr' }],
  ['path', { d: 'M16 13H8', key: 't4e002' }],
  ['path', { d: 'M16 17H8', key: 'z1uh3a' }],
]);

export const Hash = createLucideIcon('hash', [
  ['line', { x1: '4', x2: '20', y1: '9', y2: '9', key: '4lhtct' }],
  ['line', { x1: '4', x2: '20', y1: '15', y2: '15', key: 'vyu0kd' }],
  ['line', { x1: '10', x2: '8', y1: '3', y2: '21', key: '1ggp8o' }],
  ['line', { x1: '16', x2: '14', y1: '3', y2: '21', key: 'weycgp' }],
]);

export const Text = createLucideIcon('text', [
  ['path', { d: 'M15 18H3', key: 'olowqp' }],
  ['path', { d: 'M17 6H3', key: '16j9eg' }],
  ['path', { d: 'M21 12H3', key: '2avoz0' }],
]);

export const File = createLucideIcon('file', [
  [
    'path',
    {
      d: 'M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z',
      key: '1rqfz7',
    },
  ],
  ['path', { d: 'M14 2v4a2 2 0 0 0 2 2h4', key: 'tnqrlb' }],
]);

export const Folder = createLucideIcon('folder', [
  [
    'path',
    {
      d: 'M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z',
      key: '1kt360',
    },
  ],
]);

export const FolderOpen = createLucideIcon('folder-open', [
  [
    'path',
    {
      d: 'm6 14 1.5-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.54 6a2 2 0 0 1-1.95 1.5H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H18a2 2 0 0 1 2 2v2',
      key: 'usdka0',
    },
  ],
]);

export const Star = createLucideIcon('star', [
  [
    'path',
    {
      d: 'M11.525 2.295a.53.53 0 0 1 .95 0l2.31 4.679a2.123 2.123 0 0 0 1.595 1.16l5.166.756a.53.53 0 0 1 .294.904l-3.736 3.638a2.123 2.123 0 0 0-.611 1.878l.882 5.14a.53.53 0 0 1-.771.56l-4.618-2.428a2.122 2.122 0 0 0-1.973 0L6.396 21.01a.53.53 0 0 1-.77-.56l.881-5.139a2.122 2.122 0 0 0-.611-1.879L2.16 9.795a.53.53 0 0 1 .294-.906l5.165-.755a2.122 2.122 0 0 0 1.597-1.16z',
      key: 'r04s7s',
    },
  ],
]);

export const Link = createLucideIcon('link', [
  [
    'path',
    {
      d: 'M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71',
      key: '1cjeqo',
    },
  ],
  [
    'path',
    {
      d: 'M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71',
      key: '19qd67',
    },
  ],
]);

export const Edit = createLucideIcon('square-pen', [
  [
    'path',
    {
      d: 'M12 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7',
      key: '1m0v6g',
    },
  ],
  [
    'path',
    {
      d: 'M18.375 2.625a1 1 0 0 1 3 3l-9.013 9.014a2 2 0 0 1-.853.505l-2.873.84a.5.5 0 0 1-.62-.62l.84-2.873a2 2 0 0 1 .506-.852z',
      key: 'ohrbg2',
    },
  ],
]);

export const ChevronRight = createLucideIcon('chevron-right', [
  ['path', { d: 'm9 18 6-6-6-6', key: 'mthhwq' }],
]);

export const ChevronLeft = createLucideIcon('chevron-left', [
  ['path', { d: 'm15 18-6-6 6-6', key: '1wnfg3' }],
]);

export const Plus = createLucideIcon('plus', [
  ['path', { d: 'M5 12h14', key: '1ays0h' }],
  ['path', { d: 'M12 5v14', key: 's699le' }],
]);

export const Trash2 = createLucideIcon('trash-2', [
  ['path', { d: 'M3 6h18', key: 'd0wm0j' }],
  ['path', { d: 'M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6', key: '4alrt4' }],
  ['path', { d: 'M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2', key: 'v07s0e' }],
  ['line', { x1: '10', x2: '10', y1: '11', y2: '17', key: '1uufr5' }],
  ['line', { x1: '14', x2: '14', y1: '11', y2: '17', key: 'xtxkd' }],
]);

export const ChevronUp = createLucideIcon('chevron-up', [
  ['path', { d: 'm18 15-6-6-6 6', key: '153udz' }],
]);



================================================
FILE: packages/ui/src/mdx.server.tsx
================================================
import type { LoaderConfig, LoaderOutput, Page } from 'fumadocs-core/source';
import type { ComponentProps, FC } from 'react';
import defaultMdxComponents from '@/mdx';
import * as path from 'node:path';

/**
 * Extend the default Link component to resolve relative file paths in `href`.
 *
 * @param page the current page
 * @param source the source object
 * @param OverrideLink The component to override from
 */
export function createRelativeLink(
  source: LoaderOutput<LoaderConfig>,
  page: Page,
  OverrideLink: FC<ComponentProps<'a'>> = defaultMdxComponents.a,
): FC<ComponentProps<'a'>> {
  return async function RelativeLink({ href, ...props }) {
    // resolve relative href
    if (href && href.startsWith('.')) {
      const target = source.getPageByHref(href, {
        dir: path.dirname(page.path),
        language: page.locale,
      });

      if (target) {
        href = target.hash
          ? `${target.page.url}#${target.hash}`
          : target.page.url;
      }
    }

    return <OverrideLink href={href} {...props} />;
  };
}

export { defaultMdxComponents as default };



================================================
FILE: packages/ui/src/mdx.tsx
================================================
import Link from 'fumadocs-core/link';
import type {
  AnchorHTMLAttributes,
  FC,
  HTMLAttributes,
  ImgHTMLAttributes,
  TableHTMLAttributes,
} from 'react';
import { Image as FrameworkImage } from 'fumadocs-core/framework';
import { Card, Cards } from '@/components/card';
import { Callout } from '@/components/callout';
import { Heading } from '@/components/heading';
import { cn } from '@/utils/cn';
import {
  CodeBlock,
  CodeBlockTab,
  CodeBlockTabs,
  CodeBlockTabsList,
  CodeBlockTabsTrigger,
  Pre,
} from '@/components/codeblock';

function Image(
  props: ImgHTMLAttributes<HTMLImageElement> & {
    sizes?: string;
  },
) {
  return (
    <FrameworkImage
      sizes="(max-width: 768px) 100vw, (max-width: 1200px) 70vw, 900px"
      {...props}
      src={props.src as unknown as string}
      className={cn('rounded-lg', props.className)}
    />
  );
}

function Table(props: TableHTMLAttributes<HTMLTableElement>) {
  return (
    <div className="relative overflow-auto prose-no-margin my-6">
      <table {...props} />
    </div>
  );
}

const defaultMdxComponents = {
  CodeBlockTab,
  CodeBlockTabs,
  CodeBlockTabsList,
  CodeBlockTabsTrigger,
  pre: (props: HTMLAttributes<HTMLPreElement>) => (
    <CodeBlock {...props}>
      <Pre>{props.children}</Pre>
    </CodeBlock>
  ),
  Card,
  Cards,
  a: Link as FC<AnchorHTMLAttributes<HTMLAnchorElement>>,
  img: Image,
  h1: (props: HTMLAttributes<HTMLHeadingElement>) => (
    <Heading as="h1" {...props} />
  ),
  h2: (props: HTMLAttributes<HTMLHeadingElement>) => (
    <Heading as="h2" {...props} />
  ),
  h3: (props: HTMLAttributes<HTMLHeadingElement>) => (
    <Heading as="h3" {...props} />
  ),
  h4: (props: HTMLAttributes<HTMLHeadingElement>) => (
    <Heading as="h4" {...props} />
  ),
  h5: (props: HTMLAttributes<HTMLHeadingElement>) => (
    <Heading as="h5" {...props} />
  ),
  h6: (props: HTMLAttributes<HTMLHeadingElement>) => (
    <Heading as="h6" {...props} />
  ),
  table: Table,
  Callout,
};

export const createRelativeLink: typeof import('./mdx.server').createRelativeLink =
  () => {
    throw new Error(
      '`createRelativeLink` is only supported in Node.js environment',
    );
  };

export { defaultMdxComponents as default };



================================================
FILE: packages/ui/src/og.tsx
================================================
import { ImageResponse } from 'next/og';
import type { ReactElement, ReactNode } from 'react';
import type { ImageResponseOptions } from 'next/dist/compiled/@vercel/og/types';

interface GenerateProps {
  title: ReactNode;
  description?: ReactNode;
  icon?: ReactNode;
  primaryColor?: string;
  primaryTextColor?: string;
  site?: ReactNode;
}

export function generateOGImage(
  options: GenerateProps & ImageResponseOptions,
): ImageResponse {
  const {
    title,
    description,
    icon,
    site,
    primaryColor,
    primaryTextColor,
    ...rest
  } = options;

  return new ImageResponse(
    generate({
      title,
      description,
      icon,
      site,
      primaryTextColor,
      primaryColor,
    }),
    {
      width: 1200,
      height: 630,
      ...rest,
    },
  );
}

export function generate({
  primaryColor = 'rgba(255,150,255,0.3)',
  primaryTextColor = 'rgb(255,150,255)',
  ...props
}: GenerateProps): ReactElement {
  return (
    <div
      style={{
        display: 'flex',
        flexDirection: 'column',
        width: '100%',
        height: '100%',
        color: 'white',
        padding: '4rem',
        backgroundColor: '#0c0c0c',
        backgroundImage: `linear-gradient(to top right, ${primaryColor}, transparent)`,
      }}
    >
      <div
        style={{
          display: 'flex',
          flexDirection: 'row',
          alignItems: 'center',
          gap: '16px',
          marginBottom: '12px',
          color: primaryTextColor,
        }}
      >
        {props.icon}
        <p
          style={{
            fontSize: '56px',
            fontWeight: 600,
          }}
        >
          {props.site}
        </p>
      </div>

      <p
        style={{
          fontWeight: 800,
          fontSize: '82px',
        }}
      >
        {props.title}
      </p>
      <p
        style={{
          fontSize: '52px',
          color: 'rgba(240,240,240,0.8)',
        }}
      >
        {props.description}
      </p>
    </div>
  );
}



================================================
FILE: packages/ui/src/page.server.tsx
================================================
import type { HTMLAttributes } from 'react';
import type { LoaderConfig, LoaderOutput, Page } from 'fumadocs-core/source';
import { getPageTreePeers, type PageTree } from 'fumadocs-core/server';
import { Card, Cards } from '@/components/card';
import * as path from 'node:path';

/**
 * @deprecated use https://fumadocs.vercel.app/docs/ui/markdown#further-reading-section instead
 */
export function DocsCategory({
  page,
  from,
  tree: forcedTree,
  ...props
}: HTMLAttributes<HTMLDivElement> & {
  page: Page;
  from: LoaderOutput<LoaderConfig>;
  tree?: PageTree.Root;
}) {
  let tree;

  if (forcedTree) {
    tree = forcedTree;
  } else if (from._i18n) {
    const locale = page.locale ?? from._i18n.defaultLanguage;

    tree = (from as LoaderOutput<LoaderConfig & { i18n: true }>).pageTree[
      locale
    ];
  } else {
    tree = from.pageTree;
  }

  let items = getPageTreePeers(tree, page.url);
  if (items.length === 0) {
    const pages = from.getPages(page.locale);

    items = pages
      .filter(
        (item) =>
          path.dirname(item.path) === path.dirname(page.path) &&
          item.path !== page.path,
      )
      .map((page) => ({
        type: 'page',
        name: page.data.title,
        description: page.data.description,
        url: page.url,
      }));
  }

  if (items.length === 0) return null;

  return (
    <Cards {...props}>
      {items.map((item) => (
        <Card
          key={item.url}
          title={item.name}
          description={item.description}
          href={item.url}
        />
      ))}
    </Cards>
  );
}

export * from './page';



================================================
FILE: packages/ui/src/page.tsx
================================================
import { type ComponentProps, forwardRef, type ReactNode } from 'react';
import { cn } from '@/utils/cn';
import { buttonVariants } from '@/components/ui/button';
import { Edit } from '@/icons';
import { I18nLabel } from '@/contexts/i18n';
import {
  type BreadcrumbProps,
  type FooterProps,
  PageArticle,
  PageBreadcrumb,
  PageFooter,
  PageLastUpdate,
  PageRoot,
  PageTOC,
  PageTOCItems,
  PageTOCPopover,
  PageTOCPopoverContent,
  PageTOCPopoverItems,
  PageTOCPopoverTrigger,
  PageTOCTitle,
} from '@/layouts/docs/page';
import type { AnchorProviderProps } from 'fumadocs-core/toc';
import type { TOCItemType } from 'fumadocs-core/server';

interface EditOnGitHubOptions
  extends Omit<ComponentProps<'a'>, 'href' | 'children'> {
  owner: string;
  repo: string;

  /**
   * SHA or ref (branch or tag) name.
   *
   * @defaultValue main
   */
  sha?: string;

  /**
   * File path in the repo
   */
  path: string;
}

interface BreadcrumbOptions extends BreadcrumbProps {
  enabled: boolean;
  component: ReactNode;

  /**
   * Show the full path to the current page
   *
   * @defaultValue false
   * @deprecated use `includePage` instead
   */
  full?: boolean;
}

interface FooterOptions extends FooterProps {
  enabled: boolean;
  component: ReactNode;
}

export interface DocsPageProps {
  toc?: TOCItemType[];
  tableOfContent?: Partial<TableOfContentOptions>;
  tableOfContentPopover?: Partial<TableOfContentPopoverOptions>;

  /**
   * Extend the page to fill all available space
   *
   * @defaultValue false
   */
  full?: boolean;

  /**
   * Replace or disable breadcrumb
   */
  breadcrumb?: Partial<BreadcrumbOptions>;

  /**
   * Footer navigation, you can disable it by passing `false`
   */
  footer?: Partial<FooterOptions>;

  editOnGithub?: EditOnGitHubOptions;
  lastUpdate?: Date | string | number;

  container?: ComponentProps<'div'>;
  article?: ComponentProps<'article'>;
  children?: ReactNode;
}

type TableOfContentOptions = Pick<AnchorProviderProps, 'single'> & {
  /**
   * Custom content in TOC container, before the main TOC
   */
  header?: ReactNode;

  /**
   * Custom content in TOC container, after the main TOC
   */
  footer?: ReactNode;

  enabled: boolean;
  component: ReactNode;

  /**
   * @defaultValue 'normal'
   */
  style?: 'normal' | 'clerk';
};

type TableOfContentPopoverOptions = Omit<TableOfContentOptions, 'single'>;

export function DocsPage({
  editOnGithub,
  breadcrumb: {
    enabled: breadcrumbEnabled = true,
    component: breadcrumb,
    ...breadcrumbProps
  } = {},
  footer = {},
  lastUpdate,
  container,
  full = false,
  tableOfContentPopover: {
    enabled: tocPopoverEnabled,
    component: tocPopover,
    ...tocPopoverOptions
  } = {},
  tableOfContent: {
    enabled: tocEnabled,
    component: tocReplace,
    ...tocOptions
  } = {},
  toc = [],
  article,
  children,
}: DocsPageProps) {
  const isTocRequired =
    toc.length > 0 ||
    tocOptions.footer !== undefined ||
    tocOptions.header !== undefined;

  // disable TOC on full mode, you can still enable it with `enabled` option.
  tocEnabled ??= !full && isTocRequired;

  tocPopoverEnabled ??=
    toc.length > 0 ||
    tocPopoverOptions.header !== undefined ||
    tocPopoverOptions.footer !== undefined;

  return (
    <PageRoot
      toc={{
        toc,
        single: tocOptions.single,
      }}
      {...container}
    >
      {tocPopoverEnabled &&
        (tocPopover ?? (
          <PageTOCPopover>
            <PageTOCPopoverTrigger />
            <PageTOCPopoverContent>
              {tocPopoverOptions.header}
              <PageTOCPopoverItems variant={tocPopoverOptions.style} />
              {tocPopoverOptions.footer}
            </PageTOCPopoverContent>
          </PageTOCPopover>
        ))}
      <PageArticle {...article}>
        {breadcrumbEnabled &&
          (breadcrumb ?? <PageBreadcrumb {...breadcrumbProps} />)}
        {children}
        <div role="none" className="flex-1" />
        <div className="flex flex-row flex-wrap items-center justify-between gap-4 empty:hidden">
          {editOnGithub && (
            <EditOnGitHub
              href={`https://github.com/${editOnGithub.owner}/${editOnGithub.repo}/blob/${editOnGithub.sha}/${editOnGithub.path.startsWith('/') ? editOnGithub.path.slice(1) : editOnGithub.path}`}
            />
          )}
          {lastUpdate && <PageLastUpdate date={new Date(lastUpdate)} />}
        </div>
        {footer.enabled !== false &&
          (footer.component ?? <PageFooter items={footer.items} />)}
      </PageArticle>
      {tocEnabled &&
        (tocReplace ?? (
          <PageTOC>
            {tocOptions.header}
            <PageTOCTitle />
            <PageTOCItems variant={tocOptions.style} />
            {tocOptions.footer}
          </PageTOC>
        ))}
    </PageRoot>
  );
}

export function EditOnGitHub(props: ComponentProps<'a'>) {
  return (
    <a
      target="_blank"
      rel="noreferrer noopener"
      {...props}
      className={cn(
        buttonVariants({
          color: 'secondary',
          size: 'sm',
          className: 'gap-1.5 not-prose',
        }),
        props.className,
      )}
    >
      {props.children ?? (
        <>
          <Edit className="size-3.5" />
          <I18nLabel label="editOnGithub" />
        </>
      )}
    </a>
  );
}

/**
 * Add typography styles
 */
export const DocsBody = forwardRef<HTMLDivElement, ComponentProps<'div'>>(
  (props, ref) => (
    <div ref={ref} {...props} className={cn('prose', props.className)}>
      {props.children}
    </div>
  ),
);

DocsBody.displayName = 'DocsBody';

export const DocsDescription = forwardRef<
  HTMLParagraphElement,
  ComponentProps<'p'>
>((props, ref) => {
  // don't render if no description provided
  if (props.children === undefined) return null;

  return (
    <p
      ref={ref}
      {...props}
      className={cn('mb-8 text-lg text-fd-muted-foreground', props.className)}
    >
      {props.children}
    </p>
  );
});

DocsDescription.displayName = 'DocsDescription';

export const DocsTitle = forwardRef<HTMLHeadingElement, ComponentProps<'h1'>>(
  (props, ref) => {
    return (
      <h1
        ref={ref}
        {...props}
        className={cn('text-3xl font-semibold', props.className)}
      >
        {props.children}
      </h1>
    );
  },
);

DocsTitle.displayName = 'DocsTitle';

/**
 * For separate MDX page
 */
export function withArticle(props: ComponentProps<'main'>): ReactNode {
  return (
    <main {...props} className={cn('container py-12', props.className)}>
      <article className="prose">{props.children}</article>
    </main>
  );
}



================================================
FILE: packages/ui/src/_registry/index.ts
================================================
import { fileURLToPath } from 'node:url';
import type { Registry } from '@fumadocs/cli/build';
import * as path from 'node:path';

const srcDir = path.join(path.dirname(fileURLToPath(import.meta.url)), '../');

export const registry: Registry = {
  dir: srcDir,
  rootDir: '../',
  namespaces: {
    components: 'components',
    utils: 'lib',
    '': 'components',
  },
  mapImportPath: {
    'contexts/sidebar.tsx': 'fumadocs-ui/contexts/sidebar',
    'contexts/search.tsx': 'fumadocs-ui/contexts/search',
    'contexts/tree.tsx': 'fumadocs-ui/contexts/tree',
    'contexts/i18n.tsx': 'fumadocs-ui/contexts/i18n',
    'contexts/layout.tsx': 'fumadocs-ui/contexts/layout',
    'provider/index.tsx': 'fumadocs-ui/provider',
    'utils/get-sidebar-tabs.tsx': 'fumadocs-ui/utils/get-sidebar-tabs',
    'utils/use-copy-button.ts': 'fumadocs-ui/utils/use-copy-button',
    'icons.tsx': {
      type: 'dependency',
      name: 'lucide-react',
    },
  },
  components: [
    {
      name: 'layouts/docs-min',
      description: 'Replace Docs Layout (Minimal)',
      files: [
        {
          in: '_registry/layout/docs-min.tsx',
          out: 'components:layouts/docs.tsx',
        },
        {
          in: '_registry/layout/page-min.tsx',
          out: 'components:layouts/page.tsx',
        },
      ],
      unlisted: true,
    },
    {
      name: 'layouts/docs',
      files: ['layouts/docs.tsx'],
      unlisted: true,
    },
    {
      name: 'layouts/notebook',
      files: [
        {
          in: 'layouts/notebook.tsx',
          out: 'components:layouts/docs.tsx',
        },
      ],
      unlisted: true,
    },
    {
      name: 'layouts/page',
      files: [
        {
          in: 'page.tsx',
          out: 'components:layouts/page.tsx',
        },
      ],
      unlisted: true,
    },
    {
      name: 'layouts/home',
      files: ['layouts/home.tsx'],
      unlisted: true,
    },
    {
      name: 'layout/root-toggle',
      description: 'the UI of Sidebar Tabs',
      files: ['components/layout/root-toggle.tsx'],
    },
    {
      name: 'layout/language-toggle',
      description: 'Language Select',
      files: ['components/layout/language-toggle.tsx'],
    },
    {
      name: 'accordion',
      files: ['components/accordion.tsx'],
    },
    {
      name: 'github-info',
      files: ['components/github-info.tsx'],
      description: 'A card to display GitHub repo info',
    },
    {
      name: 'banner',
      files: ['components/banner.tsx'],
    },
    {
      name: 'callout',
      files: ['components/callout.tsx'],
    },
    { name: 'card', files: ['components/card.tsx'] },
    {
      name: 'codeblock',
      files: ['components/codeblock.tsx'],
    },
    { name: 'files', files: ['components/files.tsx'] },
    { name: 'heading', files: ['components/heading.tsx'] },
    {
      name: 'image-zoom',
      description: 'Zoomable Image',
      files: ['components/image-zoom.tsx', 'components/image-zoom.css'],
    },
    { name: 'inline-toc', files: ['components/inline-toc.tsx'] },
    { name: 'steps', files: ['components/steps.tsx'] },
    { name: 'tabs', files: ['components/tabs.tsx'] },
    { name: 'type-table', files: ['components/type-table.tsx'] },
    {
      name: 'button',
      unlisted: true,
      files: ['components/ui/button.tsx'],
    },
  ],
  dependencies: {
    'fumadocs-core': {
      type: 'runtime',
    },
    'fumadocs-ui': {
      type: 'runtime',
    },
    next: {
      type: 'runtime',
    },
  },
};



================================================
FILE: packages/ui/src/_registry/layout/docs-min.tsx
================================================
'use client';
import type { PageTree } from 'fumadocs-core/server';
import { type ComponentProps, type ReactNode, useMemo } from 'react';
import { cn } from '@/utils/cn';
import { TreeContextProvider, useTreeContext } from 'fumadocs-ui/contexts/tree';
import Link from 'fumadocs-core/link';
import { useSearchContext } from 'fumadocs-ui/contexts/search';
import { useSidebar } from 'fumadocs-ui/contexts/sidebar';
import { cva } from 'class-variance-authority';
import { usePathname } from 'fumadocs-core/framework';

export interface DocsLayoutProps {
  tree: PageTree.Root;
  children: ReactNode;
}

export function DocsLayout({ tree, children }: DocsLayoutProps) {
  return (
    <TreeContextProvider tree={tree}>
      <header className="sticky top-0 bg-fd-background h-14 z-20">
        <nav className="flex flex-row items-center gap-2 size-full px-4">
          <Link href="/" className="font-medium mr-auto">
            My Docs
          </Link>

          <SearchToggle />
          <NavbarSidebarTrigger className="md:hidden" />
        </nav>
      </header>
      <main
        id="nd-docs-layout"
        className="flex flex-1 flex-row [--fd-nav-height:56px]"
      >
        <Sidebar />
        {children}
      </main>
    </TreeContextProvider>
  );
}

function SearchToggle(props: ComponentProps<'button'>) {
  const { enabled, setOpenSearch } = useSearchContext();
  if (!enabled) return;

  return (
    <button
      {...props}
      className={cn('text-sm', props.className)}
      onClick={() => setOpenSearch(true)}
    >
      Search
    </button>
  );
}

function NavbarSidebarTrigger(props: ComponentProps<'button'>) {
  const { open, setOpen } = useSidebar();

  return (
    <button
      {...props}
      className={cn('text-sm', props.className)}
      onClick={() => setOpen(!open)}
    >
      Sidebar
    </button>
  );
}

function Sidebar() {
  const { root } = useTreeContext();
  const { open } = useSidebar();

  const children = useMemo(() => {
    function renderItems(items: PageTree.Node[]) {
      return items.map((item) => (
        <SidebarItem key={item.$id} item={item}>
          {item.type === 'folder' ? renderItems(item.children) : null}
        </SidebarItem>
      ));
    }

    return renderItems(root.children);
  }, [root]);

  return (
    <aside
      className={cn(
        'fixed flex flex-col shrink-0 p-4 top-14 z-20 text-sm overflow-auto md:sticky md:h-[calc(100dvh-56px)] md:w-[300px]',
        'max-md:inset-x-0 max-md:bottom-0 max-md:bg-fd-background',
        !open && 'max-md:invisible',
      )}
    >
      {children}
    </aside>
  );
}

const linkVariants = cva(
  'flex items-center gap-2 w-full py-1.5 rounded-lg text-fd-foreground/80 [&_svg]:size-4',
  {
    variants: {
      active: {
        true: 'text-fd-primary font-medium',
        false: 'hover:text-fd-accent-foreground',
      },
    },
  },
);

function SidebarItem({
  item,
  children,
}: {
  item: PageTree.Node;
  children: ReactNode;
}) {
  const pathname = usePathname();

  if (item.type === 'page') {
    return (
      <Link
        href={item.url}
        className={linkVariants({
          active: pathname === item.url,
        })}
      >
        {item.icon}
        {item.name}
      </Link>
    );
  }

  if (item.type === 'separator') {
    return (
      <p className="text-fd-muted-foreground mt-6 mb-2 first:mt-0">
        {item.icon}
        {item.name}
      </p>
    );
  }

  return (
    <div>
      {item.index ? (
        <Link
          className={linkVariants({
            active: pathname === item.index.url,
          })}
          href={item.index.url}
        >
          {item.index.icon}
          {item.index.name}
        </Link>
      ) : (
        <p className={cn(linkVariants(), 'text-start')}>
          {item.icon}
          {item.name}
        </p>
      )}
      <div className="pl-4 border-l flex flex-col">{children}</div>
    </div>
  );
}



================================================
FILE: packages/ui/src/_registry/layout/page-min.tsx
================================================
'use client';
import {
  type PageTree,
  type TableOfContents,
  type TOCItemType,
} from 'fumadocs-core/server';
import { type ComponentProps, type ReactNode, useMemo } from 'react';
import { AnchorProvider, useActiveAnchors } from 'fumadocs-core/toc';
import { cn } from '@/utils/cn';
import { useTreeContext } from 'fumadocs-ui/contexts/tree';
import { Link, usePathname } from 'fumadocs-core/framework';

export interface DocsPageProps {
  toc?: TableOfContents;

  children: ReactNode;
}

export function DocsPage({ toc = [], ...props }: DocsPageProps) {
  return (
    <AnchorProvider toc={toc}>
      <main className="flex w-full min-w-0 flex-col">
        <article className="flex flex-1 flex-col w-full max-w-[860px] gap-6 px-4 py-8 md:px-6 md:mx-auto">
          {props.children}
          <Footer />
        </article>
      </main>
      {toc.length > 0 && (
        <div className="sticky top-(--fd-nav-height) w-[286px] shrink-0 h-[calc(100dvh-var(--fd-nav-height))] p-4 overflow-auto max-xl:hidden">
          <p className="text-sm text-fd-muted-foreground mb-2">On this page</p>
          <div className="flex flex-col">
            {toc.map((item) => (
              <TocItem key={item.url} item={item} />
            ))}
          </div>
        </div>
      )}
    </AnchorProvider>
  );
}

export function DocsBody(props: ComponentProps<'div'>) {
  return (
    <div {...props} className={cn('prose', props.className)}>
      {props.children}
    </div>
  );
}

export function DocsDescription(props: ComponentProps<'p'>) {
  // don't render if no description provided
  if (props.children === undefined) return null;

  return (
    <p
      {...props}
      className={cn('mb-8 text-lg text-fd-muted-foreground', props.className)}
    >
      {props.children}
    </p>
  );
}

export function DocsTitle(props: ComponentProps<'h1'>) {
  return (
    <h1 {...props} className={cn('text-3xl font-semibold', props.className)}>
      {props.children}
    </h1>
  );
}

function TocItem({ item }: { item: TOCItemType }) {
  const isActive = useActiveAnchors().includes(item.url.slice(1));

  return (
    <a
      href={item.url}
      className={cn(
        'text-sm text-fd-foreground/80 py-1',
        isActive && 'text-fd-primary',
      )}
      style={{
        paddingLeft: Math.max(0, item.depth - 2) * 16,
      }}
    >
      {item.title}
    </a>
  );
}

function Footer() {
  const { root } = useTreeContext();
  const pathname = usePathname();
  const flatten = useMemo(() => {
    const result: PageTree.Item[] = [];

    function scan(items: PageTree.Node[]) {
      for (const item of items) {
        if (item.type === 'page') result.push(item);
        else if (item.type === 'folder') {
          if (item.index) result.push(item.index);
          scan(item.children);
        }
      }
    }

    scan(root.children);
    return result;
  }, [root]);

  const { previous, next } = useMemo(() => {
    const idx = flatten.findIndex((item) => item.url === pathname);

    if (idx === -1) return {};
    return {
      previous: flatten[idx - 1],
      next: flatten[idx + 1],
    };
  }, [flatten, pathname]);

  return (
    <div className="flex flex-row justify-between gap-2 items-center font-medium">
      {previous ? <Link href={previous.url}>{previous.name}</Link> : null}
      {next ? <Link href={next.url}>{next.name}</Link> : null}
    </div>
  );
}



================================================
FILE: packages/ui/src/components/accordion.tsx
================================================
'use client';

import type {
  AccordionMultipleProps,
  AccordionSingleProps,
} from '@radix-ui/react-accordion';
import * as AccordionPrimitive from '@radix-ui/react-accordion';
import { Check, ChevronRight, Link as LinkIcon } from 'lucide-react';
import {
  type ComponentPropsWithoutRef,
  forwardRef,
  type ReactNode,
  useEffect,
  useRef,
  useState,
} from 'react';
import { cn } from '@/utils/cn';
import { useCopyButton } from '@/utils/use-copy-button';
import { buttonVariants } from '@/components/ui/button';
import { mergeRefs } from '@/utils/merge-refs';

export const Accordions = forwardRef<
  HTMLDivElement,
  | Omit<AccordionSingleProps, 'value' | 'onValueChange'>
  | Omit<AccordionMultipleProps, 'value' | 'onValueChange'>
>(({ type = 'single', className, defaultValue, ...props }, ref) => {
  const rootRef = useRef<HTMLDivElement>(null);
  const composedRef = mergeRefs(ref, rootRef);
  const [value, setValue] = useState<string | string[]>(() =>
    type === 'single' ? (defaultValue ?? '') : (defaultValue ?? []),
  );

  useEffect(() => {
    const id = window.location.hash.substring(1);
    const element = rootRef.current;
    if (!element || id.length === 0) return;

    const selected = document.getElementById(id);
    if (!selected || !element.contains(selected)) return;
    const value = selected.getAttribute('data-accordion-value');

    if (value)
      setValue((prev) => (typeof prev === 'string' ? value : [value, ...prev]));
  }, []);

  return (
    // @ts-expect-error -- Multiple types
    <AccordionPrimitive.Root
      type={type}
      ref={composedRef}
      value={value}
      onValueChange={setValue}
      collapsible={type === 'single' ? true : undefined}
      className={cn(
        'divide-y divide-fd-border overflow-hidden rounded-lg border bg-fd-card',
        className,
      )}
      {...props}
    />
  );
});

Accordions.displayName = 'Accordions';

export const Accordion = forwardRef<
  HTMLDivElement,
  Omit<
    ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>,
    'value' | 'title'
  > & {
    title: string | ReactNode;
    value?: string;
  }
>(
  (
    { title, className, id, value = String(title), children, ...props },
    ref,
  ) => {
    return (
      <AccordionPrimitive.Item
        ref={ref}
        value={value}
        className={cn('scroll-m-24', className)}
        {...props}
      >
        <AccordionPrimitive.Header
          id={id}
          data-accordion-value={value}
          className="not-prose flex flex-row items-center text-fd-card-foreground font-medium has-focus-visible:bg-fd-accent"
        >
          <AccordionPrimitive.Trigger className="group flex flex-1 items-center gap-2 px-3 py-2.5 text-start focus-visible:outline-none">
            <ChevronRight className="size-4 shrink-0 text-fd-muted-foreground transition-transform duration-200 group-data-[state=open]:rotate-90" />
            {title}
          </AccordionPrimitive.Trigger>
          {id ? <CopyButton id={id} /> : null}
        </AccordionPrimitive.Header>
        <AccordionPrimitive.Content className="overflow-hidden data-[state=closed]:animate-fd-accordion-up data-[state=open]:animate-fd-accordion-down">
          <div className="px-4 pb-2 text-[15px] prose-no-margin">
            {children}
          </div>
        </AccordionPrimitive.Content>
      </AccordionPrimitive.Item>
    );
  },
);

function CopyButton({ id }: { id: string }) {
  const [checked, onClick] = useCopyButton(() => {
    const url = new URL(window.location.href);
    url.hash = id;

    return navigator.clipboard.writeText(url.toString());
  });

  return (
    <button
      type="button"
      aria-label="Copy Link"
      className={cn(
        buttonVariants({
          color: 'ghost',
          className: 'text-fd-muted-foreground me-2',
        }),
      )}
      onClick={onClick}
    >
      {checked ? (
        <Check className="size-3.5" />
      ) : (
        <LinkIcon className="size-3.5" />
      )}
    </button>
  );
}

Accordion.displayName = 'Accordion';



================================================
FILE: packages/ui/src/components/banner.tsx
================================================
'use client';

import { type HTMLAttributes, useEffect, useState } from 'react';
import { X } from 'lucide-react';
import { cn } from '@/utils/cn';
import { buttonVariants } from '@/components/ui/button';

type BannerVariant = 'rainbow' | 'normal';

export function Banner({
  id,
  variant = 'normal',
  changeLayout = true,
  height = '3rem',
  rainbowColors = [
    'rgba(0,149,255,0.56)',
    'rgba(231,77,255,0.77)',
    'rgba(255,0,0,0.73)',
    'rgba(131,255,166,0.66)',
  ],
  ...props
}: HTMLAttributes<HTMLDivElement> & {
  /**
   * @defaultValue 3rem
   */
  height?: string;

  /**
   * @defaultValue 'normal'
   */
  variant?: BannerVariant;

  /**
   * For rainbow variant only, customise the colors
   */
  rainbowColors?: string[];

  /**
   * Change Fumadocs layout styles
   *
   * @defaultValue true
   */
  changeLayout?: boolean;
}) {
  const [open, setOpen] = useState(true);
  const globalKey = id ? `nd-banner-${id}` : null;

  useEffect(() => {
    if (globalKey) setOpen(localStorage.getItem(globalKey) !== 'true');
  }, [globalKey]);

  if (!open) return null;

  return (
    <div
      id={id}
      {...props}
      className={cn(
        'sticky top-0 z-40 flex flex-row items-center justify-center px-4 text-center text-sm font-medium',
        variant === 'normal' && 'bg-fd-secondary',
        variant === 'rainbow' && 'bg-fd-background',
        !open && 'hidden',
        props.className,
      )}
      style={{
        height,
      }}
    >
      {changeLayout && open ? (
        <style>
          {globalKey
            ? `:root:not(.${globalKey}) { --fd-banner-height: ${height}; }`
            : `:root { --fd-banner-height: ${height}; }`}
        </style>
      ) : null}
      {globalKey ? (
        <style>{`.${globalKey} #${id} { display: none; }`}</style>
      ) : null}
      {globalKey ? (
        <script
          dangerouslySetInnerHTML={{
            __html: `if (localStorage.getItem('${globalKey}') === 'true') document.documentElement.classList.add('${globalKey}');`,
          }}
        />
      ) : null}

      {variant === 'rainbow'
        ? flow({
            colors: rainbowColors,
          })
        : null}
      {props.children}
      {id ? (
        <button
          type="button"
          aria-label="Close Banner"
          onClick={() => {
            setOpen(false);
            if (globalKey) localStorage.setItem(globalKey, 'true');
          }}
          className={cn(
            buttonVariants({
              color: 'ghost',
              className:
                'absolute end-2 top-1/2 -translate-y-1/2 text-fd-muted-foreground/50',
              size: 'icon-sm',
            }),
          )}
        >
          <X />
        </button>
      ) : null}
    </div>
  );
}

const maskImage =
  'linear-gradient(to bottom,white,transparent), radial-gradient(circle at top center, white, transparent)';

function flow({ colors }: { colors: string[] }) {
  return (
    <>
      <div
        className="absolute inset-0 z-[-1]"
        style={
          {
            maskImage,
            maskComposite: 'intersect',
            animation: 'fd-moving-banner 20s linear infinite',
            backgroundImage: `repeating-linear-gradient(70deg, ${[...colors, colors[0]].map((color, i) => `${color} ${(i * 50) / colors.length}%`).join(', ')})`,
            backgroundSize: '200% 100%',
            filter: 'saturate(2)',
          } as object
        }
      />
      <style>
        {`@keyframes fd-moving-banner {
            from { background-position: 0% 0;  }
            to { background-position: 100% 0;  }
         }`}
      </style>
    </>
  );
}



================================================
FILE: packages/ui/src/components/callout.tsx
================================================
import { CircleCheck, CircleX, Info, TriangleAlert } from 'lucide-react';
import { forwardRef, type HTMLAttributes, type ReactNode } from 'react';
import { cn } from '@/utils/cn';

type CalloutProps = Omit<
  HTMLAttributes<HTMLDivElement>,
  'title' | 'type' | 'icon'
> & {
  title?: ReactNode;
  /**
   * @defaultValue info
   */
  type?: 'info' | 'warn' | 'error' | 'success' | 'warning';

  /**
   * Force an icon
   */
  icon?: ReactNode;
};

const iconClass = 'size-5 -me-0.5 fill-(--callout-color) text-fd-card';

export const Callout = forwardRef<HTMLDivElement, CalloutProps>(
  ({ className, children, title, type = 'info', icon, ...props }, ref) => {
    if (type === 'warn') type = 'warning';
    if ((type as unknown) === 'tip') type = 'info';

    return (
      <div
        ref={ref}
        className={cn(
          'flex gap-2 my-4 rounded-xl border bg-fd-card p-3 ps-1 text-sm text-fd-card-foreground shadow-md',
          className,
        )}
        {...props}
        style={
          {
            '--callout-color': `var(--color-fd-${type}, var(--color-fd-muted))`,
            ...props.style,
          } as object
        }
      >
        <div role="none" className="w-0.5 bg-(--callout-color)/50 rounded-sm" />
        {icon ??
          {
            info: <Info className={iconClass} />,
            warning: <TriangleAlert className={iconClass} />,
            error: <CircleX className={iconClass} />,
            success: <CircleCheck className={iconClass} />,
          }[type]}
        <div className="flex flex-col gap-2 min-w-0 flex-1">
          {title && <p className="font-medium !my-0">{title}</p>}
          <div className="text-fd-muted-foreground prose-no-margin empty:hidden">
            {children}
          </div>
        </div>
      </div>
    );
  },
);

Callout.displayName = 'Callout';



================================================
FILE: packages/ui/src/components/card.tsx
================================================
import Link from 'fumadocs-core/link';
import type { HTMLAttributes, ReactNode } from 'react';
import { cn } from '@/utils/cn';

export function Cards(props: HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      {...props}
      className={cn('grid grid-cols-2 gap-3 @container', props.className)}
    >
      {props.children}
    </div>
  );
}

export type CardProps = Omit<HTMLAttributes<HTMLElement>, 'title'> & {
  icon?: ReactNode;
  title: ReactNode;
  description?: ReactNode;

  href?: string;
  external?: boolean;
};

export function Card({ icon, title, description, ...props }: CardProps) {
  const E = props.href ? Link : 'div';

  return (
    <E
      {...props}
      data-card
      className={cn(
        'block rounded-xl border bg-fd-card p-4 text-fd-card-foreground transition-colors @max-lg:col-span-full',
        props.href && 'hover:bg-fd-accent/80',
        props.className,
      )}
    >
      {icon ? (
        <div className="not-prose mb-2 w-fit shadow-md rounded-lg border bg-fd-muted p-1.5 text-fd-muted-foreground [&_svg]:size-4">
          {icon}
        </div>
      ) : null}
      <h3 className="not-prose mb-1 text-sm font-medium">{title}</h3>
      {description ? (
        <p className="!my-0 text-sm text-fd-muted-foreground">{description}</p>
      ) : null}
      <div className="text-sm text-fd-muted-foreground prose-no-margin empty:hidden">
        {props.children}
      </div>
    </E>
  );
}



================================================
FILE: packages/ui/src/components/codeblock.tsx
================================================
'use client';
import { Check, Copy } from 'lucide-react';
import {
  type ComponentProps,
  createContext,
  type HTMLAttributes,
  type ReactNode,
  type RefObject,
  useContext,
  useMemo,
  useRef,
} from 'react';
import { cn } from '@/utils/cn';
import { useCopyButton } from '@/utils/use-copy-button';
import { buttonVariants } from '@/components/ui/button';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@/components/tabs.unstyled';
import { mergeRefs } from '@/utils/merge-refs';

export interface CodeBlockProps extends ComponentProps<'figure'> {
  /**
   * Icon of code block
   *
   * When passed as a string, it assumes the value is the HTML of icon
   */
  icon?: ReactNode;

  /**
   * Allow to copy code with copy button
   *
   * @defaultValue true
   */
  allowCopy?: boolean;

  /**
   * Keep original background color generated by Shiki or Rehype Code
   *
   * @defaultValue false
   */
  keepBackground?: boolean;

  viewportProps?: HTMLAttributes<HTMLElement>;

  /**
   * show line numbers
   */
  'data-line-numbers'?: boolean;

  /**
   * @defaultValue 1
   */
  'data-line-numbers-start'?: number;

  Actions?: (props: { className?: string; children?: ReactNode }) => ReactNode;
}

const TabsContext = createContext<{
  containerRef: RefObject<HTMLDivElement | null>;
  nested: boolean;
} | null>(null);

export function Pre(props: ComponentProps<'pre'>) {
  return (
    <pre
      {...props}
      className={cn('min-w-full w-max *:flex *:flex-col', props.className)}
    >
      {props.children}
    </pre>
  );
}

export function CodeBlock({
  ref,
  title,
  allowCopy,
  keepBackground = false,
  icon,
  viewportProps = {},
  children,
  Actions = (props) => (
    <div {...props} className={cn('empty:hidden', props.className)} />
  ),
  ...props
}: CodeBlockProps) {
  const isTab = useContext(TabsContext) !== null;
  const areaRef = useRef<HTMLDivElement>(null);
  allowCopy ??= !isTab;
  const bg = cn(
    'bg-fd-secondary',
    keepBackground && 'bg-(--shiki-light-bg) dark:bg-(--shiki-dark-bg)',
  );

  return (
    <figure
      ref={ref}
      dir="ltr"
      {...props}
      className={cn(
        isTab ? [bg, 'rounded-lg shadow-sm'] : 'my-4 rounded-xl bg-fd-card p-1',
        'shiki relative border outline-none not-prose overflow-hidden text-sm',
        props.className,
      )}
    >
      {title ? (
        <div
          className={cn(
            'flex text-fd-muted-foreground items-center gap-2 ps-3 h-9.5',
            isTab && 'border-b',
          )}
        >
          {typeof icon === 'string' ? (
            <div
              className="[&_svg]:size-3.5"
              dangerouslySetInnerHTML={{
                __html: icon,
              }}
            />
          ) : (
            icon
          )}
          <figcaption className="flex-1 truncate">{title}</figcaption>
          {Actions({
            children: allowCopy && <CopyButton containerRef={areaRef} />,
          })}
        </div>
      ) : (
        Actions({
          className:
            'absolute top-1 right-1 z-2 bg-fd-card rounded-bl-lg border-l border-b text-fd-muted-foreground',
          children: allowCopy && <CopyButton containerRef={areaRef} />,
        })
      )}
      <div
        ref={areaRef}
        {...viewportProps}
        className={cn(
          !isTab && [bg, 'rounded-lg border'],
          'text-[13px] py-3.5 overflow-auto max-h-[600px] fd-scroll-container',
          viewportProps.className,
        )}
        style={
          {
            // space for toolbar
            '--padding-right': !title ? 'calc(var(--spacing) * 8)' : undefined,
            counterSet: props['data-line-numbers']
              ? `line ${Number(props['data-line-numbers-start'] ?? 1) - 1}`
              : undefined,
            ...viewportProps.style,
          } as object
        }
      >
        {children}
      </div>
    </figure>
  );
}

function CopyButton({
  className,
  containerRef,
  ...props
}: ComponentProps<'button'> & {
  containerRef: RefObject<HTMLElement | null>;
}) {
  const [checked, onClick] = useCopyButton(() => {
    const pre = containerRef.current?.getElementsByTagName('pre').item(0);
    if (!pre) return;

    const clone = pre.cloneNode(true) as HTMLElement;
    clone.querySelectorAll('.nd-copy-ignore').forEach((node) => {
      node.replaceWith('\n');
    });

    void navigator.clipboard.writeText(clone.textContent ?? '');
  });

  return (
    <button
      type="button"
      className={cn(
        buttonVariants({
          color: 'ghost',
          className: '[&_svg]:size-3.5',
        }),
        className,
      )}
      aria-label={checked ? 'Copied Text' : 'Copy Text'}
      onClick={onClick}
      {...props}
    >
      {checked ? <Check /> : <Copy />}
    </button>
  );
}

export function CodeBlockTabs({ ref, ...props }: ComponentProps<typeof Tabs>) {
  const containerRef = useRef<HTMLDivElement>(null);
  const nested = useContext(TabsContext) !== null;

  return (
    <Tabs
      ref={mergeRefs(containerRef, ref)}
      {...props}
      className={cn(
        'bg-fd-card p-1 rounded-xl border overflow-hidden',
        !nested && 'my-4',
        props.className,
      )}
    >
      <TabsContext.Provider
        value={useMemo(
          () => ({
            containerRef,
            nested,
          }),
          [nested],
        )}
      >
        {props.children}
      </TabsContext.Provider>
    </Tabs>
  );
}

export function CodeBlockTabsList(props: ComponentProps<typeof TabsList>) {
  const { containerRef, nested } = useContext(TabsContext)!;

  return (
    <TabsList
      {...props}
      className={cn(
        'flex flex-row overflow-x-auto px-1 -mx-1 text-fd-muted-foreground',
        props.className,
      )}
    >
      {props.children}
      {!nested && (
        <CopyButton
          className="sticky ms-auto right-0 bg-fd-card backdrop-blur-sm"
          containerRef={containerRef}
        />
      )}
    </TabsList>
  );
}

export function CodeBlockTabsTrigger({
  children,
  ...props
}: ComponentProps<typeof TabsTrigger>) {
  return (
    <TabsTrigger
      {...props}
      className={cn(
        'relative group inline-flex text-sm font-medium text-nowrap items-center gap-2 px-2 first:ms-1 py-1.5 hover:text-fd-accent-foreground data-[state=active]:text-fd-primary [&_svg]:size-3.5',
        props.className,
      )}
    >
      <div className="absolute inset-x-2 bottom-0 h-px group-data-[state=active]:bg-fd-primary" />
      {children}
    </TabsTrigger>
  );
}

export const CodeBlockTab = (props: ComponentProps<typeof TabsContent>) => (
  <TabsContent {...props} asChild />
);



================================================
FILE: packages/ui/src/components/dynamic-codeblock.tsx
================================================
'use client';
import { CodeBlock, Pre } from '@/components/codeblock';
import type {
  HighlightOptionsCommon,
  HighlightOptionsThemes,
} from 'fumadocs-core/highlight';
import { useShiki } from 'fumadocs-core/highlight/client';
import { cn } from '@/utils/cn';
import { type ComponentProps, useMemo } from 'react';

function pre(props: ComponentProps<'pre'>) {
  return (
    <CodeBlock {...props} className={cn('my-0', props.className)}>
      <Pre>{props.children}</Pre>
    </CodeBlock>
  );
}

export function DynamicCodeBlock({
  lang,
  code,
  options,
}: {
  lang: string;
  code: string;
  options?: Omit<HighlightOptionsCommon, 'lang'> & HighlightOptionsThemes;
}) {
  const components: HighlightOptionsCommon['components'] = {
    pre,
    ...options?.components,
  };
  const loading = useMemo(() => {
    const Pre = (components.pre ?? 'pre') as 'pre';
    const Code = (components.code ?? 'code') as 'code';

    return (
      <Pre>
        <Code>
          {code.split('\n').map((line, i) => (
            <span key={i} className="line">
              {line}
            </span>
          ))}
        </Code>
      </Pre>
    );
    // eslint-disable-next-line -- initial value only
  }, []);

  return useShiki(code, {
    lang,
    loading,
    withPrerenderScript: true,
    ...options,
    components,
  });
}



================================================
FILE: packages/ui/src/components/files.tsx
================================================
'use client';

import { cva } from 'class-variance-authority';
import {
  File as FileIcon,
  Folder as FolderIcon,
  FolderOpen,
} from 'lucide-react';
import { type HTMLAttributes, type ReactNode, useState } from 'react';
import { cn } from '@/utils/cn';
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from './ui/collapsible';

const itemVariants = cva(
  'flex flex-row items-center gap-2 rounded-md px-2 py-1.5 text-sm hover:bg-fd-accent hover:text-fd-accent-foreground [&_svg]:size-4',
);

export function Files({
  className,
  ...props
}: HTMLAttributes<HTMLDivElement>): React.ReactElement {
  return (
    <div
      className={cn('not-prose rounded-md border bg-fd-card p-2', className)}
      {...props}
    >
      {props.children}
    </div>
  );
}

export interface FileProps extends HTMLAttributes<HTMLDivElement> {
  name: string;
  icon?: ReactNode;
}

export interface FolderProps extends HTMLAttributes<HTMLDivElement> {
  name: string;

  disabled?: boolean;

  /**
   * Open folder by default
   *
   * @defaultValue false
   */
  defaultOpen?: boolean;
}

export function File({
  name,
  icon = <FileIcon />,
  className,
  ...rest
}: FileProps): React.ReactElement {
  return (
    <div className={cn(itemVariants({ className }))} {...rest}>
      {icon}
      {name}
    </div>
  );
}

export function Folder({
  name,
  defaultOpen = false,
  ...props
}: FolderProps): React.ReactElement {
  const [open, setOpen] = useState(defaultOpen);

  return (
    <Collapsible open={open} onOpenChange={setOpen} {...props}>
      <CollapsibleTrigger className={cn(itemVariants({ className: 'w-full' }))}>
        {open ? <FolderOpen /> : <FolderIcon />}
        {name}
      </CollapsibleTrigger>
      <CollapsibleContent>
        <div className="ms-2 flex flex-col border-l ps-2">{props.children}</div>
      </CollapsibleContent>
    </Collapsible>
  );
}



================================================
FILE: packages/ui/src/components/github-info.tsx
================================================
import { cn } from '@/utils/cn';
import { Star } from 'lucide-react';
import { type AnchorHTMLAttributes } from 'react';

async function getRepoStarsAndForks(
  owner: string,
  repo: string,
  token?: string,
): Promise<{
  stars: number;
  forks: number;
}> {
  const endpoint = `https://api.github.com/repos/${owner}/${repo}`;
  const headers = new Headers({
    'Content-Type': 'application/json',
  });

  if (token) headers.set('Authorization', `Bearer ${token}`);

  const response = await fetch(endpoint, {
    headers,
    next: {
      revalidate: 60,
    },
  });

  if (!response.ok) {
    const message = await response.text();

    throw new Error(`Failed to fetch repository data: ${message}`);
  }

  const data = await response.json();
  return {
    stars: data.stargazers_count,
    forks: data.forks_count,
  };
}

export async function GithubInfo({
  repo,
  owner,
  token,
  ...props
}: AnchorHTMLAttributes<HTMLAnchorElement> & {
  owner: string;
  repo: string;
  token?: string;
}) {
  const { stars } = await getRepoStarsAndForks(owner, repo, token);
  const humanizedStars = humanizeNumber(stars);

  return (
    <a
      href={`https://github.com/${owner}/${repo}`}
      rel="noreferrer noopener"
      target="_blank"
      {...props}
      className={cn(
        'flex flex-col gap-1.5 p-2 rounded-lg text-sm text-fd-foreground/80 transition-colors lg:flex-row lg:items-center hover:text-fd-accent-foreground hover:bg-fd-accent',
        props.className,
      )}
    >
      <p className="flex items-center gap-2 truncate">
        <svg fill="currentColor" viewBox="0 0 24 24" className="size-3.5">
          <title>GitHub</title>
          <path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12" />
        </svg>
        {owner}/{repo}
      </p>
      <p className="flex text-xs items-center gap-1 text-fd-muted-foreground">
        <Star className="size-3" />
        {humanizedStars}
      </p>
    </a>
  );
}

/**
 * Converts a number to a human-readable string with K suffix for thousands
 * @example 1500 -> "1.5K", 1000000 -> "1000000"
 */
function humanizeNumber(num: number): string {
  if (num < 1000) {
    return num.toString();
  }

  if (num < 100000) {
    // For numbers between 1,000 and 99,999, show with one decimal (e.g., 1.5K)
    const value = (num / 1000).toFixed(1);
    // Remove trailing .0 if present
    const formattedValue = value.endsWith('.0') ? value.slice(0, -2) : value;

    return `${formattedValue}K`;
  }

  if (num < 1000000) {
    // For numbers between 10,000 and 999,999, show as whole K (e.g., 10K, 999K)
    return `${Math.floor(num / 1000)}K`;
  }

  // For 1,000,000 and above, just return the number
  return num.toString();
}



================================================
FILE: packages/ui/src/components/heading.tsx
================================================
import { Link } from 'lucide-react';
import type { ComponentPropsWithoutRef } from 'react';
import { cn } from '@/utils/cn';

type Types = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';
type HeadingProps<T extends Types> = Omit<ComponentPropsWithoutRef<T>, 'as'> & {
  as?: T;
};

export function Heading<T extends Types = 'h1'>({
  as,
  className,
  ...props
}: HeadingProps<T>): React.ReactElement {
  const As = as ?? 'h1';

  if (!props.id) return <As className={className} {...props} />;

  return (
    <As
      className={cn('flex scroll-m-28 flex-row items-center gap-2', className)}
      {...props}
    >
      <a data-card="" href={`#${props.id}`} className="peer">
        {props.children}
      </a>
      <Link
        aria-label="Link to section"
        className="size-3.5 shrink-0 text-fd-muted-foreground opacity-0 transition-opacity peer-hover:opacity-100"
      />
    </As>
  );
}



================================================
FILE: packages/ui/src/components/image-zoom.css
================================================
[data-rmiz] {
  display: block;
  position: relative;
}

[data-rmiz-ghost] {
  pointer-events: none;
  position: absolute;
}

[data-rmiz-btn-zoom],
[data-rmiz-btn-unzoom] {
  display: none;
}

[data-rmiz-content='found'] img {
  cursor: zoom-in;
}

[data-rmiz-modal][open] {
  width: 100vw /* fallback */;
  width: 100dvw;

  height: 100vh /* fallback */;
  height: 100dvh;

  background-color: transparent;
  max-width: none;
  max-height: none;
  margin: 0;
  padding: 0;
  position: fixed;
  overflow: hidden;
}

[data-rmiz-modal]:focus-visible {
  outline: none;
}

[data-rmiz-modal-overlay] {
  transition: background-color 0.3s;
  position: absolute;
  inset: 0;
}

[data-rmiz-modal-overlay='hidden'] {
  background-color: transparent;
}

[data-rmiz-modal-content] {
  width: 100%;
  height: 100%;
  position: relative;
}

[data-rmiz-modal]::backdrop {
  display: none;
}

[data-rmiz-modal-img] {
  cursor: zoom-out;
  image-rendering: high-quality;
  transform-origin: 0 0;
  transition: transform 0.3s;
  position: absolute;
}

@media (prefers-reduced-motion: reduce) {
  [data-rmiz-modal-overlay],
  [data-rmiz-modal-img] {
    transition-duration: 0.01ms !important;
  }
}



================================================
FILE: packages/ui/src/components/image-zoom.tsx
================================================
'use client';

import { Image, type ImageProps } from 'fumadocs-core/framework';
import { type ImgHTMLAttributes } from 'react';
import './image-zoom.css';
import Zoom, { type UncontrolledProps } from 'react-medium-image-zoom';

export type ImageZoomProps = ImageProps & {
  /**
   * Image props when zoom in
   */
  zoomInProps?: ImgHTMLAttributes<HTMLImageElement>;

  /**
   * Props for `react-medium-image-zoom`
   */
  rmiz?: UncontrolledProps;
};

function getImageSrc(src: ImageProps['src']): string {
  if (typeof src === 'string') return src;

  if (typeof src === 'object') {
    // Next.js
    if ('default' in src)
      return (src as { default: { src: string } }).default.src;
    return src.src;
  }

  return '';
}

export function ImageZoom({
  zoomInProps,
  children,
  rmiz,
  ...props
}: ImageZoomProps) {
  return (
    <Zoom
      zoomMargin={20}
      wrapElement="span"
      {...rmiz}
      zoomImg={{
        src: getImageSrc(props.src),
        sizes: undefined,
        ...zoomInProps,
      }}
    >
      {children ?? (
        <Image
          sizes="(max-width: 768px) 100vw, (max-width: 1200px) 70vw, 900px"
          {...props}
        />
      )}
    </Zoom>
  );
}



================================================
FILE: packages/ui/src/components/inline-toc.tsx
================================================
'use client';

import { ChevronDown } from 'lucide-react';
import type { TOCItemType } from 'fumadocs-core/server';
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from './ui/collapsible';
import { ComponentProps } from 'react';
import { cn } from '@/utils/cn';

export interface InlineTocProps extends ComponentProps<typeof Collapsible> {
  items: TOCItemType[];
}

export function InlineTOC({ items, ...props }: InlineTocProps) {
  return (
    <Collapsible
      {...props}
      className={cn(
        'not-prose rounded-lg border bg-fd-card text-fd-card-foreground',
        props.className,
      )}
    >
      <CollapsibleTrigger className="group inline-flex w-full items-center justify-between px-4 py-2.5 font-medium">
        {props.children ?? 'Table of Contents'}
        <ChevronDown className="size-4 transition-transform duration-200 group-data-[state=open]:rotate-180" />
      </CollapsibleTrigger>
      <CollapsibleContent>
        <div className="flex flex-col p-4 pt-0 text-sm text-fd-muted-foreground">
          {items.map((item) => (
            <a
              key={item.url}
              href={item.url}
              className="border-s py-1.5 hover:text-fd-accent-foreground"
              style={{
                paddingInlineStart: 12 * Math.max(item.depth - 1, 0),
              }}
            >
              {item.title}
            </a>
          ))}
        </div>
      </CollapsibleContent>
    </Collapsible>
  );
}



================================================
FILE: packages/ui/src/components/steps.tsx
================================================
import type { ReactNode } from 'react';

export function Steps({ children }: { children: ReactNode }) {
  return <div className="fd-steps">{children}</div>;
}

export function Step({ children }: { children: ReactNode }) {
  return <div className="fd-step">{children}</div>;
}



================================================
FILE: packages/ui/src/components/tabs.tsx
================================================
'use client';

import * as React from 'react';
import {
  type ComponentProps,
  createContext,
  type ReactNode,
  useContext,
  useEffect,
  useId,
  useMemo,
  useState,
} from 'react';
import { cn } from '@/utils/cn';
import * as Unstyled from './tabs.unstyled';

type CollectionKey = string | symbol;

export interface TabsProps
  extends Omit<
    ComponentProps<typeof Unstyled.Tabs>,
    'value' | 'onValueChange'
  > {
  /**
   * Use simple mode instead of advanced usage as documented in https://radix-ui.com/primitives/docs/components/tabs.
   */
  items?: string[];

  /**
   * Shortcut for `defaultValue` when `items` is provided.
   *
   * @defaultValue 0
   */
  defaultIndex?: number;

  /**
   * Additional label in tabs list when `items` is provided.
   */
  label?: ReactNode;
}

const TabsContext = createContext<{
  items?: string[];
  collection: CollectionKey[];
} | null>(null);

function useTabContext() {
  const ctx = useContext(TabsContext);
  if (!ctx) throw new Error('You must wrap your component in <Tabs>');
  return ctx;
}

export const TabsList = React.forwardRef<
  React.ComponentRef<typeof Unstyled.TabsList>,
  React.ComponentPropsWithoutRef<typeof Unstyled.TabsList>
>((props, ref) => (
  <Unstyled.TabsList
    ref={ref}
    {...props}
    className={cn(
      'flex gap-3.5 text-fd-secondary-foreground overflow-x-auto px-4 not-prose',
      props.className,
    )}
  />
));
TabsList.displayName = 'TabsList';

export const TabsTrigger = React.forwardRef<
  React.ComponentRef<typeof Unstyled.TabsTrigger>,
  React.ComponentPropsWithoutRef<typeof Unstyled.TabsTrigger>
>((props, ref) => (
  <Unstyled.TabsTrigger
    ref={ref}
    {...props}
    className={cn(
      'inline-flex items-center gap-2 whitespace-nowrap text-fd-muted-foreground border-b border-transparent py-2 text-sm font-medium transition-colors [&_svg]:size-4 hover:text-fd-accent-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=active]:border-fd-primary data-[state=active]:text-fd-primary',
      props.className,
    )}
  />
));
TabsTrigger.displayName = 'TabsTrigger';

export function Tabs({
  ref,
  className,
  items,
  label,
  defaultIndex = 0,
  defaultValue = items ? escapeValue(items[defaultIndex]) : undefined,
  ...props
}: TabsProps) {
  const [value, setValue] = useState(defaultValue);
  const collection = useMemo<CollectionKey[]>(() => [], []);

  return (
    <Unstyled.Tabs
      ref={ref}
      className={cn(
        'flex flex-col overflow-hidden rounded-xl border bg-fd-secondary my-4',
        className,
      )}
      value={value}
      onValueChange={(v: string) => {
        if (items && !items.some((item) => escapeValue(item) === v)) return;
        setValue(v);
      }}
      {...props}
    >
      {items && (
        <TabsList>
          {label && (
            <span className="text-sm font-medium my-auto me-auto">{label}</span>
          )}
          {items.map((item) => (
            <TabsTrigger key={item} value={escapeValue(item)}>
              {item}
            </TabsTrigger>
          ))}
        </TabsList>
      )}
      <TabsContext.Provider
        value={useMemo(() => ({ items, collection }), [collection, items])}
      >
        {props.children}
      </TabsContext.Provider>
    </Unstyled.Tabs>
  );
}

export interface TabProps
  extends Omit<ComponentProps<typeof Unstyled.TabsContent>, 'value'> {
  /**
   * Value of tab, detect from index if unspecified.
   */
  value?: string;
}

export function Tab({ value, ...props }: TabProps) {
  const { items } = useTabContext();
  const resolved =
    value ??
    // eslint-disable-next-line react-hooks/rules-of-hooks -- `value` is not supposed to change
    items?.at(useCollectionIndex());
  if (!resolved)
    throw new Error(
      'Failed to resolve tab `value`, please pass a `value` prop to the Tab component.',
    );

  return (
    <TabsContent value={escapeValue(resolved)} {...props}>
      {props.children}
    </TabsContent>
  );
}

export function TabsContent({
  value,
  className,
  ...props
}: ComponentProps<typeof Unstyled.TabsContent>) {
  return (
    <Unstyled.TabsContent
      value={value}
      forceMount
      className={cn(
        'p-4 text-[15px] bg-fd-background rounded-xl outline-none prose-no-margin data-[state=inactive]:hidden [&>figure:only-child]:-m-4 [&>figure:only-child]:border-none',
        className,
      )}
      {...props}
    >
      {props.children}
    </Unstyled.TabsContent>
  );
}

/**
 * Inspired by Headless UI.
 *
 * Return the index of children, this is made possible by registering the order of render from children using React context.
 * This is supposed by work with pre-rendering & pure client-side rendering.
 */
function useCollectionIndex() {
  const key = useId();
  const { collection } = useTabContext();

  useEffect(() => {
    return () => {
      const idx = collection.indexOf(key);
      if (idx !== -1) collection.splice(idx, 1);
    };
  }, [key, collection]);

  if (!collection.includes(key)) collection.push(key);
  return collection.indexOf(key);
}

/**
 * only escape whitespaces in values in simple mode
 */
function escapeValue(v: string): string {
  return v.toLowerCase().replace(/\s/, '-');
}



================================================
FILE: packages/ui/src/components/tabs.unstyled.tsx
================================================
'use client';

import {
  type ComponentProps,
  createContext,
  useContext,
  useLayoutEffect,
  useMemo,
  useRef,
  useState,
} from 'react';
import * as Primitive from '@radix-ui/react-tabs';
import { mergeRefs } from '@/utils/merge-refs';
import { useEffectEvent } from 'fumadocs-core/utils/use-effect-event';

type ChangeListener = (v: string) => void;
const listeners = new Map<string, ChangeListener[]>();

function addChangeListener(id: string, listener: ChangeListener): void {
  const list = listeners.get(id) ?? [];
  list.push(listener);
  listeners.set(id, list);
}

function removeChangeListener(id: string, listener: ChangeListener): void {
  const list = listeners.get(id) ?? [];
  listeners.set(
    id,
    list.filter((item) => item !== listener),
  );
}

export interface TabsProps extends ComponentProps<typeof Primitive.Tabs> {
  /**
   * Identifier for Sharing value of tabs
   */
  groupId?: string;

  /**
   * Enable persistent
   */
  persist?: boolean;

  /**
   * If true, updates the URL hash based on the tab's id
   */
  updateAnchor?: boolean;
}

const TabsContext = createContext<{
  valueToIdMap: Map<string, string>;
} | null>(null);

function useTabContext() {
  const ctx = useContext(TabsContext);
  if (!ctx) throw new Error('You must wrap your component in <Tabs>');
  return ctx;
}

export const TabsList = Primitive.TabsList;

export const TabsTrigger = Primitive.TabsTrigger;

/**
 * @internal You better not use it
 */
export function Tabs({
  ref,
  groupId,
  persist = false,
  updateAnchor = false,
  defaultValue,
  value: _value,
  onValueChange: _onValueChange,
  ...props
}: TabsProps) {
  const tabsRef = useRef<HTMLDivElement>(null);
  const [value, setValue] =
    _value === undefined
      ? // eslint-disable-next-line react-hooks/rules-of-hooks -- not supposed to change controlled/uncontrolled
        useState(defaultValue)
      : [_value, _onValueChange ?? (() => undefined)];

  const onChange = useEffectEvent((v: string) => setValue(v));
  const valueToIdMap = useMemo(() => new Map<string, string>(), []);

  useLayoutEffect(() => {
    if (!groupId) return;
    const previous = persist
      ? localStorage.getItem(groupId)
      : sessionStorage.getItem(groupId);

    if (previous) onChange(previous);
    addChangeListener(groupId, onChange);
    return () => {
      removeChangeListener(groupId, onChange);
    };
  }, [groupId, onChange, persist]);

  useLayoutEffect(() => {
    const hash = window.location.hash.slice(1);
    if (!hash) return;

    for (const [value, id] of valueToIdMap.entries()) {
      if (id === hash) {
        onChange(value);
        tabsRef.current?.scrollIntoView();
        break;
      }
    }
  }, [onChange, valueToIdMap]);

  return (
    <Primitive.Tabs
      ref={mergeRefs(ref, tabsRef)}
      value={value}
      onValueChange={(v: string) => {
        if (updateAnchor) {
          const id = valueToIdMap.get(v);

          if (id) {
            window.history.replaceState(null, '', `#${id}`);
          }
        }

        if (groupId) {
          listeners.get(groupId)?.forEach((item) => {
            item(v);
          });

          if (persist) localStorage.setItem(groupId, v);
          else sessionStorage.setItem(groupId, v);
        } else {
          setValue(v);
        }
      }}
      {...props}
    >
      <TabsContext.Provider
        value={useMemo(() => ({ valueToIdMap }), [valueToIdMap])}
      >
        {props.children}
      </TabsContext.Provider>
    </Primitive.Tabs>
  );
}

export function TabsContent({
  value,
  ...props
}: ComponentProps<typeof Primitive.TabsContent>) {
  const { valueToIdMap } = useTabContext();

  if (props.id) {
    valueToIdMap.set(value, props.id);
  }

  return (
    <Primitive.TabsContent value={value} {...props}>
      {props.children}
    </Primitive.TabsContent>
  );
}



================================================
FILE: packages/ui/src/components/type-table.tsx
================================================
'use client';

import { Info as InfoIcon } from 'lucide-react';
import Link from 'fumadocs-core/link';
import { cva } from 'class-variance-authority';
import { cn } from '@/utils/cn';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import type { ReactNode } from 'react';

export function Info({ children }: { children: ReactNode }): ReactNode {
  return (
    <Popover>
      <PopoverTrigger>
        <InfoIcon className="size-4" />
      </PopoverTrigger>
      <PopoverContent className="prose max-h-[400px] min-w-[220px] max-w-[400px] overflow-auto text-sm prose-no-margin">
        {children}
      </PopoverContent>
    </Popover>
  );
}

interface ObjectType {
  /**
   * Additional description of the field
   */
  description?: ReactNode;
  type: string;
  typeDescription?: ReactNode;
  /**
   * Optional link to the type
   */
  typeDescriptionLink?: string;
  default?: string;

  required?: boolean;
  deprecated?: boolean;
}

const field = cva('inline-flex flex-row items-center gap-1');
const code = cva(
  'rounded-md bg-fd-secondary p-1 text-fd-secondary-foreground',
  {
    variants: {
      color: {
        primary: 'bg-fd-primary/10 text-fd-primary',
        deprecated: 'line-through text-fd-primary/50',
      },
    },
  },
);

export function TypeTable({ type }: { type: Record<string, ObjectType> }) {
  return (
    <div className="prose my-6 overflow-auto prose-no-margin">
      <table className="whitespace-nowrap text-sm text-fd-muted-foreground">
        <thead>
          <tr>
            <th className="w-[45%]">Prop</th>
            <th className="w-[30%]">Type</th>
            <th className="w-1/4">Default</th>
          </tr>
        </thead>
        <tbody>
          {Object.entries(type).map(([key, value]) => (
            <tr key={key}>
              <td>
                <div className={field()}>
                  <code
                    className={cn(
                      code({
                        color: value.deprecated ? 'deprecated' : 'primary',
                      }),
                    )}
                  >
                    {key}
                    {!value.required && '?'}
                  </code>
                  {value.description ? <Info>{value.description}</Info> : null}
                </div>
              </td>
              <td>
                <div className={field()}>
                  <code className={code()}>{value.type}</code>
                  {value.typeDescription ? (
                    <Info>{value.typeDescription}</Info>
                  ) : null}
                  {value.typeDescriptionLink ? (
                    <Link href={value.typeDescriptionLink}>
                      <InfoIcon className="size-4" />
                    </Link>
                  ) : null}
                </div>
              </td>
              <td>
                {value.default ? (
                  <code className={code()}>{value.default}</code>
                ) : (
                  '-'
                )}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}



================================================
FILE: packages/ui/src/components/dialog/search-algolia.tsx
================================================
'use client';

import {
  type AlgoliaOptions,
  useDocsSearch,
} from 'fumadocs-core/search/client';
import { type ReactNode, useMemo, useState } from 'react';
import { useOnChange } from 'fumadocs-core/utils/use-on-change';
import {
  SearchDialog,
  SearchDialogClose,
  SearchDialogContent,
  SearchDialogFooter,
  SearchDialogHeader,
  SearchDialogIcon,
  SearchDialogInput,
  SearchDialogList,
  SearchDialogOverlay,
  TagsList,
  TagsListItem,
} from './search';
import type { SortedResult } from 'fumadocs-core/server';
import type { SearchLink, SharedProps, TagItem } from '@/contexts/search';
import { useI18n } from '@/contexts/i18n';

export interface AlgoliaSearchDialogProps extends SharedProps {
  searchOptions: AlgoliaOptions;
  links?: SearchLink[];

  footer?: ReactNode;

  defaultTag?: string;
  tags?: TagItem[];

  /**
   * Add the "Powered by Algolia" label, this is useful for free tier users
   *
   * @defaultValue false
   */
  showAlgolia?: boolean;

  /**
   * Allow to clear tag filters
   *
   * @defaultValue false
   */
  allowClear?: boolean;
}

export default function AlgoliaSearchDialog({
  searchOptions,
  tags = [],
  defaultTag,
  showAlgolia = false,
  allowClear = false,
  links = [],
  footer,
  ...props
}: AlgoliaSearchDialogProps) {
  const [tag, setTag] = useState(defaultTag);
  const { locale } = useI18n();
  const { search, setSearch, query } = useDocsSearch({
    type: 'algolia',
    tag,
    locale,
    ...searchOptions,
  });
  const defaultItems = useMemo<SortedResult[] | null>(() => {
    if (links.length === 0) return null;
    return links.map(([name, link]) => ({
      type: 'page',
      id: name,
      content: name,
      url: link,
    }));
  }, [links]);

  useOnChange(defaultTag, (v) => {
    setTag(v);
  });

  const label = showAlgolia && <AlgoliaTitle />;

  return (
    <SearchDialog
      search={search}
      onSearchChange={setSearch}
      isLoading={query.isLoading}
      {...props}
    >
      <SearchDialogOverlay />
      <SearchDialogContent>
        <SearchDialogHeader>
          <SearchDialogIcon />
          <SearchDialogInput />
          <SearchDialogClose />
        </SearchDialogHeader>
        <SearchDialogList
          items={query.data !== 'empty' ? query.data : defaultItems}
        />
      </SearchDialogContent>
      <SearchDialogFooter>
        {tags.length > 0 ? (
          <TagsList tag={tag} onTagChange={setTag} allowClear={allowClear}>
            {tags.map((tag) => (
              <TagsListItem key={tag.value} value={tag.value}>
                {tag.name}
              </TagsListItem>
            ))}
            {label}
          </TagsList>
        ) : (
          label
        )}
        {footer}
      </SearchDialogFooter>
    </SearchDialog>
  );
}

function AlgoliaTitle() {
  return (
    <a
      href="https://algolia.com"
      rel="noreferrer noopener"
      className="ms-auto text-xs text-fd-muted-foreground"
    >
      Search powered by Algolia
    </a>
  );
}



================================================
FILE: packages/ui/src/components/dialog/search-default.tsx
================================================
'use client';

import { useDocsSearch } from 'fumadocs-core/search/client';
import { type ReactNode, useMemo, useState } from 'react';
import { useOnChange } from 'fumadocs-core/utils/use-on-change';
import { useI18n } from '@/contexts/i18n';
import {
  SearchDialog,
  SearchDialogClose,
  SearchDialogContent,
  SearchDialogFooter,
  SearchDialogHeader,
  SearchDialogIcon,
  SearchDialogInput,
  SearchDialogList,
  SearchDialogOverlay,
  TagsList,
  TagsListItem,
} from './search';
import type { SortedResult } from 'fumadocs-core/server';
import type { SearchLink, SharedProps, TagItem } from '@/contexts/search';

export interface DefaultSearchDialogProps extends SharedProps {
  links?: SearchLink[];

  /**
   * @defaultValue 'fetch'
   */
  type?: 'fetch' | 'static';

  defaultTag?: string;
  tags?: TagItem[];

  /**
   * Search API URL
   */
  api?: string;

  /**
   * The debounced delay for performing a search.
   */
  delayMs?: number;

  footer?: ReactNode;

  /**
   * Allow to clear tag filters
   *
   * @defaultValue false
   */
  allowClear?: boolean;
}

export default function DefaultSearchDialog({
  defaultTag,
  tags = [],
  api,
  delayMs,
  type = 'fetch',
  allowClear = false,
  links = [],
  footer,
  ...props
}: DefaultSearchDialogProps) {
  const { locale } = useI18n();
  const [tag, setTag] = useState(defaultTag);
  const { search, setSearch, query } = useDocsSearch(
    type === 'fetch'
      ? {
          type: 'fetch',
          api,
          locale,
          tag,
          delayMs,
        }
      : {
          type: 'static',
          from: api,
          locale,
          tag,
          delayMs,
        },
  );
  const defaultItems = useMemo<SortedResult[] | null>(() => {
    if (links.length === 0) return null;
    return links.map(([name, link]) => ({
      type: 'page',
      id: name,
      content: name,
      url: link,
    }));
  }, [links]);

  useOnChange(defaultTag, (v) => {
    setTag(v);
  });

  return (
    <SearchDialog
      search={search}
      onSearchChange={setSearch}
      isLoading={query.isLoading}
      {...props}
    >
      <SearchDialogOverlay />
      <SearchDialogContent>
        <SearchDialogHeader>
          <SearchDialogIcon />
          <SearchDialogInput />
          <SearchDialogClose />
        </SearchDialogHeader>
        <SearchDialogList
          items={query.data !== 'empty' ? query.data : defaultItems}
        />
      </SearchDialogContent>
      <SearchDialogFooter>
        {tags.length > 0 && (
          <TagsList tag={tag} onTagChange={setTag} allowClear={allowClear}>
            {tags.map((tag) => (
              <TagsListItem key={tag.value} value={tag.value}>
                {tag.name}
              </TagsListItem>
            ))}
          </TagsList>
        )}
        {footer}
      </SearchDialogFooter>
    </SearchDialog>
  );
}



================================================
FILE: packages/ui/src/components/dialog/search-orama.tsx
================================================
'use client';

import {
  type OramaCloudOptions,
  useDocsSearch,
} from 'fumadocs-core/search/client';
import { type ReactNode, useMemo, useState } from 'react';
import { useOnChange } from 'fumadocs-core/utils/use-on-change';
import {
  SearchDialog,
  SearchDialogClose,
  SearchDialogContent,
  SearchDialogFooter,
  SearchDialogHeader,
  SearchDialogIcon,
  SearchDialogInput,
  SearchDialogList,
  SearchDialogOverlay,
  TagsList,
  TagsListItem,
} from './search';
import type { SortedResult } from 'fumadocs-core/server';
import type { SearchLink, SharedProps, TagItem } from '@/contexts/search';
import { useI18n } from '@/contexts/i18n';

export interface OramaSearchDialogProps extends SharedProps {
  links?: SearchLink[];
  client: OramaCloudOptions['client'];
  searchOptions?: OramaCloudOptions['params'];
  index?: OramaCloudOptions['index'];

  footer?: ReactNode;

  defaultTag?: string;
  tags?: TagItem[];

  /**
   * Add the "Powered by Orama" label
   *
   * @defaultValue false
   */
  showOrama?: boolean;

  /**
   * Allow to clear tag filters
   *
   * @defaultValue false
   */
  allowClear?: boolean;
}

/**
 * Orama Cloud integration
 */
export default function OramaSearchDialog({
  client,
  searchOptions,
  tags = [],
  defaultTag,
  showOrama = false,
  allowClear = false,
  index,
  footer,
  links = [],
  ...props
}: OramaSearchDialogProps) {
  const { locale } = useI18n();
  const [tag, setTag] = useState(defaultTag);
  const { search, setSearch, query } = useDocsSearch({
    type: 'orama-cloud',
    client,
    index,
    params: searchOptions,
    locale,
    tag,
  });

  const defaultItems = useMemo<SortedResult[] | null>(() => {
    if (links.length === 0) return null;

    return links.map(([name, link]) => ({
      type: 'page',
      id: name,
      content: name,
      url: link,
    }));
  }, [links]);

  useOnChange(defaultTag, (v) => {
    setTag(v);
  });

  const label = showOrama && <Label />;

  return (
    <SearchDialog
      search={search}
      onSearchChange={setSearch}
      isLoading={query.isLoading}
      {...props}
    >
      <SearchDialogOverlay />
      <SearchDialogContent>
        <SearchDialogHeader>
          <SearchDialogIcon />
          <SearchDialogInput />
          <SearchDialogClose />
        </SearchDialogHeader>
        <SearchDialogList
          items={query.data !== 'empty' ? query.data : defaultItems}
        />
        <SearchDialogFooter>
          {tags.length > 0 ? (
            <TagsList tag={tag} onTagChange={setTag} allowClear={allowClear}>
              {tags.map((tag) => (
                <TagsListItem key={tag.value} value={tag.value}>
                  {tag.name}
                </TagsListItem>
              ))}
              {label}
            </TagsList>
          ) : (
            label
          )}
          {footer}
        </SearchDialogFooter>
      </SearchDialogContent>
    </SearchDialog>
  );
}

function Label() {
  return (
    <a
      href="https://orama.com"
      rel="noreferrer noopener"
      className="ms-auto text-xs text-fd-muted-foreground"
    >
      Search powered by Orama
    </a>
  );
}



================================================
FILE: packages/ui/src/components/dialog/search.tsx
================================================
'use client';

import { FileText, Hash, Search as SearchIcon } from 'lucide-react';
import {
  type ComponentProps,
  createContext,
  Fragment,
  type ReactNode,
  useCallback,
  useContext,
  useEffect,
  useMemo,
  useRef,
  useState,
} from 'react';
import { I18nLabel, useI18n } from '@/contexts/i18n';
import { cn } from '@/utils/cn';
import { buttonVariants } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogOverlay,
  DialogTitle,
} from '@radix-ui/react-dialog';
import type { SortedResult } from 'fumadocs-core/server';
import { cva } from 'class-variance-authority';
import { useEffectEvent } from 'fumadocs-core/utils/use-effect-event';
import { useRouter } from 'fumadocs-core/framework';
import type { SharedProps } from '@/contexts/search';
import { useOnChange } from 'fumadocs-core/utils/use-on-change';
import scrollIntoView from 'scroll-into-view-if-needed';

type ReactSortedResult = Omit<SortedResult, 'content'> & {
  external?: boolean;
  content: ReactNode;
};

// needed for backward compatible since some previous guides referenced it
export type { SharedProps };

export interface SearchDialogProps extends SharedProps {
  search: string;
  onSearchChange: (v: string) => void;
  isLoading?: boolean;

  children: ReactNode;
}

const Context = createContext<{
  open: boolean;
  onOpenChange: (open: boolean) => void;
  search: string;
  onSearchChange: (v: string) => void;

  isLoading: boolean;
} | null>(null);

const ListContext = createContext<{
  active: string | null;
  setActive: (v: string | null) => void;
} | null>(null);

const TagsListContext = createContext<{
  value?: string;
  onValueChange: (value: string | undefined) => void;
  allowClear: boolean;
} | null>(null);

export function SearchDialog({
  open,
  onOpenChange,
  search,
  onSearchChange,
  isLoading = false,
  children,
}: SearchDialogProps) {
  const [active, setActive] = useState<string | null>(null);

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <Context.Provider
        value={useMemo(
          () => ({
            open,
            onOpenChange,
            search,
            onSearchChange,
            active,
            setActive,
            isLoading,
          }),
          [active, isLoading, onOpenChange, onSearchChange, open, search],
        )}
      >
        {children}
      </Context.Provider>
    </Dialog>
  );
}

export function SearchDialogHeader(props: ComponentProps<'div'>) {
  return (
    <div
      {...props}
      className={cn(
        'flex flex-row items-center gap-2 p-3 pb-2',
        props.className,
      )}
    />
  );
}

export function SearchDialogInput(props: ComponentProps<'input'>) {
  const { text } = useI18n();
  const { search, onSearchChange } = useSearch();

  return (
    <input
      {...props}
      value={search}
      onChange={(e) => onSearchChange(e.target.value)}
      placeholder={text.search}
      className="w-0 flex-1 bg-transparent text-lg placeholder:text-fd-muted-foreground focus-visible:outline-none"
    />
  );
}

export function SearchDialogClose({
  children = 'ESC',
  className,
  ...props
}: ComponentProps<'button'>) {
  const { onOpenChange } = useSearch();

  return (
    <button
      type="button"
      onClick={() => onOpenChange(false)}
      className={cn(
        buttonVariants({
          color: 'outline',
          size: 'sm',
          className: 'font-mono text-fd-muted-foreground',
        }),
        className,
      )}
      {...props}
    >
      {children}
    </button>
  );
}

export function SearchDialogFooter(props: ComponentProps<'div'>) {
  return (
    <div
      {...props}
      className={cn('bg-fd-secondary/50 p-3 empty:hidden', props.className)}
    />
  );
}

export function SearchDialogOverlay(
  props: ComponentProps<typeof DialogOverlay>,
) {
  return (
    <DialogOverlay
      {...props}
      className={cn(
        'fixed inset-0 z-50 max-md:backdrop-blur-xs data-[state=open]:animate-fd-fade-in data-[state=closed]:animate-fd-fade-out',
        props.className,
      )}
    />
  );
}

export function SearchDialogContent({
  children,
  ...props
}: ComponentProps<typeof DialogContent>) {
  const { text } = useI18n();

  return (
    <DialogContent
      aria-describedby={undefined}
      {...props}
      className={cn(
        'fixed divide-y divide-fd-border left-1/2 top-4 md:top-[calc(50%-250px)] z-50 w-[calc(100%-2*var(--spacing))] max-w-screen-sm -translate-x-1/2 rounded-2xl border bg-fd-popover/60 backdrop-blur-xl text-fd-popover-foreground shadow-2xl shadow-black/40 overflow-hidden data-[state=closed]:animate-fd-dialog-out data-[state=open]:animate-fd-dialog-in',
        props.className,
      )}
    >
      <DialogTitle className="hidden">{text.search}</DialogTitle>
      {children}
    </DialogContent>
  );
}

export function SearchDialogList({
  items = null,
  Empty = () => (
    <div className="py-12 text-center text-sm text-fd-muted-foreground">
      <I18nLabel label="searchNoResult" />
    </div>
  ),
  Item = (props) => <SearchDialogListItem {...props} />,
  ...props
}: Omit<ComponentProps<'div'>, 'children'> & {
  items: ReactSortedResult[] | null | undefined;
  /**
   * Renderer for empty list UI
   */
  Empty?: () => ReactNode;
  /**
   * Renderer for items
   */
  Item?: (props: { item: ReactSortedResult; onClick: () => void }) => ReactNode;
}) {
  const ref = useRef<HTMLDivElement>(null);
  const [active, setActive] = useState<string | null>(() =>
    items && items.length > 0 ? items[0].id : null,
  );
  const { onOpenChange } = useSearch();
  const router = useRouter();

  const onOpen = ({ external, url }: ReactSortedResult) => {
    if (external) window.open(url, '_blank')?.focus();
    else router.push(url);
    onOpenChange(false);
  };

  const onKey = useEffectEvent((e: KeyboardEvent) => {
    if (!items) return;

    if (e.key === 'ArrowDown' || e.key == 'ArrowUp') {
      let idx = items.findIndex((item) => item.id === active);
      if (idx === -1) idx = 0;
      else if (e.key === 'ArrowDown') idx++;
      else idx--;

      setActive(items.at(idx % items.length)?.id ?? null);
      e.preventDefault();
    }

    if (e.key === 'Enter') {
      const selected = items.find((item) => item.id === active);

      if (selected) onOpen(selected);
      e.preventDefault();
    }
  });

  useEffect(() => {
    const element = ref.current;
    if (!element) return;

    const observer = new ResizeObserver(() => {
      const viewport = element.firstElementChild!;

      element.style.setProperty(
        '--fd-animated-height',
        `${viewport.clientHeight}px`,
      );
    });

    const viewport = element.firstElementChild;
    if (viewport) observer.observe(viewport);

    window.addEventListener('keydown', onKey);
    return () => {
      observer.disconnect();
      window.removeEventListener('keydown', onKey);
    };
  }, [onKey]);

  useOnChange(items, () => {
    if (items && items.length > 0) {
      setActive(items[0].id);
    }
  });

  return (
    <div
      {...props}
      ref={ref}
      className={cn(
        'overflow-hidden h-(--fd-animated-height) transition-[height]',
        !items && 'border-b-0',
        props.className,
      )}
    >
      <div
        className={cn(
          'w-full flex flex-col overflow-y-auto max-h-[460px] p-1',
          !items && 'hidden',
        )}
      >
        <ListContext.Provider
          value={useMemo(
            () => ({
              active,
              setActive,
            }),
            [active],
          )}
        >
          {items?.length === 0 && Empty()}

          {items?.map((item) => (
            <Fragment key={item.id}>
              {Item({ item, onClick: () => onOpen(item) })}
            </Fragment>
          ))}
        </ListContext.Provider>
      </div>
    </div>
  );
}

const icons = {
  text: null,
  heading: <Hash className="size-4 shrink-0 text-fd-muted-foreground" />,
  page: (
    <FileText className="size-6 text-fd-muted-foreground bg-fd-muted border p-0.5 rounded-sm shadow-sm shrink-0" />
  ),
};

export function SearchDialogListItem({
  item,
  className,
  children,
  ...props
}: ComponentProps<'button'> & {
  item: ReactSortedResult;
}) {
  const { active: activeId, setActive } = useSearchList();
  const active = item.id === activeId;

  return (
    <button
      type="button"
      ref={useCallback(
        (element: HTMLButtonElement | null) => {
          if (active && element) {
            scrollIntoView(element, {
              scrollMode: 'if-needed',
              block: 'nearest',
              boundary: element.parentElement,
            });
          }
        },
        [active],
      )}
      aria-selected={active}
      className={cn(
        'relative flex select-none flex-row items-center gap-2 p-2 text-start text-sm rounded-lg',
        item.type !== 'page' && 'ps-8',
        item.type === 'page' || item.type === 'heading'
          ? 'font-medium'
          : 'text-fd-popover-foreground/80',
        active && 'bg-fd-accent text-fd-accent-foreground',
        className,
      )}
      onPointerMove={() => setActive(item.id)}
      {...props}
    >
      {children ?? (
        <>
          {item.type !== 'page' && (
            <div
              role="none"
              className="absolute start-4.5 inset-y-0 w-px bg-fd-border"
            />
          )}
          {icons[item.type]}
          <p className="min-w-0 truncate">{item.content}</p>
        </>
      )}
    </button>
  );
}

export function SearchDialogIcon(props: ComponentProps<'svg'>) {
  const { isLoading } = useSearch();

  return (
    <SearchIcon
      {...props}
      className={cn(
        'size-5 text-fd-muted-foreground',
        isLoading && 'animate-pulse duration-400',
        props.className,
      )}
    />
  );
}

export interface TagsListProps extends ComponentProps<'div'> {
  tag?: string;
  onTagChange: (tag: string | undefined) => void;
  allowClear?: boolean;
}

const itemVariants = cva(
  'rounded-md border px-2 py-0.5 text-xs font-medium text-fd-muted-foreground transition-colors',
  {
    variants: {
      active: {
        true: 'bg-fd-accent text-fd-accent-foreground',
      },
    },
  },
);

export function TagsList({
  tag,
  onTagChange,
  allowClear = false,
  ...props
}: TagsListProps) {
  return (
    <div
      {...props}
      className={cn('flex items-center gap-1 flex-wrap', props.className)}
    >
      <TagsListContext.Provider
        value={useMemo(
          () => ({
            value: tag,
            onValueChange: onTagChange,
            allowClear,
          }),
          [allowClear, onTagChange, tag],
        )}
      >
        {props.children}
      </TagsListContext.Provider>
    </div>
  );
}

export function TagsListItem({
  value,
  className,
  ...props
}: ComponentProps<'button'> & {
  value: string;
}) {
  const { onValueChange, value: selectedValue, allowClear } = useTagsList();
  const selected = value === selectedValue;

  return (
    <button
      type="button"
      data-active={selected}
      className={cn(itemVariants({ active: selected, className }))}
      onClick={() => {
        onValueChange(selected && allowClear ? undefined : value);
      }}
      tabIndex={-1}
      {...props}
    >
      {props.children}
    </button>
  );
}

export function useSearch() {
  const ctx = useContext(Context);
  if (!ctx) throw new Error('Missing <SearchDialog />');
  return ctx;
}

export function useTagsList() {
  const ctx = useContext(TagsListContext);
  if (!ctx) throw new Error('Missing <TagsList />');
  return ctx;
}

export function useSearchList() {
  const ctx = useContext(ListContext);
  if (!ctx) throw new Error('Missing <SearchDialogList />');
  return ctx;
}



================================================
FILE: packages/ui/src/components/layout/language-toggle.tsx
================================================
'use client';
import { type ButtonHTMLAttributes, type HTMLAttributes } from 'react';
import { useI18n } from '@/contexts/i18n';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import { cn } from '@/utils/cn';
import { buttonVariants } from '@/components/ui/button';

export type LanguageSelectProps = ButtonHTMLAttributes<HTMLButtonElement>;

export function LanguageToggle(props: LanguageSelectProps): React.ReactElement {
  const context = useI18n();
  if (!context.locales) throw new Error('Missing `<I18nProvider />`');

  return (
    <Popover>
      <PopoverTrigger
        aria-label={context.text.chooseLanguage}
        {...props}
        className={cn(
          buttonVariants({
            color: 'ghost',
            className: 'gap-1.5 p-1.5',
          }),
          props.className,
        )}
      >
        {props.children}
      </PopoverTrigger>
      <PopoverContent className="flex flex-col overflow-hidden p-0">
        <p className="mb-1 p-2 text-xs font-medium text-fd-muted-foreground">
          {context.text.chooseLanguage}
        </p>
        {context.locales.map((item) => (
          <button
            key={item.locale}
            type="button"
            className={cn(
              'p-2 text-start text-sm',
              item.locale === context.locale
                ? 'bg-fd-primary/10 font-medium text-fd-primary'
                : 'hover:bg-fd-accent hover:text-fd-accent-foreground',
            )}
            onClick={() => {
              context.onChange?.(item.locale);
            }}
          >
            {item.name}
          </button>
        ))}
      </PopoverContent>
    </Popover>
  );
}

export function LanguageToggleText(
  props: HTMLAttributes<HTMLSpanElement>,
): React.ReactElement {
  const context = useI18n();
  const text = context.locales?.find(
    (item) => item.locale === context.locale,
  )?.name;

  return <span {...props}>{text}</span>;
}



================================================
FILE: packages/ui/src/components/layout/root-toggle.tsx
================================================
'use client';
import { Check, ChevronsUpDown } from 'lucide-react';
import { type ComponentProps, type ReactNode, useMemo, useState } from 'react';
import Link from 'fumadocs-core/link';
import { usePathname } from 'fumadocs-core/framework';
import { cn } from '@/utils/cn';
import { isActive } from '@/utils/is-active';
import { useSidebar } from '@/contexts/sidebar';
import { Popover, PopoverContent, PopoverTrigger } from '../ui/popover';

export interface Option {
  /**
   * Redirect URL of the folder, usually the index page
   */
  url: string;

  icon?: ReactNode;
  title: ReactNode;
  description?: ReactNode;

  /**
   * Detect from a list of urls
   */
  urls?: Set<string>;

  props?: ComponentProps<'a'>;
}

export function RootToggle({
  options,
  placeholder,
  ...props
}: {
  placeholder?: ReactNode;
  options: Option[];
} & ComponentProps<'button'>) {
  const [open, setOpen] = useState(false);
  const { closeOnRedirect } = useSidebar();
  const pathname = usePathname();

  const selected = useMemo(() => {
    const lookup = pathname.endsWith('/') ? pathname.slice(0, -1) : pathname;

    return options.findLast((item) => {
      if (item.urls) return item.urls.has(lookup);

      return isActive(item.url, pathname, true);
    });
  }, [options, pathname]);

  const onClick = () => {
    closeOnRedirect.current = false;
    setOpen(false);
  };

  const item = selected ? (
    <>
      <div className="size-9 md:size-5">{selected.icon}</div>
      <div>
        <p className="text-sm font-medium">{selected.title}</p>
        <p className="text-[13px] text-fd-muted-foreground empty:hidden md:hidden">
          {selected.description}
        </p>
      </div>
    </>
  ) : (
    placeholder
  );

  return (
    <Popover open={open} onOpenChange={setOpen}>
      {item && (
        <PopoverTrigger
          {...props}
          className={cn(
            'flex items-center gap-2 rounded-lg p-2 border bg-fd-secondary/50 text-start text-fd-secondary-foreground transition-colors hover:bg-fd-accent data-[state=open]:bg-fd-accent data-[state=open]:text-fd-accent-foreground',
            props.className,
          )}
        >
          {item}
          <ChevronsUpDown className="ms-auto size-4 text-fd-muted-foreground" />
        </PopoverTrigger>
      )}
      <PopoverContent className="flex flex-col gap-1 min-w-(--radix-popover-trigger-width) overflow-hidden p-1">
        {options.map((item) => {
          const isActive = item === selected;

          return (
            <Link
              key={item.url}
              href={item.url}
              onClick={onClick}
              {...item.props}
              className={cn(
                'flex items-center gap-2 rounded-lg p-1.5 hover:bg-fd-accent hover:text-fd-accent-foreground',
                item.props?.className,
              )}
            >
              <div className="size-9 md:size-5 md:mt-1 md:mb-auto">
                {item.icon}
              </div>
              <div>
                <p className="text-sm font-medium">{item.title}</p>
                <p className="text-[13px] text-fd-muted-foreground empty:hidden">
                  {item.description}
                </p>
              </div>

              <Check
                className={cn(
                  'ms-auto size-3.5 text-fd-primary',
                  !isActive && 'invisible',
                )}
              />
            </Link>
          );
        })}
      </PopoverContent>
    </Popover>
  );
}



================================================
FILE: packages/ui/src/components/layout/search-toggle.tsx
================================================
'use client';
import type { ComponentProps } from 'react';
import { Search } from 'lucide-react';
import { useSearchContext } from '@/contexts/search';
import { useI18n } from '@/contexts/i18n';
import { cn } from '@/utils/cn';
import { type ButtonProps, buttonVariants } from '@/components/ui/button';

interface SearchToggleProps
  extends Omit<ComponentProps<'button'>, 'color'>,
    ButtonProps {
  hideIfDisabled?: boolean;
}

export function SearchToggle({
  hideIfDisabled,
  size = 'icon-sm',
  color = 'ghost',
  ...props
}: SearchToggleProps) {
  const { setOpenSearch, enabled } = useSearchContext();
  if (hideIfDisabled && !enabled) return null;

  return (
    <button
      type="button"
      className={cn(
        buttonVariants({
          size,
          color,
        }),
        props.className,
      )}
      data-search=""
      aria-label="Open Search"
      onClick={() => {
        setOpenSearch(true);
      }}
    >
      <Search />
    </button>
  );
}

export function LargeSearchToggle({
  hideIfDisabled,
  ...props
}: ComponentProps<'button'> & {
  hideIfDisabled?: boolean;
}) {
  const { enabled, hotKey, setOpenSearch } = useSearchContext();
  const { text } = useI18n();
  if (hideIfDisabled && !enabled) return null;

  return (
    <button
      type="button"
      data-search-full=""
      {...props}
      className={cn(
        'inline-flex items-center gap-2 rounded-lg border bg-fd-secondary/50 p-1.5 ps-2 text-sm text-fd-muted-foreground transition-colors hover:bg-fd-accent hover:text-fd-accent-foreground',
        props.className,
      )}
      onClick={() => {
        setOpenSearch(true);
      }}
    >
      <Search className="size-4" />
      {text.search}
      <div className="ms-auto inline-flex gap-0.5">
        {hotKey.map((k, i) => (
          <kbd key={i} className="rounded-md border bg-fd-background px-1.5">
            {k.display}
          </kbd>
        ))}
      </div>
    </button>
  );
}



================================================
FILE: packages/ui/src/components/layout/sidebar.tsx
================================================
'use client';
import { ChevronDown, ExternalLink } from 'lucide-react';
import { usePathname } from 'fumadocs-core/framework';
import {
  type ComponentProps,
  createContext,
  type FC,
  Fragment,
  type ReactNode,
  useContext,
  useMemo,
  useRef,
  useState,
} from 'react';
import Link, { type LinkProps } from 'fumadocs-core/link';
import { useOnChange } from 'fumadocs-core/utils/use-on-change';
import { cn } from '@/utils/cn';
import { ScrollArea, ScrollViewport } from '@/components/ui/scroll-area';
import { isActive } from '@/utils/is-active';
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from '@/components/ui/collapsible';
import { type ScrollAreaProps } from '@radix-ui/react-scroll-area';
import { useSidebar } from '@/contexts/sidebar';
import { cva } from 'class-variance-authority';
import type {
  CollapsibleContentProps,
  CollapsibleTriggerProps,
} from '@radix-ui/react-collapsible';
import type { PageTree } from 'fumadocs-core/server';
import { useTreeContext, useTreePath } from '@/contexts/tree';
import { useMediaQuery } from 'fumadocs-core/utils/use-media-query';
import { Presence } from '@radix-ui/react-presence';

export interface SidebarProps extends ComponentProps<'aside'> {
  /**
   * Open folders by default if their level is lower or equal to a specific level
   * (Starting from 1)
   *
   * @defaultValue 0
   */
  defaultOpenLevel?: number;

  /**
   * Prefetch links
   *
   * @defaultValue true
   */
  prefetch?: boolean;

  /**
   * Support collapsing the sidebar on desktop mode
   *
   * @defaultValue true
   */
  collapsible?: boolean;
}

interface InternalContext {
  defaultOpenLevel: number;
  prefetch: boolean;
  level: number;
}

const itemVariants = cva(
  'relative flex flex-row items-center gap-2 rounded-xl p-2 text-start text-fd-muted-foreground [overflow-wrap:anywhere] [&_svg]:size-4 [&_svg]:shrink-0',
  {
    variants: {
      active: {
        true: 'bg-fd-primary/10 text-fd-primary',
        false:
          'transition-colors hover:bg-fd-accent/50 hover:text-fd-accent-foreground/80 hover:transition-none',
      },
    },
  },
);

const Context = createContext<InternalContext | null>(null);
const FolderContext = createContext<{
  open: boolean;
  setOpen: React.Dispatch<React.SetStateAction<boolean>>;
} | null>(null);

export function Sidebar({
  defaultOpenLevel = 0,
  prefetch = true,
  collapsible = true,
  ...props
}: SidebarProps) {
  const { open, setOpen, collapsed } = useSidebar();
  const context = useMemo<InternalContext>(() => {
    return {
      defaultOpenLevel,
      prefetch,
      level: 1,
    };
  }, [defaultOpenLevel, prefetch]);

  const [hover, setHover] = useState(false);
  const timerRef = useRef(0);
  const closeTimeRef = useRef(0);
  // md
  const isMobile = useMediaQuery('(width < 768px)') ?? false;

  useOnChange(collapsed, () => {
    setHover(false);
    closeTimeRef.current = Date.now() + 150;
  });

  if (isMobile) {
    const state = open ? 'open' : 'closed';

    return (
      <Context.Provider value={context}>
        <Presence present={open}>
          <div
            data-state={state}
            className="fixed z-40 inset-0 backdrop-blur-xs data-[state=open]:animate-fd-fade-in data-[state=closed]:animate-fd-fade-out"
            onClick={() => setOpen(false)}
          />
        </Presence>
        <Presence present={open}>
          {({ present }) => (
            <aside
              id="nd-sidebar-mobile"
              {...props}
              data-state={state}
              className={cn(
                'fixed text-[15px] flex flex-col shadow-lg rounded-2xl border start-2 inset-y-2 w-[85%] max-w-[380px] z-40 bg-fd-background data-[state=open]:animate-fd-sidebar-in data-[state=closed]:animate-fd-sidebar-out',
                !present && 'invisible',
                props.className,
              )}
            >
              {props.children}
            </aside>
          )}
        </Presence>
      </Context.Provider>
    );
  }

  return (
    <aside
      id="nd-sidebar"
      {...props}
      data-collapsed={collapsed}
      className={cn(
        'fixed start-0 flex flex-col items-end top-(--fd-sidebar-top) bottom-(--fd-sidebar-margin) z-20 bg-fd-card text-sm border-e max-md:hidden *:w-(--fd-sidebar-width)',
        collapsed && [
          'rounded-xl border',
          hover
            ? 'z-50 translate-x-2 shadow-lg'
            : 'opacity-0 -translate-x-(--fd-sidebar-offset) rtl:translate-x-(--fd-sidebar-offset)',
        ],
        props.className,
      )}
      style={
        {
          transition: ['top', 'opacity', 'translate', 'width']
            .map((v) => `${v} ease 250ms`)
            .join(', '),
          ...props.style,
          '--fd-sidebar-offset': 'calc(100% - 16px)',
          '--fd-sidebar-margin': collapsed ? '0.5rem' : '0px',
          width: collapsed
            ? 'var(--fd-sidebar-width)'
            : 'calc(var(--fd-sidebar-width) + var(--fd-layout-offset))',
          '--fd-sidebar-top': `calc(var(--fd-banner-height) + var(--fd-nav-height) + var(--fd-sidebar-margin))`,
        } as object
      }
      onPointerEnter={(e) => {
        if (
          !collapsible ||
          !collapsed ||
          e.pointerType === 'touch' ||
          closeTimeRef.current > Date.now()
        )
          return;
        window.clearTimeout(timerRef.current);
        setHover(true);
      }}
      onPointerLeave={(e) => {
        if (!collapsible || !collapsed || e.pointerType === 'touch') return;
        window.clearTimeout(timerRef.current);

        timerRef.current = window.setTimeout(
          () => {
            setHover(false);
            closeTimeRef.current = Date.now() + 150;
          },
          Math.min(e.clientX, document.body.clientWidth - e.clientX) > 100
            ? 0
            : 500,
        );
      }}
    >
      <Context.Provider value={context}>{props.children}</Context.Provider>
    </aside>
  );
}

export function SidebarHeader(props: ComponentProps<'div'>) {
  return (
    <div
      {...props}
      className={cn('flex flex-col gap-3 p-4 pb-2', props.className)}
    >
      {props.children}
    </div>
  );
}

export function SidebarFooter(props: ComponentProps<'div'>) {
  return (
    <div
      {...props}
      className={cn('flex flex-col border-t px-4 py-3', props.className)}
    >
      {props.children}
    </div>
  );
}

export function SidebarViewport(props: ScrollAreaProps) {
  return (
    <ScrollArea {...props} className={cn('h-full', props.className)}>
      <ScrollViewport
        className="p-4"
        style={{
          maskImage:
            'linear-gradient(to bottom, transparent, white 12px, white calc(100% - 12px), transparent)',
        }}
      >
        {props.children}
      </ScrollViewport>
    </ScrollArea>
  );
}

export function SidebarSeparator(props: ComponentProps<'p'>) {
  const { level } = useInternalContext();

  return (
    <p
      {...props}
      className={cn(
        'inline-flex items-center gap-2 mb-1.5 px-2 empty:mb-0 [&_svg]:size-4 [&_svg]:shrink-0',
        props.className,
      )}
      style={{
        paddingInlineStart: getOffset(level),
        ...props.style,
      }}
    >
      {props.children}
    </p>
  );
}

export function SidebarItem({
  icon,
  ...props
}: LinkProps & {
  icon?: ReactNode;
}) {
  const pathname = usePathname();
  const active =
    props.href !== undefined && isActive(props.href, pathname, false);
  const { prefetch, level } = useInternalContext();

  return (
    <Link
      {...props}
      data-active={active}
      className={cn(itemVariants({ active }), props.className)}
      prefetch={prefetch}
      style={{
        paddingInlineStart: getOffset(level),
        ...props.style,
      }}
    >
      <Border level={level} active={active} />
      {icon ?? (props.external ? <ExternalLink /> : null)}
      {props.children}
    </Link>
  );
}

export function SidebarFolder({
  defaultOpen = false,
  ...props
}: ComponentProps<'div'> & {
  defaultOpen?: boolean;
}) {
  const [open, setOpen] = useState(defaultOpen);

  useOnChange(defaultOpen, (v) => {
    if (v) setOpen(v);
  });

  return (
    <Collapsible open={open} onOpenChange={setOpen} {...props}>
      <FolderContext.Provider
        value={useMemo(() => ({ open, setOpen }), [open])}
      >
        {props.children}
      </FolderContext.Provider>
    </Collapsible>
  );
}

export function SidebarFolderTrigger({
  className,
  ...props
}: CollapsibleTriggerProps) {
  const { level } = useInternalContext();
  const { open } = useFolderContext();

  return (
    <CollapsibleTrigger
      className={cn(itemVariants({ active: false }), 'w-full', className)}
      {...props}
      style={{
        paddingInlineStart: getOffset(level),
        ...props.style,
      }}
    >
      <Border level={level} />
      {props.children}
      <ChevronDown
        data-icon
        className={cn('ms-auto transition-transform', !open && '-rotate-90')}
      />
    </CollapsibleTrigger>
  );
}

export function SidebarFolderLink(props: LinkProps) {
  const { open, setOpen } = useFolderContext();
  const { prefetch, level } = useInternalContext();

  const pathname = usePathname();
  const active =
    props.href !== undefined && isActive(props.href, pathname, false);

  return (
    <Link
      {...props}
      data-active={active}
      className={cn(itemVariants({ active }), 'w-full', props.className)}
      onClick={(e) => {
        if (
          e.target instanceof HTMLElement &&
          e.target.hasAttribute('data-icon')
        ) {
          setOpen(!open);
          e.preventDefault();
        } else {
          setOpen(active ? !open : true);
        }
      }}
      prefetch={prefetch}
      style={{
        paddingInlineStart: getOffset(level),
        ...props.style,
      }}
    >
      <Border level={level} active={active} />
      {props.children}
      <ChevronDown
        data-icon
        className={cn('ms-auto transition-transform', !open && '-rotate-90')}
      />
    </Link>
  );
}

export function SidebarFolderContent(props: CollapsibleContentProps) {
  const ctx = useInternalContext();

  return (
    <CollapsibleContent {...props} className={cn('relative', props.className)}>
      <Context.Provider
        value={useMemo(
          () => ({
            ...ctx,
            level: ctx.level + 1,
          }),
          [ctx],
        )}
      >
        {ctx.level === 1 && (
          <div className="absolute w-px inset-y-1 bg-fd-border start-2.5" />
        )}
        {props.children}
      </Context.Provider>
    </CollapsibleContent>
  );
}

export function SidebarCollapseTrigger(props: ComponentProps<'button'>) {
  const { collapsed, setCollapsed } = useSidebar();

  return (
    <button
      type="button"
      aria-label="Collapse Sidebar"
      data-collapsed={collapsed}
      {...props}
      onClick={() => {
        setCollapsed((prev) => !prev);
      }}
    >
      {props.children}
    </button>
  );
}

function useFolderContext() {
  const ctx = useContext(FolderContext);

  if (!ctx) throw new Error('Missing sidebar folder');
  return ctx;
}

function useInternalContext() {
  const ctx = useContext(Context);
  if (!ctx) throw new Error('<Sidebar /> component required.');

  return ctx;
}

export interface SidebarComponents {
  Item: FC<{ item: PageTree.Item }>;
  Folder: FC<{ item: PageTree.Folder; level: number; children: ReactNode }>;
  Separator: FC<{ item: PageTree.Separator }>;
}

/**
 * Render sidebar items from page tree
 */
export function SidebarPageTree(props: {
  components?: Partial<SidebarComponents>;
}) {
  const { root } = useTreeContext();

  return useMemo(() => {
    const { Separator, Item, Folder } = props.components ?? {};

    function renderSidebarList(
      items: PageTree.Node[],
      level: number,
    ): ReactNode[] {
      return items.map((item, i) => {
        if (item.type === 'separator') {
          if (Separator) return <Separator key={i} item={item} />;
          return (
            <SidebarSeparator key={i} className={cn(i !== 0 && 'mt-6')}>
              {item.icon}
              {item.name}
            </SidebarSeparator>
          );
        }

        if (item.type === 'folder') {
          const children = renderSidebarList(item.children, level + 1);

          if (Folder)
            return (
              <Folder key={i} item={item} level={level}>
                {children}
              </Folder>
            );
          return (
            <PageTreeFolder key={i} item={item}>
              {children}
            </PageTreeFolder>
          );
        }

        if (Item) return <Item key={item.url} item={item} />;
        return (
          <SidebarItem
            key={item.url}
            href={item.url}
            external={item.external}
            icon={item.icon}
          >
            {item.name}
          </SidebarItem>
        );
      });
    }

    return (
      <Fragment key={root.$id}>{renderSidebarList(root.children, 1)}</Fragment>
    );
  }, [props.components, root]);
}

function PageTreeFolder({
  item,
  ...props
}: {
  item: PageTree.Folder;
  children: ReactNode;
}) {
  const { defaultOpenLevel, level } = useInternalContext();
  const path = useTreePath();

  return (
    <SidebarFolder
      defaultOpen={
        (item.defaultOpen ?? defaultOpenLevel >= level) || path.includes(item)
      }
    >
      {item.index ? (
        <SidebarFolderLink
          href={item.index.url}
          external={item.index.external}
          {...props}
        >
          {item.icon}
          {item.name}
        </SidebarFolderLink>
      ) : (
        <SidebarFolderTrigger {...props}>
          {item.icon}
          {item.name}
        </SidebarFolderTrigger>
      )}
      <SidebarFolderContent>{props.children}</SidebarFolderContent>
    </SidebarFolder>
  );
}

function getOffset(level: number) {
  return `calc(var(--spacing) * ${level > 1 ? level * 3 : 2})`;
}

function Border({ level, active }: { level: number; active?: boolean }) {
  if (level <= 1) return null;

  return (
    <div
      className={cn(
        'absolute w-px inset-y-3 z-2 start-2.5 md:inset-y-2',
        active && 'bg-fd-primary',
      )}
    />
  );
}



================================================
FILE: packages/ui/src/components/layout/theme-toggle.tsx
================================================
'use client';
import { cva } from 'class-variance-authority';
import { Moon, Sun, Airplay } from 'lucide-react';
import { useTheme } from 'next-themes';
import { type HTMLAttributes, useLayoutEffect, useState } from 'react';
import { cn } from '@/utils/cn';

const itemVariants = cva(
  'size-6.5 rounded-full p-1.5 text-fd-muted-foreground',
  {
    variants: {
      active: {
        true: 'bg-fd-accent text-fd-accent-foreground',
        false: 'text-fd-muted-foreground',
      },
    },
  },
);

const full = [
  ['light', Sun] as const,
  ['dark', Moon] as const,
  ['system', Airplay] as const,
];

export function ThemeToggle({
  className,
  mode = 'light-dark',
  ...props
}: HTMLAttributes<HTMLElement> & {
  mode?: 'light-dark' | 'light-dark-system';
}) {
  const { setTheme, theme, resolvedTheme } = useTheme();
  const [mounted, setMounted] = useState(false);

  useLayoutEffect(() => {
    setMounted(true);
  }, []);

  const container = cn(
    'inline-flex items-center rounded-full border p-1',
    className,
  );

  if (mode === 'light-dark') {
    const value = mounted ? resolvedTheme : null;

    return (
      <button
        className={container}
        aria-label={`Toggle Theme`}
        onClick={() => setTheme(value === 'light' ? 'dark' : 'light')}
        data-theme-toggle=""
        {...props}
      >
        {full.map(([key, Icon]) => {
          if (key === 'system') return;

          return (
            <Icon
              key={key}
              fill="currentColor"
              className={cn(itemVariants({ active: value === key }))}
            />
          );
        })}
      </button>
    );
  }

  const value = mounted ? theme : null;

  return (
    <div className={container} data-theme-toggle="" {...props}>
      {full.map(([key, Icon]) => (
        <button
          key={key}
          aria-label={key}
          className={cn(itemVariants({ active: value === key }))}
          onClick={() => setTheme(key)}
        >
          <Icon className="size-full" fill="currentColor" />
        </button>
      ))}
    </div>
  );
}



================================================
FILE: packages/ui/src/components/layout/toc-clerk.tsx
================================================
'use client';
import type { TOCItemType } from 'fumadocs-core/server';
import * as Primitive from 'fumadocs-core/toc';
import { type ComponentProps, useEffect, useRef, useState } from 'react';
import { cn } from '@/utils/cn';
import { TocThumb } from '@/components/layout/toc-thumb';
import { useTOCItems } from '@/components/layout/toc';
import { mergeRefs } from '@/utils/merge-refs';
import { useI18n } from '@/contexts/i18n';

export default function ClerkTOCItems({
  ref,
  className,
  ...props
}: ComponentProps<'div'>) {
  const containerRef = useRef<HTMLDivElement>(null);
  const items = useTOCItems();
  const { text } = useI18n();

  const [svg, setSvg] = useState<{
    path: string;
    width: number;
    height: number;
  }>();

  useEffect(() => {
    if (!containerRef.current) return;
    const container = containerRef.current;

    function onResize(): void {
      if (container.clientHeight === 0) return;
      let w = 0,
        h = 0;
      const d: string[] = [];
      for (let i = 0; i < items.length; i++) {
        const element: HTMLElement | null = container.querySelector(
          `a[href="#${items[i].url.slice(1)}"]`,
        );
        if (!element) continue;

        const styles = getComputedStyle(element);
        const offset = getLineOffset(items[i].depth) + 1,
          top = element.offsetTop + parseFloat(styles.paddingTop),
          bottom =
            element.offsetTop +
            element.clientHeight -
            parseFloat(styles.paddingBottom);

        w = Math.max(offset, w);
        h = Math.max(h, bottom);

        d.push(`${i === 0 ? 'M' : 'L'}${offset} ${top}`);
        d.push(`L${offset} ${bottom}`);
      }

      setSvg({
        path: d.join(' '),
        width: w + 1,
        height: h,
      });
    }

    const observer = new ResizeObserver(onResize);
    onResize();

    observer.observe(container);
    return () => {
      observer.disconnect();
    };
  }, [items]);

  if (items.length === 0)
    return (
      <div className="rounded-lg border bg-fd-card p-3 text-xs text-fd-muted-foreground">
        {text.tocNoHeadings}
      </div>
    );

  return (
    <>
      {svg ? (
        <div
          className="absolute start-0 top-0 rtl:-scale-x-100"
          style={{
            width: svg.width,
            height: svg.height,
            maskImage: `url("data:image/svg+xml,${
              // Inline SVG
              encodeURIComponent(
                `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${svg.width} ${svg.height}"><path d="${svg.path}" stroke="black" stroke-width="1" fill="none" /></svg>`,
              )
            }")`,
          }}
        >
          <TocThumb
            containerRef={containerRef}
            className="mt-(--fd-top) h-(--fd-height) bg-fd-primary transition-all"
          />
        </div>
      ) : null}
      <div
        ref={mergeRefs(containerRef, ref)}
        className={cn('flex flex-col', className)}
        {...props}
      >
        {items.map((item, i) => (
          <TOCItem
            key={item.url}
            item={item}
            upper={items[i - 1]?.depth}
            lower={items[i + 1]?.depth}
          />
        ))}
      </div>
    </>
  );
}

function getItemOffset(depth: number): number {
  if (depth <= 2) return 14;
  if (depth === 3) return 26;
  return 36;
}

function getLineOffset(depth: number): number {
  return depth >= 3 ? 10 : 0;
}

function TOCItem({
  item,
  upper = item.depth,
  lower = item.depth,
}: {
  item: TOCItemType;
  upper?: number;
  lower?: number;
}) {
  const offset = getLineOffset(item.depth),
    upperOffset = getLineOffset(upper),
    lowerOffset = getLineOffset(lower);

  return (
    <Primitive.TOCItem
      href={item.url}
      style={{
        paddingInlineStart: getItemOffset(item.depth),
      }}
      className="prose relative py-1.5 text-sm text-fd-muted-foreground transition-colors [overflow-wrap:anywhere] first:pt-0 last:pb-0 data-[active=true]:text-fd-primary"
    >
      {offset !== upperOffset ? (
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 16 16"
          className="absolute -top-1.5 start-0 size-4 rtl:-scale-x-100"
        >
          <line
            x1={upperOffset}
            y1="0"
            x2={offset}
            y2="12"
            className="stroke-fd-foreground/10"
            strokeWidth="1"
          />
        </svg>
      ) : null}
      <div
        className={cn(
          'absolute inset-y-0 w-px bg-fd-foreground/10',
          offset !== upperOffset && 'top-1.5',
          offset !== lowerOffset && 'bottom-1.5',
        )}
        style={{
          insetInlineStart: offset,
        }}
      />
      {item.title}
    </Primitive.TOCItem>
  );
}



================================================
FILE: packages/ui/src/components/layout/toc-thumb.tsx
================================================
import { type HTMLAttributes, type RefObject, useEffect, useRef } from 'react';
import * as Primitive from 'fumadocs-core/toc';
import { useOnChange } from 'fumadocs-core/utils/use-on-change';
import { useEffectEvent } from 'fumadocs-core/utils/use-effect-event';

export type TOCThumb = [top: number, height: number];

function calc(container: HTMLElement, active: string[]): TOCThumb {
  if (active.length === 0 || container.clientHeight === 0) {
    return [0, 0];
  }

  let upper = Number.MAX_VALUE,
    lower = 0;

  for (const item of active) {
    const element = container.querySelector<HTMLElement>(`a[href="#${item}"]`);
    if (!element) continue;

    const styles = getComputedStyle(element);
    upper = Math.min(upper, element.offsetTop + parseFloat(styles.paddingTop));
    lower = Math.max(
      lower,
      element.offsetTop +
        element.clientHeight -
        parseFloat(styles.paddingBottom),
    );
  }

  return [upper, lower - upper];
}

function update(element: HTMLElement, info: TOCThumb): void {
  element.style.setProperty('--fd-top', `${info[0]}px`);
  element.style.setProperty('--fd-height', `${info[1]}px`);
}

export function TocThumb({
  containerRef,
  ...props
}: HTMLAttributes<HTMLDivElement> & {
  containerRef: RefObject<HTMLElement | null>;
}) {
  const active = Primitive.useActiveAnchors();
  const thumbRef = useRef<HTMLDivElement>(null);

  const onResize = useEffectEvent(() => {
    if (!containerRef.current || !thumbRef.current) return;

    update(thumbRef.current, calc(containerRef.current, active));
  });

  useEffect(() => {
    if (!containerRef.current) return;
    const container = containerRef.current;

    onResize();
    const observer = new ResizeObserver(onResize);
    observer.observe(container);

    return () => {
      observer.disconnect();
    };
  }, [containerRef, onResize]);

  useOnChange(active, () => {
    if (!containerRef.current || !thumbRef.current) return;

    update(thumbRef.current, calc(containerRef.current, active));
  });

  return <div ref={thumbRef} role="none" {...props} />;
}



================================================
FILE: packages/ui/src/components/layout/toc.tsx
================================================
'use client';
import type { TOCItemType } from 'fumadocs-core/server';
import * as Primitive from 'fumadocs-core/toc';
import { type ComponentProps, createContext, useContext, useRef } from 'react';
import { cn } from '@/utils/cn';
import { useI18n } from '@/contexts/i18n';
import { TocThumb } from '@/components/layout/toc-thumb';
import { mergeRefs } from '@/utils/merge-refs';

const TOCContext = createContext<TOCItemType[]>([]);

export function useTOCItems(): TOCItemType[] {
  return useContext(TOCContext);
}

export function TOCProvider({
  toc,
  children,
  ...props
}: ComponentProps<typeof Primitive.AnchorProvider>) {
  return (
    <TOCContext value={toc}>
      <Primitive.AnchorProvider toc={toc} {...props}>
        {children}
      </Primitive.AnchorProvider>
    </TOCContext>
  );
}

export function TOCScrollArea({
  ref,
  className,
  ...props
}: ComponentProps<'div'>) {
  const viewRef = useRef<HTMLDivElement>(null);

  return (
    <div
      ref={mergeRefs(viewRef, ref)}
      className={cn(
        'relative min-h-0 text-sm ms-px overflow-auto [scrollbar-width:none] [mask-image:linear-gradient(to_bottom,transparent,white_16px,white_calc(100%-16px),transparent)] py-3',
        className,
      )}
      {...props}
    >
      <Primitive.ScrollProvider containerRef={viewRef}>
        {props.children}
      </Primitive.ScrollProvider>
    </div>
  );
}

export function TOCItems({ ref, className, ...props }: ComponentProps<'div'>) {
  const containerRef = useRef<HTMLDivElement>(null);
  const items = useTOCItems();
  const { text } = useI18n();

  if (items.length === 0)
    return (
      <div className="rounded-lg border bg-fd-card p-3 text-xs text-fd-muted-foreground">
        {text.tocNoHeadings}
      </div>
    );

  return (
    <>
      <TocThumb
        containerRef={containerRef}
        className="absolute top-(--fd-top) h-(--fd-height) w-px bg-fd-primary transition-all"
      />
      <div
        ref={mergeRefs(ref, containerRef)}
        className={cn(
          'flex flex-col border-s border-fd-foreground/10',
          className,
        )}
        {...props}
      >
        {items.map((item) => (
          <TOCItem key={item.url} item={item} />
        ))}
      </div>
    </>
  );
}

function TOCItem({ item }: { item: TOCItemType }) {
  return (
    <Primitive.TOCItem
      href={item.url}
      className={cn(
        'prose py-1.5 text-sm text-fd-muted-foreground transition-colors [overflow-wrap:anywhere] first:pt-0 last:pb-0 data-[active=true]:text-fd-primary',
        item.depth <= 2 && 'ps-3',
        item.depth === 3 && 'ps-6',
        item.depth >= 4 && 'ps-8',
      )}
    >
      {item.title}
    </Primitive.TOCItem>
  );
}



================================================
FILE: packages/ui/src/components/ui/button.tsx
================================================
import { cva, type VariantProps } from 'class-variance-authority';

export const buttonVariants = cva(
  'inline-flex items-center justify-center rounded-md p-2 text-sm font-medium transition-colors duration-100 disabled:pointer-events-none disabled:opacity-50 focus-visible:outline-none',
  {
    variants: {
      color: {
        primary:
          'bg-fd-primary text-fd-primary-foreground hover:bg-fd-primary/80',
        outline: 'border hover:bg-fd-accent hover:text-fd-accent-foreground',
        ghost: 'hover:bg-fd-accent hover:text-fd-accent-foreground',
        secondary:
          'border bg-fd-secondary text-fd-secondary-foreground hover:bg-fd-accent hover:text-fd-accent-foreground',
      },
      size: {
        sm: 'gap-1 px-2 py-1.5 text-xs',
        icon: 'p-1.5 [&_svg]:size-5',
        'icon-sm': 'p-1.5 [&_svg]:size-4.5',
        'icon-xs': 'p-1 [&_svg]:size-4',
      },
    },
  },
);

export type ButtonProps = VariantProps<typeof buttonVariants>;



================================================
FILE: packages/ui/src/components/ui/collapsible.tsx
================================================
'use client';
import * as CollapsiblePrimitive from '@radix-ui/react-collapsible';
import { forwardRef, useEffect, useState } from 'react';
import { cn } from '@/utils/cn';

const Collapsible = CollapsiblePrimitive.Root;

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger;

const CollapsibleContent = forwardRef<
  HTMLDivElement,
  React.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.CollapsibleContent>
>(({ children, ...props }, ref) => {
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  return (
    <CollapsiblePrimitive.CollapsibleContent
      ref={ref}
      {...props}
      className={cn(
        'overflow-hidden',
        mounted &&
          'data-[state=closed]:animate-fd-collapsible-up data-[state=open]:animate-fd-collapsible-down',
        props.className,
      )}
    >
      {children}
    </CollapsiblePrimitive.CollapsibleContent>
  );
});

CollapsibleContent.displayName =
  CollapsiblePrimitive.CollapsibleContent.displayName;

export { Collapsible, CollapsibleTrigger, CollapsibleContent };



================================================
FILE: packages/ui/src/components/ui/navigation-menu.tsx
================================================
'use client';
import * as React from 'react';
import * as Primitive from '@radix-ui/react-navigation-menu';
import { cn } from '@/utils/cn';

const NavigationMenu = Primitive.Root;

const NavigationMenuList = Primitive.List;

const NavigationMenuItem = React.forwardRef<
  React.ComponentRef<typeof Primitive.NavigationMenuItem>,
  React.ComponentPropsWithoutRef<typeof Primitive.NavigationMenuItem>
>(({ className, children, ...props }, ref) => (
  <Primitive.NavigationMenuItem
    ref={ref}
    className={cn('list-none', className)}
    {...props}
  >
    {children}
  </Primitive.NavigationMenuItem>
));

NavigationMenuItem.displayName = Primitive.NavigationMenuItem.displayName;

const NavigationMenuTrigger = React.forwardRef<
  React.ComponentRef<typeof Primitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof Primitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <Primitive.Trigger
    ref={ref}
    className={cn('data-[state=open]:bg-fd-accent/50', className)}
    {...props}
  >
    {children}
  </Primitive.Trigger>
));
NavigationMenuTrigger.displayName = Primitive.Trigger.displayName;

const NavigationMenuContent = React.forwardRef<
  React.ComponentRef<typeof Primitive.Content>,
  React.ComponentPropsWithoutRef<typeof Primitive.Content>
>(({ className, ...props }, ref) => (
  <Primitive.Content
    ref={ref}
    className={cn(
      'absolute inset-x-0 top-0 overflow-auto fd-scroll-container max-h-[80svh] data-[motion=from-end]:animate-fd-enterFromRight data-[motion=from-start]:animate-fd-enterFromLeft data-[motion=to-end]:animate-fd-exitToRight data-[motion=to-start]:animate-fd-exitToLeft',
      className,
    )}
    {...props}
  />
));
NavigationMenuContent.displayName = Primitive.Content.displayName;

const NavigationMenuLink = Primitive.Link;

const NavigationMenuViewport = React.forwardRef<
  React.ComponentRef<typeof Primitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof Primitive.Viewport>
>(({ className, ...props }, ref) => (
  <div ref={ref} className="flex w-full justify-center">
    <Primitive.Viewport
      {...props}
      className={cn(
        'relative h-(--radix-navigation-menu-viewport-height) w-full origin-[top_center] overflow-hidden transition-[width,height] duration-300 data-[state=closed]:animate-fd-nav-menu-out data-[state=open]:animate-fd-nav-menu-in',
        className,
      )}
    />
  </div>
));
NavigationMenuViewport.displayName = Primitive.Viewport.displayName;

export {
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuViewport,
};



================================================
FILE: packages/ui/src/components/ui/popover.tsx
================================================
'use client';
import * as PopoverPrimitive from '@radix-ui/react-popover';
import * as React from 'react';
import { cn } from '@/utils/cn';

const Popover = PopoverPrimitive.Root;

const PopoverTrigger = PopoverPrimitive.Trigger;

const PopoverContent = React.forwardRef<
  React.ComponentRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = 'center', sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      side="bottom"
      className={cn(
        'z-50 origin-(--radix-popover-content-transform-origin) min-w-[240px] max-w-[98vw] rounded-xl border bg-fd-popover/60 backdrop-blur-lg p-2 text-sm text-fd-popover-foreground shadow-lg focus-visible:outline-none data-[state=closed]:animate-fd-popover-out data-[state=open]:animate-fd-popover-in',
        className,
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
));
PopoverContent.displayName = PopoverPrimitive.Content.displayName;

const PopoverClose = PopoverPrimitive.PopoverClose;

export { Popover, PopoverTrigger, PopoverContent, PopoverClose };



================================================
FILE: packages/ui/src/components/ui/scroll-area.tsx
================================================
import * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area';
import * as React from 'react';
import { cn } from '@/utils/cn';

const ScrollArea = React.forwardRef<
  React.ComponentRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    type="scroll"
    className={cn('overflow-hidden', className)}
    {...props}
  >
    {children}
    <ScrollAreaPrimitive.Corner />
    <ScrollBar orientation="vertical" />
  </ScrollAreaPrimitive.Root>
));

ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;

const ScrollViewport = React.forwardRef<
  React.ComponentRef<typeof ScrollAreaPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Viewport>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Viewport
    ref={ref}
    className={cn('size-full rounded-[inherit]', className)}
    {...props}
  >
    {children}
  </ScrollAreaPrimitive.Viewport>
));

ScrollViewport.displayName = ScrollAreaPrimitive.Viewport.displayName;

const ScrollBar = React.forwardRef<
  React.ComponentRef<typeof ScrollAreaPrimitive.Scrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Scrollbar>
>(({ className, orientation = 'vertical', ...props }, ref) => (
  <ScrollAreaPrimitive.Scrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      'flex select-none data-[state=hidden]:animate-fd-fade-out',
      orientation === 'vertical' && 'h-full w-1.5',
      orientation === 'horizontal' && 'h-1.5 flex-col',
      className,
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-fd-border" />
  </ScrollAreaPrimitive.Scrollbar>
));
ScrollBar.displayName = ScrollAreaPrimitive.Scrollbar.displayName;

export { ScrollArea, ScrollBar, ScrollViewport };



================================================
FILE: packages/ui/src/contexts/i18n.tsx
================================================
'use client';
import { createContext, useContext } from 'react';

export interface Translations {
  search: string;
  searchNoResult: string;

  toc: string;
  tocNoHeadings: string;

  lastUpdate: string;
  chooseLanguage: string;
  nextPage: string;
  previousPage: string;
  chooseTheme: string;
  editOnGithub: string;
}

export interface LocaleItem {
  name: string;
  locale: string;
}

interface I18nContextType {
  locale?: string;
  onChange?: (v: string) => void;
  text: Translations;
  locales?: LocaleItem[];
}

export const defaultTranslations: Translations = {
  search: 'Search',
  searchNoResult: 'No results found',
  toc: 'On this page',
  tocNoHeadings: 'No Headings',
  lastUpdate: 'Last updated on',
  chooseLanguage: 'Choose a language',
  nextPage: 'Next Page',
  previousPage: 'Previous Page',
  chooseTheme: 'Theme',
  editOnGithub: 'Edit on GitHub',
};

export const I18nContext = createContext<I18nContextType>({
  text: defaultTranslations,
});

export function I18nLabel(props: { label: keyof Translations }): string {
  const { text } = useI18n();

  return text[props.label];
}

export function useI18n(): I18nContextType {
  return useContext(I18nContext);
}



================================================
FILE: packages/ui/src/contexts/layout.tsx
================================================
'use client';
import { type ReactNode, useEffect, useMemo, useState } from 'react';
import { createContext } from 'fumadocs-core/framework';

export interface PageStyles {
  tocNav?: string;
  toc?: string;
  page?: string;
  article?: string;
}

/**
 * applied styles to different layout components in `Page` from layouts
 */
const StylesContext = createContext<PageStyles>('StylesContext', {
  tocNav: 'xl:hidden',
  toc: 'max-xl:hidden',
});

export function usePageStyles() {
  return StylesContext.use();
}

export function StylesProvider({
  children,
  ...value
}: PageStyles & { children: ReactNode }) {
  return (
    <StylesContext.Provider value={value}>{children}</StylesContext.Provider>
  );
}

export interface NavProviderProps {
  /**
   * Use transparent background
   *
   * @defaultValue none
   */
  transparentMode?: 'always' | 'top' | 'none';
}

interface NavContextType {
  isTransparent: boolean;
}

const NavContext = createContext<NavContextType>('NavContext', {
  isTransparent: false,
});

export function NavProvider({
  transparentMode = 'none',
  children,
}: NavProviderProps & { children: ReactNode }) {
  const [transparent, setTransparent] = useState(transparentMode !== 'none');

  useEffect(() => {
    if (transparentMode !== 'top') return;

    const listener = () => {
      setTransparent(window.scrollY < 10);
    };

    listener();
    window.addEventListener('scroll', listener);
    return () => {
      window.removeEventListener('scroll', listener);
    };
  }, [transparentMode]);

  return (
    <NavContext.Provider
      value={useMemo(() => ({ isTransparent: transparent }), [transparent])}
    >
      {children}
    </NavContext.Provider>
  );
}

export function useNav(): NavContextType {
  return NavContext.use();
}



================================================
FILE: packages/ui/src/contexts/search.tsx
================================================
'use client';
import {
  type ComponentType,
  type ReactNode,
  useEffect,
  useMemo,
  useState,
} from 'react';
import { createContext } from 'fumadocs-core/framework';

interface HotKey {
  display: ReactNode;

  /**
   * Key code or a function determining whether the key is pressed.
   */
  key: string | ((e: KeyboardEvent) => boolean);
}

export interface SharedProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export type SearchLink = [name: string, href: string];

export interface TagItem {
  name: string;
  value: string;
}

export interface SearchProviderProps {
  /**
   * Preload search dialog before opening it
   *
   * @defaultValue `true`
   */
  preload?: boolean;

  /**
   * Custom links to be displayed if search is empty
   */
  links?: SearchLink[];

  /**
   * Hotkeys for triggering search dialog
   *
   * @defaultValue Meta/Ctrl + K
   */
  hotKey?: HotKey[];

  /**
   * Replace default search dialog, allowing you to use other solutions such as Algolia Search
   *
   * It receives the `open` and `onOpenChange` prop, can be lazy loaded with `next/dynamic`
   */
  SearchDialog: ComponentType<SharedProps>;

  /**
   * Additional props to the dialog
   */
  options?: Partial<SharedProps & Record<string, unknown>>;

  children?: ReactNode;
}

interface SearchContextType {
  enabled: boolean;
  hotKey: HotKey[];
  setOpenSearch: (value: boolean) => void;
}

const SearchContext = createContext<SearchContextType>('SearchContext', {
  enabled: false,
  hotKey: [],
  setOpenSearch: () => undefined,
});

export function useSearchContext(): SearchContextType {
  return SearchContext.use();
}

function MetaOrControl() {
  const [key, setKey] = useState('⌘');

  useEffect(() => {
    const isWindows = window.navigator.userAgent.includes('Windows');

    if (isWindows) setKey('Ctrl');
  }, []);

  return key;
}

export function SearchProvider({
  SearchDialog,
  children,
  preload = true,
  options,
  hotKey = [
    {
      key: (e) => e.metaKey || e.ctrlKey,
      display: <MetaOrControl />,
    },
    {
      key: 'k',
      display: 'K',
    },
  ],
  links,
}: SearchProviderProps) {
  const [isOpen, setIsOpen] = useState(preload ? false : undefined);

  useEffect(() => {
    const handler = (e: KeyboardEvent) => {
      if (
        hotKey.every((v) =>
          typeof v.key === 'string' ? e.key === v.key : v.key(e),
        )
      ) {
        setIsOpen(true);
        e.preventDefault();
      }
    };

    window.addEventListener('keydown', handler);
    return () => {
      window.removeEventListener('keydown', handler);
    };
  }, [hotKey]);

  return (
    <SearchContext.Provider
      value={useMemo(
        () => ({ enabled: true, hotKey, setOpenSearch: setIsOpen }),
        [hotKey],
      )}
    >
      {isOpen !== undefined && (
        <SearchDialog
          open={isOpen}
          onOpenChange={setIsOpen}
          // @ts-expect-error -- insert prop for official UIs
          links={links}
          {...options}
        />
      )}
      {children}
    </SearchContext.Provider>
  );
}

/**
 * Show children only when search is enabled via React Context
 */
export function SearchOnly({ children }: { children: ReactNode }) {
  const search = useSearchContext();

  if (search.enabled) return children;
}



================================================
FILE: packages/ui/src/contexts/sidebar.tsx
================================================
'use client';
import {
  type ReactNode,
  type RefObject,
  useMemo,
  useRef,
  useState,
} from 'react';
import { createContext, usePathname } from 'fumadocs-core/framework';
import { useOnChange } from 'fumadocs-core/utils/use-on-change';

interface SidebarContext {
  open: boolean;
  setOpen: React.Dispatch<React.SetStateAction<boolean>>;
  collapsed: boolean;
  setCollapsed: React.Dispatch<React.SetStateAction<boolean>>;

  /**
   * When set to false, don't close the sidebar when navigate to another page
   */
  closeOnRedirect: RefObject<boolean>;
}

const SidebarContext = createContext<SidebarContext>('SidebarContext');

export function useSidebar(): SidebarContext {
  return SidebarContext.use();
}

export function SidebarProvider({
  children,
}: {
  children: ReactNode;
}): ReactNode {
  const closeOnRedirect = useRef(true);
  const [open, setOpen] = useState(false);
  const [collapsed, setCollapsed] = useState(false);

  const pathname = usePathname();

  useOnChange(pathname, () => {
    if (closeOnRedirect.current) {
      setOpen(false);
    }
    closeOnRedirect.current = true;
  });

  return (
    <SidebarContext.Provider
      value={useMemo(
        () => ({
          open,
          setOpen,
          collapsed,
          setCollapsed,
          closeOnRedirect,
        }),
        [open, collapsed],
      )}
    >
      {children}
    </SidebarContext.Provider>
  );
}



================================================
FILE: packages/ui/src/contexts/tree.tsx
================================================
'use client';
import type { PageTree } from 'fumadocs-core/server';
import { createContext, usePathname } from 'fumadocs-core/framework';
import { type ReactNode, useMemo, useRef } from 'react';
import { searchPath } from 'fumadocs-core/breadcrumb';

type MakeRequired<O, K extends keyof O> = Omit<O, K> & Pick<Required<O>, K>;

interface TreeContextType {
  root: MakeRequired<PageTree.Root | PageTree.Folder, '$id'>;
}

const TreeContext = createContext<TreeContextType>('TreeContext');
const PathContext = createContext<PageTree.Node[]>('PathContext', []);

export function TreeContextProvider(props: {
  tree: PageTree.Root;
  children: ReactNode;
}) {
  const nextIdRef = useRef(0);
  const pathname = usePathname();

  // I found that object-typed props passed from a RSC will be re-constructed, hence breaking all hooks' dependencies
  // using the id here to make sure this never happens
  // eslint-disable-next-line react-hooks/exhaustive-deps
  const tree = useMemo(() => props.tree, [props.tree.$id ?? props.tree]);
  const path = useMemo(
    () => searchPath(tree.children, pathname) ?? [],
    [tree, pathname],
  );

  const root =
    path.findLast((item) => item.type === 'folder' && item.root) ?? tree;
  root.$id ??= String(nextIdRef.current++);

  return (
    <TreeContext.Provider
      value={useMemo(() => ({ root }) as TreeContextType, [root])}
    >
      <PathContext.Provider value={path}>{props.children}</PathContext.Provider>
    </TreeContext.Provider>
  );
}

export function useTreePath(): PageTree.Node[] {
  return PathContext.use();
}

export function useTreeContext(): TreeContextType {
  return TreeContext.use('You must wrap this component under <DocsLayout />');
}



================================================
FILE: packages/ui/src/layouts/docs-client.tsx
================================================
'use client';

import { Sidebar as SidebarIcon } from 'lucide-react';
import { type ComponentProps } from 'react';
import { cn } from '@/utils/cn';
import { buttonVariants } from '@/components/ui/button';
import { useSidebar } from '@/contexts/sidebar';
import { useNav } from '@/contexts/layout';
import { SidebarCollapseTrigger } from '@/components/layout/sidebar';
import { SearchToggle } from '@/components/layout/search-toggle';

export function Navbar(props: ComponentProps<'header'>) {
  const { isTransparent } = useNav();

  return (
    <header
      id="nd-subnav"
      {...props}
      className={cn(
        'fixed top-(--fd-banner-height) inset-x-0 z-30 flex items-center px-4 border-b transition-colors backdrop-blur-sm',
        !isTransparent && 'bg-fd-background/80',
        props.className,
      )}
    >
      {props.children}
    </header>
  );
}

export function LayoutBody(props: ComponentProps<'main'>) {
  const { collapsed } = useSidebar();

  return (
    <main
      id="nd-docs-layout"
      {...props}
      className={cn(
        'flex flex-1 flex-col transition-[margin]',
        props.className,
      )}
      style={{
        ...props.style,
        marginInlineStart: collapsed
          ? 'max(0px, min(calc(100vw - var(--fd-page-width)), var(--fd-sidebar-width)))'
          : 'var(--fd-sidebar-width)',
      }}
    >
      {props.children}
    </main>
  );
}

export function NavbarSidebarTrigger({
  className,
  ...props
}: ComponentProps<'button'>) {
  const { setOpen } = useSidebar();

  return (
    <button
      {...props}
      aria-label="Open Sidebar"
      className={cn(
        buttonVariants({
          color: 'ghost',
          size: 'icon-sm',
          className,
        }),
      )}
      onClick={() => setOpen((prev) => !prev)}
    >
      <SidebarIcon />
    </button>
  );
}

export function CollapsibleControl() {
  const { collapsed } = useSidebar();
  if (!collapsed) return;

  return (
    <div
      className="fixed flex shadow-lg animate-fd-fade-in rounded-xl p-0.5 border bg-fd-muted text-fd-muted-foreground z-10 xl:start-4 max-xl:end-4"
      style={{
        top: 'calc(var(--fd-banner-height) + var(--fd-tocnav-height) + var(--spacing) * 4)',
      }}
    >
      <SidebarCollapseTrigger
        className={cn(
          buttonVariants({
            color: 'ghost',
            size: 'icon-sm',
            className: 'rounded-lg',
          }),
        )}
      >
        <SidebarIcon />
      </SidebarCollapseTrigger>
      <SearchToggle className="rounded-lg" hideIfDisabled />
    </div>
  );
}



================================================
FILE: packages/ui/src/layouts/docs.tsx
================================================
import type { PageTree } from 'fumadocs-core/server';
import { type HTMLAttributes, type ReactNode, useMemo } from 'react';
import { Languages, Sidebar as SidebarIcon } from 'lucide-react';
import { cn } from '@/utils/cn';
import { buttonVariants } from '@/components/ui/button';
import {
  Sidebar,
  SidebarCollapseTrigger,
  SidebarFooter,
  SidebarHeader,
  SidebarPageTree,
  SidebarViewport,
} from '@/components/layout/sidebar';
import { BaseLinkItem, type LinkItemType } from '@/layouts/links';
import { RootToggle } from '@/components/layout/root-toggle';
import { type BaseLayoutProps, getLinks } from './shared';
import {
  LanguageToggle,
  LanguageToggleText,
} from '@/components/layout/language-toggle';
import {
  CollapsibleControl,
  LayoutBody,
  Navbar,
  NavbarSidebarTrigger,
} from '@/layouts/docs-client';
import { TreeContextProvider } from '@/contexts/tree';
import { ThemeToggle } from '@/components/layout/theme-toggle';
import {
  getSidebarTabsFromOptions,
  SidebarLinkItem,
  type SidebarOptions,
} from '@/layouts/docs/shared';
import { NavProvider } from '@/contexts/layout';
import Link from 'fumadocs-core/link';
import {
  LargeSearchToggle,
  SearchToggle,
} from '@/components/layout/search-toggle';
import { HideIfEmpty } from 'fumadocs-core/hide-if-empty';

export interface DocsLayoutProps extends BaseLayoutProps {
  tree: PageTree.Root;

  sidebar?: Partial<SidebarOptions> & {
    enabled?: boolean;
    component?: ReactNode;
  };

  /**
   * Props for the `div` container
   */
  containerProps?: HTMLAttributes<HTMLDivElement>;
}

export function DocsLayout({
  nav: { transparentMode, ...nav } = {},
  sidebar: {
    tabs: sidebarTabs,
    footer: sidebarFooter,
    banner: sidebarBanner,
    enabled: sidebarEnabled = true,
    collapsible: sidebarCollapsible = true,
    component: sidebarComponent,
    components: sidebarComponents,
    ...sidebarProps
  } = {},
  searchToggle = {},
  disableThemeSwitch = false,
  themeSwitch = { enabled: !disableThemeSwitch },
  i18n = false,
  children,
  ...props
}: DocsLayoutProps) {
  const tabs = useMemo(
    () => getSidebarTabsFromOptions(sidebarTabs, props.tree) ?? [],
    [sidebarTabs, props.tree],
  );
  const links = getLinks(props.links ?? [], props.githubUrl);

  const variables = cn(
    sidebarEnabled &&
      'md:[--fd-sidebar-width:268px] lg:[--fd-sidebar-width:286px]',
    'xl:[--fd-toc-width:286px]',
    !nav.component && nav.enabled !== false
      ? '[--fd-nav-height:56px] md:[--fd-nav-height:0px]'
      : undefined,
  );

  const sidebar = sidebarComponent ?? (
    <>
      {sidebarCollapsible ? <CollapsibleControl /> : null}
      <Sidebar {...sidebarProps} collapsible={sidebarCollapsible}>
        <HideIfEmpty>
          <SidebarHeader className="data-[empty=true]:hidden">
            <div className="flex max-md:hidden">
              <Link
                href={nav.url ?? '/'}
                className="inline-flex text-[15px] items-center gap-2.5 font-medium me-auto"
              >
                {nav.title}
              </Link>
              {nav.children}
              {sidebarCollapsible && (
                <SidebarCollapseTrigger
                  className={cn(
                    buttonVariants({
                      color: 'ghost',
                      size: 'icon-sm',
                      className:
                        'mb-auto text-fd-muted-foreground max-md:hidden',
                    }),
                  )}
                >
                  <SidebarIcon />
                </SidebarCollapseTrigger>
              )}
            </div>
            {searchToggle.enabled !== false &&
              (searchToggle.components?.lg ?? (
                <LargeSearchToggle hideIfDisabled className="max-md:hidden" />
              ))}
            {tabs.length > 0 && <RootToggle options={tabs} />}

            {sidebarBanner}
          </SidebarHeader>
        </HideIfEmpty>
        <SidebarViewport>
          {links
            .filter((v) => v.type !== 'icon')
            .map((item, i, list) => (
              <SidebarLinkItem
                key={i}
                item={item}
                className={cn(i === list.length - 1 && 'mb-4')}
              />
            ))}
          <SidebarPageTree components={sidebarComponents} />
        </SidebarViewport>
        <HideIfEmpty>
          <SidebarFooter className="data-[empty=true]:hidden">
            <div className="flex items-center justify-end empty:hidden">
              {links
                .filter((item) => item.type === 'icon')
                .map((item, i, arr) => (
                  <BaseLinkItem
                    key={i}
                    item={item}
                    className={cn(
                      buttonVariants({ size: 'icon', color: 'ghost' }),
                      'text-fd-muted-foreground md:[&_svg]:size-4.5',
                      i === arr.length - 1 && 'me-auto',
                    )}
                    aria-label={item.label}
                  >
                    {item.icon}
                  </BaseLinkItem>
                ))}
              {i18n ? (
                <LanguageToggle className="me-1.5">
                  <Languages className="size-4.5" />
                  <LanguageToggleText className="md:hidden" />
                </LanguageToggle>
              ) : null}
              {themeSwitch.enabled !== false &&
                (themeSwitch.component ?? (
                  <ThemeToggle className="p-0" mode={themeSwitch.mode} />
                ))}
            </div>
            {sidebarFooter}
          </SidebarFooter>
        </HideIfEmpty>
      </Sidebar>
    </>
  );

  return (
    <TreeContextProvider tree={props.tree}>
      <NavProvider transparentMode={transparentMode}>
        {nav.enabled !== false &&
          (nav.component ?? (
            <Navbar className="h-14 md:hidden">
              <Link
                href={nav.url ?? '/'}
                className="inline-flex items-center gap-2.5 font-semibold"
              >
                {nav.title}
              </Link>
              <div className="flex-1">{nav.children}</div>
              {searchToggle?.enabled !== false &&
                (searchToggle.components?.sm ?? (
                  <SearchToggle className="p-2" hideIfDisabled />
                ))}
              {sidebarEnabled && (
                <NavbarSidebarTrigger className="p-2 -me-1.5 md:hidden" />
              )}
            </Navbar>
          ))}
        <LayoutBody
          {...props.containerProps}
          className={cn(variables, props.containerProps?.className)}
        >
          {sidebarEnabled && sidebar}
          {children}
        </LayoutBody>
      </NavProvider>
    </TreeContextProvider>
  );
}

export { CollapsibleControl, Navbar, NavbarSidebarTrigger, type LinkItemType };



================================================
FILE: packages/ui/src/layouts/home.tsx
================================================
import { Fragment, type HTMLAttributes, useMemo } from 'react';
import { cn } from '@/utils/cn';
import { type BaseLayoutProps, getLinks, type NavOptions } from './shared';
import { NavProvider } from '@/contexts/layout';
import {
  Navbar,
  NavbarLink,
  NavbarMenu,
  NavbarMenuContent,
  NavbarMenuLink,
  NavbarMenuTrigger,
} from '@/layouts/home/navbar';
import { type LinkItemType } from '@/layouts/links';
import {
  LargeSearchToggle,
  SearchToggle,
} from '@/components/layout/search-toggle';
import { ThemeToggle } from '@/components/layout/theme-toggle';
import {
  LanguageToggle,
  LanguageToggleText,
} from '@/components/layout/language-toggle';
import { ChevronDown, Languages } from 'lucide-react';
import Link from 'fumadocs-core/link';
import {
  Menu,
  MenuContent,
  MenuLinkItem,
  MenuTrigger,
} from '@/layouts/home/menu';
import { buttonVariants } from '@/components/ui/button';

export interface HomeLayoutProps extends BaseLayoutProps {
  nav?: Partial<
    NavOptions & {
      /**
       * Open mobile menu when hovering the trigger
       */
      enableHoverToOpen?: boolean;
    }
  >;
}

export function HomeLayout(
  props: HomeLayoutProps & HTMLAttributes<HTMLElement>,
) {
  const {
    nav = {},
    links,
    githubUrl,
    i18n,
    disableThemeSwitch = false,
    themeSwitch = { enabled: !disableThemeSwitch },
    searchToggle,
    ...rest
  } = props;

  return (
    <NavProvider transparentMode={nav?.transparentMode}>
      <main
        id="nd-home-layout"
        {...rest}
        className={cn('flex flex-1 flex-col pt-14', rest.className)}
      >
        {nav.enabled !== false &&
          (nav.component ?? (
            <Header
              links={links}
              nav={nav}
              themeSwitch={themeSwitch}
              searchToggle={searchToggle}
              i18n={i18n}
              githubUrl={githubUrl}
            />
          ))}
        {props.children}
      </main>
    </NavProvider>
  );
}

export function Header({
  nav = {},
  i18n = false,
  links,
  githubUrl,
  themeSwitch = {},
  searchToggle = {},
}: HomeLayoutProps) {
  const finalLinks = useMemo(
    () => getLinks(links, githubUrl),
    [links, githubUrl],
  );

  const navItems = finalLinks.filter((item) =>
    ['nav', 'all'].includes(item.on ?? 'all'),
  );
  const menuItems = finalLinks.filter((item) =>
    ['menu', 'all'].includes(item.on ?? 'all'),
  );

  return (
    <Navbar>
      <Link
        href={nav.url ?? '/'}
        className="inline-flex items-center gap-2.5 font-semibold"
      >
        {nav.title}
      </Link>
      {nav.children}
      <ul className="flex flex-row items-center gap-2 px-6 max-sm:hidden">
        {navItems
          .filter((item) => !isSecondary(item))
          .map((item, i) => (
            <NavbarLinkItem key={i} item={item} className="text-sm" />
          ))}
      </ul>
      <div className="flex flex-row items-center justify-end gap-1.5 flex-1">
        {searchToggle.enabled !== false && (
          <>
            {searchToggle.components?.sm ?? (
              <SearchToggle className="p-2 lg:hidden" hideIfDisabled />
            )}
            {searchToggle.components?.lg ?? (
              <LargeSearchToggle
                className="w-full rounded-full ps-2.5 max-w-[240px] max-lg:hidden"
                hideIfDisabled
              />
            )}
          </>
        )}
        {themeSwitch.enabled !== false &&
          (themeSwitch.component ?? (
            <ThemeToggle className="max-lg:hidden" mode={themeSwitch?.mode} />
          ))}
        {i18n ? (
          <LanguageToggle className="max-lg:hidden">
            <Languages className="size-5" />
          </LanguageToggle>
        ) : null}
      </div>
      <ul className="flex flex-row items-center">
        {navItems.filter(isSecondary).map((item, i) => (
          <NavbarLinkItem key={i} item={item} className="max-lg:hidden" />
        ))}
        <Menu className="lg:hidden">
          <MenuTrigger
            aria-label="Toggle Menu"
            className={cn(
              buttonVariants({
                size: 'icon',
                color: 'ghost',
                className: 'group -me-1.5',
              }),
            )}
            enableHover={nav.enableHoverToOpen}
          >
            <ChevronDown className="!size-5.5 transition-transform duration-300 group-data-[state=open]:rotate-180" />
          </MenuTrigger>
          <MenuContent className="sm:flex-row sm:items-center sm:justify-end">
            {menuItems
              .filter((item) => !isSecondary(item))
              .map((item, i) => (
                <MenuLinkItem key={i} item={item} className="sm:hidden" />
              ))}
            <div className="-ms-1.5 flex flex-row items-center gap-1.5 max-sm:mt-2">
              {menuItems.filter(isSecondary).map((item, i) => (
                <MenuLinkItem key={i} item={item} className="-me-1.5" />
              ))}
              <div role="separator" className="flex-1" />
              {i18n ? (
                <LanguageToggle>
                  <Languages className="size-5" />
                  <LanguageToggleText />
                  <ChevronDown className="size-3 text-fd-muted-foreground" />
                </LanguageToggle>
              ) : null}
              {themeSwitch.enabled !== false &&
                (themeSwitch.component ?? (
                  <ThemeToggle mode={themeSwitch?.mode} />
                ))}
            </div>
          </MenuContent>
        </Menu>
      </ul>
    </Navbar>
  );
}

function NavbarLinkItem({
  item,
  ...props
}: {
  item: LinkItemType;
  className?: string;
}) {
  if (item.type === 'custom') return <div {...props}>{item.children}</div>;

  if (item.type === 'menu') {
    const children = item.items.map((child, j) => {
      if (child.type === 'custom')
        return <Fragment key={j}>{child.children}</Fragment>;

      const {
        banner = child.icon ? (
          <div className="w-fit rounded-md border bg-fd-muted p-1 [&_svg]:size-4">
            {child.icon}
          </div>
        ) : null,
        ...rest
      } = child.menu ?? {};

      return (
        <NavbarMenuLink
          key={j}
          href={child.url}
          external={child.external}
          {...rest}
        >
          {rest.children ?? (
            <>
              {banner}
              <p className="text-[15px] font-medium">{child.text}</p>
              <p className="text-sm text-fd-muted-foreground empty:hidden">
                {child.description}
              </p>
            </>
          )}
        </NavbarMenuLink>
      );
    });

    return (
      <NavbarMenu>
        <NavbarMenuTrigger {...props}>
          {item.url ? <Link href={item.url}>{item.text}</Link> : item.text}
        </NavbarMenuTrigger>
        <NavbarMenuContent>{children}</NavbarMenuContent>
      </NavbarMenu>
    );
  }

  return (
    <NavbarLink
      {...props}
      item={item}
      variant={item.type}
      aria-label={item.type === 'icon' ? item.label : undefined}
    >
      {item.type === 'icon' ? item.icon : item.text}
    </NavbarLink>
  );
}

function isSecondary(item: LinkItemType): boolean {
  return (
    ('secondary' in item && item.secondary === true) || item.type === 'icon'
  );
}



================================================
FILE: packages/ui/src/layouts/links.tsx
================================================
'use client';
import Link from 'fumadocs-core/link';
import { usePathname } from 'fumadocs-core/framework';
import {
  type AnchorHTMLAttributes,
  forwardRef,
  type HTMLAttributes,
  type ReactNode,
} from 'react';
import { isActive } from '@/utils/is-active';

interface BaseItem {
  /**
   * Restrict where the item is displayed
   *
   * @defaultValue 'all'
   */
  on?: 'menu' | 'nav' | 'all';
}

export interface BaseLinkType extends BaseItem {
  url: string;
  /**
   * When the item is marked as active
   *
   * @defaultValue 'url'
   */
  active?: 'url' | 'nested-url' | 'none';
  external?: boolean;
}

export interface MainItemType extends BaseLinkType {
  type?: 'main';
  icon?: ReactNode;
  text: ReactNode;
  description?: ReactNode;
}

export interface IconItemType extends BaseLinkType {
  type: 'icon';
  /**
   * `aria-label` of icon button
   */
  label?: string;
  icon: ReactNode;
  text: ReactNode;
  /**
   * @defaultValue true
   */
  secondary?: boolean;
}

interface ButtonItem extends BaseLinkType {
  type: 'button';
  icon?: ReactNode;
  text: ReactNode;
  /**
   * @defaultValue false
   */
  secondary?: boolean;
}

export interface MenuItemType extends BaseItem {
  type: 'menu';
  icon?: ReactNode;
  text: ReactNode;

  url?: string;
  items: (
    | (MainItemType & {
        /**
         * Options when displayed on navigation menu
         */
        menu?: HTMLAttributes<HTMLElement> & {
          banner?: ReactNode;
        };
      })
    | CustomItem
  )[];

  /**
   * @defaultValue false
   */
  secondary?: boolean;
}

interface CustomItem extends BaseItem {
  type: 'custom';
  /**
   * @defaultValue false
   */
  secondary?: boolean;
  children: ReactNode;
}

export type LinkItemType =
  | MainItemType
  | IconItemType
  | ButtonItem
  | MenuItemType
  | CustomItem;

export const BaseLinkItem = forwardRef<
  HTMLAnchorElement,
  Omit<AnchorHTMLAttributes<HTMLAnchorElement>, 'href'> & { item: BaseLinkType }
>(({ item, ...props }, ref) => {
  const pathname = usePathname();
  const activeType = item.active ?? 'url';
  const active =
    activeType !== 'none' &&
    isActive(item.url, pathname, activeType === 'nested-url');

  return (
    <Link
      ref={ref}
      href={item.url}
      external={item.external}
      {...props}
      data-active={active}
    >
      {props.children}
    </Link>
  );
});

BaseLinkItem.displayName = 'BaseLinkItem';



================================================
FILE: packages/ui/src/layouts/notebook-client.tsx
================================================
'use client';
import { cn } from '@/utils/cn';
import { type ComponentProps, useMemo } from 'react';
import { useSidebar } from '@/contexts/sidebar';
import { useNav } from '@/contexts/layout';
import { buttonVariants } from '@/components/ui/button';
import { Sidebar as SidebarIcon } from 'lucide-react';
import Link from 'fumadocs-core/link';
import { usePathname } from 'fumadocs-core/framework';
import { isActive } from '@/utils/is-active';
import type { Option } from '@/components/layout/root-toggle';

export function Navbar({
  mode,
  ...props
}: ComponentProps<'header'> & { mode: 'top' | 'auto' }) {
  const { open, collapsed } = useSidebar();
  const { isTransparent } = useNav();

  return (
    <header
      id="nd-subnav"
      {...props}
      className={cn(
        'fixed flex flex-col inset-x-0 top-(--fd-banner-height) z-10 px-(--fd-layout-offset) h-(--fd-nav-height) backdrop-blur-sm transition-colors',
        (!isTransparent || open) && 'bg-fd-background/80',
        mode === 'auto' &&
          !collapsed &&
          'ps-[calc(var(--fd-layout-offset)+var(--fd-sidebar-width))]',
        props.className,
      )}
    >
      {props.children}
    </header>
  );
}

export function LayoutBody(props: ComponentProps<'main'>) {
  const { collapsed } = useSidebar();

  return (
    <main
      id="nd-docs-layout"
      {...props}
      className={cn(
        'flex flex-1 flex-col transition-[margin] fd-notebook-layout',
        props.className,
      )}
      style={{
        ...props.style,
        marginInlineStart: collapsed
          ? 'max(0px, min(calc(100vw - var(--fd-page-width)), var(--fd-sidebar-width)))'
          : 'var(--fd-sidebar-width)',
      }}
    >
      {props.children}
    </main>
  );
}

export function NavbarSidebarTrigger({
  className,
  ...props
}: ComponentProps<'button'>) {
  const { setOpen } = useSidebar();

  return (
    <button
      {...props}
      className={cn(
        buttonVariants({
          color: 'ghost',
          size: 'icon-sm',
          className,
        }),
      )}
      onClick={() => setOpen((prev) => !prev)}
    >
      <SidebarIcon />
    </button>
  );
}

export function LayoutTabs({
  options,
  ...props
}: ComponentProps<'div'> & {
  options: Option[];
}) {
  const pathname = usePathname();
  const selected = useMemo(() => {
    const url = pathname.endsWith('/') ? pathname.slice(0, -1) : pathname;

    return options.findLast((option) => {
      if (option.urls) {
        return option.urls.has(url);
      }

      return isActive(option.url, pathname, true);
    });
  }, [options, pathname]);

  return (
    <div
      {...props}
      className={cn(
        'flex flex-row items-center gap-2 overflow-auto',
        props.className,
      )}
    >
      {options.map((option) => (
        <LayoutTab
          key={option.url}
          selected={selected === option}
          option={option}
        />
      ))}
    </div>
  );
}

function LayoutTab({
  option,
  selected = false,
}: {
  option: Option;
  selected?: boolean;
}) {
  return (
    <Link
      className={cn(
        'inline-flex rounded-full items-center px-2 py-1.5 font-medium gap-2 text-fd-muted-foreground text-sm text-nowrap',
        selected && 'bg-fd-primary/10 text-fd-primary',
      )}
      href={option.url}
    >
      {option.title}
    </Link>
  );
}



================================================
FILE: packages/ui/src/layouts/notebook.tsx
================================================
import { Fragment, type HTMLAttributes, useMemo } from 'react';
import { type BaseLayoutProps, getLinks } from '@/layouts/shared';
import {
  Sidebar,
  SidebarCollapseTrigger,
  SidebarFooter,
  SidebarHeader,
  SidebarPageTree,
  SidebarViewport,
} from '@/components/layout/sidebar';
import { TreeContextProvider } from '@/contexts/tree';
import { cn } from '@/utils/cn';
import { buttonVariants } from '@/components/ui/button';
import { ChevronDown, Languages, Sidebar as SidebarIcon } from 'lucide-react';
import { BaseLinkItem, type LinkItemType } from '@/layouts/links';
import { LanguageToggle } from '@/components/layout/language-toggle';
import { ThemeToggle } from '@/components/layout/theme-toggle';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import {
  getSidebarTabsFromOptions,
  SidebarLinkItem,
  type SidebarOptions,
} from '@/layouts/docs/shared';
import type { PageTree } from 'fumadocs-core/server';
import {
  LayoutBody,
  LayoutTabs,
  Navbar,
  NavbarSidebarTrigger,
} from './notebook-client';
import { NavProvider } from '@/contexts/layout';
import { type Option, RootToggle } from '@/components/layout/root-toggle';
import Link from 'fumadocs-core/link';
import {
  LargeSearchToggle,
  SearchToggle,
} from '@/components/layout/search-toggle';
import { HideIfEmpty } from 'fumadocs-core/hide-if-empty';

export interface DocsLayoutProps extends BaseLayoutProps {
  tree: PageTree.Root;
  tabMode?: 'sidebar' | 'navbar';

  nav?: BaseLayoutProps['nav'] & {
    mode?: 'top' | 'auto';
  };

  sidebar?: Partial<SidebarOptions>;

  containerProps?: HTMLAttributes<HTMLDivElement>;
}

export function DocsLayout(props: DocsLayoutProps) {
  const {
    tabMode = 'sidebar',
    nav: { transparentMode, ...nav } = {},
    sidebar: {
      tabs: tabOptions,
      banner: sidebarBanner,
      footer: sidebarFooter,
      components: sidebarComponents,
      ...sidebar
    } = {},
    i18n = false,
    disableThemeSwitch = false,
    themeSwitch = { enabled: !disableThemeSwitch },
  } = props;

  const navMode = nav.mode ?? 'auto';
  const links = getLinks(props.links ?? [], props.githubUrl);
  const tabs = useMemo(
    () => getSidebarTabsFromOptions(tabOptions, props.tree) ?? [],
    [tabOptions, props.tree],
  );

  const variables = cn(
    '[--fd-nav-height:56px] md:[--fd-sidebar-width:286px] md:[--fd-nav-height:64px] xl:[--fd-toc-width:286px]',
    tabs.length > 0 && tabMode === 'navbar' && 'lg:[--fd-nav-height:104px]',
  );

  const sidebarHeader = (
    <div className="flex justify-between max-md:hidden">
      <Link
        href={nav.url ?? '/'}
        className="inline-flex items-center gap-2.5 font-medium"
      >
        {nav.title}
      </Link>
      {(sidebar.collapsible ?? true) && (
        <SidebarCollapseTrigger
          className={cn(
            buttonVariants({
              color: 'ghost',
              size: 'icon-sm',
              className: 'mt-px mb-auto text-fd-muted-foreground',
            }),
          )}
        >
          <SidebarIcon />
        </SidebarCollapseTrigger>
      )}
    </div>
  );

  return (
    <TreeContextProvider tree={props.tree}>
      <NavProvider transparentMode={transparentMode}>
        <LayoutBody
          {...props.containerProps}
          className={cn(variables, props.containerProps?.className)}
        >
          <Sidebar
            {...sidebar}
            className={cn(
              navMode === 'top'
                ? 'border-e-0 md:bg-transparent'
                : 'md:[--fd-nav-height:0px]',
              sidebar.className,
            )}
          >
            <HideIfEmpty>
              <SidebarHeader className="data-[empty=true]:hidden">
                {navMode === 'auto' && sidebarHeader}
                {nav.children}
                {sidebarBanner}
                {tabMode === 'sidebar' && tabs.length > 0 ? (
                  <RootToggle className="mb-2" options={tabs} />
                ) : null}
                {tabMode === 'navbar' && tabs.length > 0 && (
                  <RootToggle options={tabs} className="lg:hidden" />
                )}
              </SidebarHeader>
            </HideIfEmpty>
            <SidebarViewport>
              {links
                .filter((item) => item.type !== 'icon')
                .map((item, i) => (
                  <SidebarLinkItem
                    key={i}
                    item={item}
                    className={cn(
                      'lg:hidden',
                      i === links.length - 1 && 'mb-4',
                    )}
                  />
                ))}

              <SidebarPageTree components={sidebarComponents} />
            </SidebarViewport>
            <HideIfEmpty>
              <SidebarFooter className="flex flex-row items-center justify-end data-[empty=true]:hidden">
                <div className="flex items-center flex-1 empty:hidden lg:hidden">
                  {links
                    .filter((item) => item.type === 'icon')
                    .map((item, i) => (
                      <BaseLinkItem
                        key={i}
                        item={item}
                        className={cn(
                          buttonVariants({
                            size: 'icon-sm',
                            color: 'ghost',
                            className: 'text-fd-muted-foreground',
                          }),
                        )}
                        aria-label={item.label}
                      >
                        {item.icon}
                      </BaseLinkItem>
                    ))}
                </div>
                {i18n ? (
                  <LanguageToggle className="me-auto md:hidden">
                    <Languages className="size-4.5 text-fd-muted-foreground" />
                  </LanguageToggle>
                ) : null}
                {themeSwitch.enabled !== false &&
                  (themeSwitch.component ?? (
                    <ThemeToggle
                      className="md:hidden"
                      mode={themeSwitch?.mode ?? 'light-dark-system'}
                    />
                  ))}
                {sidebarFooter}
              </SidebarFooter>
            </HideIfEmpty>
          </Sidebar>
          <DocsNavbar
            {...props}
            links={links}
            tabs={tabMode == 'navbar' ? tabs : []}
          />
          {props.children}
        </LayoutBody>
      </NavProvider>
    </TreeContextProvider>
  );
}

function DocsNavbar({
  links,
  tabs,
  searchToggle = {},
  themeSwitch = {},
  ...props
}: DocsLayoutProps & {
  links: LinkItemType[];
  tabs: Option[];
}) {
  const navMode = props.nav?.mode ?? 'auto';
  const sidebarCollapsible = props.sidebar?.collapsible ?? true;
  const nav = (
    <Link
      href={props.nav?.url ?? '/'}
      className={cn(
        'inline-flex items-center gap-2.5 font-semibold empty:hidden',
        navMode === 'auto' && 'md:hidden',
      )}
    >
      {props.nav?.title}
    </Link>
  );

  return (
    <Navbar mode={navMode}>
      <div
        className={cn(
          'flex border-b px-4 flex-1',
          navMode === 'auto' && 'md:px-6',
        )}
      >
        <div
          className={cn(
            'flex flex-row items-center',
            navMode === 'top' && 'flex-1 pe-4',
          )}
        >
          {sidebarCollapsible && navMode === 'auto' ? (
            <SidebarCollapseTrigger
              className={cn(
                buttonVariants({
                  color: 'ghost',
                  size: 'icon-sm',
                }),
                'text-fd-muted-foreground -ms-1.5 me-2 data-[collapsed=false]:hidden max-md:hidden',
              )}
            >
              <SidebarIcon />
            </SidebarCollapseTrigger>
          ) : null}
          {nav}
        </div>
        {searchToggle.enabled !== false &&
          (searchToggle.components?.lg ? (
            <div
              className={cn(
                'w-full my-auto max-md:hidden',
                navMode === 'top' ? 'rounded-xl max-w-sm' : 'max-w-[240px]',
              )}
            >
              {searchToggle.components?.lg}
            </div>
          ) : (
            <LargeSearchToggle
              hideIfDisabled
              className={cn(
                'w-full my-auto max-md:hidden',
                navMode === 'top'
                  ? 'rounded-xl max-w-sm ps-2.5'
                  : 'max-w-[240px]',
              )}
            />
          ))}
        <div className="flex flex-1 flex-row items-center justify-end">
          <div className="flex flex-row items-center gap-6 px-4 empty:hidden max-lg:hidden">
            {links
              .filter((item) => item.type !== 'icon')
              .map((item, i) => (
                <NavbarLinkItem
                  key={i}
                  item={item}
                  className="text-sm text-fd-muted-foreground transition-colors hover:text-fd-accent-foreground data-[active=true]:text-fd-primary"
                />
              ))}
          </div>
          {props.nav?.children}
          {searchToggle.enabled !== false &&
            (searchToggle.components?.sm ?? (
              <SearchToggle hideIfDisabled className="p-2 md:hidden" />
            ))}
          <NavbarSidebarTrigger className="p-2 -me-1.5 md:hidden" />
          {links
            .filter((item) => item.type === 'icon')
            .map((item, i) => (
              <BaseLinkItem
                key={i}
                item={item}
                className={cn(
                  buttonVariants({ size: 'icon-sm', color: 'ghost' }),
                  'text-fd-muted-foreground max-lg:hidden',
                )}
                aria-label={item.label}
              >
                {item.icon}
              </BaseLinkItem>
            ))}
          {props.i18n ? (
            <LanguageToggle className="max-md:hidden">
              <Languages className="size-4.5 text-fd-muted-foreground" />
            </LanguageToggle>
          ) : null}
          {themeSwitch.enabled !== false &&
            (themeSwitch.component ?? (
              <ThemeToggle
                className="ms-2 max-md:hidden"
                mode={themeSwitch.mode ?? 'light-dark-system'}
              />
            ))}
          {sidebarCollapsible && navMode === 'top' ? (
            <SidebarCollapseTrigger
              className={cn(
                buttonVariants({
                  color: 'secondary',
                  size: 'icon-sm',
                }),
                'ms-2 text-fd-muted-foreground rounded-full max-md:hidden',
              )}
            >
              <SidebarIcon />
            </SidebarCollapseTrigger>
          ) : null}
        </div>
      </div>
      {tabs.length > 0 && (
        <LayoutTabs
          className={cn(
            'border-b h-10 max-lg:hidden',
            navMode === 'top' ? 'px-4' : 'px-6',
          )}
          options={tabs}
        />
      )}
    </Navbar>
  );
}

function NavbarLinkItem({
  item,
  ...props
}: { item: LinkItemType } & HTMLAttributes<HTMLElement>) {
  if (item.type === 'menu') {
    return (
      <Popover>
        <PopoverTrigger
          {...props}
          className={cn('inline-flex items-center gap-1.5', props.className)}
        >
          {item.text}
          <ChevronDown className="size-3" />
        </PopoverTrigger>
        <PopoverContent className="flex flex-col">
          {item.items.map((child, i) => {
            if (child.type === 'custom')
              return <Fragment key={i}>{child.children}</Fragment>;

            return (
              <BaseLinkItem
                key={i}
                item={child}
                className="inline-flex items-center gap-2 rounded-md p-2 text-start hover:bg-fd-accent hover:text-fd-accent-foreground data-[active=true]:text-fd-primary [&_svg]:size-4"
              >
                {child.icon}
                {child.text}
              </BaseLinkItem>
            );
          })}
        </PopoverContent>
      </Popover>
    );
  }

  if (item.type === 'custom') return item.children;

  return (
    <BaseLinkItem item={item} {...props}>
      {item.text}
    </BaseLinkItem>
  );
}

export { Navbar, NavbarSidebarTrigger };



================================================
FILE: packages/ui/src/layouts/shared.tsx
================================================
import type { ReactNode } from 'react';
import type { LinkItemType } from '@/layouts/links';
import type { NavProviderProps } from '@/contexts/layout';
import type { I18nConfig } from 'fumadocs-core/i18n';

export interface NavOptions extends NavProviderProps {
  enabled: boolean;
  component: ReactNode;

  title?: ReactNode;

  /**
   * Redirect url of title
   * @defaultValue '/'
   */
  url?: string;

  children?: ReactNode;
}

export interface BaseLayoutProps {
  themeSwitch?: {
    enabled?: boolean;
    component?: ReactNode;
    mode?: 'light-dark' | 'light-dark-system';
  };

  searchToggle?: Partial<{
    enabled: boolean;
    components: Partial<{
      sm: ReactNode;
      lg: ReactNode;
    }>;
  }>;

  /**
   * Remove theme switcher component
   *
   * @deprecated Use `themeSwitch.enabled` instead.
   */
  disableThemeSwitch?: boolean;

  /**
   * I18n options
   *
   * @defaultValue false
   */
  i18n?: boolean | I18nConfig;

  /**
   * GitHub url
   */
  githubUrl?: string;

  links?: LinkItemType[];
  /**
   * Replace or disable navbar
   */
  nav?: Partial<NavOptions>;

  children?: ReactNode;
}

export { type LinkItemType };

/**
 * Get Links Items with shortcuts
 */
export function getLinks(
  links: LinkItemType[] = [],
  githubUrl?: string,
): LinkItemType[] {
  let result = links ?? [];

  if (githubUrl)
    result = [
      ...result,
      {
        type: 'icon',
        url: githubUrl,
        text: 'Github',
        label: 'GitHub',
        icon: (
          <svg role="img" viewBox="0 0 24 24" fill="currentColor">
            <path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12" />
          </svg>
        ),
        external: true,
      },
    ];

  return result;
}



================================================
FILE: packages/ui/src/layouts/docs/page-client.tsx
================================================
'use client';

import {
  type ComponentProps,
  Fragment,
  useEffect,
  useMemo,
  useRef,
  useState,
} from 'react';
import { ChevronDown, ChevronLeft, ChevronRight } from '@/icons';
import Link from 'fumadocs-core/link';
import { cn } from '@/utils/cn';
import { useI18n } from '../../contexts/i18n';
import { useTreeContext, useTreePath } from '../../contexts/tree';
import type { PageTree } from 'fumadocs-core/server';
import { createContext, usePathname } from 'fumadocs-core/framework';
import {
  type BreadcrumbOptions,
  getBreadcrumbItemsFromPath,
} from 'fumadocs-core/breadcrumb';
import { useNav } from '@/contexts/layout';
import { isActive } from '@/utils/is-active';
import { useEffectEvent } from 'fumadocs-core/utils/use-effect-event';
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from '@/components/ui/collapsible';
import { useSidebar } from '@/contexts/sidebar';
import { TOCProvider, useTOCItems } from '@/components/layout/toc';
import { type AnchorProviderProps, useActiveAnchor } from 'fumadocs-core/toc';

const TocPopoverContext = createContext<{
  open: boolean;
  setOpen: (open: boolean) => void;
}>('TocPopoverContext');

export function PageTOCPopoverTrigger(props: ComponentProps<'button'>) {
  const { text } = useI18n();
  const { open } = TocPopoverContext.use();
  const items = useTOCItems();
  const active = useActiveAnchor();
  const selected = useMemo(
    () => items.findIndex((item) => active === item.url.slice(1)),
    [items, active],
  );
  const path = useTreePath().at(-1);
  const showItem = selected !== -1 && !open;

  return (
    <CollapsibleTrigger
      {...props}
      className={cn(
        'flex w-full h-(--fd-tocnav-height) items-center text-sm text-fd-muted-foreground gap-2.5 px-4 py-2.5 text-start focus-visible:outline-none [&_svg]:shrink-0 [&_svg]:size-4 md:px-6',
        props.className,
      )}
    >
      <ProgressCircle
        value={(selected + 1) / Math.max(1, items.length)}
        max={1}
        className={cn(open && 'text-fd-primary')}
      />
      <span className="grid flex-1 *:my-auto *:row-start-1 *:col-start-1">
        <span
          className={cn(
            'truncate transition-all',
            open && 'text-fd-foreground',
            showItem && 'opacity-0 -translate-y-full pointer-events-none',
          )}
        >
          {path?.name ?? text.toc}
        </span>
        <span
          className={cn(
            'truncate transition-all',
            !showItem && 'opacity-0 translate-y-full pointer-events-none',
          )}
        >
          {items[selected]?.title}
        </span>
      </span>
      <ChevronDown
        className={cn('transition-transform mx-0.5', open && 'rotate-180')}
      />
    </CollapsibleTrigger>
  );
}

interface ProgressCircleProps
  extends Omit<React.ComponentProps<'svg'>, 'strokeWidth'> {
  value: number;
  strokeWidth?: number;
  size?: number;
  min?: number;
  max?: number;
}

function clamp(input: number, min: number, max: number): number {
  if (input < min) return min;
  if (input > max) return max;
  return input;
}

function ProgressCircle({
  value,
  strokeWidth = 2,
  size = 24,
  min = 0,
  max = 100,
  ...restSvgProps
}: ProgressCircleProps) {
  const normalizedValue = clamp(value, min, max);
  const radius = (size - strokeWidth) / 2;
  const circumference = 2 * Math.PI * radius;
  const progress = (normalizedValue / max) * circumference;
  const circleProps = {
    cx: size / 2,
    cy: size / 2,
    r: radius,
    fill: 'none',
    strokeWidth,
  };

  return (
    <svg
      role="progressbar"
      viewBox={`0 0 ${size} ${size}`}
      aria-valuenow={normalizedValue}
      aria-valuemin={min}
      aria-valuemax={max}
      {...restSvgProps}
    >
      <circle {...circleProps} className="stroke-current/25" />
      <circle
        {...circleProps}
        stroke="currentColor"
        strokeDasharray={circumference}
        strokeDashoffset={circumference - progress}
        strokeLinecap="round"
        transform={`rotate(-90 ${size / 2} ${size / 2})`}
        className="transition-all"
      />
    </svg>
  );
}

export function PageTOCPopoverContent(props: ComponentProps<'div'>) {
  return (
    <CollapsibleContent
      data-toc-popover=""
      {...props}
      className={cn('flex flex-col px-4 max-h-[50vh] md:px-6', props.className)}
    >
      {props.children}
    </CollapsibleContent>
  );
}

export function PageTOCPopover(props: ComponentProps<'div'>) {
  const ref = useRef<HTMLElement>(null);
  const [open, setOpen] = useState(false);
  const { collapsed } = useSidebar();
  const { isTransparent } = useNav();

  const onClick = useEffectEvent((e: Event) => {
    if (!open) return;

    if (ref.current && !ref.current.contains(e.target as HTMLElement))
      setOpen(false);
  });

  useEffect(() => {
    window.addEventListener('click', onClick);

    return () => {
      window.removeEventListener('click', onClick);
    };
  }, [onClick]);

  return (
    <TocPopoverContext.Provider
      value={useMemo(
        () => ({
          open,
          setOpen,
        }),
        [setOpen, open],
      )}
    >
      <Collapsible open={open} onOpenChange={setOpen} asChild>
        <header
          ref={ref}
          id="nd-tocnav"
          {...props}
          className={cn(
            'fixed inset-x-0 z-10 border-b backdrop-blur-sm transition-colors xl:hidden',
            (!isTransparent || open) && 'bg-fd-background/80',
            open && 'shadow-lg',
            props.className,
          )}
          style={{
            ...props.style,
            top: 'calc(var(--fd-banner-height) + var(--fd-nav-height))',
            insetInlineStart: collapsed
              ? '0px'
              : 'calc(var(--fd-sidebar-width) + var(--fd-layout-offset))',
          }}
        >
          {props.children}
        </header>
      </Collapsible>
    </TocPopoverContext.Provider>
  );
}

export interface RootProps extends ComponentProps<'div'> {
  toc: Omit<AnchorProviderProps, 'children'>;
}

export function PageRoot({ toc, children, ...props }: RootProps) {
  const { collapsed } = useSidebar();

  return (
    <TOCProvider {...toc}>
      <div
        id="nd-page"
        {...props}
        className={cn('flex flex-1 mx-auto w-full', props.className)}
        style={{
          paddingTop: 'calc(var(--fd-nav-height) + var(--fd-tocnav-height))',
          maxWidth: collapsed
            ? 'var(--fd-page-width)'
            : 'min(var(--fd-page-width),calc(var(--fd-layout-width) - var(--fd-sidebar-width)))',
          ...props.style,
        }}
      >
        {children}
      </div>
    </TOCProvider>
  );
}

export function PageLastUpdate({
  date: value,
  ...props
}: Omit<ComponentProps<'p'>, 'children'> & { date: Date | string }) {
  const { text } = useI18n();
  const [date, setDate] = useState('');

  useEffect(() => {
    // to the timezone of client
    setDate(new Date(value).toLocaleDateString());
  }, [value]);

  return (
    <p
      {...props}
      className={cn('text-sm text-fd-muted-foreground', props.className)}
    >
      {text.lastUpdate} {date}
    </p>
  );
}

type Item = Pick<PageTree.Item, 'name' | 'description' | 'url'>;
export interface FooterProps extends ComponentProps<'div'> {
  /**
   * Items including information for the next and previous page
   */
  items?: {
    previous?: Item;
    next?: Item;
  };
}

function scanNavigationList(tree: PageTree.Node[]) {
  const list: PageTree.Item[] = [];

  tree.forEach((node) => {
    if (node.type === 'folder') {
      if (node.index) {
        list.push(node.index);
      }

      list.push(...scanNavigationList(node.children));
      return;
    }

    if (node.type === 'page' && !node.external) {
      list.push(node);
    }
  });

  return list;
}

const listCache = new WeakMap<PageTree.Root, PageTree.Item[]>();

export function PageFooter({ items, ...props }: FooterProps) {
  const { root } = useTreeContext();
  const pathname = usePathname();

  const { previous, next } = useMemo(() => {
    if (items) return items;

    const cached = listCache.get(root);
    const list = cached ?? scanNavigationList(root.children);
    listCache.set(root, list);

    const idx = list.findIndex((item) => isActive(item.url, pathname, false));

    if (idx === -1) return {};
    return {
      previous: list[idx - 1],
      next: list[idx + 1],
    };
  }, [items, pathname, root]);

  return (
    <div
      {...props}
      className={cn(
        '@container grid gap-4 pb-6',
        previous && next ? 'grid-cols-2' : 'grid-cols-1',
        props.className,
      )}
    >
      {previous ? <FooterItem item={previous} index={0} /> : null}
      {next ? <FooterItem item={next} index={1} /> : null}
    </div>
  );
}

function FooterItem({ item, index }: { item: Item; index: 0 | 1 }) {
  const { text } = useI18n();
  const Icon = index === 0 ? ChevronLeft : ChevronRight;

  return (
    <Link
      href={item.url}
      className={cn(
        'flex flex-col gap-2 rounded-lg border p-4 text-sm transition-colors hover:bg-fd-accent/80 hover:text-fd-accent-foreground @max-lg:col-span-full',
        index === 1 && 'text-end',
      )}
    >
      <div
        className={cn(
          'inline-flex items-center gap-1.5 font-medium',
          index === 1 && 'flex-row-reverse',
        )}
      >
        <Icon className="-mx-1 size-4 shrink-0 rtl:rotate-180" />
        <p>{item.name}</p>
      </div>
      <p className="text-fd-muted-foreground truncate">
        {item.description ?? (index === 0 ? text.previousPage : text.nextPage)}
      </p>
    </Link>
  );
}

export type BreadcrumbProps = BreadcrumbOptions & ComponentProps<'div'>;

export function PageBreadcrumb({
  includeRoot = false,
  includeSeparator,
  includePage = false,
  ...props
}: BreadcrumbProps) {
  const path = useTreePath();
  const { root } = useTreeContext();
  const items = useMemo(() => {
    return getBreadcrumbItemsFromPath(root, path, {
      includePage,
      includeSeparator,
      includeRoot,
    });
  }, [includePage, includeRoot, includeSeparator, path, root]);

  if (items.length === 0) return null;

  return (
    <div
      {...props}
      className={cn(
        'flex items-center gap-1.5 text-sm text-fd-muted-foreground',
        props.className,
      )}
    >
      {items.map((item, i) => {
        const className = cn(
          'truncate',
          i === items.length - 1 && 'text-fd-primary font-medium',
        );

        return (
          <Fragment key={i}>
            {i !== 0 && <span className="text-fd-foreground/30">/</span>}
            {item.url ? (
              <Link
                href={item.url}
                className={cn(className, 'transition-opacity hover:opacity-80')}
              >
                {item.name}
              </Link>
            ) : (
              <span className={className}>{item.name}</span>
            )}
          </Fragment>
        );
      })}
    </div>
  );
}

export function PageTOC(props: ComponentProps<'div'>) {
  return (
    <div
      id="nd-toc"
      {...props}
      className={cn('sticky pb-2 pt-12 max-xl:hidden', props.className)}
      style={{
        ...props.style,
        top: 'calc(var(--fd-banner-height) + var(--fd-nav-height))',
        height: 'calc(100dvh - var(--fd-banner-height) - var(--fd-nav-height))',
      }}
    >
      <div className="flex h-full w-(--fd-toc-width) max-w-full flex-col pe-4">
        {props.children}
      </div>
    </div>
  );
}



================================================
FILE: packages/ui/src/layouts/docs/page.tsx
================================================
import { type ComponentProps } from 'react';
import { cn } from '@/utils/cn';
import {
  type BreadcrumbProps,
  type FooterProps,
  PageBreadcrumb,
  PageFooter,
  PageLastUpdate,
  PageRoot,
  PageTOC,
  PageTOCPopover,
  PageTOCPopoverContent,
  PageTOCPopoverTrigger,
  type RootProps,
} from './page-client';
import { TOCItems, TOCScrollArea } from '@/components/layout/toc';
import { Text } from 'lucide-react';
import { I18nLabel } from '@/contexts/i18n';
import ClerkTOCItems from '@/components/layout/toc-clerk';

/**
 * Apply `prose` on div
 */
export function PageProse(props: ComponentProps<'div'>) {
  return (
    <div {...props} className={cn('prose', props.className)}>
      {props.children}
    </div>
  );
}

export function PageTOCTitle(props: ComponentProps<'h2'>) {
  return (
    <h3
      {...props}
      className={cn(
        'inline-flex items-center gap-1.5 text-sm text-fd-muted-foreground',
        props.className,
      )}
    >
      <Text className="size-4" />
      <I18nLabel label="toc" />
    </h3>
  );
}

export function PageTOCItems({
  variant = 'normal',
  ...props
}: ComponentProps<'div'> & { variant?: 'clerk' | 'normal' }) {
  return (
    <TOCScrollArea {...props}>
      {variant === 'clerk' ? <ClerkTOCItems /> : <TOCItems />}
    </TOCScrollArea>
  );
}

export function PageTOCPopoverItems({
  variant = 'normal',
  ...props
}: ComponentProps<'div'> & { variant?: 'clerk' | 'normal' }) {
  return (
    <TOCScrollArea {...props}>
      {variant === 'clerk' ? <ClerkTOCItems /> : <TOCItems />}
    </TOCScrollArea>
  );
}

export function PageArticle(props: ComponentProps<'article'>) {
  return (
    <article
      {...props}
      className={cn(
        'flex min-w-0 w-full flex-col gap-4 px-4 pt-8 md:px-6 md:mx-auto xl:pt-12 xl:px-12',
        props.className,
      )}
    >
      {props.children}
    </article>
  );
}

export {
  PageRoot,
  PageBreadcrumb,
  PageFooter,
  PageLastUpdate,
  PageTOC,
  PageTOCPopover,
  PageTOCPopoverTrigger,
  PageTOCPopoverContent,
  type FooterProps,
  type BreadcrumbProps,
  type RootProps,
};



================================================
FILE: packages/ui/src/layouts/docs/shared.tsx
================================================
import type { LinkItemType } from '@/layouts/links';
import {
  type SidebarComponents,
  SidebarFolder,
  SidebarFolderContent,
  SidebarFolderLink,
  SidebarFolderTrigger,
  SidebarItem,
  type SidebarProps,
} from '@/components/layout/sidebar';
import type { PageTree } from 'fumadocs-core/server';
import type { ReactNode } from 'react';
import type { Option } from '@/components/layout/root-toggle';
import {
  getSidebarTabs,
  type GetSidebarTabsOptions,
} from '@/utils/get-sidebar-tabs';

export interface SidebarOptions extends SidebarProps {
  components?: Partial<SidebarComponents>;

  /**
   * Root Toggle options
   */
  tabs?: Option[] | GetSidebarTabsOptions | false;

  banner?: ReactNode;
  footer?: ReactNode;
}

export function SidebarLinkItem({
  item,
  ...props
}: {
  item: LinkItemType;
  className?: string;
}) {
  if (item.type === 'menu')
    return (
      <SidebarFolder {...props}>
        {item.url ? (
          <SidebarFolderLink href={item.url}>
            {item.icon}
            {item.text}
          </SidebarFolderLink>
        ) : (
          <SidebarFolderTrigger>
            {item.icon}
            {item.text}
          </SidebarFolderTrigger>
        )}
        <SidebarFolderContent>
          {item.items.map((child, i) => (
            <SidebarLinkItem key={i} item={child} />
          ))}
        </SidebarFolderContent>
      </SidebarFolder>
    );

  if (item.type === 'custom') return <div {...props}>{item.children}</div>;

  return (
    <SidebarItem
      href={item.url}
      icon={item.icon}
      external={item.external}
      {...props}
    >
      {item.text}
    </SidebarItem>
  );
}

export function getSidebarTabsFromOptions(
  options: SidebarOptions['tabs'],
  tree: PageTree.Root,
) {
  if (Array.isArray(options)) {
    return options;
  } else if (typeof options === 'object') {
    return getSidebarTabs(tree, options);
  } else if (options !== false) {
    return getSidebarTabs(tree);
  }
}



================================================
FILE: packages/ui/src/layouts/home/menu.tsx
================================================
'use client';
import { BaseLinkItem, type LinkItemType } from '@/layouts/links';
import { cn } from '@/utils/cn';
import {
  NavigationMenuContent,
  NavigationMenuItem,
  NavigationMenuLink,
  NavigationMenuTrigger,
} from '@/components/ui/navigation-menu';
import Link from 'fumadocs-core/link';
import { cva } from 'class-variance-authority';
import { buttonVariants } from '@/components/ui/button';
import type { ComponentPropsWithoutRef } from 'react';

const menuItemVariants = cva('', {
  variants: {
    variant: {
      main: 'inline-flex items-center gap-2 py-1.5 transition-colors hover:text-fd-popover-foreground/50 data-[active=true]:font-medium data-[active=true]:text-fd-primary [&_svg]:size-4',
      icon: buttonVariants({
        size: 'icon',
        color: 'ghost',
      }),
      button: buttonVariants({
        color: 'secondary',
        className: 'gap-1.5 [&_svg]:size-4',
      }),
    },
  },
  defaultVariants: {
    variant: 'main',
  },
});

export function MenuLinkItem({
  item,
  ...props
}: {
  item: LinkItemType;
  className?: string;
}) {
  if (item.type === 'custom')
    return <div className={cn('grid', props.className)}>{item.children}</div>;

  if (item.type === 'menu') {
    const header = (
      <>
        {item.icon}
        {item.text}
      </>
    );

    return (
      <div className={cn('mb-4 flex flex-col', props.className)}>
        <p className="mb-1 text-sm text-fd-muted-foreground">
          {item.url ? (
            <NavigationMenuLink asChild>
              <Link href={item.url}>{header}</Link>
            </NavigationMenuLink>
          ) : (
            header
          )}
        </p>
        {item.items.map((child, i) => (
          <MenuLinkItem key={i} item={child} />
        ))}
      </div>
    );
  }

  return (
    <NavigationMenuLink asChild>
      <BaseLinkItem
        item={item}
        className={cn(
          menuItemVariants({ variant: item.type }),
          props.className,
        )}
        aria-label={item.type === 'icon' ? item.label : undefined}
      >
        {item.icon}
        {item.type === 'icon' ? undefined : item.text}
      </BaseLinkItem>
    </NavigationMenuLink>
  );
}

export const Menu = NavigationMenuItem;

export function MenuTrigger({
  enableHover = false,
  ...props
}: ComponentPropsWithoutRef<typeof NavigationMenuTrigger> & {
  /**
   * Enable hover to trigger
   */
  enableHover?: boolean;
}) {
  return (
    <NavigationMenuTrigger
      {...props}
      onPointerMove={enableHover ? undefined : (e) => e.preventDefault()}
    >
      {props.children}
    </NavigationMenuTrigger>
  );
}

export function MenuContent(
  props: ComponentPropsWithoutRef<typeof NavigationMenuContent>,
) {
  return (
    <NavigationMenuContent
      {...props}
      className={cn('flex flex-col p-4', props.className)}
    >
      {props.children}
    </NavigationMenuContent>
  );
}



================================================
FILE: packages/ui/src/layouts/home/navbar.tsx
================================================
'use client';
import { type ComponentProps, useState } from 'react';
import { cva, type VariantProps } from 'class-variance-authority';
import Link, { type LinkProps } from 'fumadocs-core/link';
import { cn } from '@/utils/cn';
import { BaseLinkItem } from '@/layouts/links';
import {
  NavigationMenu,
  NavigationMenuContent,
  NavigationMenuItem,
  NavigationMenuLink,
  NavigationMenuList,
  NavigationMenuTrigger,
  NavigationMenuViewport,
} from '@/components/ui/navigation-menu';
import { useNav } from '@/contexts/layout';
import type {
  NavigationMenuContentProps,
  NavigationMenuTriggerProps,
} from '@radix-ui/react-navigation-menu';
import { buttonVariants } from '@/components/ui/button';

const navItemVariants = cva(
  'inline-flex items-center gap-1 p-2 text-fd-muted-foreground transition-colors hover:text-fd-accent-foreground data-[active=true]:text-fd-primary [&_svg]:size-4',
);

export function Navbar(props: ComponentProps<'div'>) {
  const [value, setValue] = useState('');
  const { isTransparent } = useNav();

  return (
    <NavigationMenu value={value} onValueChange={setValue} asChild>
      <header
        id="nd-nav"
        {...props}
        className={cn(
          'fixed top-(--fd-banner-height) z-40 left-0 backdrop-blur-lg border-b transition-colors *:mx-auto *:max-w-fd-container',
          value.length > 0 && 'max-lg:shadow-lg max-lg:rounded-b-2xl',
          (!isTransparent || value.length > 0) && 'bg-fd-background/80',
          props.className,
        )}
        style={{
          right: 'var(--removed-body-scroll-bar-size, 0px)',
        }}
      >
        <NavigationMenuList
          className="flex h-14 w-full items-center px-4"
          asChild
        >
          <nav>{props.children}</nav>
        </NavigationMenuList>

        <NavigationMenuViewport />
      </header>
    </NavigationMenu>
  );
}

export const NavbarMenu = NavigationMenuItem;

export function NavbarMenuContent(props: NavigationMenuContentProps) {
  return (
    <NavigationMenuContent
      {...props}
      className={cn(
        'grid grid-cols-1 gap-2 p-4 md:grid-cols-2 lg:grid-cols-3',
        props.className,
      )}
    >
      {props.children}
    </NavigationMenuContent>
  );
}

export function NavbarMenuTrigger(props: NavigationMenuTriggerProps) {
  return (
    <NavigationMenuTrigger
      {...props}
      className={cn(navItemVariants(), 'rounded-md', props.className)}
    >
      {props.children}
    </NavigationMenuTrigger>
  );
}

export function NavbarMenuLink(props: LinkProps) {
  return (
    <NavigationMenuLink asChild>
      <Link
        {...props}
        className={cn(
          'flex flex-col gap-2 rounded-lg border bg-fd-card p-3 transition-colors hover:bg-fd-accent/80 hover:text-fd-accent-foreground',
          props.className,
        )}
      >
        {props.children}
      </Link>
    </NavigationMenuLink>
  );
}

const linkVariants = cva('', {
  variants: {
    variant: {
      main: navItemVariants(),
      button: buttonVariants({
        color: 'secondary',
        className: 'gap-1.5 [&_svg]:size-4',
      }),
      icon: buttonVariants({
        color: 'ghost',
        size: 'icon',
      }),
    },
  },
  defaultVariants: {
    variant: 'main',
  },
});

export function NavbarLink({
  item,
  variant,
  ...props
}: ComponentProps<typeof BaseLinkItem> & VariantProps<typeof linkVariants>) {
  return (
    <NavigationMenuItem>
      <NavigationMenuLink asChild>
        <BaseLinkItem
          {...props}
          item={item}
          className={cn(linkVariants({ variant }), props.className)}
        >
          {props.children}
        </BaseLinkItem>
      </NavigationMenuLink>
    </NavigationMenuItem>
  );
}



================================================
FILE: packages/ui/src/provider/base.tsx
================================================
'use client';

import { ThemeProvider } from 'next-themes';
import {
  type ComponentPropsWithoutRef,
  lazy,
  type ReactNode,
  useMemo,
} from 'react';
import { DirectionProvider } from '@radix-ui/react-direction';
import type { DefaultSearchDialogProps } from '@/components/dialog/search-default';
import { SidebarProvider } from '@/contexts/sidebar';
import { SearchProvider, type SearchProviderProps } from '@/contexts/search';
import { useEffectEvent } from 'fumadocs-core/utils/use-effect-event';
import {
  defaultTranslations,
  I18nContext,
  type LocaleItem,
  type Translations,
} from '@/contexts/i18n';
import { usePathname, useRouter } from 'fumadocs-core/framework';

interface SearchOptions
  extends Omit<SearchProviderProps, 'options' | 'children'> {
  options?: Partial<DefaultSearchDialogProps>;

  /**
   * Enable search functionality
   *
   * @defaultValue `true`
   */
  enabled?: boolean;
}

export interface RootProviderProps {
  /**
   * `dir` option for Radix UI
   */
  dir?: 'rtl' | 'ltr';

  /**
   * @remarks `SearchProviderProps`
   */
  search?: Partial<SearchOptions>;

  /**
   * Customise options of `next-themes`
   */
  theme?: Partial<ComponentPropsWithoutRef<typeof ThemeProvider>> & {
    /**
     * Enable `next-themes`
     *
     * @defaultValue true
     */
    enabled?: boolean;
  };

  i18n?: Omit<I18nProviderProps, 'children'>;

  children?: ReactNode;
}

export interface I18nProviderProps {
  /**
   * Current locale
   */
  locale: string;

  /**
   * Handle changes to the locale, redirect user when not specified.
   */
  onLocaleChange?: (v: string) => void;

  /**
   * Translations of current locale
   */
  translations?: Partial<Translations>;

  /**
   * Available languages
   */
  locales?: LocaleItem[];

  children?: ReactNode;
}

const DefaultSearchDialog = lazy(
  () => import('@/components/dialog/search-default'),
);

export function RootProvider({
  children,
  dir = 'ltr',
  theme = {},
  search,
  i18n,
}: RootProviderProps) {
  let body = children;

  if (search?.enabled !== false)
    body = (
      <SearchProvider SearchDialog={DefaultSearchDialog} {...search}>
        {body}
      </SearchProvider>
    );

  if (theme?.enabled !== false)
    body = (
      <ThemeProvider
        attribute="class"
        defaultTheme="system"
        enableSystem
        disableTransitionOnChange
        {...theme}
      >
        {body}
      </ThemeProvider>
    );

  if (i18n) {
    body = <I18nProvider {...i18n}>{body}</I18nProvider>;
  }

  return (
    <DirectionProvider dir={dir}>
      <SidebarProvider>{body}</SidebarProvider>
    </DirectionProvider>
  );
}

function I18nProvider({
  locales = [],
  locale,
  onLocaleChange,
  ...props
}: I18nProviderProps) {
  const router = useRouter();
  const pathname = usePathname();
  const onChange = useEffectEvent((value: string) => {
    if (onLocaleChange) {
      return onLocaleChange(value);
    }
    const segments = pathname.split('/').filter((v) => v.length > 0);

    // If locale prefix hidden
    if (segments[0] !== locale) {
      segments.unshift(value);
    } else {
      segments[0] = value;
    }

    router.push(`/${segments.join('/')}`);
    router.refresh();
  });

  return (
    <I18nContext.Provider
      value={useMemo(
        () => ({
          locale,
          locales,
          text: {
            ...defaultTranslations,
            ...props.translations,
          },
          onChange,
        }),
        [locale, locales, onChange, props.translations],
      )}
    >
      {props.children}
    </I18nContext.Provider>
  );
}



================================================
FILE: packages/ui/src/provider/index.tsx
================================================
'use client';

import { RootProvider as BaseProvider } from './base';
import type { ComponentProps } from 'react';
import { NextProvider } from 'fumadocs-core/framework/next';

export function RootProvider(props: ComponentProps<typeof BaseProvider>) {
  return (
    <NextProvider>
      <BaseProvider {...props}>{props.children}</BaseProvider>
    </NextProvider>
  );
}

export { useI18n, I18nLabel } from '@/contexts/i18n';
export {
  SearchProvider,
  SearchOnly,
  useSearchContext,
  type SearchProviderProps,
} from '@/contexts/search';
export { SidebarProvider, useSidebar } from '@/contexts/sidebar';
export {
  useTreePath,
  useTreeContext,
  TreeContextProvider,
} from '@/contexts/tree';
export {
  useNav,
  NavProvider,
  type NavProviderProps,
  type PageStyles,
  StylesProvider,
  usePageStyles,
} from '@/contexts/layout';



================================================
FILE: packages/ui/src/theme/typography/index.ts
================================================
import * as styles from './styles';
import plugin from 'tailwindcss/plugin';
import merge from 'lodash.merge';
import parser, { type Pseudo } from 'postcss-selector-parser';
import type { Config } from './styles';

export interface Options {
  className?: string;

  /**
   * Disable custom table styles
   */
  disableRoundedTable?: boolean;
}

interface Context {
  prefix: (v: string) => string;
  modifier?: string;
}

function inWhere(
  selector: string,
  { className, prefix, modifier }: Options & Context,
) {
  const prefixedNot = prefix(`.not-${className}`).slice(1);
  const selectorPrefix = selector.startsWith('>')
    ? `${modifier === 'DEFAULT' ? `.${className}` : `.${className}-${modifier}`} `
    : '';

  // Parse the selector, if every component ends in the same pseudo element(s) then move it to the end
  const [trailingPseudo, rebuiltSelector] = commonTrailingPseudos(selector);

  if (trailingPseudo) {
    return `:where(${selectorPrefix}${rebuiltSelector}):not(:where([class~="${prefixedNot}"],[class~="${prefixedNot}"] *))${trailingPseudo}`;
  }

  return `:where(${selectorPrefix}${selector}):not(:where([class~="${prefixedNot}"],[class~="${prefixedNot}"] *))`;
}

function configToCss(
  config: Config = {},
  { className, modifier, prefix }: Options & Context,
) {
  function updateSelector(
    k: string,
    v: unknown,
  ): [k: string, v: unknown, object?] {
    if (Array.isArray(v)) {
      return [k, v];
    }

    if (typeof v === 'object' && v !== null) {
      const nested = Object.values(v).some((prop) => typeof prop === 'object');
      if (nested) {
        return [
          inWhere(k, { className, modifier, prefix }),
          v,
          Object.fromEntries(
            Object.entries(v).map(([k, v]) => updateSelector(k, v)),
          ),
        ];
      }

      return [inWhere(k, { className, modifier, prefix }), v];
    }

    return [k, v];
  }

  const css = config.css ?? [];
  return Object.fromEntries(
    Object.entries(merge({}, ...(Array.isArray(css) ? css : [css]))).map(
      ([k, v]) => updateSelector(k, v),
    ),
  );
}

const parseSelector = parser();

function commonTrailingPseudos(selector: string) {
  const ast = parseSelector.astSync(selector);
  const matrix: Pseudo[][] = [];

  // Put the pseudo elements in reverse order in a sparse, column-major 2D array
  for (const [i, sel] of ast.nodes.entries()) {
    for (const [j, child] of [...sel.nodes].reverse().entries()) {
      // We only care about pseudo elements
      if (child.type !== 'pseudo' || !child.value.startsWith('::')) {
        break;
      }

      matrix[j] = matrix[j] || [];
      matrix[j][i] = child;
    }
  }

  const trailingPseudos = parser.selector({
    value: '',
  });

  // At this point the pseudo elements are in a column-major 2D array
  // This means each row contains one "column" of pseudo elements from each selector
  // We can compare all the pseudo elements in a row to see if they are the same
  for (const pseudos of matrix) {
    // It's a sparse 2D array so there are going to be holes in the rows
    // We skip those
    if (!pseudos) {
      continue;
    }

    const values = new Set(pseudos.map((p) => p.value));

    // The pseudo elements are not the same
    if (values.size > 1) {
      break;
    }

    pseudos.forEach((pseudo) => pseudo.remove());
    trailingPseudos.prepend(pseudos[0]);
  }

  if (trailingPseudos.nodes.length) {
    return [trailingPseudos.toString(), ast.toString()];
  }

  return [null, selector];
}

const SELECTORS = [
  ['headings', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'th'],
  ['h1'],
  ['h2'],
  ['h3'],
  ['h4'],
  ['h5'],
  ['h6'],
  ['p'],
  ['a'],
  ['blockquote'],
  ['figure'],
  ['figcaption'],
  ['strong'],
  ['em'],
  ['kbd'],
  ['code'],
  ['pre'],
  ['ol'],
  ['ul'],
  ['li'],
  ['table'],
  ['thead'],
  ['tr'],
  ['th'],
  ['td'],
  ['img'],
  ['video'],
  ['hr'],
  ['lead', '[class~="lead"]'],
];

export const typography: unknown = plugin.withOptions<Options>(
  ({ className = 'prose', ...styleOptions } = {}) => {
    return ({ addVariant, addComponents, ...rest }) => {
      const prefix = (rest as unknown as { prefix: Context['prefix'] }).prefix;

      for (const [name, ...values] of SELECTORS) {
        const selectors = values.length === 0 ? [name] : values;
        const selector = selectors.join(', ');

        addVariant(
          `${className}-${name}`,
          `& :is(${inWhere(selector, {
            prefix,
            className,
          })})`,
        );
      }

      addComponents({
        [`.${className}`]: configToCss(
          {
            ...styles.DEFAULT,
            css: [
              ...(styles.DEFAULT.css ?? []),
              styleOptions.disableRoundedTable
                ? styles.normalTable
                : styles.roundedTable,
            ],
          },
          {
            className,
            modifier: 'DEFAULT',
            prefix,
          },
        ),
      });
    };
  },
);

export default typography;



================================================
FILE: packages/ui/src/theme/typography/LICENSE
================================================
MIT License

Copyright (c) Tailwind Labs, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


================================================
FILE: packages/ui/src/theme/typography/styles.ts
================================================
function round(num: number) {
  return num
    .toFixed(7)
    .replace(/(\.[0-9]+?)0+$/, '$1')
    .replace(/\.0$/, '');
}

function rem(px: number) {
  return `${round(px / 16)}rem`;
}

function em(px: number, base: number) {
  return `${round(px / base)}em`;
}

const colors = {
  '--tw-prose-body':
    'color-mix(in oklab, var(--color-fd-foreground) 90%, transparent)',
  '--tw-prose-headings': 'var(--color-fd-foreground)',
  '--tw-prose-lead': `var(--color-fd-foreground)`,
  '--tw-prose-links': `var(--color-fd-foreground)`,
  '--tw-prose-bold': `var(--color-fd-foreground)`,
  '--tw-prose-counters': `var(--color-fd-muted-foreground)`,
  '--tw-prose-bullets': `var(--color-fd-muted-foreground)`,
  '--tw-prose-hr': `var(--color-fd-border)`,
  '--tw-prose-quotes': `var(--color-fd-foreground)`,
  '--tw-prose-quote-borders': `var(--color-fd-border)`,
  '--tw-prose-captions': `var(--color-fd-foreground)`,
  '--tw-prose-code': `var(--color-fd-foreground)`,
  '--tw-prose-th-borders': `var(--color-fd-border)`,
  '--tw-prose-td-borders': `var(--color-fd-border)`,
  '--tw-prose-kbd': `var(--color-fd-foreground)`,
  '--tw-prose-kbd-shadows': `color-mix(in oklab, var(--color-fd-primary) 50%, transparent)`,
};

export const roundedTable = {
  table: {
    borderCollapse: 'separate',
    borderSpacing: '0',
    background: 'var(--color-fd-card)',
    borderRadius: 'var(--radius-lg)',
    border: '1px solid var(--color-fd-border)',
    overflow: 'hidden',
  },
  th: {
    textAlign: 'start',
    padding: 'calc(var(--spacing) * 2.5)',
    'border-inline-start': '1px solid var(--color-fd-border)',
    background: 'var(--color-fd-muted)',
  },
  'th:first-child': {
    'border-inline-start': 'none',
  },
  'th:not(tr:last-child *), td:not(tr:last-child *)': {
    'border-bottom': '1px solid var(--color-fd-border)',
  },
  td: {
    textAlign: 'start',
    'border-inline-start': '1px solid var(--color-fd-border)',
    padding: 'calc(var(--spacing) * 2.5)',
  },
  'td:first-child': {
    'border-inline-start': 'none',
  },
  'tfoot th, tfoot td': {
    borderTopWidth: '1px',
    borderTopColor: 'var(--tw-prose-th-borders)',
  },
  'thead th, thead td': {
    borderBottomWidth: '1px',
    borderBottomColor: 'var(--tw-prose-th-borders)',
  },
};

export const normalTable = {
  thead: {
    borderBottomWidth: '1px',
    borderBottomColor: 'var(--tw-prose-th-borders)',
  },
  'thead th': {
    verticalAlign: 'bottom',
    paddingInlineEnd: em(8, 14),
    paddingBottom: em(8, 14),
    paddingInlineStart: em(8, 14),
  },
  'thead th:first-child': {
    paddingInlineStart: '0',
  },
  'thead th:last-child': {
    paddingInlineEnd: '0',
  },
  'tbody td, tfoot td': {
    paddingTop: em(8, 14),
    paddingInlineEnd: em(8, 14),
    paddingBottom: em(8, 14),
    paddingInlineStart: em(8, 14),
  },
  'tbody td:first-child, tfoot td:first-child': {
    paddingInlineStart: '0',
  },
  'tbody td:last-child, tfoot td:last-child': {
    paddingInlineEnd: '0',
  },
  'tbody tr': {
    borderBottomWidth: '1px',
    borderBottomColor: 'var(--tw-prose-td-borders)',
  },
  'tbody tr:last-child': {
    borderBottomWidth: '0',
  },
  'tbody td': {
    verticalAlign: 'baseline',
  },
  tfoot: {
    borderTopWidth: '1px',
    borderTopColor: 'var(--tw-prose-th-borders)',
  },
  'tfoot td': {
    verticalAlign: 'top',
  },
  'th, td': {
    textAlign: 'start',
  },
};

export interface Config {
  css?: Record<string, string | Record<string, string>>[];
}

export const DEFAULT: Config = {
  css: [
    {
      color: 'var(--tw-prose-body)',
      maxWidth: 'none',
      fontSize: rem(16),
      lineHeight: '1.75rem',

      '[class~="lead"]': {
        fontSize: em(20, 16),
        lineHeight: round(32 / 20),
        marginTop: em(24, 20),
        marginBottom: em(24, 20),
        color: 'var(--tw-prose-lead)',
      },
      ul: {
        paddingInlineStart: '1rem',
        listStyleType: 'disc',
        marginTop: em(20, 16),
        marginBottom: em(20, 16),
      },
      li: {
        marginTop: em(8, 16),
        marginBottom: em(8, 16),
      },
      'ol > li': {
        paddingInlineStart: em(6, 16),
      },
      'ul > li': {
        paddingInlineStart: '0',
      },
      '> ul > li p': {
        marginTop: em(12, 16),
        marginBottom: em(12, 16),
      },
      '> ul > li > p:first-child': {
        marginTop: em(20, 16),
      },
      '> ul > li > p:last-child': {
        marginBottom: em(20, 16),
      },
      '> ol > li > p:first-child': {
        marginTop: em(20, 16),
      },
      '> ol > li > p:last-child': {
        marginBottom: em(20, 16),
      },
      'ul ul, ul ol, ol ul, ol ol': {
        marginTop: em(12, 16),
        marginBottom: em(12, 16),
      },
      dl: {
        marginTop: em(20, 16),
        marginBottom: em(20, 16),
      },
      dt: {
        color: 'var(--tw-prose-headings)',
        fontWeight: '600',
        marginTop: em(20, 16),
      },
      dd: {
        marginTop: em(8, 16),
        paddingInlineStart: em(26, 16),
      },
      hr: {
        borderColor: 'var(--tw-prose-hr)',
        borderTopWidth: '1px',
        marginTop: em(48, 16),
        marginBottom: em(48, 16),
      },
      p: {
        marginTop: em(20, 16),
        marginBottom: em(20, 16),
      },
      strong: {
        color: 'var(--tw-prose-bold)',
        fontWeight: '500',
      },
      'a strong': {
        color: 'inherit',
      },
      'blockquote strong': {
        color: 'inherit',
      },
      'thead th strong': {
        color: 'inherit',
      },
      ol: {
        listStyleType: 'decimal',
        marginTop: em(20, 16),
        marginBottom: em(20, 16),
        paddingInlineStart: em(26, 16),
      },
      'ol[type="A"]': {
        listStyleType: 'upper-alpha',
      },
      'ol[type="a"]': {
        listStyleType: 'lower-alpha',
      },
      'ol[type="A" s]': {
        listStyleType: 'upper-alpha',
      },
      'ol[type="a" s]': {
        listStyleType: 'lower-alpha',
      },
      'ol[type="I"]': {
        listStyleType: 'upper-roman',
      },
      'ol[type="i"]': {
        listStyleType: 'lower-roman',
      },
      'ol[type="I" s]': {
        listStyleType: 'upper-roman',
      },
      'ol[type="i" s]': {
        listStyleType: 'lower-roman',
      },
      'ol[type="1"]': {
        listStyleType: 'decimal',
      },
      'ol > li::marker': {
        fontWeight: '400',
        color: 'var(--tw-prose-counters)',
      },
      'ul > li::marker': {
        color: 'var(--tw-prose-bullets)',
      },
      blockquote: {
        marginTop: em(32, 20),
        marginBottom: em(32, 20),
        paddingInlineStart: em(20, 20),
        fontWeight: '500',
        fontStyle: 'italic',
        color: 'var(--tw-prose-quotes)',
        borderInlineStartWidth: '0.25rem',
        borderInlineStartColor: 'var(--tw-prose-quote-borders)',
        quotes: '"\\201C""\\201D""\\2018""\\2019"',
      },
      'blockquote p:first-of-type::before': {
        content: 'open-quote',
      },
      'blockquote p:last-of-type::after': {
        content: 'close-quote',
      },
      h1: {
        color: 'var(--tw-prose-headings)',
        fontWeight: '800',
        fontSize: 'var(--text-3xl)',
        marginTop: '0',
        marginBottom: em(32, 36),
        lineHeight: round(40 / 36),
      },
      'h1 strong': {
        fontWeight: '900',
        color: 'inherit',
      },
      h2: {
        color: 'var(--tw-prose-headings)',
        fontSize: em(24, 16),
        marginTop: em(48, 24),
        marginBottom: em(24, 24),
        lineHeight: round(32 / 24),
        fontWeight: '600',
      },
      'h2 strong': {
        fontWeight: '800',
        color: 'inherit',
      },
      h3: {
        color: 'var(--tw-prose-headings)',
        fontWeight: '600',
        fontSize: em(20, 16),
        marginTop: em(32, 20),
        marginBottom: em(12, 20),
        lineHeight: round(32 / 20),
      },
      'h3 strong': {
        fontWeight: '700',
        color: 'inherit',
      },
      h4: {
        color: 'var(--tw-prose-headings)',
        fontWeight: '600',
        marginTop: em(24, 16),
        marginBottom: em(8, 16),
        lineHeight: round(24 / 16),
      },
      'h4 strong': {
        fontWeight: '700',
        color: 'inherit',
      },
      'hr + *': {
        marginTop: '0',
      },
      'h2 + *': {
        marginTop: '0',
      },
      'h3 + *': {
        marginTop: '0',
      },
      'h4 + *': {
        marginTop: '0',
      },
      img: {
        marginTop: em(32, 16),
        marginBottom: em(32, 16),
      },
      picture: {
        display: 'block',
        marginTop: em(32, 16),
        marginBottom: em(32, 16),
      },
      'picture > img': {
        marginTop: '0',
        marginBottom: '0',
      },
      video: {
        marginTop: em(32, 16),
        marginBottom: em(32, 16),
      },
      kbd: {
        fontSize: em(14, 16),
        borderRadius: rem(5),
        paddingTop: em(3, 16),
        paddingInlineEnd: em(6, 16),
        paddingBottom: em(3, 16),
        paddingInlineStart: em(6, 16),
        fontWeight: '500',
        fontFamily: 'inherit',
        color: 'var(--tw-prose-kbd)',
        boxShadow:
          '0 0 0 1px var(--tw-prose-kbd-shadows),0 3px 0 var(--tw-prose-kbd-shadows)',
      },
      code: {
        padding: '3px',
        border: 'solid 1px',
        fontSize: '13px',
        borderColor: `var(--color-fd-border)`,
        borderRadius: '5px',
        fontWeight: '400',
        background: `var(--color-fd-muted)`,
        color: 'var(--tw-prose-code)',
      },
      'a code': {
        color: 'inherit',
      },
      'h1 code': {
        color: 'inherit',
        fontSize: 'var(--text-2xl)',
      },
      'h2 code': {
        color: 'inherit',
        fontSize: em(21, 24),
      },
      'h3 code': {
        color: 'inherit',
        fontSize: em(18, 20),
      },
      'h4 code': {
        color: 'inherit',
      },
      'blockquote code': {
        color: 'inherit',
      },
      'thead th code': {
        color: 'inherit',
      },

      table: {
        fontSize: em(14, 16),
        lineHeight: round(24 / 14),
        width: '100%',
        tableLayout: 'auto',
        marginTop: em(32, 16),
        marginBottom: em(32, 16),
      },
      'thead th': {
        color: 'var(--tw-prose-headings)',
        fontWeight: '600',
      },

      figure: {
        marginTop: em(32, 16),
        marginBottom: em(32, 16),
      },
      'figure > *': {
        marginTop: '0',
        marginBottom: '0',
      },
      figcaption: {
        color: 'var(--tw-prose-captions)',
        fontSize: em(14, 16),
        lineHeight: round(20 / 14),
        marginTop: em(12, 14),
      },

      'a:not([data-card])': {
        color: 'var(--tw-prose-links)',
        transition: 'opacity .2s',
        fontWeight: '500',
        textDecoration: 'underline',
        textUnderlineOffset: '3.5px',
        textDecorationColor: 'var(--color-fd-primary)',
        textDecorationThickness: '1.5px',
      },
      'a:not([data-card]):hover': {
        opacity: '80%',
      },
    },
    colors,
    {
      '> :first-child': {
        marginTop: '0',
      },
      '> :last-child': {
        marginBottom: '0',
      },
    },
  ],
};



================================================
FILE: packages/ui/src/utils/cn.ts
================================================
export { twMerge as cn } from 'tailwind-merge';



================================================
FILE: packages/ui/src/utils/get-sidebar-tabs.tsx
================================================
import type { PageTree } from 'fumadocs-core/server';
import type { Option } from '@/components/layout/root-toggle';

export interface GetSidebarTabsOptions {
  transform?: (option: Option, node: PageTree.Folder) => Option | null;
}

const defaultTransform: GetSidebarTabsOptions['transform'] = (option, node) => {
  if (!node.icon) return option;

  return {
    ...option,
    icon: (
      <div className="size-full [&_svg]:size-full max-md:p-1.5 max-md:rounded-md max-md:border max-md:bg-fd-secondary">
        {node.icon}
      </div>
    ),
  };
};

export function getSidebarTabs(
  pageTree: PageTree.Root,
  { transform = defaultTransform }: GetSidebarTabsOptions = {},
): Option[] {
  function findOptions(node: PageTree.Folder): Option[] {
    const results: Option[] = [];

    if (node.root) {
      const urls = getFolderUrls(node);

      if (urls.size > 0) {
        const option: Option = {
          url: urls.values().next().value ?? '',
          title: node.name,
          icon: node.icon,
          description: node.description,
          urls,
        };

        const mapped = transform ? transform(option, node) : option;
        if (mapped) results.push(mapped);
      }
    }

    for (const child of node.children) {
      if (child.type === 'folder') results.push(...findOptions(child));
    }

    return results;
  }

  return findOptions(pageTree as PageTree.Folder);
}

function getFolderUrls(
  folder: PageTree.Folder,
  output: Set<string> = new Set(),
): Set<string> {
  if (folder.index) output.add(folder.index.url);

  for (const child of folder.children) {
    if (child.type === 'page' && !child.external) output.add(child.url);
    if (child.type === 'folder') getFolderUrls(child, output);
  }

  return output;
}



================================================
FILE: packages/ui/src/utils/is-active.ts
================================================
export function isActive(
  url: string,
  pathname: string,
  nested = true,
): boolean {
  if (url.endsWith('/')) url = url.slice(0, -1);
  if (pathname.endsWith('/')) pathname = pathname.slice(0, -1);

  return url === pathname || (nested && pathname.startsWith(`${url}/`));
}



================================================
FILE: packages/ui/src/utils/merge-refs.ts
================================================
import type * as React from 'react';

export function mergeRefs<T>(
  ...refs: (React.Ref<T> | undefined)[]
): React.RefCallback<T> {
  return (value) => {
    refs.forEach((ref) => {
      if (typeof ref === 'function') {
        ref(value);
      } else if (ref) {
        ref.current = value;
      }
    });
  };
}



================================================
FILE: packages/ui/src/utils/use-copy-button.ts
================================================
'use client';
import { type MouseEventHandler, useEffect, useRef, useState } from 'react';
import { useEffectEvent } from 'fumadocs-core/utils/use-effect-event';

export function useCopyButton(
  onCopy: () => void | Promise<void>,
): [checked: boolean, onClick: MouseEventHandler] {
  const [checked, setChecked] = useState(false);
  const timeoutRef = useRef<number | null>(null);

  const onClick: MouseEventHandler = useEffectEvent(() => {
    if (timeoutRef.current) window.clearTimeout(timeoutRef.current);
    const res = Promise.resolve(onCopy());

    void res.then(() => {
      setChecked(true);
      timeoutRef.current = window.setTimeout(() => {
        setChecked(false);
      }, 1500);
    });
  });

  // Avoid updates after being unmounted
  useEffect(() => {
    return () => {
      if (timeoutRef.current) window.clearTimeout(timeoutRef.current);
    };
  }, []);

  return [checked, onClick];
}



================================================
FILE: .changeset/config.json
================================================
{
  "$schema": "https://unpkg.com/@changesets/config@2.3.0/schema.json",
  "changelog": "@changesets/cli/changelog",
  "commit": false,
  "fixed": [["fumadocs-core", "fumadocs-ui", "create-fumadocs-app"]],
  "linked": [],
  "access": "restricted",
  "baseBranch": "dev",
  "updateInternalDependencies": "patch",
  "privatePackages": { "version": false },
  "bumpVersionsWithWorkspaceProtocolOnly": true,
  "ignore": ["docs", "example-*"]
}



================================================
FILE: .changeset/tidy-ears-lay.md
================================================
---
'fumadocs-mdx': patch
---

bump zod to v4



================================================
FILE: .github/contributing.md
================================================
## Contributing Guide

We greatly appreciate your willingness to contribute to this project!
Before submitting a pull request, there are some guidelines you should notice.

### Guidelines

This project is a monorepo using Turborepo, pnpm and
[Changesets](https://github.com/changesets/changesets). 

#### Before Submitting

- Check if there's other similar PRs.
- Format your code with `pnpm run prettier`.
- Add changesets with `pnpm changeset`, which documents the changes you've made.
- Run unit tests with `pnpm test` and update snapshots if necessary.

#### New Feature

Before submitting a new feature, make sure to open an issue (Feature Request) with sufficient information and reasons about the new feature.
After the feature request is approved, you can submit a pull request.

#### Bug Fixes

Provide a detailed description of the bug (with live demo if possible).
OR open a bug report and link it in your PR.

#### Docs

Contributing to the docs is relatively easier, make sure to check the typos and grammatical mistakes before submitting. 

### New to contributing?

You may start with contributing to the docs,
it is located in `/apps/docs/content/docs`.

To run the docs site in dev mode,
build the dependencies with `pnpm run build --filter=./packages/*` and run `pnpm run dev --filter=docs` to start the dev server.

You don't need any extra environment variables to run this project.


================================================
FILE: .github/FUNDING.yml
================================================
github: fuma-nama



================================================
FILE: .github/ISSUE_TEMPLATE/bug_report.yml
================================================
name: Bug Report
description: Create a bug report
labels: ['bug']
body:
  - type: markdown
    attributes:
      value: |
        Before opening a new issue:

        - do a search of existing issues.
        - upgrade to the latest versions of Fumadocs.

        If you need help with your own project, you can start a discussion in the [Q&A Section](https://github.com/fuma-nama/fumadocs/discussions/categories/q-a).
  - type: textarea
    attributes:
      label: To Reproduce
      description: A step-by-step description of how to reproduce the issue, or a link to the reproducible repository.
      placeholder: |
        1. Start the application in development (next dev)
        2. Click X
        3. Y will happen
    validations:
      required: true
  - type: textarea
    attributes:
      label: Current vs. Expected behavior
      description: A clear and concise description of what the bug is, and what you expected to happen.
      placeholder: 'Following the steps from the previous section, I expected A to happen, but I observed B instead'
    validations:
      required: true
  - type: textarea
    attributes:
      label: Provide environment information
      description: Please run `next info` in the root directory of your project and paste the results.
      render: bash
      placeholder: |
        Operating System:
          Platform: darwin
          Arch: arm64
          Version: Darwin Kernel Version 22.5.0
        Binaries:
          Node: 18.17.1
          npm: 9.5.1
          Yarn: 1.22.19
          pnpm: N/A
        Relevant Packages:
          next: 13.4.20
          eslint-config-next: 13.4.20
          react: 18.2.0
          react-dom: 18.2.0
          typescript: 5.2.2
        Next.js Config:
          output: N/A
    validations:
      required: true
  - type: dropdown
    attributes:
      label: Which area(s) are affected? (Select all that apply)
      multiple: true
      options:
        - 'Not sure'
        - 'Core'
        - 'UI'
        - 'CLI (create-fumadocs-app)'
        - 'Content Sources (e.g. Fumadocs MDX, Content Collections)'
        - 'Integrations (e.g OpenAPI, Typescript DocsGen)'
        - 'TypeScript (built-in types)'
        - 'Examples'
    validations:
      required: true
  - type: textarea
    attributes:
      label: Additional context
      description: |
        Any extra information that might help us investigate.
      placeholder: |
        I tested my reproduction against different canary releases, and the first one that introduced the bug was "11.0.0", since reverting to "10.0.0" works.



================================================
FILE: .github/ISSUE_TEMPLATE/config.yml
================================================
blank_issues_enabled: false
contact_links:
  - name: Questions?
    url: https://github.com/fuma-nama/fumadocs/discussions
    about: Ask your questions here.



================================================
FILE: .github/ISSUE_TEMPLATE/feature-request.yml
================================================
name: Feature Request
description: Suggest a new feature or improvement to the project
labels: ['enhancement']
body:
  - type: textarea
    attributes:
      label: What problem will this feature address?
      description: A clear and concise description of what the problem is.
      placeholder: |
        I'm always frustrated when I can't do X
    validations:
      required: true
  - type: textarea
    attributes:
      label: Describe the solution you'd like
      description: A clear and concise description of what you want to happen.
      placeholder: Add X to the core
    validations:
      required: true
  - type: textarea
    attributes:
      label: Describe alternatives you've considered
      description: A clear and concise description of any alternative solutions or features you've considered.
      placeholder: |
        Maybe use Y as a workaround?
    validations:
      required: true
  - type: textarea
    attributes:
      label: Additional context
      description: Add any other context or screenshots about the feature request here.
    validations:
      required: false



================================================
FILE: .github/workflows/lint.yml
================================================
name: Lint

on:
  pull_request:
    branches: [main, dev]

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm i --frozen-lockfile

      - name: Lint Format
        run: pnpm lint:prettier

      - name: Check Types
        run: pnpm build --filter=./packages/* && pnpm types:check

      - name: Run ESLint
        run: pnpm lint



================================================
FILE: .github/workflows/release.yml
================================================
name: Release

on:
  push:
    branches:
      - dev

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.UPDATE_TEMPLATE_SSH_KEY }}

      - uses: pnpm/action-setup@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm i --frozen-lockfile

      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          publish: pnpm run release
          version: pnpm run version
        env:
          GITHUB_TOKEN: ${{ secrets.UPDATE_TEMPLATE_SSH_KEY }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}



================================================
FILE: .github/workflows/test.yml
================================================
name: Unit Tests

on:
  pull_request:
    branches: [main, dev]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm i --frozen-lockfile

      - name: Build packages
        run: pnpm run build --filter=./packages/*

      - name: Run Tests
        run: pnpm test


