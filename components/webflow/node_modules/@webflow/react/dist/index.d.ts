import React from 'react';
import { WebflowContext, ComponentClientRendererFactory, ComponentRuntimeProps, ComponentServerRendererFactory, ComponentData, ComponentDefinition } from '@webflow/data-types';
import ReactDOM from 'react-dom/client';
import ReactDOMServer, { PipeableStream } from 'react-dom/server';

/**
 * Hook to access the Webflow context data.
 * Example context value: {
 *   mode: "design",
 *   interactive: true,
 *   locale: "en-US"
 * }
 *
 * @returns WebflowContext
 */
declare function useWebflowContext(): WebflowContext;

/**
 * A factory that creates a renderer for a given React component
 *
 * @param Component - The React component to render.
 * @returns An object with create and render functions.
 */
declare const ClientRenderer: ComponentClientRendererFactory<React.ComponentType<ComponentRuntimeProps<React.ReactNode>>, ReactDOM.Root, React.ReactNode>;

/**
 * A factory that creates a server-side renderer for a given React component
 *
 * @param Component - The React component to render.
 * @returns An object with renderToStream and renderToString functions.
 */
declare const ServerRenderer: ComponentServerRendererFactory<React.ComponentType<ComponentRuntimeProps<React.ReactNode>>, PipeableStream, ReactDOMServer.RenderToPipeableStreamOptions, React.ReactNode, ReactDOMServer.ServerOptions>;

/**
 * Creates a Webflow code component definition for the provided React component. Expected as the default export from a *.webflow.tsx file.
 *
 * @example
 * ```tsx
 * import { declareComponent } from "@webflow/react";
 * import { props } from "@webflow/data-types";
 * import Button from "./Button";
 *
 * export default declareComponent(Button, {
 *   name: "Button",
 *   description: "Optional description",
 *   group: "Optional group",
 *   props: {
 *     text: props.Text({ name: "Text", defaultValue: "Lorem ipsum" }),
 *     link: props.Link({ name: "Link" }),
 *   },
 *   options: {
 *     applyTagSelectors: true
 *   }
 * ```
 *
 * @param Component The React component to render
 * @param data An object with metadata about the code component
 * @param data.name The display name of the code component
 * @param data.description An optional description of the code component
 * @param data.group An optional group for the code component
 * @param data.props An optional object with the code component props configurations
 * @param data.options An optional object with additional code component options
 * @param data.options.applyTagSelectors An optional flag to provide styles targeting tag selectors to the code component (default: false)
 * @param data.options.ssr An optional flag to enable server-side rendering for the code component (default: true)
 * @returns A Webflow code component definition
 */
declare const declareComponent: <P extends {}>(Component: React.ComponentType<P>, data: ComponentData<P, React.ReactNode>) => ComponentDefinition<React.ComponentType<P>, React.ReactNode, P>;

export { ClientRenderer, ServerRenderer, declareComponent, useWebflowContext };
