'use client';

import React, { useState, useRef, useMemo } from 'react';
import { AgGridReact } from 'ag-grid-react';
import { AllCommunityModule, ModuleRegistry, ColDef, themeQuartz } from 'ag-grid-community';

// Register all Community features
ModuleRegistry.registerModules([AllCommunityModule]);

// Custom theme for UDO tables
const udoTheme = themeQuartz.withParams({
  accentColor: "#2196F3",
  browserColorScheme: "light",
  columnBorder: true,
  dragHandleColor: "#EC993D",
  headerBackgroundColor: "#1E4E79",
  headerColumnBorder: true,
  headerFontSize: 14,
  headerFontWeight: 600,
  headerTextColor: "#FFFFFF",
  pinnedColumnBorder: true,
  wrapperBorder: true
});

interface UDOTableClientProps {
  id: string;
  title: string;
  rowData: any[];
  columnDefs: any[];
  cellStyles: { [key: string]: any };
  cellClasses: { [key: string]: any };
  colspanData: { [rowIndex: number]: { [colIndex: number]: number } };
}

// Cell renderer component
const HtmlCellRenderer = ({ value, cellStyles }: { value: any; cellStyles: any }) => {
  if (!value) return null;
  
  const styles = {
    textAlign: cellStyles?.textAlign || 'left',
    whiteSpace: 'normal' as const,
    lineHeight: '1.5',
    verticalAlign: 'middle' as const,
    width: '100%',
  };
  
  // Check if the value contains HTML
  if (typeof value === 'string' && value.includes('<')) {
    return (
      <div 
        style={styles}
        dangerouslySetInnerHTML={{ __html: value }}
      />
    );
  }
  
  // For plain text
  return <div style={styles}>{value}</div>;
};

export function UDOTableClient({ 
  id, 
  title, 
  rowData, 
  columnDefs: serverColumnDefs, 
  cellStyles, 
  cellClasses,
  colspanData 
}: UDOTableClientProps) {
  const gridRef = useRef<AgGridReact>(null);
  const [quickFilter, setQuickFilter] = useState('');

  // Enhance column definitions with cell rendering and styling
  const columnDefs: ColDef[] = useMemo(() => {
    return serverColumnDefs.map((colDef: any, colIndex: number) => {
      // Extract _colIndex for use and remove flex (incompatible with autoSizeStrategy)
      const { _colIndex, flex, ...cleanColDef } = colDef;
      const actualColIndex = _colIndex ?? colIndex;
      
      return {
        ...cleanColDef,
        cellRenderer: (params: any) => {
          const cellKey = `${params.data._rowIndex}-${actualColIndex}`;
          const cellStyle = cellStyles[cellKey];
          
          return <HtmlCellRenderer value={params.value} cellStyles={cellStyle} />;
        },
        colSpan: (params: any) => {
          if (params.data && params.data._rowIndex !== undefined && colspanData) {
            const rowColspans = colspanData[params.data._rowIndex];
            if (rowColspans && rowColspans[actualColIndex] !== undefined) {
              return rowColspans[actualColIndex];
            }
          }
          return 1;
        },
        cellClass: (params: any) => {
          const classes = ['whitespace-normal'];
          
          if (params.data && params.data._rowIndex !== undefined) {
            const cellKey = `${params.data._rowIndex}-${actualColIndex}`;
            const cellData = cellClasses?.[cellKey];
            const cellStyle = cellStyles?.[cellKey];
            
            if (cellData?.className) {
              classes.push(cellData.className);
            }
            
            if (cellStyle?.textAlign) {
              classes.push(`text-${cellStyle.textAlign}`);
            }
          }
          
          return classes.join(' ');
        },
        cellStyle: (params: any) => {
          const baseStyle: any = {
            whiteSpace: 'normal',
            lineHeight: '1.5',
            padding: '8px',
            verticalAlign: 'middle',
          };
          
          if (params.data && params.data._rowIndex !== undefined) {
            const cellKey = `${params.data._rowIndex}-${actualColIndex}`;
            const cellStyle = cellStyles[cellKey];
            
            if (cellStyle) {
              if (cellStyle.textAlign) {
                baseStyle.textAlign = cellStyle.textAlign;
              }
              if (cellStyle.fontWeight && cellStyle.fontWeight !== '') {
                baseStyle.fontWeight = cellStyle.fontWeight;
              }
              if (cellStyle.backgroundColor) {
                baseStyle.backgroundColor = cellStyle.backgroundColor;
              }
              if (cellStyle.color) {
                baseStyle.color = cellStyle.color;
              }
            }
          }
          
          return baseStyle;
        }
      };
    });
  }, [serverColumnDefs, cellStyles, cellClasses, colspanData]);

  const defaultColDef = useMemo(() => ({
    sortable: true,
    filter: true,
    resizable: true,
    wrapHeaderText: true,
    autoHeaderHeight: true,
    wrapText: true,
    autoHeight: true,
  }), []);

  const onGridReady = () => {
    // Auto-size columns to fit their content
    gridRef.current?.api?.autoSizeAllColumns();
  };

  return (
    <div className="my-8">
      {title && (
        <h3 className="text-lg font-semibold mb-4">{title}</h3>
      )}
      
      {/* Quick filter search box */}
      <div className="mb-4">
        <input
          type="text"
          placeholder="Search table..."
          value={quickFilter}
          onChange={(e) => setQuickFilter(e.target.value)}
          className="w-full max-w-sm px-4 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </div>

      <div 
        className="rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700" 
        style={{ width: '100%' }}
      >
        <AgGridReact
          ref={gridRef}
          rowData={rowData}
          columnDefs={columnDefs}
          defaultColDef={defaultColDef}
          onGridReady={onGridReady}
          quickFilterText={quickFilter}
          domLayout="autoHeight"
          animateRows={true}
          theme={udoTheme}
          suppressColumnVirtualisation={true}
          autoSizeStrategy={{
            type: 'fitCellContents',
            skipHeader: false,
          }}
        />
      </div>
    </div>
  );
}