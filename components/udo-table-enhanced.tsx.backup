'use client';

import React, { useRef, useMemo, useState, useEffect } from 'react';
import { AgGridReact } from 'ag-grid-react';
import { AllCommunityModule, ModuleRegistry, ColDef, GridOptions, GridApi } from 'ag-grid-community';
import { Search, Download, Maximize2, Minimize2, RotateCcw } from 'lucide-react';

// Register AG Grid modules
ModuleRegistry.registerModules([AllCommunityModule]);

// Enhanced UDO theme
const udoTheme = {
  theme: 'ag-theme-quartz',
  headerHeight: 40,
  rowHeight: 40,
  headerFontSize: 14,
  headerFontWeight: 600,
  headerTextColor: '#374151',
  headerBackgroundColor: '#f9fafb',
  rowBorder: true,
  columnBorder: true,
  accentColor: '#3b82f6',
  browserColorScheme: 'light',
};

// HTML cell renderer for rich content
function HtmlCellRenderer({ value, cellStyles }: { value: any; cellStyles?: any }) {
  if (!value) return <span></span>;
  
  const style = {
    ...cellStyles,
    fontSize: '14px',
    lineHeight: '1.5',
    whiteSpace: 'pre-wrap' as const,
  };
  
  // If value contains HTML tags, render as HTML
  if (typeof value === 'string' && value.includes('<')) {
    return (
      <div 
        style={style}
        className="ag-cell-html-content"
        dangerouslySetInnerHTML={{ __html: value }}
      />
    );
  }
  
  return (
    <div style={style} className="ag-cell-content">
      {value}
    </div>
  );
}

// Enhanced UDO Table Props
interface UDOTableEnhancedProps {
  id: string;
  title: string;
  rowData: any[];
  columnDefs: any[];
  cellStyles: { [key: string]: any };
  cellClasses: { [key: string]: any };
  colspanData: { [rowIndex: number]: { [colIndex: number]: number } };
  variant?: 'zoning' | 'standards' | 'requirements' | 'default';
  enableExport?: boolean;
  enableFullscreen?: boolean;
  maxHeight?: string;
  className?: string;
}

export function UDOTableEnhanced({
  id,
  title,
  rowData,
  columnDefs: serverColumnDefs,
  cellStyles,
  cellClasses,
  colspanData,
  variant = 'default',
  enableExport = true,
  enableFullscreen = true,
  maxHeight = '600px',
  className = ''
}: UDOTableEnhancedProps) {
  const gridRef = useRef<AgGridReact>(null);
  const [quickFilter, setQuickFilter] = useState('');
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [gridApi, setGridApi] = useState<GridApi | null>(null);
  const [isGridReady, setIsGridReady] = useState(false);

  // Enhanced column definitions with better cell rendering
  const columnDefs: ColDef[] = useMemo(() => {
    return serverColumnDefs.map((colDef: any, colIndex: number) => {
      const { _colIndex, ...cleanColDef } = colDef;
      const actualColIndex = _colIndex ?? colIndex;
      
      return {
        ...cleanColDef,
        cellRenderer: (params: any) => {
          const cellKey = `${params.data._rowIndex}-${actualColIndex}`;
          const cellStyle = cellStyles[cellKey];
          
          return <HtmlCellRenderer value={params.value} cellStyles={cellStyle} />;
        },
        colSpan: (params: any) => {
          if (params.data && params.data._rowIndex !== undefined && colspanData) {
            const rowColspans = colspanData[params.data._rowIndex];
            if (rowColspans && rowColspans[actualColIndex] !== undefined) {
              return rowColspans[actualColIndex];
            }
          }
          return 1;
        },
        cellClass: (params: any) => {
          const classes = ['udo-table-cell'];
          
          if (params.data && params.data._rowIndex !== undefined) {
            const cellKey = `${params.data._rowIndex}-${actualColIndex}`;
            const cellData = cellClasses?.[cellKey];
            const cellStyle = cellStyles?.[cellKey];
            
            if (cellData?.className) {
              classes.push(cellData.className);
            }
            
            if (cellStyle?.textAlign) {
              classes.push(`text-${cellStyle.textAlign}`);
            }
            
            if (cellStyle?.fontWeight === 'bold') {
              classes.push('font-bold');
            }
            
            // Add variant-specific classes
            if (variant === 'zoning') classes.push('udo-zoning-cell');
            if (variant === 'standards') classes.push('udo-standards-cell');
            if (variant === 'requirements') classes.push('udo-requirements-cell');
          }
          
          return classes.join(' ');
        },
        headerClass: `udo-table-header ${variant}-header`,
        tooltipComponent: 'agTooltipComponent',
        tooltipValueGetter: (params: any) => {
          if (typeof params.value === 'string' && params.value.includes('<')) {
            // Strip HTML for tooltip
            const temp = document.createElement('div');
            temp.innerHTML = params.value;
            return temp.textContent || temp.innerText || '';
          }
          return params.value;
        },
      };
    });
  }, [serverColumnDefs, cellStyles, cellClasses, colspanData, variant]);

  // Grid options
  const gridOptions: GridOptions = useMemo(() => ({
    defaultColDef: {
      sortable: true,
      filter: true,
      resizable: true,
      wrapText: true,
      autoHeight: true,
      wrapHeaderText: true,
      autoHeaderHeight: true,
      menuTabs: ['filterMenuTab', 'generalMenuTab'],
    },
    suppressColumnVirtualisation: true,
    animateRows: true,
    rowSelection: 'multiple',
    suppressRowClickSelection: true,
    enableCellTextSelection: true,
    ensureDomOrder: true,
    maintainColumnOrder: true,
    suppressMovableColumns: false,
    suppressMenuHide: true,
    autoSizeStrategy: {
      type: 'fitCellContents',
      skipHeader: false,
    },
    tooltipShowDelay: 500,
    tooltipHideDelay: 2000,
  }), []);

  // Grid ready handler
  const onGridReady = (params: any) => {
    setGridApi(params.api);
    setIsGridReady(true);
    
    // Auto-size columns after a short delay
    setTimeout(() => {
      params.api.autoSizeAllColumns();
    }, 100);
  };

  // Export functionality
  const handleExport = () => {
    if (!gridApi) return;
    
    const params = {
      fileName: `${title.replace(/[^a-zA-Z0-9]/g, '_')}.csv`,
      allColumns: true,
      skipHeader: false,
      skipFooters: false,
      skipGroups: false,
      skipPinnedTop: false,
      skipPinnedBottom: false,
    };
    
    gridApi.exportDataAsCsv(params);
  };

  // Reset filters
  const handleResetFilters = () => {
    if (!gridApi) return;
    
    gridApi.setFilterModel(null);
    setQuickFilter('');
  };

  // Fullscreen toggle
  const handleFullscreenToggle = () => {
    setIsFullscreen(!isFullscreen);
  };

  // Auto-fit columns on window resize
  useEffect(() => {
    const handleResize = () => {
      if (gridApi && isGridReady) {
        setTimeout(() => {
          gridApi.autoSizeAllColumns();
        }, 100);
      }
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, [gridApi, isGridReady]);

  // Variant-specific styling
  const getVariantStyles = () => {
    switch (variant) {
      case 'zoning':
        return {
          headerBackground: '#eff6ff',
          headerColor: '#1e40af',
          accentColor: '#3b82f6',
        };
      case 'standards':
        return {
          headerBackground: '#f0fdf4',
          headerColor: '#166534',
          accentColor: '#22c55e',
        };
      case 'requirements':
        return {
          headerBackground: '#fef3c7',
          headerColor: '#92400e',
          accentColor: '#f59e0b',
        };
      default:
        return {
          headerBackground: '#f9fafb',
          headerColor: '#374151',
          accentColor: '#6b7280',
        };
    }
  };

  const variantStyles = getVariantStyles();

  return (
    <div className={`udo-table-enhanced ${className} ${isFullscreen ? 'fixed inset-0 z-50 bg-white' : ''}`}>
      {/* Table Header */}
      <div className="flex items-center justify-between mb-4 p-4 bg-gray-50 rounded-lg">
        <div>
          <h3 className="text-lg font-semibold text-gray-800">{title}</h3>
          <div className="text-sm text-gray-600">
            <span className="mr-4">{rowData.length} rows</span>
            <span className="mr-4">{columnDefs.length} columns</span>
            <span className="capitalize">{variant} table</span>
          </div>
        </div>
        
        <div className="flex items-center gap-2">
          <button
            onClick={handleResetFilters}
            className="p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-md transition-colors"
            title="Reset filters"
          >
            <RotateCcw className="w-4 h-4" />
          </button>
          
          {enableExport && (
            <button
              onClick={handleExport}
              className="p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-md transition-colors"
              title="Export to CSV"
            >
              <Download className="w-4 h-4" />
            </button>
          )}
          
          {enableFullscreen && (
            <button
              onClick={handleFullscreenToggle}
              className="p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-md transition-colors"
              title={isFullscreen ? 'Exit fullscreen' : 'Enter fullscreen'}
            >
              {isFullscreen ? <Minimize2 className="w-4 h-4" /> : <Maximize2 className="w-4 h-4" />}
            </button>
          )}
        </div>
      </div>

      {/* Search Bar */}
      <div className="relative mb-4">
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
        <input
          type="text"
          placeholder="Search table..."
          value={quickFilter}
          onChange={(e) => setQuickFilter(e.target.value)}
          className="w-full pl-10 pr-4 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        />
      </div>

      {/* AG Grid Container */}
      <div 
        className={`ag-theme-quartz rounded-lg border border-gray-200 ${isFullscreen ? 'h-[calc(100vh-200px)]' : ''}`}
        style={{ 
          height: isFullscreen ? 'calc(100vh - 200px)' : maxHeight,
          '--ag-header-background-color': variantStyles.headerBackground,
          '--ag-header-foreground-color': variantStyles.headerColor,
          '--ag-selected-row-background-color': `${variantStyles.accentColor}20`,
        } as React.CSSProperties}
      >
        <AgGridReact
          ref={gridRef}
          rowData={rowData}
          columnDefs={columnDefs}
          gridOptions={gridOptions}
          onGridReady={onGridReady}
          quickFilterText={quickFilter}
          domLayout={isFullscreen ? 'normal' : 'autoHeight'}
          suppressHorizontalScroll={false}
          suppressLoadingOverlay={false}
          loadingOverlayComponent="agLoadingOverlay"
          noRowsOverlayComponent="agNoRowsOverlay"
        />
      </div>

      {/* Table Footer */}
      <div className="mt-4 text-sm text-gray-500 text-center">
        <span>Use column headers to sort • Right-click for more options • Drag columns to reorder</span>
      </div>
    </div>
  );
}

// Export wrapper component for backward compatibility
export function UDOTable(props: UDOTableEnhancedProps) {
  return <UDOTableEnhanced {...props} />;
}

// CSS styles for enhanced table
const tableStyles = `
  .udo-table-enhanced .ag-cell-html-content {
    display: flex;
    align-items: center;
    height: 100%;
    padding: 4px;
  }
  
  .udo-table-enhanced .ag-cell-content {
    display: flex;
    align-items: center;
    height: 100%;
    padding: 4px;
  }
  
  .udo-table-enhanced .udo-table-cell {
    vertical-align: middle;
  }
  
  .udo-table-enhanced .udo-zoning-cell {
    border-left: 3px solid #3b82f6;
  }
  
  .udo-table-enhanced .udo-standards-cell {
    border-left: 3px solid #22c55e;
  }
  
  .udo-table-enhanced .udo-requirements-cell {
    border-left: 3px solid #f59e0b;
  }
  
  .udo-table-enhanced .zoning-header {
    background-color: #eff6ff !important;
    color: #1e40af !important;
  }
  
  .udo-table-enhanced .standards-header {
    background-color: #f0fdf4 !important;
    color: #166534 !important;
  }
  
  .udo-table-enhanced .requirements-header {
    background-color: #fef3c7 !important;
    color: #92400e !important;
  }
`;

// Inject styles
if (typeof document !== 'undefined') {
  const styleElement = document.createElement('style');
  styleElement.textContent = tableStyles;
  document.head.appendChild(styleElement);
} 